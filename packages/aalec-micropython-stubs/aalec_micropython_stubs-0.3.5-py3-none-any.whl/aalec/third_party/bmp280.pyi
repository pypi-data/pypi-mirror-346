from _typeshed import Incomplete

BMP280_POWER_SLEEP: Incomplete
BMP280_POWER_FORCED: Incomplete
BMP280_POWER_NORMAL: Incomplete
BMP280_SPI3W_ON: Incomplete
BMP280_SPI3W_OFF: Incomplete
BMP280_TEMP_OS_SKIP: Incomplete
BMP280_TEMP_OS_1: Incomplete
BMP280_TEMP_OS_2: Incomplete
BMP280_TEMP_OS_4: Incomplete
BMP280_TEMP_OS_8: Incomplete
BMP280_TEMP_OS_16: Incomplete
BMP280_PRES_OS_SKIP: Incomplete
BMP280_PRES_OS_1: Incomplete
BMP280_PRES_OS_2: Incomplete
BMP280_PRES_OS_4: Incomplete
BMP280_PRES_OS_8: Incomplete
BMP280_PRES_OS_16: Incomplete
BMP280_STANDBY_0_5: Incomplete
BMP280_STANDBY_62_5: Incomplete
BMP280_STANDBY_125: Incomplete
BMP280_STANDBY_250: Incomplete
BMP280_STANDBY_500: Incomplete
BMP280_STANDBY_1000: Incomplete
BMP280_STANDBY_2000: Incomplete
BMP280_STANDBY_4000: Incomplete
BMP280_IIR_FILTER_OFF: Incomplete
BMP280_IIR_FILTER_2: Incomplete
BMP280_IIR_FILTER_4: Incomplete
BMP280_IIR_FILTER_8: Incomplete
BMP280_IIR_FILTER_16: Incomplete
BMP280_OS_ULTRALOW: Incomplete
BMP280_OS_LOW: Incomplete
BMP280_OS_STANDARD: Incomplete
BMP280_OS_HIGH: Incomplete
BMP280_OS_ULTRAHIGH: Incomplete
BMP280_CASE_HANDHELD_LOW: Incomplete
BMP280_CASE_HANDHELD_DYN: Incomplete
BMP280_CASE_WEATHER: Incomplete
BMP280_CASE_FLOOR: Incomplete
BMP280_CASE_DROP: Incomplete
BMP280_CASE_INDOOR: Incomplete

class BMP280:
    read_wait_ms: int
    def __init__(self, i2c_bus, addr: int = 118, use_case=...) -> None: ...
    def reset(self) -> None: ...
    def load_test_calibration(self) -> None: ...
    def load_test_data(self) -> None: ...
    def print_calibration(self) -> None: ...
    @property
    def temperature(self): ...
    @property
    def pressure(self): ...
    @property
    def standby(self): ...
    @standby.setter
    def standby(self, v) -> None: ...
    @property
    def iir(self): ...
    @iir.setter
    def iir(self, v) -> None: ...
    @property
    def spi3w(self): ...
    @spi3w.setter
    def spi3w(self, v) -> None: ...
    @property
    def temp_os(self): ...
    @temp_os.setter
    def temp_os(self, v) -> None: ...
    @property
    def press_os(self): ...
    @press_os.setter
    def press_os(self, v) -> None: ...
    @property
    def power_mode(self): ...
    @power_mode.setter
    def power_mode(self, v) -> None: ...
    @property
    def is_measuring(self): ...
    @property
    def is_updating(self): ...
    @property
    def chip_id(self): ...
    @property
    def in_normal_mode(self): ...
    def force_measure(self) -> None: ...
    def normal_measure(self) -> None: ...
    def sleep(self) -> None: ...
    def use_case(self, uc) -> None: ...
    def oversample(self, oss) -> None: ...
