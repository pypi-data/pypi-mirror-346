"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.geolcm

import compas_lcmtypes.stdlcm

class pose_t(object):
    """
     Standard message to report a pose with covariance.
    
    """

    __slots__ = ["header", "pose", "pose_covariance"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "compas_lcmtypes.geolcm.pose_t", "double"]

    __dimensions__ = [None, None, [36]]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.pose = compas_lcmtypes.geolcm.pose_t()
        """
        Pose as a pose structure from the geolcm package.
        LCM Type: compas_lcmtypes.geolcm.pose_t
        """

        self.pose_covariance = [ 0.0 for dim0 in range(36) ]
        """
        Covariance matrix.
        LCM Type: double[36]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(pose_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.pose._get_packed_fingerprint() == compas_lcmtypes.geolcm.pose_t._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack('>36d', *self.pose_covariance[:36]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = pose_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.pose = compas_lcmtypes.geolcm.pose_t._decode_one(buf)
        self.pose_covariance = struct.unpack('>36d', buf.read(288))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if pose_t in parents: return 0
        newparents = parents + [pose_t]
        tmphash = (0x423ec15e5fc94cf9+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)+ compas_lcmtypes.geolcm.pose_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if pose_t._packed_fingerprint is None:
            pose_t._packed_fingerprint = struct.pack(">Q", pose_t._get_hash_recursive([]))
        return pose_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pose_t._get_packed_fingerprint())[0]

