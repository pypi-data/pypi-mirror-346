"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class raw_t(object):
    """
     Generic lcmtype for sending raw data.
    
    """

    __slots__ = ["utime", "length", "data"]

    __typenames__ = ["int64_t", "int32_t", "byte"]

    __dimensions__ = [None, None, ["length"]]

    def __init__(self):
        self.utime = 0
        """ LCM Type: int64_t """
        self.length = 0
        """ LCM Type: int32_t """
        self.data = b""
        """ LCM Type: byte[length] """

    def encode(self):
        buf = BytesIO()
        buf.write(raw_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.length))
        buf.write(bytearray(self.data[:self.length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != raw_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return raw_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = raw_t()
        self.utime, self.length = struct.unpack(">qi", buf.read(12))
        self.data = buf.read(self.length)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if raw_t in parents: return 0
        tmphash = (0x182b8da2dc0260c7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if raw_t._packed_fingerprint is None:
            raw_t._packed_fingerprint = struct.pack(">Q", raw_t._get_hash_recursive([]))
        return raw_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", raw_t._get_packed_fingerprint())[0]

