"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.geolcm

class pose_t(object):
    """
     Standard message to represent a pose.
    
    """

    __slots__ = ["position", "orientation"]

    __typenames__ = ["compas_lcmtypes.geolcm.point_t", "compas_lcmtypes.geolcm.quaternion_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.position = compas_lcmtypes.geolcm.point_t()
        """
        Position as a point structure from the geolcm package.
        LCM Type: compas_lcmtypes.geolcm.point_t
        """

        self.orientation = compas_lcmtypes.geolcm.quaternion_t()
        """
        Orientation as a quaternion structure from the geolcm package.
        LCM Type: compas_lcmtypes.geolcm.quaternion_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(pose_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.position._get_packed_fingerprint() == compas_lcmtypes.geolcm.point_t._get_packed_fingerprint()
        self.position._encode_one(buf)
        assert self.orientation._get_packed_fingerprint() == compas_lcmtypes.geolcm.quaternion_t._get_packed_fingerprint()
        self.orientation._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = pose_t()
        self.position = compas_lcmtypes.geolcm.point_t._decode_one(buf)
        self.orientation = compas_lcmtypes.geolcm.quaternion_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if pose_t in parents: return 0
        newparents = parents + [pose_t]
        tmphash = (0x2d70dd60bd541272+ compas_lcmtypes.geolcm.point_t._get_hash_recursive(newparents)+ compas_lcmtypes.geolcm.quaternion_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if pose_t._packed_fingerprint is None:
            pose_t._packed_fingerprint = struct.pack(">Q", pose_t._get_hash_recursive([]))
        return pose_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pose_t._get_packed_fingerprint())[0]

