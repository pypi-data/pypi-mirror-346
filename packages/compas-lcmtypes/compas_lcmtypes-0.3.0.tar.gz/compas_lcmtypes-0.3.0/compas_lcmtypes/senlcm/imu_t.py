"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class imu_t(object):
    """
     Standard message for inertial measurement units (IMUs).
    
    """

    __slots__ = ["header", "orientation", "angRate", "xyz_ddot"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "double", "double", "double"]

    __dimensions__ = [None, [4], [3], [3]]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.orientation = [ 0.0 for dim0 in range(4) ]
        """
        x, y, z, w orientation quaternion as a list of three values.
        SI units = rad.
        LCM Type: double[4]
        """

        self.angRate = [ 0.0 for dim0 in range(3) ]
        """
        Angular rates as a list of three values.
        SI units = rad/s.
        LCM Type: double[3]
        """

        self.xyz_ddot = [ 0.0 for dim0 in range(3) ]
        """
        Linear acceleration as a list of three values.
        SI units = m/s^2.
        LCM Type: double[3]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(imu_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack('>4d', *self.orientation[:4]))
        buf.write(struct.pack('>3d', *self.angRate[:3]))
        buf.write(struct.pack('>3d', *self.xyz_ddot[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = imu_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.orientation = struct.unpack('>4d', buf.read(32))
        self.angRate = struct.unpack('>3d', buf.read(24))
        self.xyz_ddot = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if imu_t in parents: return 0
        newparents = parents + [imu_t]
        tmphash = (0xf72bd2d311e44505+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if imu_t._packed_fingerprint is None:
            imu_t._packed_fingerprint = struct.pack(">Q", imu_t._get_hash_recursive([]))
        return imu_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", imu_t._get_packed_fingerprint())[0]

