"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class ctd_t(object):
    """
     Standard message for conductivity, temperature and depth (CTD) sensors.
    
    """

    __slots__ = ["header", "conductivity_sm", "temperature_degc", "pressure_decibar", "salinity_psu", "sound_velocity_ms"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.conductivity_sm = 0.0
        """
        Conductivity as a double.
        SI units = Siemens/m.
        LCM Type: double
        """

        self.temperature_degc = 0.0
        """
        Temperature as a double.
        SI units = Celsius.
        LCM Type: double
        """

        self.pressure_decibar = 0.0
        """
        Pressure as a double.
        SI units = decibars.
        LCM Type: double
        """

        self.salinity_psu = 0.0
        """
        Salinity as a double.
        SI units = psu.
        LCM Type: double
        """

        self.sound_velocity_ms = 0.0
        """
        Sounds velocity in water as a double.
        SI units = m/s.
        LCM Type: double
        """


    def encode(self):
        buf = BytesIO()
        buf.write(ctd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ddddd", self.conductivity_sm, self.temperature_degc, self.pressure_decibar, self.salinity_psu, self.sound_velocity_ms))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ctd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ctd_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ctd_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.conductivity_sm, self.temperature_degc, self.pressure_decibar, self.salinity_psu, self.sound_velocity_ms = struct.unpack(">ddddd", buf.read(40))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ctd_t in parents: return 0
        newparents = parents + [ctd_t]
        tmphash = (0x27e09d290728ae11+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ctd_t._packed_fingerprint is None:
            ctd_t._packed_fingerprint = struct.pack(">Q", ctd_t._get_hash_recursive([]))
        return ctd_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ctd_t._get_packed_fingerprint())[0]

