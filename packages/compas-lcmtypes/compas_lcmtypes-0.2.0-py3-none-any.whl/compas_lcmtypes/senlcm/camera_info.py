"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class camera_info(object):
    """
     Standard message to report camera information.
    
    """

    __slots__ = ["header", "height", "width", "distortion_model", "dsize", "D", "K", "R", "P", "binning_x", "binning_y", "roi", "roi_do_rectify"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "int32_t", "int32_t", "string", "int32_t", "double", "double", "double", "double", "int32_t", "int32_t", "int32_t", "boolean"]

    __dimensions__ = [None, None, None, None, None, ["dsize"], [9], [9], [12], None, None, [4], None]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.height = 0
        """
        The image dimensions with which the camera was calibrated. Normally
        this will be the full camera resolution in pixels.
        LCM Type: int32_t
        """

        self.width = 0
        """ LCM Type: int32_t """
        self.distortion_model = ""
        """
        The distortion model used for the calibration.
        LCM Type: string
        """

        self.dsize = 0
        """
        The distortion parameters, size depending on the distortion model.
        LCM Type: int32_t
        """

        self.D = []
        """ LCM Type: double[dsize] """
        self.K = [ 0.0 for dim0 in range(9) ]
        """
        Intrinsic camera matrix for the raw (distorted) images. 3x3 row-major matrix.
        LCM Type: double[9]
        """

        self.R = [ 0.0 for dim0 in range(9) ]
        """
        Rectification matrix (stereo cameras only). 3x3 row-major matrix.
        LCM Type: double[9]
        """

        self.P = [ 0.0 for dim0 in range(12) ]
        """
        Projection/camera matrix. 3x4 row-major matrix.
        LCM Type: double[12]
        """

        self.binning_x = 0
        """
        Binning factors
        LCM Type: int32_t
        """

        self.binning_y = 0
        """ LCM Type: int32_t """
        self.roi = [ 0 for dim0 in range(4) ]
        """
        Region of interest parameters.
        roi holds [x_offset, y_offset, height, width]
        LCM Type: int32_t[4]
        """

        self.roi_do_rectify = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(camera_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ii", self.height, self.width))
        __distortion_model_encoded = self.distortion_model.encode('utf-8')
        buf.write(struct.pack('>I', len(__distortion_model_encoded)+1))
        buf.write(__distortion_model_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.dsize))
        buf.write(struct.pack('>%dd' % self.dsize, *self.D[:self.dsize]))
        buf.write(struct.pack('>9d', *self.K[:9]))
        buf.write(struct.pack('>9d', *self.R[:9]))
        buf.write(struct.pack('>12d', *self.P[:12]))
        buf.write(struct.pack(">ii", self.binning_x, self.binning_y))
        buf.write(struct.pack('>4i', *self.roi[:4]))
        buf.write(struct.pack(">b", self.roi_do_rectify))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_info._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = camera_info()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.height, self.width = struct.unpack(">ii", buf.read(8))
        __distortion_model_len = struct.unpack('>I', buf.read(4))[0]
        self.distortion_model = buf.read(__distortion_model_len)[:-1].decode('utf-8', 'replace')
        self.dsize = struct.unpack(">i", buf.read(4))[0]
        self.D = struct.unpack('>%dd' % self.dsize, buf.read(self.dsize * 8))
        self.K = struct.unpack('>9d', buf.read(72))
        self.R = struct.unpack('>9d', buf.read(72))
        self.P = struct.unpack('>12d', buf.read(96))
        self.binning_x, self.binning_y = struct.unpack(">ii", buf.read(8))
        self.roi = struct.unpack('>4i', buf.read(16))
        self.roi_do_rectify = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if camera_info in parents: return 0
        newparents = parents + [camera_info]
        tmphash = (0x7edeeeafed8d83c0+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if camera_info._packed_fingerprint is None:
            camera_info._packed_fingerprint = struct.pack(">Q", camera_info._get_hash_recursive([]))
        return camera_info._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", camera_info._get_packed_fingerprint())[0]

