"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class depth_t(object):
    """
     Standard message for depth sensors.
    
    """

    __slots__ = ["header", "depth", "pressure"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "double", "double"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.depth = 0.0
        """
        Depth.
        SI units = m.
        LCM Type: double
        """

        self.pressure = 0.0
        """
        Pressure.
        SI units = mmbar.
        LCM Type: double
        """


    def encode(self):
        buf = BytesIO()
        buf.write(depth_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dd", self.depth, self.pressure))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != depth_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return depth_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = depth_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.depth, self.pressure = struct.unpack(">dd", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if depth_t in parents: return 0
        newparents = parents + [depth_t]
        tmphash = (0x16e44850c90dda6a+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if depth_t._packed_fingerprint is None:
            depth_t._packed_fingerprint = struct.pack(">Q", depth_t._get_hash_recursive([]))
        return depth_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", depth_t._get_packed_fingerprint())[0]

