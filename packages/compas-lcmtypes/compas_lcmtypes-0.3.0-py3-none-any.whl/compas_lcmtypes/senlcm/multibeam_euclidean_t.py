"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.geolcm

import compas_lcmtypes.stdlcm

class multibeam_euclidean_t(object):
    """
     Standard message for multibeam sensors in Euclidean coordinates.
    
    """

    __slots__ = ["header", "n_beams", "flags", "range", "intensity"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "int16_t", "int8_t", "compas_lcmtypes.geolcm.point_t", "double"]

    __dimensions__ = [None, None, ["n_beams"], ["n_beams"], ["n_beams"]]

    DETECT_OK = 0x00
    """ Constants declaring whether each beam is good or bad. """
    DETECT_BAD_SONAR = 0x01
    """ Beam is OK """
    DETECT_BAD_FILTER = 0x02
    """ Beam is flagged as bad by the sonar. """
    DETECT_BAD_MANUAL = 0x04
    """ Beam is flagged as bad by post-processing filter. """

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.n_beams = 0
        """
        Number of beams as an integer.
        LCM Type: int16_t
        """

        self.flags = []
        """
        Beams flag.
        LCM Type: int8_t[n_beams]
        """

        self.range = []
        """
        Range for each beam as a list of n_beams elements.
        LCM Type: compas_lcmtypes.geolcm.point_t[n_beams]
        """

        self.intensity = []
        """
        Intensity for each beam as a list of n_beams elements.
        LCM Type: double[n_beams]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(multibeam_euclidean_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">h", self.n_beams))
        buf.write(struct.pack('>%db' % self.n_beams, *self.flags[:self.n_beams]))
        for i0 in range(self.n_beams):
            assert self.range[i0]._get_packed_fingerprint() == compas_lcmtypes.geolcm.point_t._get_packed_fingerprint()
            self.range[i0]._encode_one(buf)
        buf.write(struct.pack('>%dd' % self.n_beams, *self.intensity[:self.n_beams]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != multibeam_euclidean_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return multibeam_euclidean_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = multibeam_euclidean_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.n_beams = struct.unpack(">h", buf.read(2))[0]
        self.flags = struct.unpack('>%db' % self.n_beams, buf.read(self.n_beams))
        self.range = []
        for i0 in range(self.n_beams):
            self.range.append(compas_lcmtypes.geolcm.point_t._decode_one(buf))
        self.intensity = struct.unpack('>%dd' % self.n_beams, buf.read(self.n_beams * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if multibeam_euclidean_t in parents: return 0
        newparents = parents + [multibeam_euclidean_t]
        tmphash = (0xe320c7d0bffdc069+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)+ compas_lcmtypes.geolcm.point_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if multibeam_euclidean_t._packed_fingerprint is None:
            multibeam_euclidean_t._packed_fingerprint = struct.pack(">Q", multibeam_euclidean_t._get_hash_recursive([]))
        return multibeam_euclidean_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", multibeam_euclidean_t._get_packed_fingerprint())[0]

