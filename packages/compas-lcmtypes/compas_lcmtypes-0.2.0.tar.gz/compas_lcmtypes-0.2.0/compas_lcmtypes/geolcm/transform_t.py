"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.geolcm

class transform_t(object):
    """
     Standard message to represent the transform between two coordinate frames.
    
    """

    __slots__ = ["translation", "rotation"]

    __typenames__ = ["compas_lcmtypes.geolcm.vector3_t", "compas_lcmtypes.geolcm.quaternion_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.translation = compas_lcmtypes.geolcm.vector3_t()
        """
        Translation as a vector3 structure from the geolcm package.
        LCM Type: compas_lcmtypes.geolcm.vector3_t
        """

        self.rotation = compas_lcmtypes.geolcm.quaternion_t()
        """
        Rotation as a quaternion structure from the geolcm package.
        LCM Type: compas_lcmtypes.geolcm.quaternion_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(transform_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.translation._get_packed_fingerprint() == compas_lcmtypes.geolcm.vector3_t._get_packed_fingerprint()
        self.translation._encode_one(buf)
        assert self.rotation._get_packed_fingerprint() == compas_lcmtypes.geolcm.quaternion_t._get_packed_fingerprint()
        self.rotation._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != transform_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return transform_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = transform_t()
        self.translation = compas_lcmtypes.geolcm.vector3_t._decode_one(buf)
        self.rotation = compas_lcmtypes.geolcm.quaternion_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if transform_t in parents: return 0
        newparents = parents + [transform_t]
        tmphash = (0x1275bd1ccbdaf47f+ compas_lcmtypes.geolcm.vector3_t._get_hash_recursive(newparents)+ compas_lcmtypes.geolcm.quaternion_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if transform_t._packed_fingerprint is None:
            transform_t._packed_fingerprint = struct.pack(">Q", transform_t._get_hash_recursive([]))
        return transform_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", transform_t._get_packed_fingerprint())[0]

