"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class cmd_effort_t(object):
    """
     Effort request in vehicle body frame +/- 100% in all DOF.
    
    """

    __slots__ = ["header", "x", "y", "z", "phi", "theta", "psi"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        """
        Standard header.
        LCM Type: compas_lcmtypes.stdlcm.header_t
        """

        self.x = 0.0
        """
        payload
        LCM Type: double
        """

        self.y = 0.0
        """ LCM Type: double """
        self.z = 0.0
        """ LCM Type: double """
        self.phi = 0.0
        """ LCM Type: double """
        self.theta = 0.0
        """ LCM Type: double """
        self.psi = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(cmd_effort_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dddddd", self.x, self.y, self.z, self.phi, self.theta, self.psi))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cmd_effort_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cmd_effort_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = cmd_effort_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.x, self.y, self.z, self.phi, self.theta, self.psi = struct.unpack(">dddddd", buf.read(48))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if cmd_effort_t in parents: return 0
        newparents = parents + [cmd_effort_t]
        tmphash = (0xba86a0c54fd80a1f+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if cmd_effort_t._packed_fingerprint is None:
            cmd_effort_t._packed_fingerprint = struct.pack(">Q", cmd_effort_t._get_hash_recursive([]))
        return cmd_effort_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cmd_effort_t._get_packed_fingerprint())[0]

