# flake8: noqa
from __future__ import annotations
from pathlib import Path
from keplemon.enums import TimeSystem

def request_time_constants_update(output_path: str | Path) -> None: ...

class TimeSpan:
    @classmethod
    def from_days(cls, days: float) -> TimeSpan: ...
    @classmethod
    def from_seconds(cls, seconds: float) -> TimeSpan: ...
    @classmethod
    def from_minutes(cls, minutes: float) -> TimeSpan: ...
    @classmethod
    def from_hours(cls, hours: float) -> TimeSpan: ...
    def in_days(self) -> float: ...
    def in_seconds(self) -> float: ...
    def in_minutes(self) -> float: ...
    def in_hours(self) -> float: ...

class TimeComponents:
    year: int
    month: int
    day: int
    hour: int
    minute: int
    second: float
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int,
        minute: int,
        second: float,
    ) -> None: ...
    def to_iso(self) -> str: ...
    @classmethod
    def from_iso(cls, iso_str: str) -> TimeComponents: ...

class Epoch:
    days_since_1950: float
    time_system: TimeSystem
    day_of_year: float
    @classmethod
    def from_days_since_1950(cls, days: float, time_system: TimeSystem) -> Epoch: ...
    @classmethod
    def from_iso(cls, iso_str: str, time_system: TimeSystem) -> Epoch: ...
    @classmethod
    def from_components(
        cls, components: TimeComponents, time_system: TimeSystem
    ) -> Epoch: ...
    @classmethod
    def from_dtg(cls, dtg: str, time_system: TimeSystem) -> Epoch: ...
    def to_iso(self) -> str: ...
    def to_dtg_20(self) -> str: ...
    def to_dtg_19(self) -> str: ...
    def to_dtg_17(self) -> str: ...
    def to_dtg_15(self) -> str: ...
    def to_time_components(self) -> TimeComponents: ...
    def to_fk4_greenwich_angle(self) -> float: ...
    def to_fk5_greenwich_angle(self) -> float: ...
    def to_system(self, time_system: TimeSystem) -> Epoch: ...
    def __add__(self, delta: TimeSpan) -> Epoch: ...
    def __gt__(self, other: Epoch) -> bool: ...
    def __lt__(self, other: Epoch) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, other: Epoch) -> bool: ...
    def __le__(self, other: Epoch) -> bool: ...
