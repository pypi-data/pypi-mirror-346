# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkCudaFFTProjectionsConvolutionImageFilterPython
else:
    import _rtkCudaFFTProjectionsConvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkCudaImageToImageFilterRTKPython
import itk.rtkScatterGlareCorrectionImageFilterPython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageSourceRTKPython
import itk.rtkFFTRampImageFilterPython
class rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F(itk.itkCudaImageToImageFilterRTKPython.itkCudaImageToImageFilterCIF3CIF3RFCIF3CIF3F):
    r"""Proxy of C++ rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaFFTProjectionsConvolutionImageFilterPython.delete_rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaFFTProjectionsConvolutionImageFilterPython.rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F_cast(obj)

# Register rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F in _rtkCudaFFTProjectionsConvolutionImageFilterPython:
_rtkCudaFFTProjectionsConvolutionImageFilterPython.rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F_swigregister(rtkCudaFFTProjectionsConvolutionImageFilterRFCIF3CIF3F)
class rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F(itk.itkCudaImageToImageFilterRTKPython.itkCudaImageToImageFilterCIF3CIF3SGCIF3CIF3F):
    r"""Proxy of C++ rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaFFTProjectionsConvolutionImageFilterPython.delete_rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaFFTProjectionsConvolutionImageFilterPython.rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F_cast(obj)

# Register rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F in _rtkCudaFFTProjectionsConvolutionImageFilterPython:
_rtkCudaFFTProjectionsConvolutionImageFilterPython.rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F_swigregister(rtkCudaFFTProjectionsConvolutionImageFilterSGCIF3CIF3F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_fft_projections_convolution_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., hann_cut_frequency: float=..., cosine_cut_frequency: float=..., hamming_frequency: float=..., hann_cut_frequency_y: float=..., ram_lak_cut_frequency: float=..., shepp_logan_cut_frequency: float=..., greatest_prime_factor: int=..., truncation_correction: float=..., zero_pad_factors: Sequence[int]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaFFTProjectionsConvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'hann_cut_frequency':hann_cut_frequency,'cosine_cut_frequency':cosine_cut_frequency,'hamming_frequency':hamming_frequency,'hann_cut_frequency_y':hann_cut_frequency_y,'ram_lak_cut_frequency':ram_lak_cut_frequency,'shepp_logan_cut_frequency':shepp_logan_cut_frequency,'greatest_prime_factor':greatest_prime_factor,'truncation_correction':truncation_correction,'zero_pad_factors':zero_pad_factors }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaFFTProjectionsConvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_fft_projections_convolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaFFTProjectionsConvolutionImageFilter
    cuda_fft_projections_convolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_fft_projections_convolution_image_filter.__doc__ = filter_object.__doc__



