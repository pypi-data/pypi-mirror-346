# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkSplatWithKnownWeightsImageFilterPython
else:
    import _rtkSplatWithKnownWeightsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkCudaImageRTKPython
import itk.itkImageRTKPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkCudaDataManagerPython
import itk.itkImageSourceRTKPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkImageSourceCudaCommonPython
import itk.itkArray2DPython

def rtkSplatWithKnownWeightsImageFilterCIF4CIF3_New():
    return rtkSplatWithKnownWeightsImageFilterCIF4CIF3.New()

class rtkSplatWithKnownWeightsImageFilterCIF4CIF3(itk.itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterCIF4):
    r"""Proxy of C++ rtkSplatWithKnownWeightsImageFilterCIF4CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkSplatWithKnownWeightsImageFilterCIF4CIF3_Pointer"""
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkSplatWithKnownWeightsImageFilterCIF4CIF3_Pointer"""
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_Clone(self)

    def SetInputVolumeSeries(self, VolumeSeries):
        r"""
        SetInputVolumeSeries(self, VolumeSeries)

        Parameters
        ----------
        VolumeSeries: itkCudaImageF4 const *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_SetInputVolumeSeries(self, VolumeSeries)

    def SetInputVolume(self, Volume):
        r"""
        SetInputVolume(self, Volume)

        Parameters
        ----------
        Volume: itkCudaImageF3 const *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_SetInputVolume(self, Volume)

    def GetWeights(self):
        r"""GetWeights(self) -> itkArray2DF"""
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_GetWeights(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkArray2DF

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_SetWeights(self, _arg)

    def GetProjectionNumber(self):
        r"""GetProjectionNumber(self) -> int"""
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_GetProjectionNumber(self)

    def SetProjectionNumber(self, n):
        r"""
        SetProjectionNumber(self, n)

        Parameters
        ----------
        n: int

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_SetProjectionNumber(self, n)
    __swig_destroy__ = _rtkSplatWithKnownWeightsImageFilterPython.delete_rtkSplatWithKnownWeightsImageFilterCIF4CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkSplatWithKnownWeightsImageFilterCIF4CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkSplatWithKnownWeightsImageFilterCIF4CIF3

        Create a new object of the class rtkSplatWithKnownWeightsImageFilterCIF4CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSplatWithKnownWeightsImageFilterCIF4CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSplatWithKnownWeightsImageFilterCIF4CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSplatWithKnownWeightsImageFilterCIF4CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSplatWithKnownWeightsImageFilterCIF4CIF3 in _rtkSplatWithKnownWeightsImageFilterPython:
_rtkSplatWithKnownWeightsImageFilterPython.rtkSplatWithKnownWeightsImageFilterCIF4CIF3_swigregister(rtkSplatWithKnownWeightsImageFilterCIF4CIF3)

def itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_New():
    return itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3.New()

class itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3(rtkSplatWithKnownWeightsImageFilterCIF4CIF3):
    r"""Proxy of C++ itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_Pointer"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_Pointer"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageF4 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageF4 *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_GraftOutput(self, *args)
    __swig_destroy__ = _rtkSplatWithKnownWeightsImageFilterPython.delete_itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3

        Create a new object of the class itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3 in _rtkSplatWithKnownWeightsImageFilterPython:
_rtkSplatWithKnownWeightsImageFilterPython.itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3_swigregister(itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3)
class itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3(itkCudaImageToImageFilterCIF4CIF4SplatCIF4CIF3):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSplatWithKnownWeightsImageFilterPython.delete_itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSplatWithKnownWeightsImageFilterPython.itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3_cast(obj)

# Register itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3 in _rtkSplatWithKnownWeightsImageFilterPython:
_rtkSplatWithKnownWeightsImageFilterPython.itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3_swigregister(itkCudaInPlaceImageFilterCIF4CIF4SplatCIF4CIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_image_to_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., input_volume_series=..., input_volume=..., weights=..., projection_number: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaImageToImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'input_volume_series':input_volume_series,'input_volume':input_volume,'weights':weights,'projection_number':projection_number }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaImageToImageFilter
    cuda_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def splat_with_known_weights_image_filter(*args: itkt.ImageLike,  input_volume_series=..., input_volume=..., weights=..., projection_number: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SplatWithKnownWeightsImageFilter"""
    import itk

    kwarg_typehints = { 'input_volume_series':input_volume_series,'input_volume':input_volume,'weights':weights,'projection_number':projection_number }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SplatWithKnownWeightsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def splat_with_known_weights_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.SplatWithKnownWeightsImageFilter
    splat_with_known_weights_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    splat_with_known_weights_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_in_place_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., input_volume_series=..., input_volume=..., weights=..., projection_number: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaInPlaceImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'input_volume_series':input_volume_series,'input_volume':input_volume,'weights':weights,'projection_number':projection_number }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaInPlaceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_in_place_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaInPlaceImageFilter
    cuda_in_place_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_in_place_image_filter.__doc__ = filter_object.__doc__



