# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkReorderProjectionsImageFilterPython
else:
    import _rtkReorderProjectionsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRTKPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkPointRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkCudaDataManagerPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageToImageFilterAPython

def rtkReorderProjectionsImageFilterCIF3CIF3_New():
    return rtkReorderProjectionsImageFilterCIF3CIF3.New()

class rtkReorderProjectionsImageFilterCIF3CIF3(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterCIF3CIF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterCIF3CIF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterCIF3CIF3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterCIF3CIF3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterCIF3CIF3

        Create a new object of the class rtkReorderProjectionsImageFilterCIF3CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterCIF3CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterCIF3CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterCIF3CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterCIF3CIF3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIF3CIF3_swigregister(rtkReorderProjectionsImageFilterCIF3CIF3)

def rtkReorderProjectionsImageFilterCIVF23CIVF23_New():
    return rtkReorderProjectionsImageFilterCIVF23CIVF23.New()

class rtkReorderProjectionsImageFilterCIVF23CIVF23(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterCIVF23CIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterCIVF23CIVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterCIVF23CIVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterCIVF23CIVF23::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterCIVF23CIVF23::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterCIVF23CIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterCIVF23CIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterCIVF23CIVF23

        Create a new object of the class rtkReorderProjectionsImageFilterCIVF23CIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterCIVF23CIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterCIVF23CIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterCIVF23CIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterCIVF23CIVF23 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF23CIVF23_swigregister(rtkReorderProjectionsImageFilterCIVF23CIVF23)

def rtkReorderProjectionsImageFilterCIVF33CIVF33_New():
    return rtkReorderProjectionsImageFilterCIVF33CIVF33.New()

class rtkReorderProjectionsImageFilterCIVF33CIVF33(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterCIVF33CIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterCIVF33CIVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterCIVF33CIVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterCIVF33CIVF33::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterCIVF33CIVF33::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterCIVF33CIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterCIVF33CIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterCIVF33CIVF33

        Create a new object of the class rtkReorderProjectionsImageFilterCIVF33CIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterCIVF33CIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterCIVF33CIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterCIVF33CIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterCIVF33CIVF33 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF33CIVF33_swigregister(rtkReorderProjectionsImageFilterCIVF33CIVF33)

def rtkReorderProjectionsImageFilterCIVF43CIVF43_New():
    return rtkReorderProjectionsImageFilterCIVF43CIVF43.New()

class rtkReorderProjectionsImageFilterCIVF43CIVF43(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterCIVF43CIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterCIVF43CIVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterCIVF43CIVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterCIVF43CIVF43::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterCIVF43CIVF43::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterCIVF43CIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterCIVF43CIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterCIVF43CIVF43

        Create a new object of the class rtkReorderProjectionsImageFilterCIVF43CIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterCIVF43CIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterCIVF43CIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterCIVF43CIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterCIVF43CIVF43 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF43CIVF43_swigregister(rtkReorderProjectionsImageFilterCIVF43CIVF43)

def rtkReorderProjectionsImageFilterCIVF53CIVF53_New():
    return rtkReorderProjectionsImageFilterCIVF53CIVF53.New()

class rtkReorderProjectionsImageFilterCIVF53CIVF53(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterCIVF53CIVF53):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterCIVF53CIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterCIVF53CIVF53_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterCIVF53CIVF53_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterCIVF53CIVF53::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterCIVF53CIVF53::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterCIVF53CIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterCIVF53CIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterCIVF53CIVF53

        Create a new object of the class rtkReorderProjectionsImageFilterCIVF53CIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterCIVF53CIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterCIVF53CIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterCIVF53CIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterCIVF53CIVF53 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterCIVF53CIVF53_swigregister(rtkReorderProjectionsImageFilterCIVF53CIVF53)

def rtkReorderProjectionsImageFilterID3ID3_New():
    return rtkReorderProjectionsImageFilterID3ID3.New()

class rtkReorderProjectionsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterID3ID3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterID3ID3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterID3ID3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterID3ID3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterID3ID3

        Create a new object of the class rtkReorderProjectionsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterID3ID3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_swigregister(rtkReorderProjectionsImageFilterID3ID3)

def rtkReorderProjectionsImageFilterIF3IF3_New():
    return rtkReorderProjectionsImageFilterIF3IF3.New()

class rtkReorderProjectionsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIF3IF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIF3IF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIF3IF3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIF3IF3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIF3IF3

        Create a new object of the class rtkReorderProjectionsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIF3IF3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_swigregister(rtkReorderProjectionsImageFilterIF3IF3)

def rtkReorderProjectionsImageFilterIVF23IVF23_New():
    return rtkReorderProjectionsImageFilterIVF23IVF23.New()

class rtkReorderProjectionsImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF23IVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF23IVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF23IVF23::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF23IVF23::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF23IVF23

        Create a new object of the class rtkReorderProjectionsImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF23IVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF23IVF23 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_swigregister(rtkReorderProjectionsImageFilterIVF23IVF23)

def rtkReorderProjectionsImageFilterIVF33IVF33_New():
    return rtkReorderProjectionsImageFilterIVF33IVF33.New()

class rtkReorderProjectionsImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF33IVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF33IVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF33IVF33::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF33IVF33::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF33IVF33

        Create a new object of the class rtkReorderProjectionsImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF33IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF33IVF33 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_swigregister(rtkReorderProjectionsImageFilterIVF33IVF33)

def rtkReorderProjectionsImageFilterIVF43IVF43_New():
    return rtkReorderProjectionsImageFilterIVF43IVF43.New()

class rtkReorderProjectionsImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF43IVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF43IVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF43IVF43::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF43IVF43::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF43IVF43

        Create a new object of the class rtkReorderProjectionsImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF43IVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF43IVF43 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_swigregister(rtkReorderProjectionsImageFilterIVF43IVF43)

def rtkReorderProjectionsImageFilterIVF53IVF53_New():
    return rtkReorderProjectionsImageFilterIVF53IVF53.New()

class rtkReorderProjectionsImageFilterIVF53IVF53(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF53IVF53_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF53IVF53_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF53IVF53::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF53IVF53::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF53IVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF53IVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF53IVF53

        Create a new object of the class rtkReorderProjectionsImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF53IVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF53IVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF53IVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF53IVF53 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF53IVF53_swigregister(rtkReorderProjectionsImageFilterIVF53IVF53)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def reorder_projections_image_filter(*args: itkt.ImageLike,  input_geometry=..., permutation=..., input_signal: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ReorderProjectionsImageFilter"""
    import itk

    kwarg_typehints = { 'input_geometry':input_geometry,'permutation':permutation,'input_signal':input_signal }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ReorderProjectionsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def reorder_projections_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ReorderProjectionsImageFilter
    reorder_projections_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    reorder_projections_image_filter.__doc__ = filter_object.__doc__



