Metadata-Version: 2.4
Name: ai_commit_and_readme
Version: 1.0.1
Summary: AI-powered README.md and commit message generation tool using OpenAI
Author: Oleksandr Kryklia
Author-email: Oleksandr Kryklia <kryklia@gmail.com>
License: MIT
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: openai>=1.0.0
Requires-Dist: tiktoken>=0.5.1
Requires-Dist: rich>=13.0.0
Dynamic: author
Dynamic: requires-python

# ai_commit_and_readme üöÄ

Automate your commit messages and keep your README and Wiki up-to-date with AI.

## ‚ú® Features

- AI-powered commit messages
- Automated README & Wiki enrichment
- Seamless Makefile and git integration

## üì¶ Quick Start

```sh
git clone https://github.com/auraz/ai_commit_and_readme.git
cd ai_commit_and_readme
make install
```

## üìö Full Documentation

See the [GitHub Wiki](https://github.com/auraz/ai_commit_and_readme/wiki) for:
- Installation & Setup
- Usage & Makefile Commands
- Configuration
- FAQ & Troubleshooting
- Changelog & API Reference
```
## üõ†Ô∏è Makefile Commands Overview
Following recent updates to the Makefile, we have introduced a new set of commands that streamline our build process and ensure seamless deployment of our application. Please find the updated set of commands that you should be familiar with:

- `make build`: Compiles the source code into executable format. We've added new optimization flags that ensure a more efficient build process.

- `make test`: Runs the full suite of automated tests to ensure code integrity. We've improved test isolation and reporting for better insight into test performance.

- `make install`: Installs the application onto the system. This now includes checks for system compatibility and necessary dependencies, offering a smoother setup experience.

- `make clean`: Removes all generated files from the build process, including object files and executables. It's now more thorough in cleaning up, ensuring a truly clean state for a fresh build.

- `make deploy`: This is a new command added to facilitate deployment to our staging environment before production release. It involves running integration tests and ensures that only thoroughly checked and tested code is deployed.

***Note:*** *All commands are to be run in the root directory of the project. Ensure you have the necessary permissions to execute make commands on your system.*

For a full description of each command and additional flags that can be used, please refer to the `Usage.md` document, which has also been updated to reflect these changes.

## ‚ú® Feature Highlights

(New content for the Feature Highlights section)
