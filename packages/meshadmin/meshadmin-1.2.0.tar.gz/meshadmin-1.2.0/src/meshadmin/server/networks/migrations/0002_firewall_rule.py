# Generated by Django 5.1.1 on 2024-09-20 13:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("networks", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Firewall",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="networks.network",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("I", "inbound"), ("O", "outbound")],
                        default="I",
                        max_length=10,
                    ),
                ),
                (
                    "proto",
                    models.CharField(
                        choices=[
                            ("any", "any"),
                            ("udp", "udp"),
                            ("tcp", "tcp"),
                            ("icmp", "icmp"),
                        ],
                        default="any",
                        help_text="One of any, tcp, udp, or icmp",
                        max_length=4,
                    ),
                ),
                (
                    "port",
                    models.CharField(
                        default="any",
                        help_text="Takes 0 or any as any, a single number (e.g. 80), a range (e.g. 200-901), or fragment to match second and further fragments of fragmented packets (since there is no port available).",
                        max_length=255,
                    ),
                ),
                (
                    "cidr",
                    models.CharField(
                        blank=True,
                        help_text="a CIDR, 0.0.0.0/0 is any. This restricts which Nebula IP addresses the rule allows.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "local_cidr",
                    models.CharField(
                        blank=True,
                        help_text="a local CIDR, 0.0.0.0/0 is any. This restricts which destination IP addresses, when using unsafe_routes, the rule allows. If unset, the rule will allow access to the specified ports on both the node itself as well as any IP addresses it routes to.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "firewall",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="networks.firewall",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Can be any or a literal group name, ie default-group",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fw_groups",
                        to="networks.group",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        null=True,
                        related_name="fw_groupss",
                        to="networks.group",
                    ),
                ),
            ],
        ),
    ]
