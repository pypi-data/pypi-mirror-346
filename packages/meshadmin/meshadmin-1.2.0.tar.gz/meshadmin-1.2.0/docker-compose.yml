services:
  meshadmin:
    image: registry.gitlab.com/meshadmin/meshadmin:latest
    environment:
      MESHSERVER_SQLITE_PATH: /data/db.sqlite
      MESHSERVER_ALLOWED_HOSTS: ${DOMAIN}
      MESHSERVER_SECRET_KEY: ${MESHSERVER_SECRET_KEY}
      MESHSERVER_DEBUG: false
      MESHSERVER_USE_X_FORWARDED_HOST: true
      MESHSERVER_CSRF_TRUSTED_ORIGINS: https://${DOMAIN}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      MESH_SERVER_URL: ${MESH_SERVER_URL}
      KEYCLOAK_BASE_URL: ${KEYCLOAK_BASE_URL}
      KEYCLOAK_ALLOWED_CLIENTS: ${KEYCLOAK_ALLOWED_CLIENTS}
    ports:
      - "8000:8000"
    volumes:
      - db:/data
      - /opt/nebula:/opt/nebula
    entrypoint: ["sh", "-c"]
    command:
      - |
        meshserver migrate
        meshserver collectstatic --noinput
        meshserver runserver 0.0.0.0:8000

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: https://auth.dmeshadmin.hydo.ch
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 30

  caddy:
    image: caddy:2.8
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

volumes:
  db:
  caddy_data:
  caddy_config:
  keycloak_data:
  postgres_data:
