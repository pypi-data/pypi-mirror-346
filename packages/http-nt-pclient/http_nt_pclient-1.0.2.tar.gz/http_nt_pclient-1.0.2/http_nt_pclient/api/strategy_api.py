# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from http_nt_pclient.api_client import ApiClient


class StrategyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_state(self, body, site, execution_id, **kwargs):  # noqa: E501
        """start/stop/pause/resume strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_state(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestedAction body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: StrategyState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_state_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_state_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
            return data

    def change_state_with_http_info(self, body, site, execution_id, **kwargs):  # noqa: E501
        """start/stop/pause/resume strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_state_with_http_info(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestedAction body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: StrategyState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_state`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `change_state`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `change_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}/{executionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StrategyState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_state_multi(self, body, site, **kwargs):  # noqa: E501
        """start/stop/pause/resume multiple strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_state_multi(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleStrategiesActionRequest body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_state_multi_with_http_info(body, site, **kwargs)  # noqa: E501
        else:
            (data) = self.change_state_multi_with_http_info(body, site, **kwargs)  # noqa: E501
            return data

    def change_state_multi_with_http_info(self, body, site, **kwargs):  # noqa: E501
        """start/stop/pause/resume multiple strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_state_multi_with_http_info(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleStrategiesActionRequest body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_state_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_state_multi`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `change_state_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, site, execution_id, **kwargs):  # noqa: E501
        """Delete strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: ExecutionId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(site, execution_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, site, execution_id, **kwargs):  # noqa: E501
        """Delete strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: ExecutionId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `delete`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}/{executionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecutionId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_multi(self, body, site, **kwargs):  # noqa: E501
        """Delete strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_multi(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExecutionIds body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_multi_with_http_info(body, site, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_multi_with_http_info(body, site, **kwargs)  # noqa: E501
            return data

    def delete_multi_with_http_info(self, body, site, **kwargs):  # noqa: E501
        """Delete strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_multi_with_http_info(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExecutionIds body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_multi`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `delete_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def strategies(self, site, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.strategies(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Strategies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.strategies_with_http_info(site, **kwargs)  # noqa: E501
        else:
            (data) = self.strategies_with_http_info(site, **kwargs)  # noqa: E501
            return data

    def strategies_with_http_info(self, site, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.strategies_with_http_info(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: Strategies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method strategies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `strategies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Strategies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def strategy(self, site, execution_id, **kwargs):  # noqa: E501
        """Returns strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.strategy(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: Twap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.strategy_with_http_info(site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.strategy_with_http_info(site, execution_id, **kwargs)  # noqa: E501
            return data

    def strategy_with_http_info(self, site, execution_id, **kwargs):  # noqa: E501
        """Returns strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.strategy_with_http_info(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: Unique identifier for the strategy, generated by the user. Limited to 8 characters. Creating a strategy with the same identifier twice leads to the replacement of the existing strategy. (required)
        :return: Twap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `strategy`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `strategy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/{site}/{executionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Twap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
