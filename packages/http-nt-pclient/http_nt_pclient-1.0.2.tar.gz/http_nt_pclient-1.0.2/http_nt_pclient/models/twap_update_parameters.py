# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TwapUpdateParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'aggression_cap': 'float',
        'aggression_floor': 'float',
        'bbo_spread_limit': 'int',
        'guaranteed_execution': 'str',
        'instrument': 'str',
        'limit_price': 'float',
        'max_display_size': 'float',
        'scheduled_start_time': 'datetime',
        'scheduled_stop_time': 'datetime',
        'side': 'str',
        'start': 'bool',
        'step_size': 'float',
        'step_time': 'int',
        'target': 'float',
        'target_position': 'float'
    }

    attribute_map = {
        'account': 'account',
        'aggression_cap': 'aggressionCap',
        'aggression_floor': 'aggressionFloor',
        'bbo_spread_limit': 'bboSpreadLimit',
        'guaranteed_execution': 'guaranteedExecution',
        'instrument': 'instrument',
        'limit_price': 'limitPrice',
        'max_display_size': 'maxDisplaySize',
        'scheduled_start_time': 'scheduledStartTime',
        'scheduled_stop_time': 'scheduledStopTime',
        'side': 'side',
        'start': 'start',
        'step_size': 'stepSize',
        'step_time': 'stepTime',
        'target': 'target',
        'target_position': 'targetPosition'
    }

    def __init__(self, account=None, aggression_cap=None, aggression_floor=None, bbo_spread_limit=None, guaranteed_execution=None, instrument=None, limit_price=None, max_display_size=None, scheduled_start_time=None, scheduled_stop_time=None, side=None, start=False, step_size=None, step_time=None, target=None, target_position=None):  # noqa: E501
        """TwapUpdateParameters - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._aggression_cap = None
        self._aggression_floor = None
        self._bbo_spread_limit = None
        self._guaranteed_execution = None
        self._instrument = None
        self._limit_price = None
        self._max_display_size = None
        self._scheduled_start_time = None
        self._scheduled_stop_time = None
        self._side = None
        self._start = None
        self._step_size = None
        self._step_time = None
        self._target = None
        self._target_position = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if aggression_cap is not None:
            self.aggression_cap = aggression_cap
        if aggression_floor is not None:
            self.aggression_floor = aggression_floor
        if bbo_spread_limit is not None:
            self.bbo_spread_limit = bbo_spread_limit
        if guaranteed_execution is not None:
            self.guaranteed_execution = guaranteed_execution
        if instrument is not None:
            self.instrument = instrument
        if limit_price is not None:
            self.limit_price = limit_price
        if max_display_size is not None:
            self.max_display_size = max_display_size
        if scheduled_start_time is not None:
            self.scheduled_start_time = scheduled_start_time
        if scheduled_stop_time is not None:
            self.scheduled_stop_time = scheduled_stop_time
        if side is not None:
            self.side = side
        if start is not None:
            self.start = start
        if step_size is not None:
            self.step_size = step_size
        if step_time is not None:
            self.step_time = step_time
        if target is not None:
            self.target = target
        if target_position is not None:
            self.target_position = target_position

    @property
    def account(self):
        """Gets the account of this TwapUpdateParameters.  # noqa: E501

        Account to trade. For the list of avaialble accounts, query [/v1/exchanges](#/General/exchanges). Only settable for an existing strategy when in state NEW   # noqa: E501

        :return: The account of this TwapUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TwapUpdateParameters.

        Account to trade. For the list of avaialble accounts, query [/v1/exchanges](#/General/exchanges). Only settable for an existing strategy when in state NEW   # noqa: E501

        :param account: The account of this TwapUpdateParameters.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def aggression_cap(self):
        """Gets the aggression_cap of this TwapUpdateParameters.  # noqa: E501

        Distance from the current step's target when aggressive execution stops and passive execution continues. Expressed in percentage points of the full quantity target. Used in conjunction with aggressionFloor. Must be within [0,100] or, most strictly, [0, aggressionFloor]. Set to 0 for aggressive execution all the way to the current step's target. Set close to aggressionFloor for minimal but frequent taker execution. Settable for an existing strategy in all states.  # noqa: E501

        :return: The aggression_cap of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._aggression_cap

    @aggression_cap.setter
    def aggression_cap(self, aggression_cap):
        """Sets the aggression_cap of this TwapUpdateParameters.

        Distance from the current step's target when aggressive execution stops and passive execution continues. Expressed in percentage points of the full quantity target. Used in conjunction with aggressionFloor. Must be within [0,100] or, most strictly, [0, aggressionFloor]. Set to 0 for aggressive execution all the way to the current step's target. Set close to aggressionFloor for minimal but frequent taker execution. Settable for an existing strategy in all states.  # noqa: E501

        :param aggression_cap: The aggression_cap of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._aggression_cap = aggression_cap

    @property
    def aggression_floor(self):
        """Gets the aggression_floor of this TwapUpdateParameters.  # noqa: E501

        Distance from the current step's target when aggressive execution takes over. Expressed in percentage points of the full quantity target. Used in conjunction with aggressionCap, and should be set close to aggressionCap to avoid large taker orders when passive execution is lagging behind the current step's target. Must be within [0,100] or, most strictly, [aggressionCap, 100]. Set to 0 for taker-only execution. Set to 100 for maker-only execution. Settable for an existing strategy in all states.  # noqa: E501

        :return: The aggression_floor of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._aggression_floor

    @aggression_floor.setter
    def aggression_floor(self, aggression_floor):
        """Sets the aggression_floor of this TwapUpdateParameters.

        Distance from the current step's target when aggressive execution takes over. Expressed in percentage points of the full quantity target. Used in conjunction with aggressionCap, and should be set close to aggressionCap to avoid large taker orders when passive execution is lagging behind the current step's target. Must be within [0,100] or, most strictly, [aggressionCap, 100]. Set to 0 for taker-only execution. Set to 100 for maker-only execution. Settable for an existing strategy in all states.  # noqa: E501

        :param aggression_floor: The aggression_floor of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._aggression_floor = aggression_floor

    @property
    def bbo_spread_limit(self):
        """Gets the bbo_spread_limit of this TwapUpdateParameters.  # noqa: E501

        Optional limit for max BBO spread. Settable for an existing strategy in all states.  # noqa: E501

        :return: The bbo_spread_limit of this TwapUpdateParameters.  # noqa: E501
        :rtype: int
        """
        return self._bbo_spread_limit

    @bbo_spread_limit.setter
    def bbo_spread_limit(self, bbo_spread_limit):
        """Sets the bbo_spread_limit of this TwapUpdateParameters.

        Optional limit for max BBO spread. Settable for an existing strategy in all states.  # noqa: E501

        :param bbo_spread_limit: The bbo_spread_limit of this TwapUpdateParameters.  # noqa: E501
        :type: int
        """

        self._bbo_spread_limit = bbo_spread_limit

    @property
    def guaranteed_execution(self):
        """Gets the guaranteed_execution of this TwapUpdateParameters.  # noqa: E501

        Ensure complete execution within scheduled execution period by executing more taker orders towards the end of the execution window (TRUE), or continue to quote the final slice until it's taken (FALSE). Settable for an existing strategy in all states.  # noqa: E501

        :return: The guaranteed_execution of this TwapUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_execution

    @guaranteed_execution.setter
    def guaranteed_execution(self, guaranteed_execution):
        """Sets the guaranteed_execution of this TwapUpdateParameters.

        Ensure complete execution within scheduled execution period by executing more taker orders towards the end of the execution window (TRUE), or continue to quote the final slice until it's taken (FALSE). Settable for an existing strategy in all states.  # noqa: E501

        :param guaranteed_execution: The guaranteed_execution of this TwapUpdateParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if guaranteed_execution not in allowed_values:
            raise ValueError(
                "Invalid value for `guaranteed_execution` ({0}), must be one of {1}"  # noqa: E501
                .format(guaranteed_execution, allowed_values)
            )

        self._guaranteed_execution = guaranteed_execution

    @property
    def instrument(self):
        """Gets the instrument of this TwapUpdateParameters.  # noqa: E501

        Instrument to trade, following symbol@exchange convention. For the list of avaialble instruments, query [/v1/instruments](#/General/instruments). Only settable for an existing strategy when in state NEW.   # noqa: E501

        :return: The instrument of this TwapUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this TwapUpdateParameters.

        Instrument to trade, following symbol@exchange convention. For the list of avaialble instruments, query [/v1/instruments](#/General/instruments). Only settable for an existing strategy when in state NEW.   # noqa: E501

        :param instrument: The instrument of this TwapUpdateParameters.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def limit_price(self):
        """Gets the limit_price of this TwapUpdateParameters.  # noqa: E501

        Optional limit price. Settable for an existing strategy in all states.  # noqa: E501

        :return: The limit_price of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this TwapUpdateParameters.

        Optional limit price. Settable for an existing strategy in all states.  # noqa: E501

        :param limit_price: The limit_price of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._limit_price = limit_price

    @property
    def max_display_size(self):
        """Gets the max_display_size of this TwapUpdateParameters.  # noqa: E501

        The maximum quantity that can be quoted in the orderbook at any one time. Settable for an existing strategy in non RUNNING state.  # noqa: E501

        :return: The max_display_size of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._max_display_size

    @max_display_size.setter
    def max_display_size(self, max_display_size):
        """Sets the max_display_size of this TwapUpdateParameters.

        The maximum quantity that can be quoted in the orderbook at any one time. Settable for an existing strategy in non RUNNING state.  # noqa: E501

        :param max_display_size: The max_display_size of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._max_display_size = max_display_size

    @property
    def scheduled_start_time(self):
        """Gets the scheduled_start_time of this TwapUpdateParameters.  # noqa: E501

        TWAP will start automatically at given start time. Only settable for an existing strategy in state NEW.  # noqa: E501

        :return: The scheduled_start_time of this TwapUpdateParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """Sets the scheduled_start_time of this TwapUpdateParameters.

        TWAP will start automatically at given start time. Only settable for an existing strategy in state NEW.  # noqa: E501

        :param scheduled_start_time: The scheduled_start_time of this TwapUpdateParameters.  # noqa: E501
        :type: datetime
        """

        self._scheduled_start_time = scheduled_start_time

    @property
    def scheduled_stop_time(self):
        """Gets the scheduled_stop_time of this TwapUpdateParameters.  # noqa: E501

        TWAP will stop automatically at given stop time. Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :return: The scheduled_stop_time of this TwapUpdateParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_stop_time

    @scheduled_stop_time.setter
    def scheduled_stop_time(self, scheduled_stop_time):
        """Sets the scheduled_stop_time of this TwapUpdateParameters.

        TWAP will stop automatically at given stop time. Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :param scheduled_stop_time: The scheduled_stop_time of this TwapUpdateParameters.  # noqa: E501
        :type: datetime
        """

        self._scheduled_stop_time = scheduled_stop_time

    @property
    def side(self):
        """Gets the side of this TwapUpdateParameters.  # noqa: E501

        Side to trade: can be buy or sell. Required when specifying a target, but overridden if using targetPosition. Only settable for an existing strategy when in state NEW or STOPPED.  # noqa: E501

        :return: The side of this TwapUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this TwapUpdateParameters.

        Side to trade: can be buy or sell. Required when specifying a target, but overridden if using targetPosition. Only settable for an existing strategy when in state NEW or STOPPED.  # noqa: E501

        :param side: The side of this TwapUpdateParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def start(self):
        """Gets the start of this TwapUpdateParameters.  # noqa: E501

        Start strategy execution immediately after submit.  # noqa: E501

        :return: The start of this TwapUpdateParameters.  # noqa: E501
        :rtype: bool
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TwapUpdateParameters.

        Start strategy execution immediately after submit.  # noqa: E501

        :param start: The start of this TwapUpdateParameters.  # noqa: E501
        :type: bool
        """

        self._start = start

    @property
    def step_size(self):
        """Gets the step_size of this TwapUpdateParameters.  # noqa: E501

        The average increment of each step of TWAP execution (subject to randomisation). Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :return: The step_size of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._step_size

    @step_size.setter
    def step_size(self, step_size):
        """Sets the step_size of this TwapUpdateParameters.

        The average increment of each step of TWAP execution (subject to randomisation). Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :param step_size: The step_size of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._step_size = step_size

    @property
    def step_time(self):
        """Gets the step_time of this TwapUpdateParameters.  # noqa: E501

        The average time delay in seconds between each step of TWAP execution. Required if no scheduledStartTime is provided. Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :return: The step_time of this TwapUpdateParameters.  # noqa: E501
        :rtype: int
        """
        return self._step_time

    @step_time.setter
    def step_time(self, step_time):
        """Sets the step_time of this TwapUpdateParameters.

        The average time delay in seconds between each step of TWAP execution. Required if no scheduledStartTime is provided. Only settable for an existing strategy in state NEW or STOPPED.  # noqa: E501

        :param step_time: The step_time of this TwapUpdateParameters.  # noqa: E501
        :type: int
        """

        self._step_time = step_time

    @property
    def target(self):
        """Gets the target of this TwapUpdateParameters.  # noqa: E501

        Full quantity of the base asset to trade. The strategy will stop when target is reached. Only settable for an existing strategy in state NEW or STOPPED. Cannot be set together with targetPosition.  # noqa: E501

        :return: The target of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this TwapUpdateParameters.

        Full quantity of the base asset to trade. The strategy will stop when target is reached. Only settable for an existing strategy in state NEW or STOPPED. Cannot be set together with targetPosition.  # noqa: E501

        :param target: The target of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._target = target

    @property
    def target_position(self):
        """Gets the target_position of this TwapUpdateParameters.  # noqa: E501

        Signed position size following successful execution of the trading algorithm. Only settable for an existing strategy in state NEW or STOPPED. Cannot be set together with target.  # noqa: E501

        :return: The target_position of this TwapUpdateParameters.  # noqa: E501
        :rtype: float
        """
        return self._target_position

    @target_position.setter
    def target_position(self, target_position):
        """Sets the target_position of this TwapUpdateParameters.

        Signed position size following successful execution of the trading algorithm. Only settable for an existing strategy in state NEW or STOPPED. Cannot be set together with target.  # noqa: E501

        :param target_position: The target_position of this TwapUpdateParameters.  # noqa: E501
        :type: float
        """

        self._target_position = target_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TwapUpdateParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TwapUpdateParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
