# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstrumentSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_currency_id': 'str',
        'display_factor': 'float',
        'exchange_id': 'str',
        'exchange_instrument_id': 'str',
        'expiration_timestamp': 'int',
        'instrument_id': 'str',
        'instrument_quantities_definition': 'InstrumentQuantitiesDefinition',
        'is_inverse': 'bool',
        'is_quanto': 'bool',
        'max_spread_tick_limit': 'float',
        'min_notional_size': 'float',
        'min_order_size': 'float',
        'multiplier': 'float',
        'notional_currency_id': 'str',
        'option_premium_currency_id': 'str',
        'option_type': 'str',
        'order_price_precision': 'float',
        'order_size_precision': 'float',
        'product_family_id': 'str',
        'product_id': 'str',
        'settlement_currency_id': 'str',
        'short_instrument_id': 'str',
        'strike': 'float',
        'term_currency_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'base_currency_id': 'baseCurrencyId',
        'display_factor': 'displayFactor',
        'exchange_id': 'exchangeId',
        'exchange_instrument_id': 'exchangeInstrumentId',
        'expiration_timestamp': 'expirationTimestamp',
        'instrument_id': 'instrumentId',
        'instrument_quantities_definition': 'instrumentQuantitiesDefinition',
        'is_inverse': 'isInverse',
        'is_quanto': 'isQuanto',
        'max_spread_tick_limit': 'maxSpreadTickLimit',
        'min_notional_size': 'minNotionalSize',
        'min_order_size': 'minOrderSize',
        'multiplier': 'multiplier',
        'notional_currency_id': 'notionalCurrencyId',
        'option_premium_currency_id': 'optionPremiumCurrencyId',
        'option_type': 'optionType',
        'order_price_precision': 'orderPricePrecision',
        'order_size_precision': 'orderSizePrecision',
        'product_family_id': 'productFamilyId',
        'product_id': 'productId',
        'settlement_currency_id': 'settlementCurrencyId',
        'short_instrument_id': 'shortInstrumentId',
        'strike': 'strike',
        'term_currency_id': 'termCurrencyId',
        'type': 'type'
    }

    def __init__(self, base_currency_id=None, display_factor=None, exchange_id=None, exchange_instrument_id=None, expiration_timestamp=None, instrument_id=None, instrument_quantities_definition=None, is_inverse=None, is_quanto=None, max_spread_tick_limit=None, min_notional_size=None, min_order_size=None, multiplier=None, notional_currency_id=None, option_premium_currency_id=None, option_type=None, order_price_precision=None, order_size_precision=None, product_family_id=None, product_id=None, settlement_currency_id=None, short_instrument_id=None, strike=None, term_currency_id=None, type=None):  # noqa: E501
        """InstrumentSpecification - a model defined in Swagger"""  # noqa: E501
        self._base_currency_id = None
        self._display_factor = None
        self._exchange_id = None
        self._exchange_instrument_id = None
        self._expiration_timestamp = None
        self._instrument_id = None
        self._instrument_quantities_definition = None
        self._is_inverse = None
        self._is_quanto = None
        self._max_spread_tick_limit = None
        self._min_notional_size = None
        self._min_order_size = None
        self._multiplier = None
        self._notional_currency_id = None
        self._option_premium_currency_id = None
        self._option_type = None
        self._order_price_precision = None
        self._order_size_precision = None
        self._product_family_id = None
        self._product_id = None
        self._settlement_currency_id = None
        self._short_instrument_id = None
        self._strike = None
        self._term_currency_id = None
        self._type = None
        self.discriminator = None
        if base_currency_id is not None:
            self.base_currency_id = base_currency_id
        if display_factor is not None:
            self.display_factor = display_factor
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange_instrument_id is not None:
            self.exchange_instrument_id = exchange_instrument_id
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if instrument_id is not None:
            self.instrument_id = instrument_id
        if instrument_quantities_definition is not None:
            self.instrument_quantities_definition = instrument_quantities_definition
        if is_inverse is not None:
            self.is_inverse = is_inverse
        if is_quanto is not None:
            self.is_quanto = is_quanto
        if max_spread_tick_limit is not None:
            self.max_spread_tick_limit = max_spread_tick_limit
        if min_notional_size is not None:
            self.min_notional_size = min_notional_size
        if min_order_size is not None:
            self.min_order_size = min_order_size
        if multiplier is not None:
            self.multiplier = multiplier
        if notional_currency_id is not None:
            self.notional_currency_id = notional_currency_id
        if option_premium_currency_id is not None:
            self.option_premium_currency_id = option_premium_currency_id
        if option_type is not None:
            self.option_type = option_type
        if order_price_precision is not None:
            self.order_price_precision = order_price_precision
        if order_size_precision is not None:
            self.order_size_precision = order_size_precision
        if product_family_id is not None:
            self.product_family_id = product_family_id
        if product_id is not None:
            self.product_id = product_id
        if settlement_currency_id is not None:
            self.settlement_currency_id = settlement_currency_id
        if short_instrument_id is not None:
            self.short_instrument_id = short_instrument_id
        if strike is not None:
            self.strike = strike
        if term_currency_id is not None:
            self.term_currency_id = term_currency_id
        if type is not None:
            self.type = type

    @property
    def base_currency_id(self):
        """Gets the base_currency_id of this InstrumentSpecification.  # noqa: E501


        :return: The base_currency_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_id

    @base_currency_id.setter
    def base_currency_id(self, base_currency_id):
        """Sets the base_currency_id of this InstrumentSpecification.


        :param base_currency_id: The base_currency_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._base_currency_id = base_currency_id

    @property
    def display_factor(self):
        """Gets the display_factor of this InstrumentSpecification.  # noqa: E501


        :return: The display_factor of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._display_factor

    @display_factor.setter
    def display_factor(self, display_factor):
        """Sets the display_factor of this InstrumentSpecification.


        :param display_factor: The display_factor of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._display_factor = display_factor

    @property
    def exchange_id(self):
        """Gets the exchange_id of this InstrumentSpecification.  # noqa: E501


        :return: The exchange_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this InstrumentSpecification.


        :param exchange_id: The exchange_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange_instrument_id(self):
        """Gets the exchange_instrument_id of this InstrumentSpecification.  # noqa: E501


        :return: The exchange_instrument_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._exchange_instrument_id

    @exchange_instrument_id.setter
    def exchange_instrument_id(self, exchange_instrument_id):
        """Sets the exchange_instrument_id of this InstrumentSpecification.


        :param exchange_instrument_id: The exchange_instrument_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._exchange_instrument_id = exchange_instrument_id

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this InstrumentSpecification.  # noqa: E501


        :return: The expiration_timestamp of this InstrumentSpecification.  # noqa: E501
        :rtype: int
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this InstrumentSpecification.


        :param expiration_timestamp: The expiration_timestamp of this InstrumentSpecification.  # noqa: E501
        :type: int
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def instrument_id(self):
        """Gets the instrument_id of this InstrumentSpecification.  # noqa: E501


        :return: The instrument_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this InstrumentSpecification.


        :param instrument_id: The instrument_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._instrument_id = instrument_id

    @property
    def instrument_quantities_definition(self):
        """Gets the instrument_quantities_definition of this InstrumentSpecification.  # noqa: E501


        :return: The instrument_quantities_definition of this InstrumentSpecification.  # noqa: E501
        :rtype: InstrumentQuantitiesDefinition
        """
        return self._instrument_quantities_definition

    @instrument_quantities_definition.setter
    def instrument_quantities_definition(self, instrument_quantities_definition):
        """Sets the instrument_quantities_definition of this InstrumentSpecification.


        :param instrument_quantities_definition: The instrument_quantities_definition of this InstrumentSpecification.  # noqa: E501
        :type: InstrumentQuantitiesDefinition
        """

        self._instrument_quantities_definition = instrument_quantities_definition

    @property
    def is_inverse(self):
        """Gets the is_inverse of this InstrumentSpecification.  # noqa: E501


        :return: The is_inverse of this InstrumentSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._is_inverse

    @is_inverse.setter
    def is_inverse(self, is_inverse):
        """Sets the is_inverse of this InstrumentSpecification.


        :param is_inverse: The is_inverse of this InstrumentSpecification.  # noqa: E501
        :type: bool
        """

        self._is_inverse = is_inverse

    @property
    def is_quanto(self):
        """Gets the is_quanto of this InstrumentSpecification.  # noqa: E501


        :return: The is_quanto of this InstrumentSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._is_quanto

    @is_quanto.setter
    def is_quanto(self, is_quanto):
        """Sets the is_quanto of this InstrumentSpecification.


        :param is_quanto: The is_quanto of this InstrumentSpecification.  # noqa: E501
        :type: bool
        """

        self._is_quanto = is_quanto

    @property
    def max_spread_tick_limit(self):
        """Gets the max_spread_tick_limit of this InstrumentSpecification.  # noqa: E501


        :return: The max_spread_tick_limit of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._max_spread_tick_limit

    @max_spread_tick_limit.setter
    def max_spread_tick_limit(self, max_spread_tick_limit):
        """Sets the max_spread_tick_limit of this InstrumentSpecification.


        :param max_spread_tick_limit: The max_spread_tick_limit of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._max_spread_tick_limit = max_spread_tick_limit

    @property
    def min_notional_size(self):
        """Gets the min_notional_size of this InstrumentSpecification.  # noqa: E501


        :return: The min_notional_size of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._min_notional_size

    @min_notional_size.setter
    def min_notional_size(self, min_notional_size):
        """Sets the min_notional_size of this InstrumentSpecification.


        :param min_notional_size: The min_notional_size of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._min_notional_size = min_notional_size

    @property
    def min_order_size(self):
        """Gets the min_order_size of this InstrumentSpecification.  # noqa: E501


        :return: The min_order_size of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._min_order_size

    @min_order_size.setter
    def min_order_size(self, min_order_size):
        """Sets the min_order_size of this InstrumentSpecification.


        :param min_order_size: The min_order_size of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._min_order_size = min_order_size

    @property
    def multiplier(self):
        """Gets the multiplier of this InstrumentSpecification.  # noqa: E501


        :return: The multiplier of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this InstrumentSpecification.


        :param multiplier: The multiplier of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def notional_currency_id(self):
        """Gets the notional_currency_id of this InstrumentSpecification.  # noqa: E501


        :return: The notional_currency_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._notional_currency_id

    @notional_currency_id.setter
    def notional_currency_id(self, notional_currency_id):
        """Sets the notional_currency_id of this InstrumentSpecification.


        :param notional_currency_id: The notional_currency_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._notional_currency_id = notional_currency_id

    @property
    def option_premium_currency_id(self):
        """Gets the option_premium_currency_id of this InstrumentSpecification.  # noqa: E501


        :return: The option_premium_currency_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._option_premium_currency_id

    @option_premium_currency_id.setter
    def option_premium_currency_id(self, option_premium_currency_id):
        """Sets the option_premium_currency_id of this InstrumentSpecification.


        :param option_premium_currency_id: The option_premium_currency_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._option_premium_currency_id = option_premium_currency_id

    @property
    def option_type(self):
        """Gets the option_type of this InstrumentSpecification.  # noqa: E501


        :return: The option_type of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this InstrumentSpecification.


        :param option_type: The option_type of this InstrumentSpecification.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUT", "CALL", "OPTION", "COMBO", "UNKNOWN"]  # noqa: E501
        if option_type not in allowed_values:
            raise ValueError(
                "Invalid value for `option_type` ({0}), must be one of {1}"  # noqa: E501
                .format(option_type, allowed_values)
            )

        self._option_type = option_type

    @property
    def order_price_precision(self):
        """Gets the order_price_precision of this InstrumentSpecification.  # noqa: E501


        :return: The order_price_precision of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._order_price_precision

    @order_price_precision.setter
    def order_price_precision(self, order_price_precision):
        """Sets the order_price_precision of this InstrumentSpecification.


        :param order_price_precision: The order_price_precision of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._order_price_precision = order_price_precision

    @property
    def order_size_precision(self):
        """Gets the order_size_precision of this InstrumentSpecification.  # noqa: E501


        :return: The order_size_precision of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._order_size_precision

    @order_size_precision.setter
    def order_size_precision(self, order_size_precision):
        """Sets the order_size_precision of this InstrumentSpecification.


        :param order_size_precision: The order_size_precision of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._order_size_precision = order_size_precision

    @property
    def product_family_id(self):
        """Gets the product_family_id of this InstrumentSpecification.  # noqa: E501


        :return: The product_family_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._product_family_id

    @product_family_id.setter
    def product_family_id(self, product_family_id):
        """Sets the product_family_id of this InstrumentSpecification.


        :param product_family_id: The product_family_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._product_family_id = product_family_id

    @property
    def product_id(self):
        """Gets the product_id of this InstrumentSpecification.  # noqa: E501


        :return: The product_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InstrumentSpecification.


        :param product_id: The product_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def settlement_currency_id(self):
        """Gets the settlement_currency_id of this InstrumentSpecification.  # noqa: E501


        :return: The settlement_currency_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._settlement_currency_id

    @settlement_currency_id.setter
    def settlement_currency_id(self, settlement_currency_id):
        """Sets the settlement_currency_id of this InstrumentSpecification.


        :param settlement_currency_id: The settlement_currency_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._settlement_currency_id = settlement_currency_id

    @property
    def short_instrument_id(self):
        """Gets the short_instrument_id of this InstrumentSpecification.  # noqa: E501


        :return: The short_instrument_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._short_instrument_id

    @short_instrument_id.setter
    def short_instrument_id(self, short_instrument_id):
        """Sets the short_instrument_id of this InstrumentSpecification.


        :param short_instrument_id: The short_instrument_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._short_instrument_id = short_instrument_id

    @property
    def strike(self):
        """Gets the strike of this InstrumentSpecification.  # noqa: E501


        :return: The strike of this InstrumentSpecification.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this InstrumentSpecification.


        :param strike: The strike of this InstrumentSpecification.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def term_currency_id(self):
        """Gets the term_currency_id of this InstrumentSpecification.  # noqa: E501


        :return: The term_currency_id of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._term_currency_id

    @term_currency_id.setter
    def term_currency_id(self, term_currency_id):
        """Sets the term_currency_id of this InstrumentSpecification.


        :param term_currency_id: The term_currency_id of this InstrumentSpecification.  # noqa: E501
        :type: str
        """

        self._term_currency_id = term_currency_id

    @property
    def type(self):
        """Gets the type of this InstrumentSpecification.  # noqa: E501


        :return: The type of this InstrumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InstrumentSpecification.


        :param type: The type of this InstrumentSpecification.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUTURE", "OPTION", "MARGIN", "SPOT", "SYNTHETIC", "UNKNOWN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstrumentSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
