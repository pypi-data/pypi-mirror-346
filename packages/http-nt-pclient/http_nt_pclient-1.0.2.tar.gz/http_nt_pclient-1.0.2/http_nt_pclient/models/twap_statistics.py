# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TwapStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_execution_price': 'float',
        'bbo_tick_width': 'int',
        'behind': 'float',
        'initial_best_bid': 'float',
        'initial_best_offer': 'float',
        'progress': 'float',
        'quoted': 'float',
        'traded': 'float',
        'twap_price': 'float'
    }

    attribute_map = {
        'average_execution_price': 'averageExecutionPrice',
        'bbo_tick_width': 'bboTickWidth',
        'behind': 'behind',
        'initial_best_bid': 'initialBestBid',
        'initial_best_offer': 'initialBestOffer',
        'progress': 'progress',
        'quoted': 'quoted',
        'traded': 'traded',
        'twap_price': 'twapPrice'
    }

    def __init__(self, average_execution_price=None, bbo_tick_width=None, behind=None, initial_best_bid=None, initial_best_offer=None, progress=None, quoted=None, traded=None, twap_price=None):  # noqa: E501
        """TwapStatistics - a model defined in Swagger"""  # noqa: E501
        self._average_execution_price = None
        self._bbo_tick_width = None
        self._behind = None
        self._initial_best_bid = None
        self._initial_best_offer = None
        self._progress = None
        self._quoted = None
        self._traded = None
        self._twap_price = None
        self.discriminator = None
        if average_execution_price is not None:
            self.average_execution_price = average_execution_price
        if bbo_tick_width is not None:
            self.bbo_tick_width = bbo_tick_width
        if behind is not None:
            self.behind = behind
        if initial_best_bid is not None:
            self.initial_best_bid = initial_best_bid
        if initial_best_offer is not None:
            self.initial_best_offer = initial_best_offer
        if progress is not None:
            self.progress = progress
        if quoted is not None:
            self.quoted = quoted
        if traded is not None:
            self.traded = traded
        if twap_price is not None:
            self.twap_price = twap_price

    @property
    def average_execution_price(self):
        """Gets the average_execution_price of this TwapStatistics.  # noqa: E501

        Average price of filled orders (filled amount / filled qty).  # noqa: E501

        :return: The average_execution_price of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._average_execution_price

    @average_execution_price.setter
    def average_execution_price(self, average_execution_price):
        """Sets the average_execution_price of this TwapStatistics.

        Average price of filled orders (filled amount / filled qty).  # noqa: E501

        :param average_execution_price: The average_execution_price of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._average_execution_price = average_execution_price

    @property
    def bbo_tick_width(self):
        """Gets the bbo_tick_width of this TwapStatistics.  # noqa: E501

        The current width between the Best Bid and Best Offer in ticks.  # noqa: E501

        :return: The bbo_tick_width of this TwapStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bbo_tick_width

    @bbo_tick_width.setter
    def bbo_tick_width(self, bbo_tick_width):
        """Sets the bbo_tick_width of this TwapStatistics.

        The current width between the Best Bid and Best Offer in ticks.  # noqa: E501

        :param bbo_tick_width: The bbo_tick_width of this TwapStatistics.  # noqa: E501
        :type: int
        """

        self._bbo_tick_width = bbo_tick_width

    @property
    def behind(self):
        """Gets the behind of this TwapStatistics.  # noqa: E501

        (quoted-traded) / target, behind = 0% means execution is on track, behind > 0% means execution is slower.  # noqa: E501

        :return: The behind of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._behind

    @behind.setter
    def behind(self, behind):
        """Sets the behind of this TwapStatistics.

        (quoted-traded) / target, behind = 0% means execution is on track, behind > 0% means execution is slower.  # noqa: E501

        :param behind: The behind of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._behind = behind

    @property
    def initial_best_bid(self):
        """Gets the initial_best_bid of this TwapStatistics.  # noqa: E501

        Initial best bid  # noqa: E501

        :return: The initial_best_bid of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._initial_best_bid

    @initial_best_bid.setter
    def initial_best_bid(self, initial_best_bid):
        """Sets the initial_best_bid of this TwapStatistics.

        Initial best bid  # noqa: E501

        :param initial_best_bid: The initial_best_bid of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._initial_best_bid = initial_best_bid

    @property
    def initial_best_offer(self):
        """Gets the initial_best_offer of this TwapStatistics.  # noqa: E501

        Initial best offer  # noqa: E501

        :return: The initial_best_offer of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._initial_best_offer

    @initial_best_offer.setter
    def initial_best_offer(self, initial_best_offer):
        """Sets the initial_best_offer of this TwapStatistics.

        Initial best offer  # noqa: E501

        :param initial_best_offer: The initial_best_offer of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._initial_best_offer = initial_best_offer

    @property
    def progress(self):
        """Gets the progress of this TwapStatistics.  # noqa: E501

        Traded / target percentage.  # noqa: E501

        :return: The progress of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TwapStatistics.

        Traded / target percentage.  # noqa: E501

        :param progress: The progress of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def quoted(self):
        """Gets the quoted of this TwapStatistics.  # noqa: E501

        Total quantity of filled and open (submitted) orders, increasing on each TWAP step.  # noqa: E501

        :return: The quoted of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._quoted

    @quoted.setter
    def quoted(self, quoted):
        """Sets the quoted of this TwapStatistics.

        Total quantity of filled and open (submitted) orders, increasing on each TWAP step.  # noqa: E501

        :param quoted: The quoted of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._quoted = quoted

    @property
    def traded(self):
        """Gets the traded of this TwapStatistics.  # noqa: E501

        Total quantity of filled orders.  # noqa: E501

        :return: The traded of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._traded

    @traded.setter
    def traded(self, traded):
        """Sets the traded of this TwapStatistics.

        Total quantity of filled orders.  # noqa: E501

        :param traded: The traded of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._traded = traded

    @property
    def twap_price(self):
        """Gets the twap_price of this TwapStatistics.  # noqa: E501

        Average order book mid price during the execution (sampled on 1sec intervals).  # noqa: E501

        :return: The twap_price of this TwapStatistics.  # noqa: E501
        :rtype: float
        """
        return self._twap_price

    @twap_price.setter
    def twap_price(self, twap_price):
        """Sets the twap_price of this TwapStatistics.

        Average order book mid price during the execution (sampled on 1sec intervals).  # noqa: E501

        :param twap_price: The twap_price of this TwapStatistics.  # noqa: E501
        :type: float
        """

        self._twap_price = twap_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TwapStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TwapStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
