# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LimitBreachedInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'limit': 'float',
        'limit_breached_for': 'str',
        'message': 'str',
        'owned_position_size': 'float',
        'potential_position_size': 'float',
        'strategies': 'list[str]',
        'strategies_instruments': 'list[str]',
        'strategies_target': 'float'
    }

    attribute_map = {
        'id': 'id',
        'limit': 'limit',
        'limit_breached_for': 'limitBreachedFor',
        'message': 'message',
        'owned_position_size': 'ownedPositionSize',
        'potential_position_size': 'potentialPositionSize',
        'strategies': 'strategies',
        'strategies_instruments': 'strategiesInstruments',
        'strategies_target': 'strategiesTarget'
    }

    def __init__(self, id=None, limit=None, limit_breached_for=None, message=None, owned_position_size=None, potential_position_size=None, strategies=None, strategies_instruments=None, strategies_target=None):  # noqa: E501
        """LimitBreachedInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._limit = None
        self._limit_breached_for = None
        self._message = None
        self._owned_position_size = None
        self._potential_position_size = None
        self._strategies = None
        self._strategies_instruments = None
        self._strategies_target = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if limit is not None:
            self.limit = limit
        if limit_breached_for is not None:
            self.limit_breached_for = limit_breached_for
        if message is not None:
            self.message = message
        if owned_position_size is not None:
            self.owned_position_size = owned_position_size
        if potential_position_size is not None:
            self.potential_position_size = potential_position_size
        if strategies is not None:
            self.strategies = strategies
        if strategies_instruments is not None:
            self.strategies_instruments = strategies_instruments
        if strategies_target is not None:
            self.strategies_target = strategies_target

    @property
    def id(self):
        """Gets the id of this LimitBreachedInfo.  # noqa: E501


        :return: The id of this LimitBreachedInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LimitBreachedInfo.


        :param id: The id of this LimitBreachedInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this LimitBreachedInfo.  # noqa: E501


        :return: The limit of this LimitBreachedInfo.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this LimitBreachedInfo.


        :param limit: The limit of this LimitBreachedInfo.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def limit_breached_for(self):
        """Gets the limit_breached_for of this LimitBreachedInfo.  # noqa: E501


        :return: The limit_breached_for of this LimitBreachedInfo.  # noqa: E501
        :rtype: str
        """
        return self._limit_breached_for

    @limit_breached_for.setter
    def limit_breached_for(self, limit_breached_for):
        """Sets the limit_breached_for of this LimitBreachedInfo.


        :param limit_breached_for: The limit_breached_for of this LimitBreachedInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONTRACT", "PRODUCT", "FAMILY"]  # noqa: E501
        if limit_breached_for not in allowed_values:
            raise ValueError(
                "Invalid value for `limit_breached_for` ({0}), must be one of {1}"  # noqa: E501
                .format(limit_breached_for, allowed_values)
            )

        self._limit_breached_for = limit_breached_for

    @property
    def message(self):
        """Gets the message of this LimitBreachedInfo.  # noqa: E501


        :return: The message of this LimitBreachedInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LimitBreachedInfo.


        :param message: The message of this LimitBreachedInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def owned_position_size(self):
        """Gets the owned_position_size of this LimitBreachedInfo.  # noqa: E501


        :return: The owned_position_size of this LimitBreachedInfo.  # noqa: E501
        :rtype: float
        """
        return self._owned_position_size

    @owned_position_size.setter
    def owned_position_size(self, owned_position_size):
        """Sets the owned_position_size of this LimitBreachedInfo.


        :param owned_position_size: The owned_position_size of this LimitBreachedInfo.  # noqa: E501
        :type: float
        """

        self._owned_position_size = owned_position_size

    @property
    def potential_position_size(self):
        """Gets the potential_position_size of this LimitBreachedInfo.  # noqa: E501


        :return: The potential_position_size of this LimitBreachedInfo.  # noqa: E501
        :rtype: float
        """
        return self._potential_position_size

    @potential_position_size.setter
    def potential_position_size(self, potential_position_size):
        """Sets the potential_position_size of this LimitBreachedInfo.


        :param potential_position_size: The potential_position_size of this LimitBreachedInfo.  # noqa: E501
        :type: float
        """

        self._potential_position_size = potential_position_size

    @property
    def strategies(self):
        """Gets the strategies of this LimitBreachedInfo.  # noqa: E501


        :return: The strategies of this LimitBreachedInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._strategies

    @strategies.setter
    def strategies(self, strategies):
        """Sets the strategies of this LimitBreachedInfo.


        :param strategies: The strategies of this LimitBreachedInfo.  # noqa: E501
        :type: list[str]
        """

        self._strategies = strategies

    @property
    def strategies_instruments(self):
        """Gets the strategies_instruments of this LimitBreachedInfo.  # noqa: E501


        :return: The strategies_instruments of this LimitBreachedInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._strategies_instruments

    @strategies_instruments.setter
    def strategies_instruments(self, strategies_instruments):
        """Sets the strategies_instruments of this LimitBreachedInfo.


        :param strategies_instruments: The strategies_instruments of this LimitBreachedInfo.  # noqa: E501
        :type: list[str]
        """

        self._strategies_instruments = strategies_instruments

    @property
    def strategies_target(self):
        """Gets the strategies_target of this LimitBreachedInfo.  # noqa: E501


        :return: The strategies_target of this LimitBreachedInfo.  # noqa: E501
        :rtype: float
        """
        return self._strategies_target

    @strategies_target.setter
    def strategies_target(self, strategies_target):
        """Sets the strategies_target of this LimitBreachedInfo.


        :param strategies_target: The strategies_target of this LimitBreachedInfo.  # noqa: E501
        :type: float
        """

        self._strategies_target = strategies_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LimitBreachedInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitBreachedInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
