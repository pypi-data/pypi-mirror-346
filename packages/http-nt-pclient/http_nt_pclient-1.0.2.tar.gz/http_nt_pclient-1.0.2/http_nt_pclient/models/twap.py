# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Twap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'parameters': 'TwapParameters',
        'site': 'str',
        'state': 'str',
        'state_description': 'str'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'parameters': 'parameters',
        'site': 'site',
        'state': 'state',
        'state_description': 'stateDescription'
    }

    def __init__(self, execution_id=None, parameters=None, site=None, state=None, state_description=None):  # noqa: E501
        """Twap - a model defined in Swagger"""  # noqa: E501
        self._execution_id = None
        self._parameters = None
        self._site = None
        self._state = None
        self._state_description = None
        self.discriminator = None
        if execution_id is not None:
            self.execution_id = execution_id
        if parameters is not None:
            self.parameters = parameters
        if site is not None:
            self.site = site
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description

    @property
    def execution_id(self):
        """Gets the execution_id of this Twap.  # noqa: E501


        :return: The execution_id of this Twap.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this Twap.


        :param execution_id: The execution_id of this Twap.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def parameters(self):
        """Gets the parameters of this Twap.  # noqa: E501


        :return: The parameters of this Twap.  # noqa: E501
        :rtype: TwapParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Twap.


        :param parameters: The parameters of this Twap.  # noqa: E501
        :type: TwapParameters
        """

        self._parameters = parameters

    @property
    def site(self):
        """Gets the site of this Twap.  # noqa: E501


        :return: The site of this Twap.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Twap.


        :param site: The site of this Twap.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def state(self):
        """Gets the state of this Twap.  # noqa: E501


        :return: The state of this Twap.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Twap.


        :param state: The state of this Twap.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "RUNNING", "PAUSED", "STOPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this Twap.  # noqa: E501

        Best-efforts, human-readable description of the reason why the strategy is in its current state.  # noqa: E501

        :return: The state_description of this Twap.  # noqa: E501
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this Twap.

        Best-efforts, human-readable description of the reason why the strategy is in its current state.  # noqa: E501

        :param state_description: The state_description of this Twap.  # noqa: E501
        :type: str
        """

        self._state_description = state_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Twap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Twap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
