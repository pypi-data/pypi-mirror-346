# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstrumentQuantitiesDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_asset_multiplier': 'float',
        'term_asset_multiplier': 'float',
        'usd_multiplier': 'float'
    }

    attribute_map = {
        'base_asset_multiplier': 'baseAssetMultiplier',
        'term_asset_multiplier': 'termAssetMultiplier',
        'usd_multiplier': 'usdMultiplier'
    }

    def __init__(self, base_asset_multiplier=None, term_asset_multiplier=None, usd_multiplier=None):  # noqa: E501
        """InstrumentQuantitiesDefinition - a model defined in Swagger"""  # noqa: E501
        self._base_asset_multiplier = None
        self._term_asset_multiplier = None
        self._usd_multiplier = None
        self.discriminator = None
        if base_asset_multiplier is not None:
            self.base_asset_multiplier = base_asset_multiplier
        if term_asset_multiplier is not None:
            self.term_asset_multiplier = term_asset_multiplier
        if usd_multiplier is not None:
            self.usd_multiplier = usd_multiplier

    @property
    def base_asset_multiplier(self):
        """Gets the base_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501


        :return: The base_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :rtype: float
        """
        return self._base_asset_multiplier

    @base_asset_multiplier.setter
    def base_asset_multiplier(self, base_asset_multiplier):
        """Sets the base_asset_multiplier of this InstrumentQuantitiesDefinition.


        :param base_asset_multiplier: The base_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :type: float
        """

        self._base_asset_multiplier = base_asset_multiplier

    @property
    def term_asset_multiplier(self):
        """Gets the term_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501


        :return: The term_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :rtype: float
        """
        return self._term_asset_multiplier

    @term_asset_multiplier.setter
    def term_asset_multiplier(self, term_asset_multiplier):
        """Sets the term_asset_multiplier of this InstrumentQuantitiesDefinition.


        :param term_asset_multiplier: The term_asset_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :type: float
        """

        self._term_asset_multiplier = term_asset_multiplier

    @property
    def usd_multiplier(self):
        """Gets the usd_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501


        :return: The usd_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :rtype: float
        """
        return self._usd_multiplier

    @usd_multiplier.setter
    def usd_multiplier(self, usd_multiplier):
        """Sets the usd_multiplier of this InstrumentQuantitiesDefinition.


        :param usd_multiplier: The usd_multiplier of this InstrumentQuantitiesDefinition.  # noqa: E501
        :type: float
        """

        self._usd_multiplier = usd_multiplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstrumentQuantitiesDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentQuantitiesDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
