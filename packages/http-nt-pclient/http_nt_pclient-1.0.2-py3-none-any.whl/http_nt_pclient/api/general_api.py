# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from http_nt_pclient.api_client import ApiClient


class GeneralApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exchanges(self, site, **kwargs):  # noqa: E501
        """Returns list of available exchanges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchanges(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchanges_with_http_info(site, **kwargs)  # noqa: E501
        else:
            (data) = self.exchanges_with_http_info(site, **kwargs)  # noqa: E501
            return data

    def exchanges_with_http_info(self, site, **kwargs):  # noqa: E501
        """Returns list of available exchanges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchanges_with_http_info(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchanges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `exchanges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/exchanges/{site}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exposures(self, **kwargs):  # noqa: E501
        """Returns a list of the exposures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exposures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ExposureDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exposures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exposures_with_http_info(**kwargs)  # noqa: E501
            return data

    def exposures_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of the exposures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exposures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ExposureDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exposures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/exposures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExposureDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exposures_for_account(self, account_id, **kwargs):  # noqa: E501
        """Returns a list of the exposures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exposures_for_account(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: An exchange account id (required)
        :return: list[ExposureDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exposures_for_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exposures_for_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def exposures_for_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Returns a list of the exposures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exposures_for_account_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: An exchange account id (required)
        :return: list[ExposureDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exposures_for_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `exposures_for_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/exposures/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExposureDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments(self, site, exchange, **kwargs):  # noqa: E501
        """Returns list of available instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments(site, exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str exchange: Exchange, see [/v1/exchanges](#/General/exchanges) (required)
        :return: list[InstrumentSpecification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_with_http_info(site, exchange, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_with_http_info(site, exchange, **kwargs)  # noqa: E501
            return data

    def instruments_with_http_info(self, site, exchange, **kwargs):  # noqa: E501
        """Returns list of available instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_with_http_info(site, exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str exchange: Exchange, see [/v1/exchanges](#/General/exchanges) (required)
        :return: list[InstrumentSpecification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site', 'exchange']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `instruments`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `instruments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/instruments/{site}/{exchange}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InstrumentSpecification]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def limits(self, site, exchange, account_id, **kwargs):  # noqa: E501
        """Returns user limits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.limits(site, exchange, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str exchange: Exchange, see [/v1/exchanges](#/General/exchanges) (required)
        :param str account_id: An exchange account id (required)
        :return: list[LimitResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.limits_with_http_info(site, exchange, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.limits_with_http_info(site, exchange, account_id, **kwargs)  # noqa: E501
            return data

    def limits_with_http_info(self, site, exchange, account_id, **kwargs):  # noqa: E501
        """Returns user limits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.limits_with_http_info(site, exchange, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str exchange: Exchange, see [/v1/exchanges](#/General/exchanges) (required)
        :param str account_id: An exchange account id (required)
        :return: list[LimitResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site', 'exchange', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `limits`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `limits`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/limits/{site}/{exchange}/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LimitResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites(self, **kwargs):  # noqa: E501
        """Returns list of available Nickel Trader instances (sites)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Sites
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def sites_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of available Nickel Trader instances (sites)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Sites
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sites',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
