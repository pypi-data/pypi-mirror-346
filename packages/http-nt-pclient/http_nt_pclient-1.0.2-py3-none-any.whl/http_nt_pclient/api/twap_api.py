# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from http_nt_pclient.api_client import ApiClient


class TWAPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Create twap strategy instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. If an existing identifier is provided, the request will be unsuccessful.  (required)
        :return: Twap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Create twap strategy instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. If an existing identifier is provided, the request will be unsuccessful.  (required)
        :return: Twap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `create`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}/{executionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Twap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multi(self, body, site, **kwargs):  # noqa: E501
        """Create multiple twap strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multi(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapCreateControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multi_with_http_info(body, site, **kwargs)  # noqa: E501
        else:
            (data) = self.create_multi_with_http_info(body, site, **kwargs)  # noqa: E501
            return data

    def create_multi_with_http_info(self, body, site, **kwargs):  # noqa: E501
        """Create multiple twap strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multi_with_http_info(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapCreateControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_multi`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `create_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapCreateControllerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Replace twap strategy instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. If an existing identifier is provided, the current strategy request will overwrite the previously stored strategy. Conversely, if the provided identifier is not found, the request will be unsuccessful.  (required)
        :return: TwapReplaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
            return data

    def replace_with_http_info(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Replace twap strategy instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_with_http_info(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. If an existing identifier is provided, the current strategy request will overwrite the previously stored strategy. Conversely, if the provided identifier is not found, the request will be unsuccessful.  (required)
        :return: TwapReplaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `replace`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `replace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}/{executionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapReplaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_multi(self, body, site, **kwargs):  # noqa: E501
        """Replace multiple twap strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_multi(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapReplaceControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_multi_with_http_info(body, site, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_multi_with_http_info(body, site, **kwargs)  # noqa: E501
            return data

    def replace_multi_with_http_info(self, body, site, **kwargs):  # noqa: E501
        """Replace multiple twap strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_multi_with_http_info(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapReplaceControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_multi`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `replace_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapReplaceControllerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def twap_strategies(self, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TwapWithStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.twap_strategies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.twap_strategies_with_http_info(**kwargs)  # noqa: E501
            return data

    def twap_strategies_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TwapWithStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method twap_strategies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TwapWithStatistics]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def twap_strategies_for_site(self, site, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategies_for_site(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: list[TwapWithStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.twap_strategies_for_site_with_http_info(site, **kwargs)  # noqa: E501
        else:
            (data) = self.twap_strategies_for_site_with_http_info(site, **kwargs)  # noqa: E501
            return data

    def twap_strategies_for_site_with_http_info(self, site, **kwargs):  # noqa: E501
        """Returns list of user strategies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategies_for_site_with_http_info(site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: list[TwapWithStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method twap_strategies_for_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `twap_strategies_for_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TwapWithStatistics]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def twap_strategy(self, site, execution_id, **kwargs):  # noqa: E501
        """Return TWAP strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategy(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. (required)
        :return: TwapWithStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.twap_strategy_with_http_info(site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.twap_strategy_with_http_info(site, execution_id, **kwargs)  # noqa: E501
            return data

    def twap_strategy_with_http_info(self, site, execution_id, **kwargs):  # noqa: E501
        """Return TWAP strategy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.twap_strategy_with_http_info(site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. (required)
        :return: TwapWithStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method twap_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `twap_strategy`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `twap_strategy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}/{executionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapWithStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Update existing TWAP strategy parameters. Updates only fields provided in request body  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapUpdateParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. (required)
        :return: TwapWithStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(body, site, execution_id, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, body, site, execution_id, **kwargs):  # noqa: E501
        """Update existing TWAP strategy parameters. Updates only fields provided in request body  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(body, site, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TwapUpdateParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :param str execution_id: A user-generated unique identifier for the strategy, restricted to a maximum of 8 alphanumerical characters. (required)
        :return: TwapWithStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `update`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}/{executionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapWithStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_multi(self, body, site, **kwargs):  # noqa: E501
        """Update existing multiple TWAP strategy parameters. Updates only fields provided in request body  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multi(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapUpdateParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapUpdateControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_multi_with_http_info(body, site, **kwargs)  # noqa: E501
        else:
            (data) = self.update_multi_with_http_info(body, site, **kwargs)  # noqa: E501
            return data

    def update_multi_with_http_info(self, body, site, **kwargs):  # noqa: E501
        """Update existing multiple TWAP strategy parameters. Updates only fields provided in request body  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multi_with_http_info(body, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultipleTwapUpdateParameters body: (required)
        :param str site: Instance of Nickel Trader used for the execution. One or more can be available. For the list of available sites, query [/v1/sites](#/General/sites).  (required)
        :return: TwapUpdateControllerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_multi`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `update_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/strategy/twap/{site}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TwapUpdateControllerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
