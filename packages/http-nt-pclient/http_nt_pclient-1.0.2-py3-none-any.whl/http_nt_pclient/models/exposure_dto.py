# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExposureDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'avg_entry_price': 'float',
        'base_currency_id': 'str',
        'currency_id': 'str',
        'delta': 'float',
        'exchange_account_id': 'str',
        'exchange_auxiliary_account_id': 'str',
        'exchange_id': 'str',
        'exchange_instrument_id': 'str',
        'exposure': 'float',
        'exposure_type': 'str',
        'fx': 'float',
        'last_price': 'float',
        'mark_price': 'float',
        'options_gamma': 'float',
        'options_theta': 'float',
        'options_vega': 'float',
        'pnl': 'float',
        'pod_id': 'str',
        'position_id': 'str',
        'short_position_id': 'str',
        'side': 'str',
        'size': 'float',
        'term_currency_id': 'str',
        'timestamp': 'int',
        'unrealized_pnl': 'float'
    }

    attribute_map = {
        'account_id': 'account_id',
        'avg_entry_price': 'avg_entry_price',
        'base_currency_id': 'base_currency_id',
        'currency_id': 'currency_id',
        'delta': 'delta',
        'exchange_account_id': 'exchange_account_id',
        'exchange_auxiliary_account_id': 'exchange_auxiliary_account_id',
        'exchange_id': 'exchange_id',
        'exchange_instrument_id': 'exchange_instrument_id',
        'exposure': 'exposure',
        'exposure_type': 'exposure_type',
        'fx': 'fx',
        'last_price': 'last_price',
        'mark_price': 'mark_price',
        'options_gamma': 'optionsGamma',
        'options_theta': 'optionsTheta',
        'options_vega': 'optionsVega',
        'pnl': 'pnl',
        'pod_id': 'pod_id',
        'position_id': 'position_id',
        'short_position_id': 'short_position_id',
        'side': 'side',
        'size': 'size',
        'term_currency_id': 'term_currency_id',
        'timestamp': 'timestamp',
        'unrealized_pnl': 'unrealized_pnl'
    }

    def __init__(self, account_id=None, avg_entry_price=None, base_currency_id=None, currency_id=None, delta=None, exchange_account_id=None, exchange_auxiliary_account_id=None, exchange_id=None, exchange_instrument_id=None, exposure=None, exposure_type=None, fx=None, last_price=None, mark_price=None, options_gamma=None, options_theta=None, options_vega=None, pnl=None, pod_id=None, position_id=None, short_position_id=None, side=None, size=None, term_currency_id=None, timestamp=None, unrealized_pnl=None):  # noqa: E501
        """ExposureDTO - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._avg_entry_price = None
        self._base_currency_id = None
        self._currency_id = None
        self._delta = None
        self._exchange_account_id = None
        self._exchange_auxiliary_account_id = None
        self._exchange_id = None
        self._exchange_instrument_id = None
        self._exposure = None
        self._exposure_type = None
        self._fx = None
        self._last_price = None
        self._mark_price = None
        self._options_gamma = None
        self._options_theta = None
        self._options_vega = None
        self._pnl = None
        self._pod_id = None
        self._position_id = None
        self._short_position_id = None
        self._side = None
        self._size = None
        self._term_currency_id = None
        self._timestamp = None
        self._unrealized_pnl = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if avg_entry_price is not None:
            self.avg_entry_price = avg_entry_price
        if base_currency_id is not None:
            self.base_currency_id = base_currency_id
        if currency_id is not None:
            self.currency_id = currency_id
        if delta is not None:
            self.delta = delta
        if exchange_account_id is not None:
            self.exchange_account_id = exchange_account_id
        if exchange_auxiliary_account_id is not None:
            self.exchange_auxiliary_account_id = exchange_auxiliary_account_id
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange_instrument_id is not None:
            self.exchange_instrument_id = exchange_instrument_id
        if exposure is not None:
            self.exposure = exposure
        if exposure_type is not None:
            self.exposure_type = exposure_type
        if fx is not None:
            self.fx = fx
        if last_price is not None:
            self.last_price = last_price
        if mark_price is not None:
            self.mark_price = mark_price
        if options_gamma is not None:
            self.options_gamma = options_gamma
        if options_theta is not None:
            self.options_theta = options_theta
        if options_vega is not None:
            self.options_vega = options_vega
        if pnl is not None:
            self.pnl = pnl
        if pod_id is not None:
            self.pod_id = pod_id
        if position_id is not None:
            self.position_id = position_id
        if short_position_id is not None:
            self.short_position_id = short_position_id
        if side is not None:
            self.side = side
        if size is not None:
            self.size = size
        if term_currency_id is not None:
            self.term_currency_id = term_currency_id
        if timestamp is not None:
            self.timestamp = timestamp
        if unrealized_pnl is not None:
            self.unrealized_pnl = unrealized_pnl

    @property
    def account_id(self):
        """Gets the account_id of this ExposureDTO.  # noqa: E501


        :return: The account_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ExposureDTO.


        :param account_id: The account_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def avg_entry_price(self):
        """Gets the avg_entry_price of this ExposureDTO.  # noqa: E501


        :return: The avg_entry_price of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._avg_entry_price

    @avg_entry_price.setter
    def avg_entry_price(self, avg_entry_price):
        """Sets the avg_entry_price of this ExposureDTO.


        :param avg_entry_price: The avg_entry_price of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._avg_entry_price = avg_entry_price

    @property
    def base_currency_id(self):
        """Gets the base_currency_id of this ExposureDTO.  # noqa: E501


        :return: The base_currency_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_id

    @base_currency_id.setter
    def base_currency_id(self, base_currency_id):
        """Sets the base_currency_id of this ExposureDTO.


        :param base_currency_id: The base_currency_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._base_currency_id = base_currency_id

    @property
    def currency_id(self):
        """Gets the currency_id of this ExposureDTO.  # noqa: E501


        :return: The currency_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ExposureDTO.


        :param currency_id: The currency_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def delta(self):
        """Gets the delta of this ExposureDTO.  # noqa: E501


        :return: The delta of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this ExposureDTO.


        :param delta: The delta of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def exchange_account_id(self):
        """Gets the exchange_account_id of this ExposureDTO.  # noqa: E501


        :return: The exchange_account_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._exchange_account_id

    @exchange_account_id.setter
    def exchange_account_id(self, exchange_account_id):
        """Sets the exchange_account_id of this ExposureDTO.


        :param exchange_account_id: The exchange_account_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._exchange_account_id = exchange_account_id

    @property
    def exchange_auxiliary_account_id(self):
        """Gets the exchange_auxiliary_account_id of this ExposureDTO.  # noqa: E501


        :return: The exchange_auxiliary_account_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._exchange_auxiliary_account_id

    @exchange_auxiliary_account_id.setter
    def exchange_auxiliary_account_id(self, exchange_auxiliary_account_id):
        """Sets the exchange_auxiliary_account_id of this ExposureDTO.


        :param exchange_auxiliary_account_id: The exchange_auxiliary_account_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._exchange_auxiliary_account_id = exchange_auxiliary_account_id

    @property
    def exchange_id(self):
        """Gets the exchange_id of this ExposureDTO.  # noqa: E501


        :return: The exchange_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this ExposureDTO.


        :param exchange_id: The exchange_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange_instrument_id(self):
        """Gets the exchange_instrument_id of this ExposureDTO.  # noqa: E501


        :return: The exchange_instrument_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._exchange_instrument_id

    @exchange_instrument_id.setter
    def exchange_instrument_id(self, exchange_instrument_id):
        """Sets the exchange_instrument_id of this ExposureDTO.


        :param exchange_instrument_id: The exchange_instrument_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._exchange_instrument_id = exchange_instrument_id

    @property
    def exposure(self):
        """Gets the exposure of this ExposureDTO.  # noqa: E501


        :return: The exposure of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._exposure

    @exposure.setter
    def exposure(self, exposure):
        """Sets the exposure of this ExposureDTO.


        :param exposure: The exposure of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._exposure = exposure

    @property
    def exposure_type(self):
        """Gets the exposure_type of this ExposureDTO.  # noqa: E501


        :return: The exposure_type of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._exposure_type

    @exposure_type.setter
    def exposure_type(self, exposure_type):
        """Sets the exposure_type of this ExposureDTO.


        :param exposure_type: The exposure_type of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._exposure_type = exposure_type

    @property
    def fx(self):
        """Gets the fx of this ExposureDTO.  # noqa: E501


        :return: The fx of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._fx

    @fx.setter
    def fx(self, fx):
        """Sets the fx of this ExposureDTO.


        :param fx: The fx of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._fx = fx

    @property
    def last_price(self):
        """Gets the last_price of this ExposureDTO.  # noqa: E501


        :return: The last_price of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this ExposureDTO.


        :param last_price: The last_price of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def mark_price(self):
        """Gets the mark_price of this ExposureDTO.  # noqa: E501


        :return: The mark_price of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """Sets the mark_price of this ExposureDTO.


        :param mark_price: The mark_price of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._mark_price = mark_price

    @property
    def options_gamma(self):
        """Gets the options_gamma of this ExposureDTO.  # noqa: E501


        :return: The options_gamma of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._options_gamma

    @options_gamma.setter
    def options_gamma(self, options_gamma):
        """Sets the options_gamma of this ExposureDTO.


        :param options_gamma: The options_gamma of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._options_gamma = options_gamma

    @property
    def options_theta(self):
        """Gets the options_theta of this ExposureDTO.  # noqa: E501


        :return: The options_theta of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._options_theta

    @options_theta.setter
    def options_theta(self, options_theta):
        """Sets the options_theta of this ExposureDTO.


        :param options_theta: The options_theta of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._options_theta = options_theta

    @property
    def options_vega(self):
        """Gets the options_vega of this ExposureDTO.  # noqa: E501


        :return: The options_vega of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._options_vega

    @options_vega.setter
    def options_vega(self, options_vega):
        """Sets the options_vega of this ExposureDTO.


        :param options_vega: The options_vega of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._options_vega = options_vega

    @property
    def pnl(self):
        """Gets the pnl of this ExposureDTO.  # noqa: E501


        :return: The pnl of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._pnl

    @pnl.setter
    def pnl(self, pnl):
        """Sets the pnl of this ExposureDTO.


        :param pnl: The pnl of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._pnl = pnl

    @property
    def pod_id(self):
        """Gets the pod_id of this ExposureDTO.  # noqa: E501


        :return: The pod_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._pod_id

    @pod_id.setter
    def pod_id(self, pod_id):
        """Sets the pod_id of this ExposureDTO.


        :param pod_id: The pod_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._pod_id = pod_id

    @property
    def position_id(self):
        """Gets the position_id of this ExposureDTO.  # noqa: E501


        :return: The position_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this ExposureDTO.


        :param position_id: The position_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._position_id = position_id

    @property
    def short_position_id(self):
        """Gets the short_position_id of this ExposureDTO.  # noqa: E501


        :return: The short_position_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._short_position_id

    @short_position_id.setter
    def short_position_id(self, short_position_id):
        """Sets the short_position_id of this ExposureDTO.


        :param short_position_id: The short_position_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._short_position_id = short_position_id

    @property
    def side(self):
        """Gets the side of this ExposureDTO.  # noqa: E501


        :return: The side of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ExposureDTO.


        :param side: The side of this ExposureDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["LONG", "SHORT"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def size(self):
        """Gets the size of this ExposureDTO.  # noqa: E501


        :return: The size of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ExposureDTO.


        :param size: The size of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def term_currency_id(self):
        """Gets the term_currency_id of this ExposureDTO.  # noqa: E501


        :return: The term_currency_id of this ExposureDTO.  # noqa: E501
        :rtype: str
        """
        return self._term_currency_id

    @term_currency_id.setter
    def term_currency_id(self, term_currency_id):
        """Sets the term_currency_id of this ExposureDTO.


        :param term_currency_id: The term_currency_id of this ExposureDTO.  # noqa: E501
        :type: str
        """

        self._term_currency_id = term_currency_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ExposureDTO.  # noqa: E501


        :return: The timestamp of this ExposureDTO.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExposureDTO.


        :param timestamp: The timestamp of this ExposureDTO.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def unrealized_pnl(self):
        """Gets the unrealized_pnl of this ExposureDTO.  # noqa: E501


        :return: The unrealized_pnl of this ExposureDTO.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_pnl

    @unrealized_pnl.setter
    def unrealized_pnl(self, unrealized_pnl):
        """Sets the unrealized_pnl of this ExposureDTO.


        :param unrealized_pnl: The unrealized_pnl of this ExposureDTO.  # noqa: E501
        :type: float
        """

        self._unrealized_pnl = unrealized_pnl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExposureDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExposureDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
