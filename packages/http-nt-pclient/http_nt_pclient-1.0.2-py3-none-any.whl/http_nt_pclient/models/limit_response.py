# coding: utf-8

"""
    Nickel Trader API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LimitResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'level': 'str',
        'max_long_position_per_contract': 'int',
        'max_long_position_per_product_gross': 'int',
        'max_order_size': 'int',
        'max_position_per_family_net': 'int',
        'max_position_per_product_net': 'int',
        'max_short_position_per_contract': 'int',
        'max_short_position_per_product_gross': 'int'
    }

    attribute_map = {
        'id': 'id',
        'level': 'level',
        'max_long_position_per_contract': 'maxLongPositionPerContract',
        'max_long_position_per_product_gross': 'maxLongPositionPerProductGross',
        'max_order_size': 'maxOrderSize',
        'max_position_per_family_net': 'maxPositionPerFamilyNet',
        'max_position_per_product_net': 'maxPositionPerProductNet',
        'max_short_position_per_contract': 'maxShortPositionPerContract',
        'max_short_position_per_product_gross': 'maxShortPositionPerProductGross'
    }

    def __init__(self, id=None, level=None, max_long_position_per_contract=None, max_long_position_per_product_gross=None, max_order_size=None, max_position_per_family_net=None, max_position_per_product_net=None, max_short_position_per_contract=None, max_short_position_per_product_gross=None):  # noqa: E501
        """LimitResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._level = None
        self._max_long_position_per_contract = None
        self._max_long_position_per_product_gross = None
        self._max_order_size = None
        self._max_position_per_family_net = None
        self._max_position_per_product_net = None
        self._max_short_position_per_contract = None
        self._max_short_position_per_product_gross = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if max_long_position_per_contract is not None:
            self.max_long_position_per_contract = max_long_position_per_contract
        if max_long_position_per_product_gross is not None:
            self.max_long_position_per_product_gross = max_long_position_per_product_gross
        if max_order_size is not None:
            self.max_order_size = max_order_size
        if max_position_per_family_net is not None:
            self.max_position_per_family_net = max_position_per_family_net
        if max_position_per_product_net is not None:
            self.max_position_per_product_net = max_position_per_product_net
        if max_short_position_per_contract is not None:
            self.max_short_position_per_contract = max_short_position_per_contract
        if max_short_position_per_product_gross is not None:
            self.max_short_position_per_product_gross = max_short_position_per_product_gross

    @property
    def id(self):
        """Gets the id of this LimitResponse.  # noqa: E501


        :return: The id of this LimitResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LimitResponse.


        :param id: The id of this LimitResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this LimitResponse.  # noqa: E501


        :return: The level of this LimitResponse.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LimitResponse.


        :param level: The level of this LimitResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSTRUMENT", "PRODUCT", "PRODUCT_FAMILY", "EXCHANGE"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def max_long_position_per_contract(self):
        """Gets the max_long_position_per_contract of this LimitResponse.  # noqa: E501


        :return: The max_long_position_per_contract of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_long_position_per_contract

    @max_long_position_per_contract.setter
    def max_long_position_per_contract(self, max_long_position_per_contract):
        """Sets the max_long_position_per_contract of this LimitResponse.


        :param max_long_position_per_contract: The max_long_position_per_contract of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_long_position_per_contract = max_long_position_per_contract

    @property
    def max_long_position_per_product_gross(self):
        """Gets the max_long_position_per_product_gross of this LimitResponse.  # noqa: E501


        :return: The max_long_position_per_product_gross of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_long_position_per_product_gross

    @max_long_position_per_product_gross.setter
    def max_long_position_per_product_gross(self, max_long_position_per_product_gross):
        """Sets the max_long_position_per_product_gross of this LimitResponse.


        :param max_long_position_per_product_gross: The max_long_position_per_product_gross of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_long_position_per_product_gross = max_long_position_per_product_gross

    @property
    def max_order_size(self):
        """Gets the max_order_size of this LimitResponse.  # noqa: E501


        :return: The max_order_size of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_order_size

    @max_order_size.setter
    def max_order_size(self, max_order_size):
        """Sets the max_order_size of this LimitResponse.


        :param max_order_size: The max_order_size of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_order_size = max_order_size

    @property
    def max_position_per_family_net(self):
        """Gets the max_position_per_family_net of this LimitResponse.  # noqa: E501


        :return: The max_position_per_family_net of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_position_per_family_net

    @max_position_per_family_net.setter
    def max_position_per_family_net(self, max_position_per_family_net):
        """Sets the max_position_per_family_net of this LimitResponse.


        :param max_position_per_family_net: The max_position_per_family_net of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_position_per_family_net = max_position_per_family_net

    @property
    def max_position_per_product_net(self):
        """Gets the max_position_per_product_net of this LimitResponse.  # noqa: E501


        :return: The max_position_per_product_net of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_position_per_product_net

    @max_position_per_product_net.setter
    def max_position_per_product_net(self, max_position_per_product_net):
        """Sets the max_position_per_product_net of this LimitResponse.


        :param max_position_per_product_net: The max_position_per_product_net of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_position_per_product_net = max_position_per_product_net

    @property
    def max_short_position_per_contract(self):
        """Gets the max_short_position_per_contract of this LimitResponse.  # noqa: E501


        :return: The max_short_position_per_contract of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_short_position_per_contract

    @max_short_position_per_contract.setter
    def max_short_position_per_contract(self, max_short_position_per_contract):
        """Sets the max_short_position_per_contract of this LimitResponse.


        :param max_short_position_per_contract: The max_short_position_per_contract of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_short_position_per_contract = max_short_position_per_contract

    @property
    def max_short_position_per_product_gross(self):
        """Gets the max_short_position_per_product_gross of this LimitResponse.  # noqa: E501


        :return: The max_short_position_per_product_gross of this LimitResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_short_position_per_product_gross

    @max_short_position_per_product_gross.setter
    def max_short_position_per_product_gross(self, max_short_position_per_product_gross):
        """Sets the max_short_position_per_product_gross of this LimitResponse.


        :param max_short_position_per_product_gross: The max_short_position_per_product_gross of this LimitResponse.  # noqa: E501
        :type: int
        """

        self._max_short_position_per_product_gross = max_short_position_per_product_gross

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LimitResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
