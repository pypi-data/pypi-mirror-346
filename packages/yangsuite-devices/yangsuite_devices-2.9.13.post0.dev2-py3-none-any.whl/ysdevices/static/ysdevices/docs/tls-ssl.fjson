{"parents": [], "prev": {"link": "../devices/", "title": "Managing device profiles"}, "next": null, "title": "Setting up YANG Suite TLS/SSL", "meta": {}, "body": "<section id=\"setting-up-yang-suite-tls-ssl\">\n<h1>Setting up YANG Suite TLS/SSL<a class=\"headerlink\" href=\"#setting-up-yang-suite-tls-ssl\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>A user can use any naming convention they want for cryptography keys and certificate\nfiles, so it is best to have a general understanding of them.  We will not go into the\ndifferent types of encryption, but basically, you want to use the strongest possible\nthat both the client and device can understand.</p>\n<section id=\"public-certificate-authority\">\n<h2>Public Certificate Authority<a class=\"headerlink\" href=\"#public-certificate-authority\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p><strong>TLS Root Key</strong> \u2013 openssl key used to create <strong>TLS Root Certificate</strong></p></li>\n<li><p><strong>TLS Root Certificate</strong> \u2013 Common certificate created using the <strong>TLS Root Key</strong> (used as the common link between a device and a client certificate).</p></li>\n<li><p><strong>TLS Root Chain</strong> \u2013 A list of <strong>TLS Root Certificates</strong> (allows for multiple certificates to authenticate against)</p></li>\n</ul>\n</section>\n<section id=\"client-for-example-yang-suite\">\n<h2>Client (for example, YANG Suite)<a class=\"headerlink\" href=\"#client-for-example-yang-suite\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p><strong>TLS Client Key</strong> \u2013 The openssl key used to create the <strong>TLS Client Certificate</strong></p></li>\n<li><p><strong>TLS Client Certificate</strong> \u2013 Certificate created using the <strong>TLS Client Key</strong> and the <strong>TLS Root Certificate</strong></p></li>\n</ul>\n</section>\n<section id=\"device-for-example-cisco-router\">\n<h2>Device (for example, Cisco router)<a class=\"headerlink\" href=\"#device-for-example-cisco-router\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p><strong>TLS Device Key</strong> \u2013 openssl key used to create <strong>TLS Device Certificate</strong></p></li>\n<li><p><strong>TLS Device Certificate</strong> \u2013 router (referred to as \u201cdevice\u201d) certificate which is created using <strong>TLS Device Key</strong> and <strong>TLS Root Certificate</strong>.</p></li>\n</ul>\n<p>In a real world setting it is likely that the <strong>TLS Root Certificate</strong> or <strong>TLS Root Chain</strong> is\nstored on public root authority servers and not on the Cisco router itself.</p>\n</section>\n<section id=\"tls-host-override\">\n<h2>TLS Host Override<a class=\"headerlink\" href=\"#tls-host-override\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>When creating a certificate, you are prompted for input such as City, State, etc..  When\nit gets to CN (common name) you can enter the IP Address or the FQDN (host/domain name).\nIf you setup your certificate to use the FQDN, the connection to a third party will\nauthenticate against that.  If the server hosting the TLS Root Certificate or Chain cannot\nassociate the requesters IP Address to the FQDN, the connection is refused.</p>\n<p>So should I set the CN to an IP Address on my certificate?  Sure, if you are confident the\nIP Address will not change as a result of using DHCP or a VPN connection and server hosting\nthe root receives my request on the same IP Address.</p>\n<p>So should I set the CN to a FQDN?  Sure, if the FQDN can be associated to the IP Address by\na DNS server, or from the /etc/hosts file on the server hosting the root.</p>\n<p>So should I just leave CN blank?  Sure, if you do not enter a challenge password when generating\nthe client or device certificate.</p>\n</section>\n<section id=\"what-do-we-end-up-with\">\n<h2>What do we end up with?<a class=\"headerlink\" href=\"#what-do-we-end-up-with\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>A TLS Root Certificate  that can be validated by 2 different keys.  The Root certificate\nauthority can now act as a go-between for 2 devices, eventually authorizing their connection.</p>\n</section>\n<section id=\"is-yang-suite-setup-overkill\">\n<h2>Is YANG Suite Setup Overkill?<a class=\"headerlink\" href=\"#is-yang-suite-setup-overkill\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Well, yes, kind of.  If you think about it, if the client has the TLS Root Certificate or Chain,\nthe client can use that to authenticate a device connection if the device has a certificate\ncreated using the same TLS Root Certificate or Chain.  The YANG Suite client can actually make a\nsuccessful connection to the device having only the TLS Root Certificate or Chain.  But, by\nhaving all 3 files available, this allows YANG Suite to act as a client, a root authority, or a device.</p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["devices", "Managing device profiles", "P", "previous"]], "sourcename": "tls-ssl.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Setting up YANG Suite TLS/SSL</a><ul>\n<li><a class=\"reference internal\" href=\"#public-certificate-authority\">Public Certificate Authority</a></li>\n<li><a class=\"reference internal\" href=\"#client-for-example-yang-suite\">Client (for example, YANG Suite)</a></li>\n<li><a class=\"reference internal\" href=\"#device-for-example-cisco-router\">Device (for example, Cisco router)</a></li>\n<li><a class=\"reference internal\" href=\"#tls-host-override\">TLS Host Override</a></li>\n<li><a class=\"reference internal\" href=\"#what-do-we-end-up-with\">What do we end up with?</a></li>\n<li><a class=\"reference internal\" href=\"#is-yang-suite-setup-overkill\">Is YANG Suite Setup Overkill?</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "tls-ssl", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}