from typing import List, Any

from geopandas import GeoDataFrame

from .code import prompt_with_dataframes, WithPrompt
from .types import Output

__all__ = ["GeoDataFrameAI"]


class GeoDataFrameAI(GeoDataFrame):
    """
    A class to represent a GeoDataFrame with AI capabilities. It is a proxy for
    the GeoPandas GeoDataFrame class, allowing for additional functionality
    related to AI and machine learning tasks.
    """

    def __init__(self, *args, **kwargs):
        """
        Initialize the GeoDataFrameAI class.
        """
        super().__init__(*args, **kwargs)
        self.last_output: Output = None

    def chat(
        self,
        prompt: str,
        *other_dfs,
        result_type=None,
        user_provided_libraries: List[str] = None,
    ) -> Any | WithPrompt:
        self.last_output = prompt_with_dataframes(
            prompt,
            [self] + list(other_dfs),
            result_type=result_type,
            user_provided_libraries=user_provided_libraries,
        )
        return self.last_output.result

    def get_last_output(self) -> Any:
        """
        Get the last output generated by the AI.
        """
        if self.last_output is None:
            raise ValueError("No output has been generated yet.")
        return self.last_output.result

    @staticmethod
    def from_geodataframe(gdf: GeoDataFrame) -> "GeoDataFrameAI":
        """
        Convert a GeoDataFrame or DataFrame to a GeoDataFrameAI.
        """
        if isinstance(gdf, GeoDataFrame):
            return GeoDataFrameAI(gdf)
        else:
            return GeoDataFrameAI(GeoDataFrame(gdf))
