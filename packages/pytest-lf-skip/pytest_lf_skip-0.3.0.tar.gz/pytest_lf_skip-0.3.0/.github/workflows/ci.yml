name: CI

on:
  push:
    branches: [ main ]
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  UV_FROZEN: true
  FORCE_COLOR: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup
        with:
          install-project: "true"
          install-project-with: lint

      # - name: Install pip
      #   # Installing pip is required for the pre-commit action:
      #   run: uv pip install pip

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ hashFiles('.python-version', '.pre-commit-config.yaml') }}

      - run: |
            just lint pre-commit
        env:
            SKIP: no-commit-to-branch

  typecheck:
    name: mypy / ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}
        install-project: "true"
        install-project-with: typecheck

    - name: Run mypy tests
      run: just type-check

  test:
    name: Test ${{ matrix.os }} / ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12', '3.13']

    env:
      OS: ${{ matrix.os }}
      DEPS: yes
      UV_PYTHON_PREFERENCE: only-managed

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true # ensure tags are fetched

    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}
        install-project: "true"

    - run: mkdir coverage

    - name: Run tests
      # speed up by skipping this step on pypy
      run: just test-cov
      env:
        COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
        CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}

    - name: Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
        path: coverage
        include-hidden-files: true

  coverage-combine:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup
        with:
          skip-just: "true"

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: coverage-*
          path: coverage

      - run: uv pip install coverage[toml]

      - run: ls -la coverage
      - run: uv run coverage combine coverage

      - name: Store coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: .coverage
          include-hidden-files: true

      - run: uv run coverage report
      - run: uv run coverage html --show-contexts --title "coverage for ${{ github.sha }}"

      - name: Store coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  coverage-pr-comment:
    needs: coverage-combine
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup
        with:
          skip-just: "true"
          skip-uv: "true"

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: Generate coverage comment
        id: coverage-comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store coverage comment
        uses: actions/upload-artifact@v4
        if: steps.coverage-comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  # https://github.com/marketplace/actions/alls-green
  check:  # This job does nothing and is only used for the branch protection
    if: always()

    outputs:
      result: ${{ steps.all-green.outputs.result }}

    needs:
      - lint
      - typecheck
      - test

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        id: all-green
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    needs: [check]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && needs.check.result == 'success'

    env:
      DEPS: yes
      UV_PYTHON_PREFERENCE: only-managed

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true # ensure tags are fetched

      - uses: ./.github/actions/setup

      - name: Build the package
        run: just build

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  semantic-release:
    needs: [build]
    runs-on: ubuntu-latest
    environment: gh-release
    if: github.event_name != 'pull_request' && needs.build.result == 'success'
    permissions:
      contents: write

    steps:
      # bot integration taken from https://gist.github.com/0xernesto/a8065cce55940e6ccc523664a87ee9bc

      - name: Generate release bot app token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.RELEASER_ID }}
          private-key: ${{ secrets.RELEASER_PRIVATE_KEY }}

      - name: Get bot user ID
        id: bot-user-id
        run: |
          echo "user-id=$(gh api "/users/${{ steps.generate_token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0
          fetch-tags: true # ensure tags are fetched

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9
        with:
          github_token: ${{ steps.generate_token.outputs.token }}
          git_committer_email: "${{ steps.bot-user-id.outputs.user-id }}+${{ steps.generate_token.outputs.app-slug }}[bot]@users.noreply.github.com"
          root_options: "-v"
          build: false

      - name: Add distribution artifacts to GitHub Release Assets
        uses: python-semantic-release/publish-action@v9
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
