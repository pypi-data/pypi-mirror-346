"""Main CLI module for OpenMAS."""

import os
import sys
from pathlib import Path
from typing import Any, Dict, Optional

import click
import yaml

# Import the CLI commands from their respective modules
# The deploy command will be added separately since it's using typer
# from openmas.cli.deploy import deploy_cmd
from openmas.logging import get_logger

logger = get_logger(__name__)


@click.group()
@click.version_option()
def cli() -> None:
    """Provide CLI tools for managing OpenMAS projects."""
    pass


# Register the deploy command group - we'll define this separately later
# cli.add_command(deploy_cmd)


@cli.command()
@click.argument("project_name", type=str)
@click.option("--template", "-t", type=str, default=None, help="Template to use for project initialization")
@click.option("--name", type=str, default=None, help="Project name when initializing in current directory")
def init(project_name: str, template: Optional[str], name: Optional[str]) -> None:
    """Initialize a new OpenMAS project with standard directory structure.

    PROJECT_NAME is the name of the project to create or "." for current directory.
    """
    # Handle special case for current directory
    if project_name == ".":
        if not name:
            click.echo("❌ When initializing in the current directory (.), you must provide a project name with --name")
            sys.exit(1)
        project_path = Path(".")
        display_name = name
    else:
        project_path = Path(project_name)
        display_name = project_name

    if project_path.exists() and project_path != Path("."):
        click.echo(f"❌ Project directory '{project_name}' already exists.")
        sys.exit(1)

    # Create main project directory if not using current directory
    if project_path != Path("."):
        project_path.mkdir(parents=True)

    # Create subdirectories
    subdirs = ["agents", "shared", "extensions", "config", "tests", "packages"]
    for subdir in subdirs:
        (project_path / subdir).mkdir(exist_ok=project_path == Path("."))

    # Create README.md
    with open(project_path / "README.md", "w") as f:
        f.write(f"# {display_name}\n\nA OpenMAS project.\n")

    # Create requirements.txt
    with open(project_path / "requirements.txt", "w") as f:
        f.write("openmas>=0.1.0\n")

    # Create .gitignore if it doesn't exist
    gitignore_path = project_path / ".gitignore"
    if not gitignore_path.exists():
        with open(gitignore_path, "w") as f:
            f.write("__pycache__/\n*.py[cod]\n*$py.class\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n")
            f.write(".pytest_cache/\n.coverage\nhtmlcov/\n.tox/\n.mypy_cache/\n")
            f.write("# OpenMAS specific\npackages/\n")

    # Create openmas_project.yml
    project_config: Dict[str, Any] = {
        "name": display_name,
        "version": "0.1.0",
        "agents": {},
        "shared_paths": ["shared"],
        "extension_paths": ["extensions"],
        "default_config": {"log_level": "INFO", "communicator_type": "http"},
        "dependencies": [],
    }

    # If template is specified, customize the project structure
    if template:
        if template.lower() == "mcp-server":
            # Setup an MCP server template
            agent_dir = project_path / "agents" / "mcp_server"
            agent_dir.mkdir(parents=True, exist_ok=project_path == Path("."))

            # Create agent.py file
            with open(agent_dir / "agent.py", "w") as f:
                f.write(
                    """'''MCP Server Agent.'''

import asyncio
from openmas.agent import BaseAgent

class McpServerAgent(BaseAgent):
    '''MCP Server agent implementation.'''

    async def setup(self) -> None:
        '''Set up the MCP server.'''
        # Setup your MCP server here
        pass

    async def run(self) -> None:
        '''Run the MCP server.'''
        # Run your MCP server here
        while True:
            await asyncio.sleep(1)

    async def shutdown(self) -> None:
        '''Shut down the MCP server.'''
        # Shutdown your MCP server here
        pass
"""
                )

            # Create openmas.deploy.yaml file
            with open(agent_dir / "openmas.deploy.yaml", "w") as f:
                f.write(
                    """version: "1.0"

component:
  name: "mcp-server"
  type: "service"
  description: "MCP server for model access"

docker:
  build:
    context: "."
    dockerfile: "Dockerfile"

environment:
  - name: "AGENT_NAME"
    value: "${component.name}"
  - name: "LOG_LEVEL"
    value: "INFO"
  - name: "COMMUNICATOR_TYPE"
    value: "http"
  - name: "MCP_API_KEY"
    secret: true
    description: "API key for MCP service"

ports:
  - port: 8000
    protocol: "http"
    description: "HTTP API for MCP access"

volumes:
  - name: "data"
    path: "/app/data"
    description: "Data storage"

dependencies: []
"""
                )

            # Update project config with the agent
            if "agents" not in project_config:
                project_config["agents"] = {}
            project_config["agents"]["mcp_server"] = "agents/mcp_server"

    # Add dependencies schema comment
    dependencies_comment = """# Dependencies configuration (for external packages)
# Examples:
# dependencies:
#   # - package: <org_or_user>/<package_name>  # Example: From official repo (Not implemented yet)
#   #   version: <version_spec>
#   # - git: <git_url>                         # Example: From Git repo (Implemented)
#   #   revision: <branch_tag_or_commit>       # Optional
#   # - local: <relative_path_to_package>      # Example: From local path (Not implemented yet)
"""

    # Write the project configuration file with comments
    with open(project_path / "openmas_project.yml", "w") as f:
        yaml.dump(project_config, f, default_flow_style=False, sort_keys=False)
        f.write("\n" + dependencies_comment)

    if project_path == Path("."):
        click.echo(f"✅ Created OpenMAS project '{display_name}'")
        click.echo("Project structure initialized in current directory")
    else:
        click.echo(f"✅ Created OpenMAS project '{project_path}'")
        click.echo(f"Project structure initialized in '{project_path}'")

    if template:
        click.echo(f"Used template: {template}")

    click.echo("\nNext steps:")
    if project_path != Path("."):
        click.echo(f"  cd {project_name}")
    click.echo("  poetry install openmas")
    click.echo("  # Start developing your agents!")


@cli.command()
def validate() -> None:
    """Validate the OpenMAS project configuration."""
    config_path = Path("openmas_project.yml")

    if not config_path.exists():
        click.echo("❌ Project configuration file 'openmas_project.yml' not found")
        sys.exit(1)

    try:
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)

        # Basic validation
        required_fields = ["name", "version", "agents"]
        for field in required_fields:
            if field not in config:
                click.echo(f"❌ Missing required field '{field}' in project configuration")
                sys.exit(1)

        # Validate agent paths
        for agent_name, agent_path in config.get("agents", {}).items():
            agent_dir = Path(agent_path)
            if not agent_dir.exists():
                click.echo(f"❌ Agent directory '{agent_path}' for agent '{agent_name}' does not exist")
                sys.exit(1)

            agent_file = agent_dir / "agent.py"
            if not agent_file.exists():
                click.echo(f"❌ Agent file 'agent.py' not found in '{agent_path}'")
                sys.exit(1)

        # Validate shared paths
        for shared_path in config.get("shared_paths", []):
            if not Path(shared_path).exists():
                click.echo(f"❌ Shared directory '{shared_path}' does not exist")
                sys.exit(1)

        # Validate extension paths
        for ext_path in config.get("extension_paths", []):
            if not Path(ext_path).exists():
                click.echo(f"❌ Extension directory '{ext_path}' does not exist")
                sys.exit(1)

        # Validate dependencies
        dependencies = config.get("dependencies", [])
        if dependencies:
            click.echo(f"Validating {len(dependencies)} dependencies...")

            for i, dep in enumerate(dependencies):
                # Each dependency must be a dictionary
                if not isinstance(dep, dict):
                    click.echo(f"❌ Dependency #{i+1} is not a dictionary")
                    sys.exit(1)

                # Each dependency must have exactly one type key
                dep_types = [key for key in ["git", "package", "local"] if key in dep]
                if len(dep_types) != 1:
                    click.echo(f"❌ Dependency #{i+1} must have exactly one type (git, package, or local)")
                    sys.exit(1)

                dep_type = dep_types[0]

                # Git dependencies must have a valid URL
                if dep_type == "git":
                    git_url = dep["git"]
                    if not git_url or not isinstance(git_url, str):
                        click.echo(f"❌ Git dependency #{i+1} has invalid URL: {git_url}")
                        sys.exit(1)

                # Package dependencies must have a valid version
                elif dep_type == "package":
                    package_name = dep["package"]
                    if not package_name or not isinstance(package_name, str):
                        click.echo(f"❌ Package dependency #{i+1} has invalid name: {package_name}")
                        sys.exit(1)

                    if "version" not in dep:
                        click.echo(f"❌ Package dependency '{package_name}' is missing required 'version' field")
                        sys.exit(1)

                # Local dependencies must have a valid path
                elif dep_type == "local":
                    local_path = dep["local"]
                    if not local_path or not isinstance(local_path, str):
                        click.echo(f"❌ Local dependency #{i+1} has invalid path: {local_path}")
                        sys.exit(1)

            # Show implementation status
            click.echo("✅ Dependencies schema is valid")
            click.echo("⚠️ Note: Only 'git' dependencies are fully implemented")

        click.echo("✅ Project configuration is valid")
        click.echo(f"Project: {config['name']} v{config['version']}")
        click.echo(f"Agents defined: {len(config.get('agents', {}))}")

    except Exception as e:
        click.echo(f"❌ Error validating project configuration: {e}")
        sys.exit(1)


@cli.command(name="list")
@click.argument("resource_type", type=click.Choice(["agents"]))
def list_resources(resource_type: str) -> None:
    """List resources in the OpenMAS project.

    RESOURCE_TYPE is the type of resource to list (currently only 'agents' is supported).
    """
    config_path = Path("openmas_project.yml")

    if not config_path.exists():
        click.echo("❌ Project configuration file 'openmas_project.yml' not found")
        sys.exit(1)

    try:
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)

        if resource_type == "agents":
            agents = config.get("agents", {})
            if not agents:
                click.echo("No agents defined in the project")
                return

            click.echo(f"Agents in project '{config.get('name', 'undefined')}':")
            for agent_name, agent_path in agents.items():
                click.echo(f"  {agent_name}: {agent_path}")
    except Exception as e:
        click.echo(f"❌ Error listing resources: {e}")
        sys.exit(1)


@cli.command()
@click.option(
    "--project-dir",
    type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path),
    help="Explicit path to the project directory containing openmas_project.yml",
)
@click.option(
    "--clean",
    is_flag=True,
    help="Clean the packages directory before installing dependencies",
)
def deps(project_dir: Optional[Path] = None, clean: bool = False) -> None:
    """Install external dependencies defined in openmas_project.yml.

    Currently supports Git repositories.
    """
    import shutil
    import subprocess

    from openmas.config import _find_project_root

    # Find project root
    project_root = _find_project_root(project_dir)
    if not project_root:
        if project_dir:
            click.echo(
                f"❌ Project configuration file 'openmas_project.yml' not found in specified directory: {project_dir}"
            )
        else:
            click.echo("❌ Project configuration file 'openmas_project.yml' not found in current or parent directories")
        sys.exit(1)

    # Load project configuration
    try:
        with open(project_root / "openmas_project.yml", "r") as f:
            project_config = yaml.safe_load(f)
    except Exception as e:
        click.echo(f"❌ Error loading project configuration: {e}")
        sys.exit(1)

    # Get dependencies from project configuration
    dependencies = project_config.get("dependencies", [])
    if not dependencies:
        click.echo("No dependencies defined in the project configuration")
        return

    # Create or clean the packages directory
    packages_dir = project_root / "packages"
    if clean and packages_dir.exists():
        click.echo("Cleaning packages directory...")
        shutil.rmtree(packages_dir)

    packages_dir.mkdir(exist_ok=True)

    # Process dependencies
    for dep in dependencies:
        # Handle git dependencies
        if "git" in dep:
            git_url = dep["git"]
            revision = dep.get("revision")

            # Extract repo name from URL
            repo_name = git_url.rstrip("/").split("/")[-1]
            if repo_name.endswith(".git"):
                repo_name = repo_name[:-4]

            target_dir = packages_dir / repo_name

            click.echo(f"Installing git package '{repo_name}' from {git_url}...")

            # Clone the repository
            try:
                if target_dir.exists():
                    # If the directory exists, update the repository
                    click.echo("  Repository already exists, pulling latest changes...")
                    subprocess.run(
                        ["git", "pull", "origin"],
                        cwd=str(target_dir),
                        check=True,
                        capture_output=True,
                    )
                else:
                    # Otherwise, clone the repository
                    subprocess.run(
                        ["git", "clone", git_url, str(target_dir)],
                        check=True,
                        capture_output=True,
                    )

                # Checkout the specific revision if specified
                if revision:
                    click.echo(f"  Checking out revision: {revision}")
                    subprocess.run(
                        ["git", "checkout", revision],
                        cwd=str(target_dir),
                        check=True,
                        capture_output=True,
                    )

                click.echo(f"✅ Successfully installed '{repo_name}'")
            except subprocess.SubprocessError as e:
                click.echo(f"❌ Error installing git package '{repo_name}': {e}")
                continue

        # Handle package dependencies (not yet implemented)
        elif "package" in dep:
            click.echo(f"⚠️ Package dependencies not implemented yet: {dep['package']}")

        # Handle local dependencies (not yet implemented)
        elif "local" in dep:
            click.echo(f"⚠️ Local dependencies not implemented yet: {dep['local']}")

        # Handle unknown dependency types
        else:
            click.echo(f"⚠️ Unknown dependency type: {dep}")

    click.echo(f"Installed {len(dependencies)} dependencies")


@cli.command()
@click.argument("agent_name", type=str)
@click.option(
    "--project-dir",
    type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path),
    help="Explicit path to the project directory containing openmas_project.yml",
)
@click.option(
    "--env",
    type=str,
    help="Environment name to use for configuration (sets OPENMAS_ENV)",
)
def run(agent_name: str, project_dir: Optional[Path] = None, env: Optional[str] = None) -> None:
    """Run an agent from the OpenMAS project.

    AGENT_NAME is the name of the agent to run.
    """
    import asyncio
    import importlib.util
    import inspect
    import signal
    import sys
    import functools
    import traceback

    from openmas.agent.base import BaseAgent
    from openmas.config import _find_project_root
    from openmas.exceptions import LifecycleError

    # Set the environment if provided
    if env:
        os.environ["OPENMAS_ENV"] = env
        click.echo(f"Using environment: {env}")

    # Verify that agent_name is not empty
    if not agent_name:
        click.echo("❌ Agent name cannot be empty")
        sys.exit(1)

    # Find project root
    project_root = _find_project_root(project_dir)
    if not project_root:
        if project_dir:
            click.echo(
                f"❌ Project configuration file 'openmas_project.yml' not found in specified directory: {project_dir}"
            )
        else:
            click.echo("❌ Project configuration file 'openmas_project.yml' not found in current or parent directories")
            click.echo("Hint: Make sure you're running the command from within an OpenMAS project or use --project-dir")
        sys.exit(1)

    click.echo(f"Using project root: {project_root}")

    # Load project configuration
    try:
        with open(project_root / "openmas_project.yml", "r") as f:
            project_config = yaml.safe_load(f)
    except Exception as e:
        click.echo(f"❌ Error loading project configuration: {e}")
        sys.exit(1)

    # Find the agent in the project configuration
    agents = project_config.get("agents", {})
    if agent_name not in agents:
        click.echo(f"❌ Agent '{agent_name}' not found in project configuration")
        all_agents = list(agents.keys())
        if all_agents:
            click.echo(f"Available agents: {', '.join(all_agents)}")
        sys.exit(1)

    # Get agent path and shared/extension paths
    agent_path = project_root / agents[agent_name]
    agent_file = agent_path / "agent.py"

    if not agent_file.exists():
        click.echo(f"❌ Agent file '{agent_file}' does not exist")
        sys.exit(1)

    # Get shared and extension paths
    shared_paths = [project_root / path for path in project_config.get("shared_paths", [])]
    extension_paths = [project_root / path for path in project_config.get("extension_paths", [])]
    plugin_paths = [project_root / path for path in project_config.get("plugin_paths", [])]

    # Use plugin_paths if available, otherwise fall back to extension_paths
    effective_plugin_paths = plugin_paths if plugin_paths else extension_paths

    # Store original sys.path to restore later
    original_sys_path = sys.path.copy()

    # Set up PYTHONPATH for imports
    sys_path_additions = []

    # Add project root first to ensure absolute imports work
    sys_path_additions.append(str(project_root))

    # Add the agent's parent directory
    sys_path_additions.append(str(agent_path.parent))

    # Add the agent directory itself
    sys_path_additions.append(str(agent_path))

    # Add shared and extension paths
    for path in shared_paths + effective_plugin_paths:
        if path.exists() and str(path) not in sys_path_additions:
            sys_path_additions.append(str(path))

    # Add packages to sys.path
    packages_dir = project_root / "packages"
    if packages_dir.exists():
        for package_dir in packages_dir.iterdir():
            if package_dir.is_dir():
                # Add primary paths for import - prioritizing src/ directory if it exists
                src_dir = package_dir / "src"
                if src_dir.exists() and src_dir.is_dir():
                    if str(src_dir) not in sys_path_additions:
                        sys_path_additions.append(str(src_dir))
                elif str(package_dir) not in sys_path_additions:
                    sys_path_additions.append(str(package_dir))

    # Update sys.path - add in reverse order so that higher priority paths appear first
    for path in reversed(sys_path_additions):
        if path not in sys.path:
            sys.path.insert(0, path)

    click.echo("Python import paths:")
    for idx, path in enumerate(sys_path_additions):
        click.echo(f"  {idx+1}. {path}")

    # Discover local communicators and plugins BEFORE importing agent module
    # This ensures communicators are properly registered before agent code runs
    from openmas.communication import discover_communicator_plugins, discover_local_communicators

    click.echo("Discovering local communicators...")
    discover_local_communicators([str(path) for path in effective_plugin_paths if path.exists()])

    # Also discover package entry point communicators
    discover_communicator_plugins()

    # Set environment variables
    os.environ["AGENT_NAME"] = agent_name

    # Use project_root in the environment so agent can load its configuration
    os.environ["OPENMAS_PROJECT_ROOT"] = str(project_root)

    # If OPENMAS_ENV is not set, default to 'local'
    if "OPENMAS_ENV" not in os.environ:
        os.environ["OPENMAS_ENV"] = "local"

    click.echo(f"Using environment: {os.environ.get('OPENMAS_ENV', 'local')}")

    # Try multiple approaches to import the agent module
    import_error_msg = (
        f"❌ Failed to import agent module from '{agent_file}'. "
        "Check that all dependencies are installed and the agent code is valid."
    )

    try:
        # Try several import approaches
        agent_module = None
        import_exceptions = []

        # Approach 1: Import using the module path from project root
        try:
            # Convert agent path to a Python module path
            rel_path = agent_path.relative_to(project_root)
            # Convert to module path (replace / with .)
            module_path = str(rel_path).replace("/", ".").replace("\\", ".")
            module_name = f"{module_path}.agent"

            click.echo(f"Trying to import module: {module_name}")
            agent_module = importlib.import_module(module_name)
        except ImportError as e:
            import_exceptions.append(f"Method 1 (module path): {str(e)}")

        # Approach 2: Import using direct file path
        if agent_module is None:
            try:
                module_name = "agent"
                click.echo(f"Trying to import module directly: {module_name}")
                spec = importlib.util.spec_from_file_location(module_name, agent_file)
                if spec is not None and spec.loader is not None:
                    agent_module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(agent_module)
            except ImportError as e:
                import_exceptions.append(f"Method 2 (direct import): {str(e)}")

        # Approach 3: Simple import if we're already in the right directory
        if agent_module is None:
            try:
                click.echo("Trying simple import: agent")
                agent_module = importlib.import_module("agent")
            except ImportError as e:
                import_exceptions.append(f"Method 3 (simple import): {str(e)}")

        # If all import methods failed
        if agent_module is None:
            error_details = "\n".join(import_exceptions)
            click.echo(f"{import_error_msg}\n{error_details}")
            sys.exit(1)

        # Find the BaseAgent subclass in the module
        agent_class = None
        for name, obj in inspect.getmembers(agent_module):
            if inspect.isclass(obj) and issubclass(obj, BaseAgent) and obj != BaseAgent:  # Skip BaseAgent itself
                agent_class = obj
                break

        if agent_class is None:
            click.echo(f"❌ No BaseAgent subclass found in '{agent_file}'")
            click.echo("Make sure the agent file contains a class that inherits from openmas.agent.BaseAgent")
            sys.exit(1)

        # Initialize the agent
        click.echo(f"Starting agent '{agent_name}' ({agent_class.__name__})")

        # Initialize agent with configuration from the layered config system
        try:
            agent = agent_class(name=agent_name)
        except Exception as e:
            click.echo(f"❌ Error initializing agent: {e}")
            click.echo("This may be due to configuration issues or missing dependencies.")
            sys.exit(1)

        # Set up signal handlers for graceful shutdown
        loop = asyncio.get_event_loop()
        shutdown_event = asyncio.Event()
        stop_in_progress = False

        # Enhanced signal handler for more robust shutdown
        def signal_handler(signame=None) -> None:
            nonlocal stop_in_progress
            if stop_in_progress:
                click.echo("\nForced exit in progress. Press Ctrl+C again to force immediate termination.")
                # If the user presses Ctrl+C again during shutdown, just force exit
                signal.signal(signal.SIGINT, lambda sig, frame: sys.exit(1))
                return

            stop_in_progress = True
            click.echo(f"\nReceived {'signal' if not signame else signame}. Shutting down agent gracefully...")
            shutdown_event.set()

        # Register signal handlers
        for sig in [signal.SIGINT, signal.SIGTERM]:
            loop.add_signal_handler(sig, functools.partial(signal_handler, sig.name))

        # Run the agent lifecycle with enhanced error handling
        async def run_agent() -> None:
            try:
                # Start the agent - this will call setup() and start the communicator
                try:
                    await agent.start()
                except LifecycleError as e:
                    click.echo(f"❌ Error starting agent: {e}")
                    return
                except Exception as e:
                    click.echo(f"❌ Unexpected error starting agent: {e}")
                    traceback.print_exc()
                    return

                # Display guidance message for multiple agents
                all_agent_names = list(agents.keys())
                if len(all_agent_names) > 1:
                    other_agents = [a for a in all_agent_names if a != agent_name]
                    click.echo("\n[OpenMAS CLI] Agent start success.")
                    click.echo("[OpenMAS CLI] To run other agents in this project, open new terminal windows and use:")
                    for other_agent in other_agents:
                        click.echo(f"[OpenMAS CLI]     openmas run {other_agent}")
                    click.echo(f"[OpenMAS CLI] Project agents: {', '.join(all_agent_names)}")
                    click.echo("")

                # Wait for shutdown signal
                click.echo("Agent is running. Press Ctrl+C to stop.")
                await shutdown_event.wait()

            except asyncio.CancelledError:
                click.echo("Agent execution cancelled")
            except Exception as e:
                click.echo(f"❌ Error in agent execution: {e}")
                traceback.print_exc()
            finally:
                # Always ensure agent is stopped cleanly, even if there was an error
                if agent._is_running:
                    click.echo("Stopping agent...")
                    try:
                        await agent.stop()
                        click.echo("Agent stopped successfully")
                    except Exception as e:
                        click.echo(f"❌ Error stopping agent: {e}")
                        traceback.print_exc()

        # Run the agent
        try:
            loop.run_until_complete(run_agent())
        except KeyboardInterrupt:
            # Handle the case where the user rapidly presses Ctrl+C multiple times
            click.echo("\nForced exit.")
        except Exception as e:
            click.echo(f"❌ Error: {e}")
            traceback.print_exc()
            sys.exit(1)
        finally:
            # Ensure event loop is properly cleaned up
            try:
                # Cancel any pending tasks
                pending_tasks = [task for task in asyncio.all_tasks(loop) if not task.done()]
                if pending_tasks:
                    click.echo(f"Cancelling {len(pending_tasks)} pending tasks...")
                    for task in pending_tasks:
                        task.cancel()

                    # Give them a moment to shut down
                    if pending_tasks:
                        loop.run_until_complete(asyncio.gather(*pending_tasks, return_exceptions=True))
            except Exception as e:
                click.echo(f"Error cleaning up tasks: {e}")

            # Close the event loop cleanly
            if hasattr(loop, 'shutdown_asyncgens'):
                loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()

    except Exception as e:
        click.echo(f"❌ Error initializing agent: {e}")
        traceback.print_exc()
        sys.exit(1)
    finally:
        # Restore original sys.path
        sys.path = original_sys_path


@cli.command()
@click.argument("agent_name", type=str)
@click.option(
    "--output-file",
    type=str,
    default="Dockerfile",
    help="Name of the output Dockerfile",
)
@click.option(
    "--project-dir",
    type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path),
    help="Explicit path to the project directory containing openmas_project.yml",
)
@click.option(
    "--python-version",
    type=str,
    default="3.10",
    help="Python version to use",
)
@click.option(
    "--use-poetry",
    is_flag=True,
    help="Use Poetry for dependency management instead of pip requirements.txt",
)
def generate_dockerfile(
    agent_name: str,
    output_file: str,
    project_dir: Optional[Path] = None,
    python_version: str = "3.10",
    use_poetry: bool = False,
) -> None:
    """Generate a Dockerfile for an agent.

    AGENT_NAME is the name of the agent to generate a Dockerfile for.
    """
    from openmas.config import _find_project_root
    from openmas.deployment.generators import DockerfileGenerator

    # Find project root
    project_root = _find_project_root(project_dir)
    if not project_root:
        if project_dir:
            click.echo(
                f"❌ Project configuration file 'openmas_project.yml' not found in specified directory: {project_dir}"
            )
        else:
            click.echo("❌ Project configuration file 'openmas_project.yml' not found in current or parent directories")
        sys.exit(1)

    # Load project configuration
    try:
        with open(project_root / "openmas_project.yml", "r") as f:
            project_config = yaml.safe_load(f)
    except Exception as e:
        click.echo(f"❌ Error loading project configuration: {e}")
        sys.exit(1)

    # Find the agent in the project configuration
    agents = project_config.get("agents", {})
    if agent_name not in agents:
        click.echo(f"❌ Agent '{agent_name}' not found in project configuration")
        all_agents = list(agents.keys())
        if all_agents:
            click.echo(f"Available agents: {', '.join(all_agents)}")
        sys.exit(1)

    # Get agent path
    agent_path = agents[agent_name]

    # Ensure agent path exists
    agent_dir = project_root / agent_path
    if not agent_dir.exists():
        click.echo(f"❌ Agent directory for '{agent_name}' not found at '{agent_path}'")
        sys.exit(1)

    # Use the DockerfileGenerator
    generator = DockerfileGenerator()

    # Set entrypoint to use the openmas CLI to run the agent
    # The DockerfileGenerator will use this command in the CMD directive
    # It needs to be a shell command, not the argument to python
    app_entrypoint = f"-m openmas.cli run {agent_name}"

    # Determine requirements file path
    requirements_file = "requirements.txt"

    try:
        # Generate the Dockerfile
        output_path = Path(output_file)
        generator.save(
            output_path=output_path,
            python_version=python_version,
            app_entrypoint=app_entrypoint,
            requirements_file=requirements_file,
            use_poetry=use_poetry,
            port=8000,  # Default port, not crucial for agent
        )

        click.echo(f"✅ Generated Dockerfile for agent '{agent_name}' at '{output_path}'")
        click.echo("\nBuild the Docker image with:")
        click.echo(f"  docker build -t {project_config['name'].lower()}-{agent_name} -f {output_file} .")
        click.echo("\nRun the Docker container with:")
        click.echo(f"  docker run --name {agent_name} {project_config['name'].lower()}-{agent_name}")
    except Exception as e:
        click.echo(f"❌ Error generating Dockerfile: {e}")
        sys.exit(1)


def main() -> int:
    """Main entry point for the OpenMAS CLI tool."""
    try:
        cli()
        return 0
    except Exception as e:
        click.echo(f"❌ Error: {e}", err=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())
