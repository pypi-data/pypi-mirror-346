# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import WhoisfreaksApiEnvironment
from .raw_client import AsyncRawWhoisfreaksApi, RawWhoisfreaksApi
from .types.get_v_10_whois_response import GetV10WhoisResponse
from .types.get_whois_historical_response import GetWhoisHistoricalResponse
from .types.get_whois_reverse_response import GetWhoisReverseResponse
from .types.post_bulkwhois_response import PostBulkwhoisResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WhoisfreaksApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : WhoisfreaksApiEnvironment
        The environment to use for requests from the client. from .environment import WhoisfreaksApiEnvironment

        Defaults to WhoisfreaksApiEnvironment.DEFAULT



    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from whoisfreaks import WhoisfreaksApi
    client = WhoisfreaksApi()
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: WhoisfreaksApiEnvironment = WhoisfreaksApiEnvironment.DEFAULT,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawWhoisfreaksApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawWhoisfreaksApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWhoisfreaksApi
        """
        return self._raw_client

    def get_live_whois_information_for_a_domain(
        self, *, api_key: str, domain_name: str, whois: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetV10WhoisResponse:
        """
        Fetch live WHOIS information for a given domain

        Parameters
        ----------
        api_key : str
            Your API key

        domain_name : str
            The domain name for WHOIS lookup

        whois : str
            The type of WHOIS lookup (live)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetV10WhoisResponse
            Successful WHOIS lookup

        Examples
        --------
        from whoisfreaks import WhoisfreaksApi
        client = WhoisfreaksApi()
        client.get_live_whois_information_for_a_domain(api_key='apiKey', domain_name='domainName', whois='whois', )
        """
        _response = self._raw_client.get_live_whois_information_for_a_domain(
            api_key=api_key, domain_name=domain_name, whois=whois, request_options=request_options
        )
        return _response.data

    def get_live_whois_information_for_multiple_domains(
        self,
        *,
        api_key: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        domain_names: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostBulkwhoisResponse:
        """
        Fetch WHOIS information for a list of domains in bulk

        Parameters
        ----------
        api_key : typing.Optional[str]
            Your API key

        format : typing.Optional[str]
            The response format (optional)

        domain_names : typing.Optional[typing.Sequence[str]]
            List of domain names to lookup

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostBulkwhoisResponse
            Successful bulk WHOIS lookup

        Examples
        --------
        from whoisfreaks import WhoisfreaksApi
        client = WhoisfreaksApi()
        client.get_live_whois_information_for_multiple_domains()
        """
        _response = self._raw_client.get_live_whois_information_for_multiple_domains(
            api_key=api_key, format=format, domain_names=domain_names, request_options=request_options
        )
        return _response.data

    def get_historical_whois_records_for_a_domain(
        self,
        *,
        api_key: str,
        domain_name: str,
        whois: str,
        page: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetWhoisHistoricalResponse:
        """
        Fetch historical WHOIS records for a given domain

        Parameters
        ----------
        api_key : str
            Your API key

        domain_name : str
            The domain name for historical WHOIS lookup

        whois : str
            The type of WHOIS lookup (historical)

        page : typing.Optional[str]
            The page number of the historical records (optional)

        format : typing.Optional[str]
            The format of the response (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWhoisHistoricalResponse
            Successful historical WHOIS lookup

        Examples
        --------
        from whoisfreaks import WhoisfreaksApi
        client = WhoisfreaksApi()
        client.get_historical_whois_records_for_a_domain(api_key='apiKey', domain_name='domainName', whois='whois', )
        """
        _response = self._raw_client.get_historical_whois_records_for_a_domain(
            api_key=api_key,
            domain_name=domain_name,
            whois=whois,
            page=page,
            format=format,
            request_options=request_options,
        )
        return _response.data

    def perform_a_reverse_whois_lookup_based_on_registrant_information(
        self,
        *,
        api_key: str,
        whois: str,
        keyword: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        owner: typing.Optional[str] = None,
        company: typing.Optional[str] = None,
        mode: typing.Optional[str] = None,
        exact: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        includes: typing.Optional[str] = None,
        page: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetWhoisReverseResponse:
        """
        Fetch domains associated with a given registrant

        Parameters
        ----------
        api_key : str
            Your API key

        whois : str
            The type of WHOIS lookup (reverse)

        keyword : typing.Optional[str]
            Keyword to search for in registrant information (optional)

        email : typing.Optional[str]
            Email to search for (optional)

        owner : typing.Optional[str]
            Owner to search for (optional)

        company : typing.Optional[str]
            Company to search for (optional)

        mode : typing.Optional[str]
            Mode of search (optional)

        exact : typing.Optional[str]
            Exact match flag (optional)

        format : typing.Optional[str]
            Format of response (optional)

        includes : typing.Optional[str]
            Include specific details (optional)

        page : typing.Optional[str]
            The page number of the reverse records (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWhoisReverseResponse
            Successful reverse WHOIS lookup

        Examples
        --------
        from whoisfreaks import WhoisfreaksApi
        client = WhoisfreaksApi()
        client.perform_a_reverse_whois_lookup_based_on_registrant_information(api_key='apiKey', whois='whois', )
        """
        _response = self._raw_client.perform_a_reverse_whois_lookup_based_on_registrant_information(
            api_key=api_key,
            whois=whois,
            keyword=keyword,
            email=email,
            owner=owner,
            company=company,
            mode=mode,
            exact=exact,
            format=format,
            includes=includes,
            page=page,
            request_options=request_options,
        )
        return _response.data


class AsyncWhoisfreaksApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : WhoisfreaksApiEnvironment
        The environment to use for requests from the client. from .environment import WhoisfreaksApiEnvironment

        Defaults to WhoisfreaksApiEnvironment.DEFAULT



    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from whoisfreaks import AsyncWhoisfreaksApi
    client = AsyncWhoisfreaksApi()
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: WhoisfreaksApiEnvironment = WhoisfreaksApiEnvironment.DEFAULT,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawWhoisfreaksApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWhoisfreaksApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWhoisfreaksApi
        """
        return self._raw_client

    async def get_live_whois_information_for_a_domain(
        self, *, api_key: str, domain_name: str, whois: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetV10WhoisResponse:
        """
        Fetch live WHOIS information for a given domain

        Parameters
        ----------
        api_key : str
            Your API key

        domain_name : str
            The domain name for WHOIS lookup

        whois : str
            The type of WHOIS lookup (live)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetV10WhoisResponse
            Successful WHOIS lookup

        Examples
        --------
        from whoisfreaks import AsyncWhoisfreaksApi
        import asyncio
        client = AsyncWhoisfreaksApi()
        async def main() -> None:
            await client.get_live_whois_information_for_a_domain(api_key='apiKey', domain_name='domainName', whois='whois', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_live_whois_information_for_a_domain(
            api_key=api_key, domain_name=domain_name, whois=whois, request_options=request_options
        )
        return _response.data

    async def get_live_whois_information_for_multiple_domains(
        self,
        *,
        api_key: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        domain_names: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostBulkwhoisResponse:
        """
        Fetch WHOIS information for a list of domains in bulk

        Parameters
        ----------
        api_key : typing.Optional[str]
            Your API key

        format : typing.Optional[str]
            The response format (optional)

        domain_names : typing.Optional[typing.Sequence[str]]
            List of domain names to lookup

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostBulkwhoisResponse
            Successful bulk WHOIS lookup

        Examples
        --------
        from whoisfreaks import AsyncWhoisfreaksApi
        import asyncio
        client = AsyncWhoisfreaksApi()
        async def main() -> None:
            await client.get_live_whois_information_for_multiple_domains()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_live_whois_information_for_multiple_domains(
            api_key=api_key, format=format, domain_names=domain_names, request_options=request_options
        )
        return _response.data

    async def get_historical_whois_records_for_a_domain(
        self,
        *,
        api_key: str,
        domain_name: str,
        whois: str,
        page: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetWhoisHistoricalResponse:
        """
        Fetch historical WHOIS records for a given domain

        Parameters
        ----------
        api_key : str
            Your API key

        domain_name : str
            The domain name for historical WHOIS lookup

        whois : str
            The type of WHOIS lookup (historical)

        page : typing.Optional[str]
            The page number of the historical records (optional)

        format : typing.Optional[str]
            The format of the response (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWhoisHistoricalResponse
            Successful historical WHOIS lookup

        Examples
        --------
        from whoisfreaks import AsyncWhoisfreaksApi
        import asyncio
        client = AsyncWhoisfreaksApi()
        async def main() -> None:
            await client.get_historical_whois_records_for_a_domain(api_key='apiKey', domain_name='domainName', whois='whois', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_historical_whois_records_for_a_domain(
            api_key=api_key,
            domain_name=domain_name,
            whois=whois,
            page=page,
            format=format,
            request_options=request_options,
        )
        return _response.data

    async def perform_a_reverse_whois_lookup_based_on_registrant_information(
        self,
        *,
        api_key: str,
        whois: str,
        keyword: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        owner: typing.Optional[str] = None,
        company: typing.Optional[str] = None,
        mode: typing.Optional[str] = None,
        exact: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        includes: typing.Optional[str] = None,
        page: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetWhoisReverseResponse:
        """
        Fetch domains associated with a given registrant

        Parameters
        ----------
        api_key : str
            Your API key

        whois : str
            The type of WHOIS lookup (reverse)

        keyword : typing.Optional[str]
            Keyword to search for in registrant information (optional)

        email : typing.Optional[str]
            Email to search for (optional)

        owner : typing.Optional[str]
            Owner to search for (optional)

        company : typing.Optional[str]
            Company to search for (optional)

        mode : typing.Optional[str]
            Mode of search (optional)

        exact : typing.Optional[str]
            Exact match flag (optional)

        format : typing.Optional[str]
            Format of response (optional)

        includes : typing.Optional[str]
            Include specific details (optional)

        page : typing.Optional[str]
            The page number of the reverse records (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWhoisReverseResponse
            Successful reverse WHOIS lookup

        Examples
        --------
        from whoisfreaks import AsyncWhoisfreaksApi
        import asyncio
        client = AsyncWhoisfreaksApi()
        async def main() -> None:
            await client.perform_a_reverse_whois_lookup_based_on_registrant_information(api_key='apiKey', whois='whois', )
        asyncio.run(main())
        """
        _response = await self._raw_client.perform_a_reverse_whois_lookup_based_on_registrant_information(
            api_key=api_key,
            whois=whois,
            keyword=keyword,
            email=email,
            owner=owner,
            company=company,
            mode=mode,
            exact=exact,
            format=format,
            includes=includes,
            page=page,
            request_options=request_options,
        )
        return _response.data


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: WhoisfreaksApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
