from __future__ import annotations
import numpy
import typing
from . import spectool
__all__ = ['FatropSolution', 'FatropStats', 'OCPTimeStepSampler', 'StageControlGridSampler', 'StageExpressionEvaluatorFactory', 'StageOCPApplication', 'StageOCPApplicationFactory', 'StageOCPSolution', 'spectool']
class FatropSolution:
    pass
class FatropStats:
    @property
    def compute_sd_time(self) -> float:
        ...
    @property
    def duinf_time(self) -> float:
        ...
    @property
    def eval_cv_count(self) -> int:
        ...
    @property
    def eval_cv_time(self) -> float:
        ...
    @property
    def eval_grad_count(self) -> int:
        ...
    @property
    def eval_grad_time(self) -> float:
        ...
    @property
    def eval_hess_count(self) -> int:
        ...
    @property
    def eval_hess_time(self) -> float:
        ...
    @property
    def eval_jac_count(self) -> int:
        ...
    @property
    def eval_jac_time(self) -> float:
        ...
    @property
    def eval_obj_count(self) -> int:
        ...
    @property
    def eval_obj_time(self) -> float:
        ...
    @property
    def initialization_time(self) -> float:
        ...
    @property
    def iterations_count(self) -> int:
        ...
    @property
    def time_total(self) -> float:
        ...
class OCPTimeStepSampler:
    pass
class StageControlGridSampler:
    pass
class StageExpressionEvaluatorFactory:
    def at_control(self) -> StageControlGridSampler:
        ...
    def at_t0(self) -> OCPTimeStepSampler:
        ...
    def at_tf(self) -> OCPTimeStepSampler:
        ...
class StageOCPApplication:
    def __init__(self, arg0: ...) -> None:
        ...
    def get_expression(self, arg0: str) -> StageExpressionEvaluatorFactory:
        ...
    def get_stats(self) -> FatropStats:
        ...
    def last_solution(self) -> StageOCPSolution:
        ...
    def optimize(self) -> int:
        ...
    def set_initial(self, arg0: FatropSolution) -> None:
        ...
    def set_initial_u(self, arg0: numpy.ndarray[numpy.float64]) -> None:
        ...
    def set_initial_x(self, arg0: numpy.ndarray[numpy.float64]) -> None:
        ...
    def set_option(self, arg0: str, arg1: float) -> None:
        ...
    def set_params(self, arg0: numpy.ndarray[numpy.float64], arg1: numpy.ndarray[numpy.float64]) -> None:
        ...
    def set_value(self, arg0: str, arg1: numpy.ndarray[numpy.float64]) -> None:
        ...
class StageOCPApplicationFactory:
    def __init__(self) -> None:
        ...
    def from_rockit_interface(self: str, arg0: str) -> StageOCPApplication:
        ...
class StageOCPSolution(FatropSolution):
    def __init__(self, arg0: ...) -> None:
        ...
    @typing.overload
    def evaluate(self, arg0: OCPTimeStepSampler) -> numpy.ndarray[numpy.float64]:
        ...
    @typing.overload
    def evaluate(self, arg0: StageControlGridSampler) -> numpy.ndarray[numpy.float64]:
        ...
    @property
    def u(self) -> numpy.ndarray[numpy.float64]:
        ...
    @property
    def x(self) -> numpy.ndarray[numpy.float64]:
        ...
__version__: str = '0.0.1'
