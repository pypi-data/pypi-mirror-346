"""
Interface de linha de comando para o framework OrNexus
"""

import os
import sys
import argparse
import shutil
from pathlib import Path
import asyncio
import re
import subprocess
import getpass
import json
import datetime
from dotenv import load_dotenv
import hashlib
import yaml
from pydantic import BaseModel, Field

# Verificar se motor est√° instalado e instalar se necess√°rio
try:
    import motor
except ImportError:
    print("‚ö†Ô∏è Pacote 'motor' n√£o encontrado. Instalando...")
    subprocess.run([sys.executable, "-m", "pip", "install", "motor"], check=True)
    import motor

# Verificar se hashlib est√° instalado
try:
    import hashlib
except ImportError:
    print("‚ö†Ô∏è Pacote 'hashlib' n√£o encontrado. Instalando...")
    subprocess.run([sys.executable, "-m", "pip", "install", "hashlib"], check=True)
    import hashlib

from ornexus.database import MongoDBAsyncIntegration, md5_hash

# Carregar vari√°veis de ambiente do .env (se existir)
load_dotenv()

def normalize_class_name(project_name):
    """
    Normaliza o nome do projeto para usar como nome de classe
    
    Args:
        project_name: Nome do projeto
        
    Returns:
        Nome da classe normalizado (PascalCase)
    """
    # Remover caracteres n√£o alfanum√©ricos e substituir por espa√ßos
    normalized = re.sub(r'[^a-zA-Z0-9]', ' ', project_name)
    # Dividir em palavras, capitalizar cada palavra e juntar
    return ''.join(word.capitalize() for word in normalized.split())

def create_project_structure(project_name):
    """
    Cria a estrutura b√°sica de um novo projeto baseado no Agno
    
    Args:
        project_name: Nome do projeto a ser criado
    """
    # Obter o diret√≥rio do pacote ornexus
    package_dir = Path(__file__).parent.absolute()
    
    # Normalizar o nome do projeto para nome de classe
    class_name = normalize_class_name(project_name)
    
    # Criar o diret√≥rio do projeto com caminho absoluto para evitar problemas
    project_dir = Path(project_name).absolute()
    if project_dir.exists():
        print(f"Erro: O diret√≥rio {project_name} j√° existe.")
        return False
    
    # Criar estrutura de diret√≥rios
    dirs = [
        project_dir,
        project_dir / "config",
        project_dir / "knowledge",
    ]
    
    for dir_path in dirs:
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"Criado diret√≥rio: {dir_path.name if dir_path == project_dir else str(dir_path).replace(str(project_dir) + '/', '')}")
    
    # Copiar arquivos de template
    templates = {
        package_dir / "config" / "agents.yaml": project_dir / "config" / "agents.yaml",
        package_dir / "config" / "tasks.yaml": project_dir / "config" / "tasks.yaml",
    }
    
    for src, dest in templates.items():
        shutil.copy2(src, dest)
        # Solu√ß√£o: usar uma string formatada em vez de relative_to
        dest_path = str(dest).replace(str(project_dir) + '/', '')
        print(f"‚úÖ Copiado: {src.name} -> {dest_path}")
    
    # Criar arquivo __init__.py do projeto
    with open(project_dir / "__init__.py", "w") as f:
        f.write('"""Projeto gerado pelo framework OrNexus"""\n\n')
    print(f"‚úÖ Criado arquivo: {project_name}/__init__.py")

    with open(project_dir / ".env", "w") as f:
        f.write('ANONYMIZED_TELEMETRY=true\n')
        f.write('CREWAI_DISABLE_TELEMETRY=true\n')
        f.write('OTEL_SDK_DISABLED=true\n')
        f.write('OPENAI_API_KEY=\n')
        f.write('ANTHROPIC_API_KEY=\n')
        f.write('MONGODB_CONN=\n')
        f.write('SERPAPI_API_KEY=\n')
        f.write('SERPER_API_KEY=\n')
    print(f"‚úÖ Criado arquivo: {project_name}/.env")
    
    # Criar arquivo main.py do projeto com m√©todo correto para execu√ß√£o ass√≠ncrona
    with open(project_dir / f"{project_name}.py", "w") as f:
        f.write(f'''from typing import Dict, Any, Optional
from pathlib import Path
import os
from datetime import datetime
import json
import yaml
from pydantic import BaseModel, Field
from agno.agent import Agent
from agno.team import Team
from agno.models.anthropic import Claude
from agno.models.openai import OpenAIChat
from agno.tools.crawl4ai import Crawl4aiTools
from agno.tools.serpapi import SerpApiTools

# Classe Pydantic para gerenciar os inputs da aplica√ß√£o
class AppInputs(BaseModel):
    topico: str = Field(
        default="Impactos da pol√≠tica monet√°ria dos bancos centrais em mercados emergentes",
        description="T√≥pico principal da pesquisa"
    )
    tema: str = Field(
        default="Como as decis√µes do FED afetam economias emergentes em 2024",
        description="Tema espec√≠fico a ser explorado"
    )
    datenow: str = Field(
        default_factory=lambda: datetime.now().strftime("%Y-%m-%d"),
        description="Data atual para contextualiza√ß√£o"
    )
    
    def __str__(self) -> str:
        """Converte os inputs para string em formato JSON para passar ao agente"""
        return json.dumps(self.model_dump())

#===============================================================================#
# Configura√ß√£o de conhecimento para o OrNexus
# Para mais informa√ß√µes sobre como configurar e utilizar bases de conhecimento,
# consulte a documenta√ß√£o oficial do Agno em: https://docs.agno.com/knowledge/introduction
#===============================================================================#

# from agno.knowledge.text import TextKnowledgeBase
# from agno.document.chunking.recursive import RecursiveChunking
# from agno.vectordb.mongodb import MongoDb

# # Exemplo de conex√£o do MongoDB Atlas
# mongodb_uri = os.getenv("MONGODB_CONN")
# print(f"Usando MongoDB URI: {{mongodb_uri}}")

# # Exemplo de inicializa√ß√£o do TextKnowledgeBase com MongoDB e RecursiveChunking
# knowledge = TextKnowledgeBase(
#     path=str(knowledge_dir),  # Caminho para a pasta knowledge com arquivos .txt
#     vector_db=MongoDb(
#         database="ornexus_knw",
#         collection_name="knowledge", 
#         db_url=mongodb_uri,
#         wait_until_index_ready=60,
#         wait_after_insert=300
#     ),
#     chunking_strategy=RecursiveChunking()
# )

class {class_name}:
    """Aplica√ß√£o baseada no framework OrNexus"""
    
    def __init__(self, recreate=False):
        # self.knowledge = knowledge        
        # if recreate:
        #     self.knowledge.load(recreate=True)
        # else:
        #     self.knowledge.load(recreate=False)

        with open('config/agents.yaml', 'r') as f:
            self.config_agents = yaml.safe_load(f)

        with open('config/tasks.yaml', 'r') as f:
            self.config_tasks = yaml.safe_load(f)

        self.sonnet3_7 = Claude(
            id="claude-3-7-sonnet-20250219",
            temperature=0.0,
            max_tokens=8000
        )
        
        self.gpt4o = OpenAIChat(
            id="gpt-4o",
            temperature=0.0,
        )

    def pesquisador(self) -> Agent:
        return Agent(
            name="Pesquisador Econ√¥mico",
            role=self.config_agents['researcher']['role'],
            goal=self.config_agents['researcher']['goal'],
            description=self.config_agents['researcher']['backstory'],
            instructions=self.config_tasks['pesquisador']['description'],
            expected_output=self.config_tasks['pesquisador']['expected_output'],
            model=self.sonnet3_7,
            debug_mode=True,
            telemetry=False,
            tools=[
                Crawl4aiTools(),
                SerpApiTools()
            ],
            show_tool_calls=True,
            # knowledge=self.knowledge
        )
    
    def redator_twitter(self) -> Agent:
        return Agent(
            name="Redator de Conte√∫do para Twitter",
            role=self.config_agents['content_writer']['role'],
            goal=self.config_agents['content_writer']['goal'],
            description=self.config_agents['content_writer']['backstory'],
            instructions=self.config_tasks['redator_twitter']['description'],
            expected_output=self.config_tasks['redator_twitter']['expected_output'],
            model=self.sonnet3_7,
            debug_mode=True,
            telemetry=False,
            # knowledge=self.knowledge
        )
    
    def team(self) -> Team:
        return Team(
            mode="collaborate",
            members=[
                self.pesquisador(),
                self.redator_twitter()
            ],
            model=self.sonnet3_7,
            debug_mode=True,
            success_criteria="Uma an√°lise econ√¥mica completa com conte√∫do pronto para redes sociais.",
            expected_output="Uma an√°lise econ√¥mica completa com conte√∫do pronto para redes sociais.",
            telemetry=False
        )

def main(inputs: Optional[AppInputs] = None):
    if not inputs:
        inputs = AppInputs()
    
    app = {class_name}(recreate=True)
    team = app.team()
    
    result = team.run(str(inputs))
    return result.content

if __name__ == "__main__":
    inputs = AppInputs(
        topico = "Escolha um t√≥pico",
        tema = "Escolha um tema",
        datenow = datetime.now().strftime("%Y-%m-%d"),
    )
    main(inputs)
''')
    print(f"‚úÖ Criado arquivo: {project_name}/{project_name}.py")
    
    # Criar requirements.txt
    with open(project_dir / "requirements.txt", "w") as f:
        f.write('agno\n')
        f.write('ornexus\n')
        f.write('openai\n')
        f.write('anthropic\n')
        f.write('pymongo\n')
        f.write('pyyaml\n')
        f.write('crawl4ai\n')
        f.write('google-search-results\n')
        f.write('motor\n')
    print(f"‚úÖ Criado arquivo: {project_name}/requirements.txt")
    
    # Instalar o UV se n√£o estiver instalado
    try:
        subprocess.run(["uv", "--version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
        print("‚úÖ UV j√° est√° instalado.")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("üîÑ Instalando o UV...")
        try:
            subprocess.run(["pip", "install", "--user", "uv"], check=True)
            print("‚úÖ UV instalado com sucesso.")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar o UV: {e}")
            print("‚ö†Ô∏è Ambiente virtual n√£o ser√° criado. Por favor, instale o UV manualmente: pip install uv")
            print(f"\nProjeto '{project_name}' criado com sucesso!")
            print(f"Classe principal: {class_name}")
            print("\nPara executar o projeto, use:")
            print(f"  cd {project_name}")
            print(f"  python -m {project_name}")
            return True
    
    # Criar ambiente virtual com UV
    print(f"üîÑ Criando ambiente virtual com UV em {project_name}/.venv...")
    os.chdir(project_dir)
    try:
        subprocess.run(["uv", "venv", ".venv"], check=True)
        print("‚úÖ Ambiente virtual criado.")
        
        # Instalar depend√™ncias usando UV global (n√£o o do ambiente virtual)
        print("üîÑ Instalando depend√™ncias no ambiente virtual...")
        
        try:
            # Usar o UV global para instalar no venv
            subprocess.run(["uv", "pip", "install", "--python", ".venv/bin/python", "-r", "requirements.txt"], check=True)
            print("‚úÖ Depend√™ncias instaladas no ambiente virtual.")
            
            # Instru√ß√µes para ativar o ambiente
            if sys.platform == "win32":
                activate_instr = f"  .venv\\Scripts\\activate"
            else:
                activate_instr = f"  source .venv/bin/activate"
            
            print(f"\nProjeto '{project_name}' baseado em Agno criado com sucesso!")
            print(f"Classe principal: {class_name}")
            print("\nPara usar o ambiente virtual e executar o projeto:")
            print(f"  cd {project_name}")
            print(activate_instr)
            print(f"  python -m {project_name}")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            print("Por favor, instale manualmente:")
            print(f"  cd {project_name}")
            if sys.platform == "win32":
                print(f"  .venv\\Scripts\\activate")
            else:
                print(f"  source .venv/bin/activate")
            print(f"  pip install -r requirements.txt")
    
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar ambiente virtual: {e}")
        print("Por favor, crie manualmente:")
        print(f"  cd {project_name}")
        print(f"  python -m venv .venv")
        print(f"  source .venv/bin/activate  # ou .venv\\Scripts\\activate no Windows")
        print(f"  pip install -r requirements.txt")
    
    # Voltar ao diret√≥rio original
    os.chdir(str(project_dir.parent))
    return True

def create_crewai_flow_project(project_name):
    """
    Cria a estrutura b√°sica de um novo projeto baseado em CrewAI
    
    Args:
        project_name: Nome do projeto a ser criado
    """
    # Verificar se o crewai est√° instalado
    try:
        import importlib.util
        crewai_spec = importlib.util.find_spec("crewai")
        if crewai_spec is None:
            print("‚ö†Ô∏è CrewAI n√£o est√° instalado. Instalando...")
            subprocess.run([sys.executable, "-m", "pip", "install", "crewai[tools]>=0.28.6"], check=True)
            print("‚úÖ CrewAI instalado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao verificar/instalar CrewAI: {e}")
        return False
    
    # Executar o comando crewai create flow
    try:
        print(f"üöÄ Criando projeto CrewAI Flow: {project_name}")
        subprocess.run(["crewai", "create", "flow", project_name], check=True)
        print(f"\n‚úÖ Projeto '{project_name}' baseado em CrewAI flow criado com sucesso!")
        print(f"\nPara executar o projeto, use:")
        print(f"  cd {project_name}")
        print(f"  crewai run")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar projeto CrewAI flow: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

async def authenticate_user(email, password):
    """
    Autentica um usu√°rio via API
    
    Args:
        email: Email do usu√°rio
        password: Senha do usu√°rio
    
    Returns:
        Dicion√°rio com informa√ß√µes do usu√°rio ou None se autentica√ß√£o falhar
    """
    try:
        # Usar a API para autentica√ß√£o
        from ornexus.database import AUTH_SERVICE_URL
        import requests
        
        # Calcular hash MD5 da senha
        password_md5 = hashlib.md5(password.encode('utf-8')).hexdigest()
        
        # Fazer requisi√ß√£o de login para a API
        login_url = f"{AUTH_SERVICE_URL}/login"
        response = requests.post(
            login_url,
            data={"username": email, "password": password_md5, "password_is_hashed": "true"}
        )
        
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            
            return {
                "email": email,
                "token": token
            }
        
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o servidor: {str(e)}")
        return None

def check_login_status():
    """
    Verifica se o usu√°rio est√° logado
    
    Returns:
        True se o usu√°rio estiver logado, False caso contr√°rio
    """
    # Verificar o arquivo auth.json (onde o token √© armazenado)
    auth_file = Path.home() / ".ornexus" / "auth.json"
    
    if auth_file.exists():
        try:
            with open(auth_file, "r") as f:
                config = json.load(f)
            
            # Verificar se h√° um token
            if "token" in config and config["token"]:
                return True
        except:
            pass
            
    # Se chegou aqui, n√£o est√° logado
    return False

async def login_command():
    """
    Executa o comando de login
    """
    print("üîë Login OrNexus")
    
    if check_login_status():
        print("‚úÖ Voc√™ j√° est√° logado.")
        return True
    
    email = input("Email: ")
    password = getpass.getpass("Senha: ")
    
    print("üîÑ Autenticando...")
    
    try:
        # Usar a fun√ß√£o de login via API
        from ornexus.database import api_login
        
        token = await api_login(email, password)
        
        if token:
            # Salvar token no arquivo de configura√ß√£o
            config_dir = Path.home() / ".ornexus"
            config_dir.mkdir(exist_ok=True)
            
            with open(config_dir / "auth.json", "w") as f:
                json.dump({"token": token}, f)
            
            print("‚úÖ Login bem-sucedido!")
            return True
        
        print("‚ùå Falha na autentica√ß√£o. Verifique suas credenciais.")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao autenticar: {str(e)}")
        print("Verifique se o servidor da API est√° dispon√≠vel.")
        return False

def logout_command():
    """
    Executa o logout do usu√°rio
    """
    auth_file = Path.home() / ".ornexus" / "auth.json"
    
    if not auth_file.exists():
        print("‚ùå Voc√™ n√£o est√° logado.")
        return
    
    try:
        # Remover arquivo de autentica√ß√£o
        auth_file.unlink()
        print("‚úÖ Logout realizado com sucesso.")
    except Exception as e:
        print(f"‚ùå Erro ao fazer logout: {str(e)}")

def main():
    """Fun√ß√£o principal da CLI"""
    parser = argparse.ArgumentParser(description="OrNexus CLI - Framework para cria√ß√£o de agentes")
    subparsers = parser.add_subparsers(dest="command", help="Comando a ser executado")
    
    # Comando 'login'
    login_parser = subparsers.add_parser("login", help="Autenticar na plataforma OrNexus")
    
    # Comando 'logout'
    logout_parser = subparsers.add_parser("logout", help="Sair da plataforma OrNexus")
    
    # Comando 'create'
    create_parser = subparsers.add_parser("create", help="Cria um novo projeto")
    create_subparsers = create_parser.add_subparsers(dest="create_type", help="Tipo de projeto a ser criado")
    
    # Subcomando 'create agno'
    agno_parser = create_subparsers.add_parser("agno", help="Cria projeto baseado em Agno")
    agno_parser.add_argument("project_name", help="Nome do projeto a ser criado")
    
    # Subcomando 'create flow'
    flow_parser = create_subparsers.add_parser("flow", help="Cria projeto baseado em CrewAI flow")
    flow_parser.add_argument("project_name", help="Nome do projeto a ser criado")
    
    # Comando 'run'
    run_parser = subparsers.add_parser("run", help="Executa um projeto existente")
    run_parser.add_argument("project_path", help="Caminho para o projeto")
    run_parser.add_argument("--input", "-i", help="Arquivo JSON com os inputs")
    
    # Comando 'deploy'
    deploy_parser = subparsers.add_parser("deploy", help="Cria estrutura de API no projeto")
    deploy_parser.add_argument("--path", "-p", help="Caminho para o projeto (opcional)")
    deploy_parser.add_argument("--force", "-f", action="store_true", help="For√ßar cria√ß√£o mesmo sem ser projeto OrNexus")
    deploy_parser.add_argument("--local", "-l", action="store_true", help="Fazer deploy em localhost usando Docker")
    deploy_parser.add_argument("--port", type=int, help="Porta para o deploy local (opcional, usa porta dispon√≠vel por padr√£o)")
    
    # Comando 'version'
    version_parser = subparsers.add_parser("version", help="Mostra a vers√£o do framework")
    
    args = parser.parse_args()
    
    if args.command == "login":
        asyncio.run(login_command())
    
    elif args.command == "logout":
        logout_command()
    
    elif args.command == "create":
        # Verificar se o usu√°rio est√° logado
        if not check_login_status():
            print("‚ùå Voc√™ precisa estar logado para criar projetos.")
            print("   Use 'ornexus login' para autenticar.")
            return
            
        if args.create_type == "agno":
            create_project_structure(args.project_name)
        elif args.create_type == "flow":
            create_crewai_flow_project(args.project_name)
        else:
            create_parser.print_help()
    
    elif args.command == "run":
        # Verificar se o usu√°rio est√° logado
        if not check_login_status():
            print("‚ùå Voc√™ precisa estar logado para executar projetos.")
            print("   Use 'ornexus login' para autenticar.")
            return
            
        # Implementar a execu√ß√£o direta de projetos
        print("Execu√ß√£o direta de projetos n√£o implementada ainda.")
    
    elif args.command == "deploy":
        # Verificar se o usu√°rio est√° logado
        if not check_login_status():
            print("‚ùå Voc√™ precisa estar logado para fazer deploy.")
            print("   Use 'ornexus login' para autenticar.")
            return
            
        # Sempre usar for√ßa=True por padr√£o, independentemente da flag --force
        deploy_success = deploy_api_structure(args.path, force=True)
        
        # Se o deploy foi bem-sucedido e a op√ß√£o --local foi especificada
        if deploy_success and args.local:
            # Determinar o caminho do projeto
            if args.path:
                project_dir = Path(args.path)
            else:
                project_dir = Path.cwd()
            
            # Verificar se o Docker est√° instalado
            if not check_docker_installed():
                print("üê≥ Docker n√£o encontrado no sistema.")
                # Tentar instalar o Docker
                docker_installed = install_docker(sys.platform)
                if not docker_installed:
                    print("‚ùå N√£o foi poss√≠vel instalar o Docker automaticamente.")
                    print("üìù Por favor, instale o Docker manualmente antes de usar a op√ß√£o --local.")
                    return
            
            # Fazer deploy em localhost
            deploy_docker_localhost(project_dir, args.port)
    
    elif args.command == "version":
        try:
            # M√©todo 1: Tentar obter a vers√£o instalada via pip
            import subprocess
            result = subprocess.run(
                [sys.executable, "-m", "pip", "show", "ornexus"], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                # Extrair a vers√£o da sa√≠da do pip show
                for line in result.stdout.splitlines():
                    if line.startswith("Version:"):
                        version = line.split(":", 1)[1].strip()
                        print(f"OrNexus v{version}")
                        break
                else:
                    # Fallback 1: Tentar ler setup.cfg
                    try:
                        import configparser
                        cfg_path = Path(__file__).resolve().parent.parent / "setup.cfg"
                        if cfg_path.exists():
                            config = configparser.ConfigParser()
                            config.read(cfg_path)
                            if 'metadata' in config and 'version' in config['metadata']:
                                version = config['metadata']['version']
                                print(f"OrNexus v{version}")
                            else:
                                # Fallback 2: Usar pkg_resources
                                import pkg_resources
                                version = pkg_resources.get_distribution("ornexus").version
                                print(f"OrNexus v{version}")
                        else:
                            # Fallback 2: Usar pkg_resources
                            import pkg_resources
                            version = pkg_resources.get_distribution("ornexus").version
                            print(f"OrNexus v{version}")
                    except Exception:
                        # Fallback 3: Usar importlib.metadata
                        try:
                            import importlib.metadata
                            version = importlib.metadata.version("ornexus")
                            print(f"OrNexus v{version}")
                        except Exception:
                            # Fallback 4: Usar a vers√£o do m√≥dulo (potencialmente desatualizada)
                            from ornexus import __version__
                            print(f"OrNexus v{__version__}")
            else:
                # Se pip show falhar, tentar outras abordagens
                try:
                    import pkg_resources
                    version = pkg_resources.get_distribution("ornexus").version
                    print(f"OrNexus v{version}")
                except Exception:
                    try:
                        import importlib.metadata
                        version = importlib.metadata.version("ornexus")
                        print(f"OrNexus v{version}")
                    except Exception:
                        from ornexus import __version__
                        print(f"OrNexus v{__version__}")
        except Exception as e:
            # √öltimo recurso: use a vers√£o do m√≥dulo com um aviso
            from ornexus import __version__
            print(f"OrNexus v{__version__} (aviso: pode n√£o refletir a vers√£o instalada)")
    
    else:
        parser.print_help()

def init_project():
    """
    Inicializa o projeto OrNexus:
    - Cria diret√≥rio knowledge
    """
    # Criar diret√≥rio knowledge se n√£o existir
    knowledge_dir = Path("knowledge")
    knowledge_dir.mkdir(parents=True, exist_ok=True)
    print(f"‚úÖ Diret√≥rio {knowledge_dir} criado!")


def show_knowledge_summary():
    """
    Exibe um resumo dos arquivos de conhecimento
    """
    try:
        # 1. Verifique se o diret√≥rio knowledge existe
        knowledge_dir = Path("knowledge")
        if not knowledge_dir.exists():
            print(f"‚ùå Diret√≥rio {knowledge_dir} n√£o encontrado!")
            return
            
        # Contador de arquivos de texto na pasta principal
        txt_files = list(knowledge_dir.glob('*.txt'))
        print(f"Encontrados {len(txt_files)} arquivos de texto (.txt) em {knowledge_dir}")
        
    except Exception as e:
        print(f"Erro ao exibir resumo dos arquivos de conhecimento: {e}") 

def deploy_api_structure(project_path=None, force=True):
    """
    Cria a estrutura de API completa para um projeto executando o script
    install_api_structure.sh na pasta do projeto
    
    Args:
        project_path: Caminho para o projeto (opcional, usa diret√≥rio atual se n√£o fornecido)
        force: Se True, ignora a verifica√ß√£o de projeto v√°lido (agora True por padr√£o)
    """
    import subprocess
    import os
    
    # Determinar o caminho do projeto
    if project_path:
        project_dir = Path(project_path)
    else:
        project_dir = Path.cwd()
    
    # Criar o diret√≥rio se n√£o existir
    if not project_dir.exists():
        print(f"üìÅ Criando diret√≥rio do projeto: {project_dir}")
        try:
            project_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio: {e}")
            return False
    
    print(f"üìÅ Criando estrutura de API em: {project_dir}")
    
    # Verifica√ß√µes para diferentes tipos de projetos (opcional agora)
    is_valid_project = any([
        (project_dir / "knowledge").exists(),  # Verifica√ß√£o para Agno
        (project_dir / "flows").exists(),      # Verifica√ß√£o para CrewAI (flow)
        (project_dir / "crews").exists(),      # Verifica√ß√£o para CrewAI (crew)
        force                                  # Se force=True, sempre √© v√°lido
    ])
    
    if not is_valid_project:
        print(f"‚ö†Ô∏è Aviso: Criando API em um diret√≥rio que n√£o parece ser um projeto OrNexus reconhecido.")
    
    # Localizar o script install_api_structure.sh no pacote
    package_dir = Path(__file__).parent.absolute()
    script_path = package_dir / "deploy" / "install_api_structure.sh"
    
    if not script_path.exists():
        print(f"‚ùå Erro: Script de instala√ß√£o n√£o encontrado.")
        return False
    
    # Garantir que o script tem permiss√µes de execu√ß√£o
    script_path.chmod(0o755)
    
    # Mudar para o diret√≥rio do projeto antes de executar o script
    original_dir = os.getcwd()
    os.chdir(project_dir)
    
    try:
        print(f"‚öôÔ∏è Executando script de instala√ß√£o...")
        result = subprocess.run(["bash", str(script_path)], check=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Estrutura de API criada com sucesso em {project_dir}")
            return True
        else:
            print(f"‚ùå Erro ao executar o script de instala√ß√£o (c√≥digo: {result.returncode})")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar o script: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    finally:
        # Voltar ao diret√≥rio original
        os.chdir(original_dir) 

def check_docker_installed():
    """
    Verifica se o Docker est√° instalado no sistema
    
    Returns:
        bool: True se o Docker est√° instalado, False caso contr√°rio
    """
    try:
        result = subprocess.run(["docker", "--version"], 
                                capture_output=True, 
                                text=True, 
                                check=False)
        return result.returncode == 0
    except FileNotFoundError:
        return False

def install_docker(system):
    """
    Instala o Docker com base no sistema operacional
    
    Args:
        system: Sistema operacional ('darwin' para macOS, 'linux' para Linux, etc.)
        
    Returns:
        bool: True se a instala√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        if system == 'darwin':  # macOS
            print("üì¶ Instalando Docker Desktop para macOS...")
            print("‚ö†Ô∏è Voc√™ precisar√° fornecer sua senha para instalar o Docker...")
            
            # Verifica se o Homebrew est√° instalado
            result = subprocess.run(["which", "brew"], 
                                   capture_output=True, 
                                   text=True)
            
            if result.returncode != 0:
                print("üç∫ Instalando Homebrew...")
                subprocess.run(["/bin/bash", "-c", 
                              "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"], 
                              check=True)
            
            # Instala o Docker Desktop via Homebrew
            subprocess.run(["brew", "install", "--cask", "docker"], check=True)
            print("‚úÖ Docker Desktop instalado com sucesso!")
            return True
            
        elif system.startswith('linux'):
            print("üì¶ Instalando Docker Engine para Linux...")
            # Detecta a distribui√ß√£o
            if os.path.exists('/etc/debian_version'):  # Debian/Ubuntu
                subprocess.run(["sudo", "apt", "update"], check=True)
                subprocess.run(["sudo", "apt", "install", "-y", "docker.io"], check=True)
                subprocess.run(["sudo", "systemctl", "enable", "docker"], check=True)
                subprocess.run(["sudo", "systemctl", "start", "docker"], check=True)
                # Adiciona usu√°rio ao grupo docker para n√£o precisar de sudo
                subprocess.run(["sudo", "usermod", "-aG", "docker", getpass.getuser()], check=True)
                print("‚úÖ Docker instalado com sucesso!")
                print("‚ö†Ô∏è Voc√™ pode precisar reiniciar sua sess√£o para usar o Docker sem sudo.")
                return True
            elif os.path.exists('/etc/fedora-release'):  # Fedora
                subprocess.run(["sudo", "dnf", "-y", "install", "docker"], check=True)
                subprocess.run(["sudo", "systemctl", "enable", "docker"], check=True)
                subprocess.run(["sudo", "systemctl", "start", "docker"], check=True)
                subprocess.run(["sudo", "usermod", "-aG", "docker", getpass.getuser()], check=True)
                print("‚úÖ Docker instalado com sucesso!")
                return True
            else:
                print("‚ùå Distribui√ß√£o Linux n√£o suportada para instala√ß√£o autom√°tica.")
                print("üìù Por favor, instale o Docker manualmente: https://docs.docker.com/engine/install/")
                return False
                
        elif system.startswith('win'):  # Windows
            print("üì¶ Iniciando download do Docker Desktop para Windows...")
            # Abre a p√°gina de download do Docker Desktop
            subprocess.run(["start", "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe"], shell=True)
            print("‚ö†Ô∏è Por favor, complete a instala√ß√£o do Docker Desktop manualmente.")
            return False
            
        else:
            print(f"‚ùå Sistema operacional n√£o suportado: {system}")
            return False
            
    except subprocess.SubprocessError as e:
        print(f"‚ùå Erro ao instalar Docker: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def find_available_port(start_port=8000, end_port=9000):
    """
    Encontra uma porta dispon√≠vel no localhost
    
    Args:
        start_port: Porta inicial para verifica√ß√£o
        end_port: Porta final para verifica√ß√£o
        
    Returns:
        int: Primeira porta dispon√≠vel encontrada
    """
    import socket
    
    for port in range(start_port, end_port):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            result = s.connect_ex(('localhost', port))
            if result != 0:  # Se n√£o conseguir conectar, a porta est√° dispon√≠vel
                return port
                
    # Se nenhuma porta estiver dispon√≠vel, usa uma porta padr√£o
    return 8080

def deploy_docker_localhost(project_dir, port=None):
    """
    Faz deploy do projeto em localhost usando Docker
    
    Args:
        project_dir: Caminho para o diret√≥rio do projeto
        port: Porta para mapeamento (opcional, caso n√£o seja fornecida, encontra uma porta dispon√≠vel)
        
    Returns:
        bool: True se o deploy foi bem-sucedido, False caso contr√°rio
    """
    try:
        # Verifica se o docker-compose.yml existe no projeto
        docker_compose_path = project_dir / "docker-compose.yml"
        if not docker_compose_path.exists():
            print("‚ùå Arquivo docker-compose.yml n√£o encontrado no projeto.")
            return False
            
        # Se a porta n√£o foi especificada, encontra uma dispon√≠vel
        if port is None:
            port = find_available_port()
            
        print(f"üåê Utilizando porta {port} para o deploy local")
        
        # Verifica se o Docker est√° rodando
        docker_status = subprocess.run(["docker", "info"], 
                                     capture_output=True, 
                                     text=True, 
                                     check=False)
                                     
        if docker_status.returncode != 0:
            print("‚öôÔ∏è Iniciando o Docker...")
            # No macOS, tenta iniciar o Docker Desktop
            if sys.platform == 'darwin':
                subprocess.run(["open", "-a", "Docker"], check=False)
                # Aguarda o Docker iniciar
                for _ in range(30):  # Espera at√© 30 segundos
                    time.sleep(1)
                    docker_check = subprocess.run(["docker", "info"], 
                                               capture_output=True, 
                                               check=False)
                    if docker_check.returncode == 0:
                        break
                else:
                    print("‚ö†Ô∏è Tempo esgotado esperando o Docker iniciar. Por favor, inicie-o manualmente.")
                    return False
        
        # Executa docker-compose com a porta definida
        os.environ["PORT"] = str(port)
        print(f"üê≥ Iniciando containers Docker em localhost:{port}...")
        
        # Para quaisquer containers anteriores
        subprocess.run(["docker-compose", "-f", str(docker_compose_path), "down"], 
                      cwd=project_dir,
                      check=False)
                      
        # Inicia os containers em modo destacado
        subprocess.run(["docker-compose", "-f", str(docker_compose_path), "up", "-d"], 
                      cwd=project_dir,
                      check=True)
                      
        print(f"‚úÖ Deploy realizado com sucesso em http://localhost:{port}")
        print(f"üìò Documenta√ß√£o da API: http://localhost:{port}/docs")
        return True
        
    except subprocess.SubprocessError as e:
        print(f"‚ùå Erro ao executar Docker: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False 