Metadata-Version: 2.4
Name: scaffold-fastapi
Version: 0.1.0
Summary: FastAPI project scaffolder CLI tool
Author-email: Your Name <your.email@example.com>
License: MIT
License-File: LICENSE
Classifier: Framework :: FastAPI
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Requires-Python: >=3.9
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: rich>=13.0.0
Requires-Dist: typer>=0.9.0
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: build>=1.0.0; extra == 'dev'
Requires-Dist: isort>=5.0.0; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.0.1; extra == 'dev'
Requires-Dist: twine>=4.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# FastAPI Project Scaffolder

A command-line tool to generate FastAPI project scaffolds with various database, message broker, and deployment options.

## Features

- **Database Support**: PostgreSQL, MongoDB, SQLite
- **Message Broker**: Redis, RabbitMQ
- **Deployment Stacks**: Minimal, Full (AWS ECS), Serverless
- **Production-Ready**: Docker, Terraform, Helm charts
- **Dependency Management**: Uses `uv` for virtual environments and package installation

## Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/scaffold-fastapi.git
cd scaffold-fastapi

# Install the package
pip install -e .
```

## Usage

```bash
# Basic usage
scaffold-fastapi create my-project --db=postgresql --broker=redis --stack=full

# Interactive mode (will prompt for missing options)
scaffold-fastapi create my-project
```

### Command Options

- `--db`: Database type (postgresql, mongodb, sqlite)
- `--broker`: Message broker (redis, rabbitmq)
- `--stack`: Deployment stack (minimal, full, serverless)

## Project Structure

The generated project will have the following structure:

```
my-project/
├── app/
│   ├── api/
│   │   └── v1/
│   ├── core/
│   ├── db/
│   ├── models/
│   ├── schemas/
│   └── main.py
├── tasks/
│   ├── celery_app.py
│   └── sample_tasks.py
├── infra/
│   ├── docker/
│   ├── terraform/
│   └── helm/
├── tests/
├── .env
├── .env.example
├── Dockerfile
├── docker-compose.yml
└── requirements.txt
```

## Development

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Format code
black .
isort .
```

## License

MIT