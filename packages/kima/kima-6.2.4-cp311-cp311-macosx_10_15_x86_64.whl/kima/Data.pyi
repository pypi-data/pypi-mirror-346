from _typeshed import Incomplete
from typing import Callable, ClassVar

class ETVData:
    M0_epoch: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def epochs(self): ...
    @property
    def et(self): ...
    @property
    def etsig(self): ...

class GAIAdata:
    M0_epoch: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def pf(self): ...
    @property
    def psi(self): ...
    @property
    def t(self): ...
    @property
    def w(self): ...
    @property
    def wsig(self): ...

class PHOTdata:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def N(self): ...
    @property
    def sig(self): ...
    @property
    def t(self): ...
    @property
    def y(self): ...

class RVData:
    plot: ClassVar[Callable] = ...
    M0_epoch: Incomplete
    double_lined: Incomplete
    indicator_names: Incomplete
    instrument: Incomplete
    instruments: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_RV_max(self, *args, **kwargs): ...
    def get_RV_mean(self, *args, **kwargs): ...
    def get_RV_min(self, *args, **kwargs): ...
    def get_RV_span(self, *args, **kwargs): ...
    def get_RV_std(self, *args, **kwargs): ...
    def get_RV_var(self, *args, **kwargs): ...
    def get_max_RV_span(self, *args, **kwargs): ...
    def get_t_max(self, *args, **kwargs): ...
    def get_t_middle(self, *args, **kwargs): ...
    def get_t_min(self, *args, **kwargs): ...
    def get_timespan(self, *args, **kwargs): ...
    def get_trend_magnitude(self, *args, **kwargs): ...
    def load(self, *args, **kwargs): ...
    def topslope(self, *args, **kwargs): ...
    @property
    def N(self): ...
    @property
    def actind(self): ...
    @property
    def datafile(self): ...
    @property
    def datafiles(self): ...
    @property
    def multi(self): ...
    @property
    def normalized_actind(self): ...
    @property
    def obsi(self): ...
    @property
    def sig(self): ...
    @property
    def skip(self): ...
    @property
    def t(self): ...
    @property
    def units(self): ...
    @property
    def y(self): ...

class loadtxt:
    def __init__(self, *args, **kwargs) -> None: ...
    def comments(self, *args, **kwargs): ...
    def delimiters(self, *args, **kwargs): ...
    def max_rows(self, *args, **kwargs): ...
    def skiprows(self, *args, **kwargs): ...
    def usecols(self, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...
