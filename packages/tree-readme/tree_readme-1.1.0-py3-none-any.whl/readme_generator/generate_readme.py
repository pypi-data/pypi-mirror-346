from pathlib import Path
import argparse
from readme_generator.readme_builder import build_readme


def generate_readme(
    repo_path: str,
    overview: str = "",
    exclude_dirs: set[str] = None,
    exclude_files: set[str] = None,
) -> None:
    """
    Generates README.md with folder tree.

    Args:
        repo_path (str): Path to the repository.
        overview (str): Overview text for the README.
        exclude_dirs (set[str]): Directories to exclude from the folder tree.
        exclude_files (set[str]): Files to exclude from the folder tree.
    """
    readme_content = build_readme(
        repo_path, overview, exclude_dirs=exclude_dirs, exclude_files=exclude_files
    )
    output_path = Path(repo_path) / "README.md"
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(readme_content)
    print(f"âœ… README.md generated at {output_path}")

def main():
    parser = argparse.ArgumentParser(description="Generate README.md for a repository.")
    parser.add_argument("repo_path", type=str, help="Path to the repository.")
    parser.add_argument(
        "--overview",
        type=str,
        default="",
        help="Overview text for the README.",
    )
    parser.add_argument(
        "--exclude-dirs",
        type=str,
        nargs="*",
        default=None,
        help="Directories to exclude from the folder tree.",
    )
    parser.add_argument(
        "--exclude-files",
        type=str,
        nargs="*",
        default=None,
        help="Files to exclude from the folder tree.",
    )
    args = parser.parse_args()
    print(args)
    generate_readme(args.repo_path, args.overview, set(args.exclude_dirs), set(args.exclude_files))

if __name__ == "__main__":
    repo_path = Path(__file__).resolve().parent.parent
    generate_readme(
        repo_path,
        overview="This is a sample README generated by the script.",
        exclude_dirs={"venv", "__pycache__", ".egg-info"},
        exclude_files={},
    )