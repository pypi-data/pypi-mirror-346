import attr
import pandas as pd
from ._log_level import LogLevel as LogLevel
from ._types_shared import get_new_id as get_new_id
from _typeshed import Incomplete
from abc import ABC
from datetime import datetime
from pathlib import Path
from rich.table import Table
from solas_shared import db as db, ui as ui
from sqlalchemy import Column
from typing import Dict, List, Optional, TypeVar, Union

T = TypeVar('T')

class SolasType(ABC):
    @classmethod
    def id_columns(cls) -> List[Column]: ...
    @classmethod
    def common_columns(cls) -> List[Column]: ...
    @classmethod
    def common_columns_list(cls) -> List[str]: ...
    @classmethod
    def all_persist_columns_list(cls) -> List[str]: ...
    id: str
    created: Optional[datetime]
    updated: Optional[datetime]
    __user__: Optional[str]
    __node__: Optional[str]
    def save(self) -> T: ...
    @classmethod
    def get(cls, id: str) -> Optional[T]: ...
    def log(self, for_display: Optional[bool] = ..., max_records: Optional[int] = ...): ...
    def to_pickle(self, path: Union[Path, str]) -> None: ...
    def to_dict(self) -> dict: ...
    def to_tuple(self) -> tuple: ...
    def to_json(self, indent: Incomplete | None = ..., path: Optional[Path] = ...) -> str: ...
    def to_dataframe(self) -> pd.DataFrame: ...
    def validate(self) -> None: ...
    def show(self) -> None: ...
    def summary_styled(self) -> pd.DataFrame: ...
    def fields_dict(self) -> Dict[str, attr.Attribute]: ...
    def __rich__(self) -> Table: ...
    def summary_fields(self) -> Dict[str, attr.Attribute]: ...
    def summary(self, include_log_summary: bool = ...) -> pd.DataFrame: ...
    def __init__(self, id, created, updated, user__, node__, version__) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
