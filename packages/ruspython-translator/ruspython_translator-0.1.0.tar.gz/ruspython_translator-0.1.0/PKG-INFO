Metadata-Version: 2.1
Name: ruspython_translator
Version: 0.1.0
Summary: Библиотека для выполнения Python кода с русскими ключевыми словами
Home-page: https://github.com/твой_ник/ruspython_translator
Author: Твое Имя или Никнейм
Author-email: твой@email.com
Keywords: russian python,python на русском,транслятор,интерпретатор
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Interpreters
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Natural Language :: Russian
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.md

##RusPython Translator
Добро пожаловать в RusPython Translator!
Эта библиотека позволяет писать и выполнять Python-код, используя
русские аналоги стандартных ключевых слов Python. Она создана с целью
облегчения входа в программирование для русскоязычных пользователей,
особенно для тех, кому английские ключевые слова могут показаться
барьером на начальном этапе.

----------------------------------------------------------------------
1. Описание
----------------------------------------------------------------------

RusPython Translator предоставляет функции для трансляции (перевода)
кода, написанного с использованием русских ключевых слов
(например, `ЕСЛИ` вместо `if`, `ДЛЯ` вместо `for`, `ФУНКЦИЯ` вместо `def`),
в обычный, исполняемый Python-код. После трансляции этот код может быть
выполнен стандартным интерпретатором Python.

Это НЕ новый язык программирования, а скорее "обертка" или
"транслятор" для Python, позволяющий использовать родной язык
для некоторых управляющих конструкций.

----------------------------------------------------------------------
2. Основные возможности
----------------------------------------------------------------------

*   **Трансляция кода:** Перевод исходного кода с русскими ключевыми
    словами в стандартный Python-код.
*   **Выполнение кода:** Возможность непосредственного выполнения
    транслированного кода.
*   **Снижение порога вхождения:** Помощь начинающим в освоении логики
    программирования без немедленной необходимости запоминать
    англоязычную терминологию.
*   **Учебный инструмент:** Может использоваться как вспомогательное
    средство при обучении основам Python.

----------------------------------------------------------------------
3. Установка
----------------------------------------------------------------------

Для установки библиотеки используйте менеджер пакетов pip:

```bash
pip install ruspython_translator
```

Убедитесь, что у вас установлен Python (версии 3.x) и pip.
Как использовать (Пример)
После установки вы можете импортировать и использовать библиотеку
в своих Python-скриптах.
# Пример использования (предполагаемый API, уточните в документации)
import ruspython_translator
русский_код = """
ФУНКЦИЯ приветствие(имя):
  ВЫВЕСТИ "Привет, " + имя + "!"
переменная = 10
ЕСЛИ переменная > 5:
  приветствие("Мир")
ИНАЧЕ:
  ВЫВЕСТИ "Переменная не больше 5"
ДЛЯ i В ДИАПАЗОН(3):
  ВЫВЕСТИ i
"""

# Вариант 1: Трансляция и затем выполнение
# python_code = ruspython_translator.перевести(русский_код)
# exec(python_code)

# Вариант 2: Прямое выполнение (если есть такая функция)
ruspython_translator.выполнить(русский_код) # Или ruspython_translator.run(русский_код)
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

Примечание: Точные имена функций (перевести, выполнить или run)
и способы их использования могут отличаться. Обратитесь к документации
библиотеки или примерам кода для получения точной информации.

Поддерживаемые русские ключевые слова (Примерный список)

Библиотека стремится поддерживать основные ключевые слова Python.
Вот некоторые из них (список может быть неполным и будет расширяться):

ЕСЛИ -> if

ИНАЧЕ ЕСЛИ -> elif

ИНАЧЕ -> else

ДЛЯ -> for

В -> in (в контексте циклов ДЛЯ ... В ...)

ПОКА -> while

ФУНКЦИЯ -> def

ВЕРНУТЬ -> return

ВЫВЕСТИ -> print (или другая функция вывода)

ИСТИНА -> True

ЛОЖЬ -> False

НИЧТО -> None

КЛАСС -> class

ПОПЫТАТЬСЯ -> try

КРОМЕ -> except

НАКОНЕЦ -> finally

ИМПОРТ -> import

ИЗ -> from (в контексте ИЗ ... ИМПОРТ ...)

ПРОДОЛЖИТЬ -> continue

ПРЕРВАТЬ -> break

УТВЕРЖДАТЬ -> assert

УДАЛИТЬ -> del

ГЛОБАЛЬНЫЙ -> global

НЕЛОКАЛЬНЫЙ -> nonlocal

СО -> with

КАК -> as (в контексте ИМПОРТ ... КАК ... или СО ... КАК ...)

ВОЗБУДИТЬ -> raise

ДАВАТЬ -> yield

Важно:

Синтаксис самого Python (отступы, двоеточия и т.д.) должен
соблюдаться. Транслируются только ключевые слова.
Имена переменных, функций, классов и т.д. могут быть как на русском,
так и на английском (стандарт Python это позволяет для Unicode).
Ограничения и предупреждени
Не замена стандартному Python: Данная библиотека является
вспомогательным инструментом. Для серьезной разработки
рекомендуется изучать и использовать стандартный синтаксис Python.
Производительность: Процесс трансляции может вносить небольшие
накладные расходы по сравнению с выполнением "чистого" Python-кода.

Отладка: Сообщения об ошибках и трассировки стека будут, скорее
всего, относиться к транслированному (стандартному Python) коду,
что может немного усложнить отладку.

Совместимость: Стандартные библиотеки Python и сторонние модули
используют англоязычные имена функций и методов.

Цель проекта
Основная цель RusPython Translator — сделать первые шаги в изучении
программирования на Python более доступными и интуитивно понятными
для русскоязычной аудитории, позволяя сосредоточиться на логике
и алгоритмах, а не на запоминании английских команд.
Вклад и обратная связь

Если у вас есть предложения по улучшению, новые идеи для ключевых слов
или вы нашли ошибку, пожалуйста, создайте issue в репозитории проекта
(если он доступен публично) или свяжитесь с автором.

Автор: Robot 
Год: 2025
