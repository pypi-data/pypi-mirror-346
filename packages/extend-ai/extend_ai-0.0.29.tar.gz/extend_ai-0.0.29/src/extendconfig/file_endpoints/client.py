# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.post_files_response import PostFilesResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.error import Error
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FileEndpointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_file(
        self,
        *,
        name: str,
        url: typing.Optional[str] = OMIT,
        raw_text: typing.Optional[str] = OMIT,
        media_type: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostFilesResponse:
        """
        Create a new file in Extend for use in an evaluation set. This endpoint is deprecated, use /files/upload instead.

        Parameters
        ----------
        name : str
            The name of the file

        url : typing.Optional[str]
            A pre signed URL for the file

        raw_text : typing.Optional[str]
            The raw text content of the file

        media_type : typing.Optional[str]
            The media type of the file (e.g. application/pdf)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostFilesResponse
            Successfully created file

        Examples
        --------
        from extendconfig import Extend

        client = Extend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.file_endpoints.create_file(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "files",
            method="POST",
            json={
                "name": name,
                "url": url,
                "rawText": raw_text,
                "mediaType": media_type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PostFilesResponse,
                    parse_obj_as(
                        type_=PostFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFileEndpointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_file(
        self,
        *,
        name: str,
        url: typing.Optional[str] = OMIT,
        raw_text: typing.Optional[str] = OMIT,
        media_type: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostFilesResponse:
        """
        Create a new file in Extend for use in an evaluation set. This endpoint is deprecated, use /files/upload instead.

        Parameters
        ----------
        name : str
            The name of the file

        url : typing.Optional[str]
            A pre signed URL for the file

        raw_text : typing.Optional[str]
            The raw text content of the file

        media_type : typing.Optional[str]
            The media type of the file (e.g. application/pdf)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostFilesResponse
            Successfully created file

        Examples
        --------
        import asyncio

        from extendconfig import AsyncExtend

        client = AsyncExtend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file_endpoints.create_file(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "files",
            method="POST",
            json={
                "name": name,
                "url": url,
                "rawText": raw_text,
                "mediaType": media_type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PostFilesResponse,
                    parse_obj_as(
                        type_=PostFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
