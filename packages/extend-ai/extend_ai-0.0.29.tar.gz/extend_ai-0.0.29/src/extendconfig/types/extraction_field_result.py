# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .extraction_field import ExtractionField
import pydantic
from .extraction_field_result_type import ExtractionFieldResultType
from .extraction_field_result_value import ExtractionFieldResultValue
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .insight import Insight
from .extraction_field_result_reference import ExtractionFieldResultReference
from .enum_option import EnumOption
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.pydantic_utilities import update_forward_refs


class ExtractionFieldResult(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier for this field
    """

    type: ExtractionFieldResultType = pydantic.Field()
    """
    The type of the extracted field
    """

    value: ExtractionFieldResultValue = pydantic.Field()
    """
    The extracted value, type depends on the field type
    """

    schema_: typing_extensions.Annotated[
        typing.Optional[typing.List[ExtractionField]], FieldMetadata(alias="schema")
    ] = pydantic.Field(default=None)
    """
    The field schema of nested fields
    """

    insights: typing.Optional[typing.List[Insight]] = pydantic.Field(default=None)
    """
    Reasoning and other insights from the model
    """

    references: typing.List[ExtractionFieldResultReference] = pydantic.Field()
    """
    References for the extracted field
    """

    enum: typing.Optional[typing.List[EnumOption]] = pydantic.Field(default=None)
    """
    The enum options for enum fields, only set when type=enum
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(ExtractionField, ExtractionFieldResult=ExtractionFieldResult)
