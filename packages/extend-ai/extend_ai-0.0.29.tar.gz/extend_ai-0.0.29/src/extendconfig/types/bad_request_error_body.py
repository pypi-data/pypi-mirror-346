# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .bad_request_error_body_code import BadRequestErrorBodyCode
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BadRequestErrorBody(UniversalBaseModel):
    code: typing.Optional[BadRequestErrorBodyCode] = None
    success: typing.Optional[bool] = None
    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message
    """

    request_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="requestId")] = pydantic.Field(
        default=None
    )
    """
    Request ID for troubleshooting
    """

    retryable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the request can be retried
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
