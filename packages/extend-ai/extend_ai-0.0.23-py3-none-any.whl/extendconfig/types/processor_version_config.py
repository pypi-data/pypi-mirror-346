# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from .classification_config_base_processor import ClassificationConfigBaseProcessor
from ..core.serialization import FieldMetadata
from .classification import Classification
from .classification_advanced_options import ClassificationAdvancedOptions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .extraction_field import ExtractionField
from .extraction_config_base_processor import ExtractionConfigBaseProcessor
from .json_object import JsonObject
from .extraction_advanced_options import ExtractionAdvancedOptions
from .splitter_advanced_options import SplitterAdvancedOptions
from ..core.pydantic_utilities import update_forward_refs


class ProcessorVersionConfig_Classify(UniversalBaseModel):
    """
    The configuration settings for this version of the document processor. The structure of this object will vary depending on the processor type.

    See the [Processor Configs guide](/developers/guides/processor-configs) for more details on the configuration settings for each processor type.
    """

    type: typing.Literal["CLASSIFY"] = "CLASSIFY"
    base_processor: typing_extensions.Annotated[
        typing.Optional[ClassificationConfigBaseProcessor], FieldMetadata(alias="baseProcessor")
    ] = None
    base_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="baseVersion")] = None
    classifications: typing.List[Classification]
    classification_rules: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="classificationRules")
    ] = None
    advanced_options: typing_extensions.Annotated[
        typing.Optional[ClassificationAdvancedOptions], FieldMetadata(alias="advancedOptions")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ProcessorVersionConfig_Extract(UniversalBaseModel):
    """
    The configuration settings for this version of the document processor. The structure of this object will vary depending on the processor type.

    See the [Processor Configs guide](/developers/guides/processor-configs) for more details on the configuration settings for each processor type.
    """

    type: typing.Literal["EXTRACT"] = "EXTRACT"
    base_processor: typing_extensions.Annotated[
        typing.Optional[ExtractionConfigBaseProcessor], FieldMetadata(alias="baseProcessor")
    ] = None
    base_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="baseVersion")] = None
    extraction_rules: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="extractionRules")] = None
    schema_: typing_extensions.Annotated[typing.Optional[JsonObject], FieldMetadata(alias="schema")] = None
    fields: typing.Optional[typing.List[ExtractionField]] = None
    advanced_options: typing_extensions.Annotated[
        typing.Optional[ExtractionAdvancedOptions], FieldMetadata(alias="advancedOptions")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ProcessorVersionConfig_Splitter(UniversalBaseModel):
    """
    The configuration settings for this version of the document processor. The structure of this object will vary depending on the processor type.

    See the [Processor Configs guide](/developers/guides/processor-configs) for more details on the configuration settings for each processor type.
    """

    type: typing.Literal["SPLITTER"] = "SPLITTER"
    base_processor: typing_extensions.Annotated[
        typing.Optional[typing.Literal["splitting_performance"]], FieldMetadata(alias="baseProcessor")
    ] = None
    base_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="baseVersion")] = None
    split_classifications: typing_extensions.Annotated[
        typing.List[Classification], FieldMetadata(alias="splitClassifications")
    ]
    split_rules: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="splitRules")] = None
    advanced_options: typing_extensions.Annotated[
        typing.Optional[SplitterAdvancedOptions], FieldMetadata(alias="advancedOptions")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ProcessorVersionConfig = typing.Union[
    ProcessorVersionConfig_Classify, ProcessorVersionConfig_Extract, ProcessorVersionConfig_Splitter
]
update_forward_refs(ExtractionField, ProcessorVersionConfig_Extract=ProcessorVersionConfig_Extract)
