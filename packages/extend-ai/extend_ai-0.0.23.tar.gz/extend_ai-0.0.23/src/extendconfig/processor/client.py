# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.processor_type import ProcessorType
from .types.processor_create_request_config import ProcessorCreateRequestConfig
from ..core.request_options import RequestOptions
from .types.processor_create_response import ProcessorCreateResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.error import Error
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.processor_update_request_config import ProcessorUpdateRequestConfig
from .types.processor_update_response import ProcessorUpdateResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProcessorClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        name: str,
        type: ProcessorType,
        clone_processor_id: typing.Optional[str] = OMIT,
        config: typing.Optional[ProcessorCreateRequestConfig] = OMIT,
        json_schema_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProcessorCreateResponse:
        """
        Create a new processor in Extend, optionally cloning from an existing processor

        Parameters
        ----------
        name : str
            The name of the new processor

        type : ProcessorType

        clone_processor_id : typing.Optional[str]
            The ID of an existing processor to clone. The ID will start with "dp_". One of `cloneProcessorId` or `config` must be provided.

            Example: `"dp_Xj8mK2pL9nR4vT7qY5wZ"`

        config : typing.Optional[ProcessorCreateRequestConfig]
            The configuration for the processor. The type of configuration must match the processor type. One of `cloneProcessorId` or `config` must be provided.

        json_schema_enabled : typing.Optional[bool]
            Whether to enable JSON schema for the processor. Defaults to false.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessorCreateResponse
            Successfully created processor

        Examples
        --------
        from extendconfig import Extend

        client = Extend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.processor.create(
            name="My Processor Name",
            type="EXTRACT",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "processors",
            method="POST",
            json={
                "name": name,
                "type": type,
                "cloneProcessorId": clone_processor_id,
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ProcessorCreateRequestConfig, direction="write"
                ),
                "jsonSchemaEnabled": json_schema_enabled,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProcessorCreateResponse,
                    parse_obj_as(
                        type_=ProcessorCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        config: typing.Optional[ProcessorUpdateRequestConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProcessorUpdateResponse:
        """
        Update an existing processor in Extend

        Parameters
        ----------
        id : str
            The ID of the processor to update. The ID will start with "dp_".

            Example: `"dp_Xj8mK2pL9nR4vT7qY5wZ"`

        name : typing.Optional[str]
            The new name for the processor

        config : typing.Optional[ProcessorUpdateRequestConfig]
            The new configuration for the processor. The type of configuration must match the processor type:
            * For classification processors, use `ClassificationConfig`
            * For extraction processors, use `ExtractionConfig`
            * For splitter processors, use `SplitterConfig`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessorUpdateResponse
            Successfully updated processor

        Examples
        --------
        from extendconfig import Extend

        client = Extend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.processor.update(
            id="processor_id_here",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(id)}",
            method="POST",
            json={
                "name": name,
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ProcessorUpdateRequestConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProcessorUpdateResponse,
                    parse_obj_as(
                        type_=ProcessorUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProcessorClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        name: str,
        type: ProcessorType,
        clone_processor_id: typing.Optional[str] = OMIT,
        config: typing.Optional[ProcessorCreateRequestConfig] = OMIT,
        json_schema_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProcessorCreateResponse:
        """
        Create a new processor in Extend, optionally cloning from an existing processor

        Parameters
        ----------
        name : str
            The name of the new processor

        type : ProcessorType

        clone_processor_id : typing.Optional[str]
            The ID of an existing processor to clone. The ID will start with "dp_". One of `cloneProcessorId` or `config` must be provided.

            Example: `"dp_Xj8mK2pL9nR4vT7qY5wZ"`

        config : typing.Optional[ProcessorCreateRequestConfig]
            The configuration for the processor. The type of configuration must match the processor type. One of `cloneProcessorId` or `config` must be provided.

        json_schema_enabled : typing.Optional[bool]
            Whether to enable JSON schema for the processor. Defaults to false.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessorCreateResponse
            Successfully created processor

        Examples
        --------
        import asyncio

        from extendconfig import AsyncExtend

        client = AsyncExtend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processor.create(
                name="My Processor Name",
                type="EXTRACT",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "processors",
            method="POST",
            json={
                "name": name,
                "type": type,
                "cloneProcessorId": clone_processor_id,
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ProcessorCreateRequestConfig, direction="write"
                ),
                "jsonSchemaEnabled": json_schema_enabled,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProcessorCreateResponse,
                    parse_obj_as(
                        type_=ProcessorCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        config: typing.Optional[ProcessorUpdateRequestConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProcessorUpdateResponse:
        """
        Update an existing processor in Extend

        Parameters
        ----------
        id : str
            The ID of the processor to update. The ID will start with "dp_".

            Example: `"dp_Xj8mK2pL9nR4vT7qY5wZ"`

        name : typing.Optional[str]
            The new name for the processor

        config : typing.Optional[ProcessorUpdateRequestConfig]
            The new configuration for the processor. The type of configuration must match the processor type:
            * For classification processors, use `ClassificationConfig`
            * For extraction processors, use `ExtractionConfig`
            * For splitter processors, use `SplitterConfig`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessorUpdateResponse
            Successfully updated processor

        Examples
        --------
        import asyncio

        from extendconfig import AsyncExtend

        client = AsyncExtend(
            extend_api_version="YOUR_EXTEND_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.processor.update(
                id="processor_id_here",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"processors/{jsonable_encoder(id)}",
            method="POST",
            json={
                "name": name,
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ProcessorUpdateRequestConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProcessorUpdateResponse,
                    parse_obj_as(
                        type_=ProcessorUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
