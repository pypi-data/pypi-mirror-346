# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .extraction_field import ExtractionField
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .webhook_event_event_type import WebhookEventEventType
from .webhook_event_payload import WebhookEventPayload
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing
from ..core.pydantic_utilities import update_forward_refs


class WebhookEvent(UniversalBaseModel):
    event_id: typing_extensions.Annotated[str, FieldMetadata(alias="eventId")] = pydantic.Field()
    """
    Unique identifier for the event
    """

    event_type: typing_extensions.Annotated[WebhookEventEventType, FieldMetadata(alias="eventType")] = pydantic.Field()
    """
    Type of the event that occurred
    """

    payload: WebhookEventPayload = pydantic.Field()
    """
    Contains the relevant object for the event type
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(ExtractionField, WebhookEvent=WebhookEvent)
