#--------------------------------------------------
# Compiler
#--------------------------------------------------

from relationalai import debugging
from relationalai.early_access.lqp import ir as lqp, llqp
from relationalai.early_access.lqp.passes import lqp_passes
from relationalai.early_access.lqp.model2lqp import to_lqp as ir_to_lqp
from relationalai.early_access.metamodel import ir, compiler as c

class Compiler(c.Compiler):
    def __init__(self):
        super().__init__(lqp_passes())

    def do_compile(self, model: ir.Model, options:dict={}) -> str:
        lqp_ir, debugging_ctx = ir_to_lqp(model)
        self._lqp_result = lqp_ir
        # Compare to False specifically as we want to default (None, not in dict) to styled.
        styled = True if options.get("styled") in [None, True] else False
        lqp_str = llqp.program_to_llqp(lqp_ir, styled)

        debug_str = ""
        if len(debugging_ctx.id_to_orig_name) > 0:
            debug_str += ";; Original names\n"

        for (rid, name) in debugging_ctx.id_to_orig_name.items():
            debug_str += ";; \t " + str(rid) + " -> `" + name + "`\n"

        if debug_str != "":
            lqp_str += "\n\n"
            lqp_str += ";; Debug information\n"
            lqp_str += ";; -----------------------\n"
            lqp_str += debug_str

        with debugging.span("passes") as span:
            with debugging.span("LQP Emitter") as span:
                span["metamodel"] = llqp.program_to_llqp(lqp_ir, False)

        return lqp_str

    def get_lqp_ir(self) -> lqp.LqpProgram:
        """ Returns the LQP IR generated by the compiler. """
        assert self._lqp_result is not None, "LQP IR not generated yet"
        return self._lqp_result
