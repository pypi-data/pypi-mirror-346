# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .principal_type import PrincipalType
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class RoleAssignment(UniversalBaseModel):
    """
    An Azure Role assignment is a mapping between a user, group, service principal, or managed identity to a role.
    This type is mirrored after the RoleAssignment type: https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v2#RoleAssignment
    """

    id: str
    name: str
    type: str
    principal_id: str = pydantic.Field(alias="principalId")
    role_definition_id: str = pydantic.Field(alias="roleDefinitionId")
    condition: typing.Optional[str] = None
    condition_version: typing.Optional[str] = pydantic.Field(alias="conditionVersion", default=None)
    delegated_managed_identity_resource_id: typing.Optional[str] = pydantic.Field(
        alias="delegatedManagedIdentityResourceId", default=None
    )
    description: typing.Optional[str] = None
    principal_type: typing.Optional[PrincipalType] = pydantic.Field(alias="principalType", default=None)
    created_by: typing.Optional[str] = pydantic.Field(alias="createdBy", default=None)
    created_on: typing.Optional[dt.datetime] = pydantic.Field(alias="createdOn", default=None)
    scope: typing.Optional[str] = None
    updated_by: typing.Optional[str] = pydantic.Field(alias="updatedBy", default=None)
    updated_on: typing.Optional[dt.datetime] = pydantic.Field(alias="updatedOn", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
