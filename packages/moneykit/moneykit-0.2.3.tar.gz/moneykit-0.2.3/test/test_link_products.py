# coding: utf-8

"""
MoneyKit API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from moneykit.models.link_products import LinkProducts


class TestLinkProducts(unittest.TestCase):
    """LinkProducts unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LinkProducts:
        """Test LinkProducts
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `LinkProducts`
        """
        model = LinkProducts()
        if include_optional:
            return LinkProducts(
                accounts = moneykit.models.link_product_response.LinkProductResponse(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, ),
                account_numbers = moneykit.models.link_product_response.LinkProductResponse(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, ),
                identity = moneykit.models.link_product_response.LinkProductResponse(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, ),
                transactions = moneykit.models.transactions_link_product.TransactionsLinkProduct(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, 
                    has_history = True, ),
                investments = moneykit.models.link_product_response.LinkProductResponse(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, ),
                enrichment = moneykit.models.link_product_response.LinkProductResponse(
                    refreshed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_attempted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_code = null, 
                    error_message = '', 
                    unavailable = '', 
                    settings = null, )
            )
        else:
            return LinkProducts(
        )
        """

    def testLinkProducts(self):
        """Test LinkProducts"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
