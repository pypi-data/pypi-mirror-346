# coding: utf-8

"""
MoneyKit API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from moneykit.models.account_import_data import AccountImportData
from moneykit.models.customer_user import CustomerUser
from moneykit.models.provider import Provider
from moneykit.models.transaction_import_data import TransactionImportData

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ImportLinkRequest(BaseModel):
    """
    ImportLinkRequest
    """  # noqa: E501

    customer_user: CustomerUser
    provider: Optional[Provider] = None
    institution_id: StrictStr = Field(
        description="MoneyKit's unique ID for this institution.  If you use a MoneyKit-supported provider, you can         also submit the provider name and __their__ institution_id in dotted notation, such as `mx.chase`         or `yodlee.30188`.  If the imported link is synced with a data provider later, it will be connected to         this institution.  Note that MoneyKit may reconnect the link using any supported provider, not just the one         given during this import."
    )
    accounts: List[AccountImportData]
    transactions: List[TransactionImportData]
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "customer_user",
        "provider",
        "institution_id",
        "accounts",
        "transactions",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ImportLinkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_user
        if self.customer_user:
            _dict["customer_user"] = self.customer_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["accounts"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["transactions"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ImportLinkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "customer_user": CustomerUser.from_dict(obj.get("customer_user"))
                if obj.get("customer_user") is not None
                else None,
                "provider": obj.get("provider"),
                "institution_id": obj.get("institution_id"),
                "accounts": [
                    AccountImportData.from_dict(_item) for _item in obj.get("accounts")
                ]
                if obj.get("accounts") is not None
                else None,
                "transactions": [
                    TransactionImportData.from_dict(_item)
                    for _item in obj.get("transactions")
                ]
                if obj.get("transactions") is not None
                else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
