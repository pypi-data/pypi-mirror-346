# coding: utf-8

"""
MoneyKit API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class AccountBalances(BaseModel):
    """
    AccountBalances
    """  # noqa: E501

    currency: Optional[StrictStr] = Field(
        default=None,
        description="A three-character currency code (ISO-4217 or similar, *e.g.*, `USD`, `CAD`) for the account balances.",
    )
    available: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The amount of funds available for use.  Not all institutions report the available balance.             <p>Note that the available balance typically does not include overdraft limits.",
    )
    current: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The total amount of funds in the account.             <p>For credit or loan accounts, a positive number indicates the amount owed by the account holder.             If the balance is negative (this is rare), this indicates an amount owed **to** the account holder.             <p>For depository or investment accounts, a positive number is the asset value of the account.             If the balance is negative (this is rare), this indicates an overdraft or margin condition.",
    )
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The credit limit on the account.  Typically this exists only for credit-type accounts.             <p>In some cases, this may represent the overdraft limit for depository accounts.",
    )
    balance_date: Optional[datetime] = Field(
        default=None,
        description="The date that the balance was captured at.  This may not include a time. When this field is null, the balance was captured at an unknown time.",
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "currency",
        "available",
        "current",
        "limit",
        "balance_date",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccountBalances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AccountBalances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "currency": obj.get("currency"),
                "available": obj.get("available"),
                "current": obj.get("current"),
                "limit": obj.get("limit"),
                "balance_date": obj.get("balance_date"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
