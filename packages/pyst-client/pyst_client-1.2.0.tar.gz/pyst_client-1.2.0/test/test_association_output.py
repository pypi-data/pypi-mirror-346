# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pyst_client.models.association_output import AssociationOutput

class TestAssociationOutput(unittest.TestCase):
    """AssociationOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AssociationOutput:
        """Test AssociationOutput
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AssociationOutput`
        """
        model = AssociationOutput()
        if include_optional:
            return AssociationOutput(
                id = 'http://data.europa.eu/xsp/cn2024/010021000090',
                type = [http://rdf-vocabulary.ddialliance.org/xkos#ConceptAssociation],
                http___rdf_vocabulary_ddialliance_org_xkossource_concept = [{@id=http://data.europa.eu/xsp/cn2023/010011000090}],
                http___rdf_vocabulary_ddialliance_org_xkostarget_concept = [{@id=http://data.europa.eu/xsp/cn2024/010011000090}]
            )
        else:
            return AssociationOutput(
                id = 'http://data.europa.eu/xsp/cn2024/010021000090',
                type = [http://rdf-vocabulary.ddialliance.org/xkos#ConceptAssociation],
                http___rdf_vocabulary_ddialliance_org_xkossource_concept = [{@id=http://data.europa.eu/xsp/cn2023/010011000090}],
                http___rdf_vocabulary_ddialliance_org_xkostarget_concept = [{@id=http://data.europa.eu/xsp/cn2024/010011000090}],
        )
        """

    def testAssociationOutput(self):
        """Test AssociationOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
