Metadata-Version: 2.4
Name: ip6-access-control
Version: 0.0.2
Summary: A project with a supervisor and a central daemon.
Author-email: Viktor Weilenmann <viktor.we@gmx.ch>
License-Expression: MIT
Project-URL: Homepage, https://github.com/Soldatstar/ip6-access-control
Project-URL: Issues, https://github.com/Soldatstar/ip6-access-control/issues
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENCE
Requires-Dist: python-ptrace==0.9.9
Requires-Dist: pyseccomp==0.1.2
Requires-Dist: pyzmq==26.4.0
Provides-Extra: dev
Requires-Dist: pytest==8.3.5; extra == "dev"
Requires-Dist: coverage==7.8.0; extra == "dev"
Requires-Dist: pylint==3.3.7; extra == "dev"
Requires-Dist: build==1.2.2.post1; extra == "dev"
Dynamic: license-file

# 25FS_IMVS14: System zur feingranularen Ressourcen-Zugriffskontrolle unter Linux  
## IP6 Bachelorarbeit  

[![codecov](https://codecov.io/gh/Soldatstar/ip6-access-control/branch/main/graph/badge.svg)](https://codecov.io/gh/Soldatstar/ip6-access-control)

### Problematik

[Projektbeschreibung](Projektbeschreibung.pdf)  

Linux bietet verschiedene Mechanismen zur Kontrolle des Zugriffs auf Systemressourcen wie Dateien oder Netzwerkverbindungen (z. B. AppArmor, SELinux). Diese Mechanismen weisen jedoch folgende Schw√§chen auf:

- **Ungenauigkeit:** Die Regeln sind oft zu allgemein und erlauben keine feingranulare Zugriffskontrolle.
- **Komplexit√§t:** Die Konfiguration erfordert spezialisiertes Wissen und ist statisch, d. h., sie passt sich nicht dynamisch an.
- **Mangelnde Benutzerinteraktion:** Benutzer werden nicht aktiv √ºber Zugriffsversuche informiert und k√∂nnen diese nicht situativ erlauben oder verweigern.

### L√∂sung

[Projektvereinbarung](Projektvereinbarung.pdf)  

Linux Access Control ist ein benutzerfreundliches Werkzeug, das die Steuerung des Zugriffs von Programmen auf Ressourcen unter Linux erm√∂glicht. Es bietet:

1. **√úberwachung:** √úberwachung von Systemaufrufen, die Programme nutzen, um auf kritische Dateien zuzugreifen.
2. **Benutzerkontrolle:** Interaktive Abfragen, ob ein Zugriff erlaubt oder dauerhaft blockiert werden soll.
3. **Verst√§ndliche Kommunikation:** √úbersetzung von Systemaufrufen und Parametern in leicht verst√§ndliche Fragen, um fundierte Entscheidungen zu erm√∂glichen.

### üõ†Ô∏è Benutzung  

#### Schnellstart  
```bash
# Build-Prozess
make create # Erstellt eine Python-Umgebung und kompiliert den C-Code

# In zwei separaten Terminals ausf√ºhren:
make ut   # Startet das User-Tool und wartet auf Anfragen √ºber ZMQ
make run  # Startet den Supervisor mit einer Demo f√ºr Datei-Zugriffe
```
