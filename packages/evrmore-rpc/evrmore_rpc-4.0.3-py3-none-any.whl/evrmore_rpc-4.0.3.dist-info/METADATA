Metadata-Version: 2.4
Name: evrmore-rpc
Version: 4.0.3
Summary: A high-performance Python wrapper for Evrmore blockchain RPC commands with a seamless API
Project-URL: Homepage, https://manticore.technology
Project-URL: Documentation, https://manticoretechnologies.github.io/evrmore-rpc-dev/
Project-URL: Repository, https://github.com/ManticoreTechnologies/evrmore-rpc-dev.git
Project-URL: Issues, https://github.com/ManticoreTechnologies/evrmore-rpc-dev/issues
Author-email: Manticore Technologies <info@manticore.tech>
License-Expression: MIT
License-File: LICENSE
Keywords: assets,async,blockchain,cryptocurrency,evrmore,rpc,seamless-api,wallet,zmq
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Networking
Requires-Python: >=3.8
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyzmq
Requires-Dist: requests>=2.28.0
Requires-Dist: rich
Provides-Extra: all
Requires-Dist: build; extra == 'all'
Requires-Dist: jinja2>=3.1.2; extra == 'all'
Requires-Dist: mkdocs-material>=9.5; extra == 'all'
Requires-Dist: mkdocs>=1.5; extra == 'all'
Requires-Dist: mkdocstrings[python]>=0.24; extra == 'all'
Requires-Dist: pytest-asyncio>=0.18.0; extra == 'all'
Requires-Dist: pytest>=7.0.0; extra == 'all'
Requires-Dist: setuptools; extra == 'all'
Requires-Dist: twine; extra == 'all'
Provides-Extra: dev
Requires-Dist: build; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.18.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: setuptools; extra == 'dev'
Requires-Dist: twine; extra == 'dev'
Provides-Extra: docs
Requires-Dist: jinja2>=3.1.2; extra == 'docs'
Requires-Dist: mkdocs-material>=9.5; extra == 'docs'
Requires-Dist: mkdocs>=1.5; extra == 'docs'
Requires-Dist: mkdocstrings[python]>=0.24; extra == 'docs'
Description-Content-Type: text/markdown

# evrmore-rpc: Python Client for Evrmore Blockchain

[![PyPI version](https://badge.fury.io/py/evrmore-rpc.svg)](https://badge.fury.io/py/evrmore-rpc)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Versions](https://img.shields.io/pypi/pyversions/evrmore-rpc.svg)](https://pypi.org/project/evrmore-rpc/)

A high-performance, fully featured Python client for the [Evrmore](https://evrmore.com) blockchain. Designed for both synchronous and asynchronous environments, it includes full RPC and ZMQ support, automatic decoding of blocks and transactions, intelligent asset detection, and robust configuration options.

---

## üöÄ Features

- **üîÑ Context-Aware**: Automatically switches between sync and async modes
- **‚öôÔ∏è Flexible Configuration**: Load settings from `evrmore.conf`, env vars, or manual args
- **üí° Smart RPC Handling**: Full method coverage with type hints and structured responses
- **‚ö° Fast + Efficient**: Connection pooling for low-latency concurrent RPC calls
- **üß† Asset Intelligence**: Auto-parses asset transactions with enhanced metadata
- **üì° ZMQ Notifications**: Subscribe to real-time blockchain events with auto-decoding
- **üß∞ Fully Tested Utilities**: Stress test, coverage verification, pooling demo, and more

---

## üì¶ Installation

```bash
pip install evrmore-rpc
```

---

## üß™ Quick Start

```python
from evrmore_rpc import EvrmoreClient

client = EvrmoreClient()
info = client.getblockchaininfo()
print("Height:", info['blocks'])
print("Difficulty:", info['difficulty'])
```

## üîÅ Asynchronous Usage

```python
import asyncio
from evrmore_rpc import EvrmoreClient

async def main():
    client = EvrmoreClient()
    info = await client.getblockchaininfo()
    print("Height:", info['blocks'])
    await client.close()

asyncio.run(main())
```

---

## üß© Configuration Options

```python
# Default (evrmore.conf)
client = EvrmoreClient()

# Environment Variables
# EVR_RPC_URL=http://localhost:8819
# EVR_RPC_USER=user
# EVR_RPC_PASSWORD=pass
# EVR_RPC_PORT=8819
# EVR_TESTNET=true
client = EvrmoreClient()

# Manual Configuration
client = EvrmoreClient(
    url="http://localhost:8819",
    rpcuser="user",
    rpcpassword="pass",
    rpcport=8819,
    testnet=True,
    timeout=30,
    async_mode=None  # Auto-detect or force sync/async
)

# Cookie Authentication
# Automatically reads from ~/.evrmore/.cookie
client = EvrmoreClient(datadir="~/.evrmore")
```

---

## üí∞ Asset Support

```python
# Get asset info
info = client.getassetdata("MYTOKEN")
print(info['amount'], info['reissuable'])

# Transfer asset
txid = client.transfer("MYTOKEN", 100, "EVRAddress")

# Enhanced asset metadata in ZMQ notifications
@zmq.on(ZMQTopic.TX)
def tx_handler(note):
    if note.has_assets:
        print(f"Asset info: {note.asset_info}")
```

---

## üì° ZMQ Notifications (Real-Time)

```python
from evrmore_rpc import EvrmoreClient
from evrmore_rpc.zmq import EvrmoreZMQClient, ZMQTopic

# Create RPC client for auto-decoding
rpc = EvrmoreClient()

# Create ZMQ client with auto-decoding enabled
zmq = EvrmoreZMQClient(
    zmq_host="127.0.0.1",
    zmq_port=28332,
    topics=[ZMQTopic.BLOCK, ZMQTopic.TX],
    rpc_client=rpc,
    auto_decode=True
)

# Subscribe to decoded blocks
@zmq.on(ZMQTopic.BLOCK)
def block_handler(note):
    print(f"Block #{note.height}")
    print(f"Hash: {note.hex}")
    print(f"Transactions: {len(note.block['tx'])}")

# Subscribe to decoded transactions
@zmq.on(ZMQTopic.TX)
def tx_handler(note):
    print(f"TX {note.tx['txid']}")
    if note.has_assets:
        print(f"Asset info: {note.asset_info}")

# Start in current context (sync/async)
zmq.start()
```

Available Topics:
- `HASH_BLOCK`: Block hash notifications
- `HASH_TX`: Transaction hash notifications
- `RAW_BLOCK`: Raw serialized block data
- `RAW_TX`: Raw serialized transaction data
- `BLOCK`: Auto-decoded block data (requires RPC)
- `TX`: Auto-decoded transaction data (requires RPC)

Features:
- Automatic context detection (sync/async)
- Enhanced asset metadata in decoded transactions
- Automatic reconnection on connection loss
- Clean shutdown and resource management
- Typed notification data with structured fields

Required evrmore.conf settings:
```
zmqpubhashblock=tcp://127.0.0.1:28332
zmqpubhashtx=tcp://127.0.0.1:28332
zmqpubrawblock=tcp://127.0.0.1:28332
zmqpubrawtx=tcp://127.0.0.1:28332
```

---

## üìä Stress Test Results

Tested on local node and remote RPC endpoint:

| Mode            | Time    | RPS      | Avg (ms) | Median | Min  | Max  |
|-----------------|---------|----------|----------|--------|------|------|
| Local Async     | 0.01 s  | 10442.42 | 0.59     | 0.50   | 0.39 | 1.84 |
| Local Sync      | 0.06 s  | 1861.26  | 1.52     | 1.42   | 0.43 | 3.40 |
| Remote Async    | 1.75 s  | 57.31    | 167.77   | 155.93 | 111  | 324  |
| Remote Sync     | 1.86 s  | 53.83    | 160.39   | 163.26 | 112  | 310  |

---

## üî¨ Examples & Utilities

- `basic_queries.py` ‚Äî basic client usage
- `async_example.py` ‚Äî async client usage
- `asset_operations.py` ‚Äî asset management
- `zmq_auto_decode_example.py` ‚Äî ZMQ with auto-decoding
- `cookie_auth.py` ‚Äî cookie authentication
- `stress_test.py` ‚Äî performance benchmarking
- `connection_pooling.py` ‚Äî pooled connections
- `flexible_config.py` ‚Äî configuration options
- `complete_rpc_coverage.py` ‚Äî method coverage checker

Run with:
```bash
python3 -m evrmore_rpc.stress_test --sync --remote
```

---

## üß™ Requirements

- Python 3.8+
- Evrmore daemon running with RPC and optional ZMQ endpoints

---

## ü™™ License

MIT License ‚Äî See [LICENSE](LICENSE)

---

## ü§ù Contributing

PRs welcome! Please lint, document, and include examples.

```bash
git clone https://github.com/youruser/evrmore-rpc
cd evrmore-rpc
python3 -m venv .venv && source .venv/bin/activate
pip install -e .[dev]
```

Test locally with:
```bash
python3 -m evrmore_rpc.stress_test
```

---

## üß≠ Summary

`evrmore-rpc` is not just a wrapper ‚Äî it's a full developer toolkit for Evrmore blockchain apps. With context-aware clients, full RPC coverage, rich ZMQ integration, and intelligent asset decoding, it's built to power production-grade wallets, explorers, indexers, and game engines alike.

Enjoy building with it.
