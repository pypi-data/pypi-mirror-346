import json
import logging
from typing import Sequence

from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import Tool, TextContent, ImageContent, EmbeddedResource, Prompt, Resource
from mcp.shared.exceptions import McpError

from cve_mcp_server.cve import CVE


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
LOGGER = logging.getLogger("mcp-cve")


class CVETool:
    QUERY_CVE = "query_cve"


async def main() -> None:
    """Start the CVE MCP server."""
    LOGGER.info("Starting CVE MCP server...")
    server = Server("mcp-cve")

    @server.list_prompts()
    async def list_prompts() -> list[Prompt]:
        """List available prompts."""
        LOGGER.info("Listing available prompts")
        return []

    @server.list_resources()
    async def list_resources() -> list[Resource]:
        """List available resources."""
        LOGGER.info("Listing available resources")
        return []

    @server.list_tools()
    async def list_tools() -> list[Tool]:
        """List available CVE tools."""
        LOGGER.info("Listing available tools")
        return [
            Tool(
                name=CVETool.QUERY_CVE,
                description="Query vulnerability information by CVE ID",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "cve_id": {
                            "type": "string",
                            "description": "The CVE ID to query (e.g., CVE-2021-44228)",
                        }
                    },
                    "required": ["cve_id"],
                },
            ),
        ]

    @server.call_tool()
    async def call_tool(
        name: str, arguments: dict
    ) -> Sequence[TextContent | ImageContent | EmbeddedResource]:
        """Handle tool calls for CVE queries."""
        try:
            LOGGER.info(f"Tool called: {name} with arguments: {arguments}")
            
            if name == CVETool.QUERY_CVE:
                cve_id = arguments.get("cve_id")
                if not cve_id:
                    raise ValueError("Missing required argument: cve_id")

                LOGGER.info(f"Querying CVE: {cve_id}")
                cve = CVE(cve_id=cve_id)
                result = cve.get_cve()
                
                LOGGER.info(f"CVE query result: {result}")
            else:
                raise ValueError(f"Unknown tool: {name}")

            if result is None:
                return [TextContent(type="text", text="CVE not found or error occurred")]
            
            return [
                TextContent(type="text", text=json.dumps(result, indent=2))
            ]

        except Exception as e:
            error_msg = f"Error processing CVE query: {str(e)}"
            LOGGER.error(error_msg)
            raise McpError(error_msg)

    try:
        options = server.create_initialization_options()
        async with stdio_server() as (read_stream, write_stream):
            try:
                await server.run(
                    read_stream,
                    write_stream,
                    options
                )
            except ConnectionError as conn_err:
                LOGGER.error(f"Client connection error: {conn_err}")
                LOGGER.info("Attempting to recover connection...")
            except BrokenPipeError as pipe_err:
                LOGGER.error(f"Pipe connection broken: {pipe_err}")
    except Exception as e:
        LOGGER.error(f"An error occurred: {e}")
        raise e
    finally:
        LOGGER.info("Server stopped.")