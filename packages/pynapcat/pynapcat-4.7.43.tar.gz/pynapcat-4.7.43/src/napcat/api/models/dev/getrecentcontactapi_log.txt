Refactoring the provided code based on the OpenAPI specification for the `get_recent_contact` endpoint.

1.  **Request Model (`GetRecentContactReq`):** Added the `count` field with type `int` and description based on the request body schema.
2.  **Response Model (`GetRecentContactRes`):**
    *   Identified the root response structure with fields `status`, `retcode`, `data`, `message`, `wording`, `echo`.
    *   Used `Literal["ok"]` for the `status` field.
    *   Used `str | None` for the nullable `echo` field.
    *   Determined that the `data` field is a list (`list`) of nested objects based on the OpenAPI schema structure and overrides.
    *   Defined a nested model `RecentContactItem` for objects within the `data` list, including fields like `peerUin`, `remark`, `msgTime`, `chatType`, etc., and the complex `lastestMsg` field.
    *   Defined a nested model `LatestMessage` for the `lastestMsg` field based on the `消息详情` schema, incorporating fields like `self_id`, `user_id`, `time`, `sender`, `message`, etc.
    *   Handled the conflicting `required` list vs. `x-apifox-overrides` for `message_id`, `message_seq`, `real_id` in `LatestMessage` by making them optional (`int | None`).
    *   Defined a nested model `Sender` for the `sender` field in `LatestMessage`, using `Literal` for enum fields `sex` and `role`.
    *   Defined individual nested models for each message component type (`TextMessage`, `AtMessage`, `FaceMessage`, `ImageMessage`, `FileMessage`, `ReplyMessage`, `JsonMessage`, `VoiceMessage`, `VideoMessage`, `MarkdownMessage`, `ForwardMessage`) and their corresponding `Data` sub-models, using `Literal` for the `type` field.
    *   Created a `MessageComponentUnion` alias using `typing.Union` (as Pydantic's Union handling is standard for polymorphic data) to represent the list of message components (`message` field) within `LatestMessage`.
    *   Used forward references (`"ForwardMessage"`) in the `MessageComponentUnion` as `ForwardMessage` contains a list of `MessageComponentUnion`.
    *   Ensured `model_rebuild()` is called after defining all components to resolve forward references.
    *   Used `pydantic.Field` for adding descriptions and handling default values.
3.  **API Model (`GetRecentContactAPI`):** Updated the `Req` and `Res` type hints to point to the new models.
4.  **Code Style and Cleanliness:**
    *   Removed unused imports (`typing.Any`).
    *   Replaced `Optional` with `| None`.
    *   Used built-in types like `list`, `str`, `int`.
    *   Added docstrings and field descriptions.
    *   Removed mechanical `pass` statements.
    *   Organized nested models logically.

Confidence Score: 5/5 - The structure directly maps the OpenAPI schema to Pydantic models, addressing nested objects, unions, literals, and required fields/optional fields based on the provided spec, while also correcting inconsistencies found in the original code.