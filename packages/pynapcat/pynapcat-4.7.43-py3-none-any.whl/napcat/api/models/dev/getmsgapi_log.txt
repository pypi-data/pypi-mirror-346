Analyzing OpenAPI schema for /get_msg endpoint. Identified request body structure requiring `message_id` (number or string). Analyzed response schema including status, retcode, data, message, wording, echo. Noted constant status 'ok' and nullable echo. Identified that the `data` field references `消息详情`. Defined nested classes for message details (`GetMsgResData`) and sender information (`Sender`). Identified various message segment types using `anyOf` for the `message` field within `消息详情`. Defined individual BaseModel classes for each message segment type (text, at, face, image, file, reply, json, record, video, markdown, forward), including their respective nested `Data` classes. Handled the recursive structure of `ForwardMessageSegment.Data.content` referencing `GetMsgResData`. Handled the potential conflict with 'record' type segments by defining distinct classes and relying on Pydantic's Union handling based on data structure. Updated type annotations to comply with python 3.13 guidelines (using `|` instead of `Union` and `| None` instead of `Optional`, using built-in types). Added Field descriptions and default values where specified or appropriate. Removed unused imports. Ensured class and field names follow Python conventions (CamelCase for models, snake_case for fields). Updated GetMsgAPI class with the refined Req and Res models.