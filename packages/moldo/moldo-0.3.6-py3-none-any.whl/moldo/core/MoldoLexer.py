# Generated from MoldoLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,161,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,4,5,87,8,5,11,5,
        12,5,88,1,6,4,6,92,8,6,11,6,12,6,93,1,6,1,6,1,7,1,7,5,7,100,8,7,
        10,7,12,7,103,9,7,1,8,1,8,1,9,1,9,1,9,1,9,5,9,111,8,9,10,9,12,9,
        114,9,9,1,9,1,9,1,9,1,9,1,9,5,9,121,8,9,10,9,12,9,124,9,9,1,9,3,
        9,127,8,9,1,10,1,10,1,10,1,10,1,11,4,11,134,8,11,11,11,12,11,135,
        1,11,1,11,1,12,4,12,141,8,12,11,12,12,12,142,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        2,112,122,0,15,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,
        11,25,12,27,13,29,15,31,14,3,0,1,2,6,1,0,60,60,4,0,9,10,12,13,32,
        32,160,160,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,
        0,34,34,92,92,2,0,39,39,92,92,168,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,17,1,
        0,0,0,1,19,1,0,0,0,1,21,1,0,0,0,1,23,1,0,0,0,1,25,1,0,0,0,2,27,1,
        0,0,0,2,29,1,0,0,0,2,31,1,0,0,0,3,33,1,0,0,0,5,43,1,0,0,0,7,53,1,
        0,0,0,9,65,1,0,0,0,11,75,1,0,0,0,13,86,1,0,0,0,15,91,1,0,0,0,17,
        97,1,0,0,0,19,104,1,0,0,0,21,126,1,0,0,0,23,128,1,0,0,0,25,133,1,
        0,0,0,27,140,1,0,0,0,29,144,1,0,0,0,31,148,1,0,0,0,33,34,5,60,0,
        0,34,35,5,109,0,0,35,36,5,98,0,0,36,37,5,108,0,0,37,38,5,111,0,0,
        38,39,5,99,0,0,39,40,5,107,0,0,40,41,1,0,0,0,41,42,6,0,0,0,42,4,
        1,0,0,0,43,44,5,60,0,0,44,45,5,112,0,0,45,46,5,121,0,0,46,47,5,116,
        0,0,47,48,5,104,0,0,48,49,5,111,0,0,49,50,5,110,0,0,50,51,1,0,0,
        0,51,52,6,1,0,0,52,6,1,0,0,0,53,54,5,60,0,0,54,55,5,99,0,0,55,56,
        5,111,0,0,56,57,5,109,0,0,57,58,5,109,0,0,58,59,5,101,0,0,59,60,
        5,110,0,0,60,61,5,116,0,0,61,62,5,62,0,0,62,63,1,0,0,0,63,64,6,2,
        1,0,64,8,1,0,0,0,65,66,5,60,0,0,66,67,5,47,0,0,67,68,5,109,0,0,68,
        69,5,98,0,0,69,70,5,108,0,0,70,71,5,111,0,0,71,72,5,99,0,0,72,73,
        5,107,0,0,73,74,5,62,0,0,74,10,1,0,0,0,75,76,5,60,0,0,76,77,5,47,
        0,0,77,78,5,112,0,0,78,79,5,121,0,0,79,80,5,116,0,0,80,81,5,104,
        0,0,81,82,5,111,0,0,82,83,5,110,0,0,83,84,5,62,0,0,84,12,1,0,0,0,
        85,87,8,0,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,
        0,0,0,89,14,1,0,0,0,90,92,7,1,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,
        91,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,6,6,2,0,96,16,1,0,0,
        0,97,101,7,2,0,0,98,100,7,3,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,
        99,1,0,0,0,101,102,1,0,0,0,102,18,1,0,0,0,103,101,1,0,0,0,104,105,
        5,61,0,0,105,20,1,0,0,0,106,112,5,34,0,0,107,108,5,92,0,0,108,111,
        9,0,0,0,109,111,8,4,0,0,110,107,1,0,0,0,110,109,1,0,0,0,111,114,
        1,0,0,0,112,113,1,0,0,0,112,110,1,0,0,0,113,115,1,0,0,0,114,112,
        1,0,0,0,115,127,5,34,0,0,116,122,5,39,0,0,117,118,5,92,0,0,118,121,
        9,0,0,0,119,121,8,5,0,0,120,117,1,0,0,0,120,119,1,0,0,0,121,124,
        1,0,0,0,122,123,1,0,0,0,122,120,1,0,0,0,123,125,1,0,0,0,124,122,
        1,0,0,0,125,127,5,39,0,0,126,106,1,0,0,0,126,116,1,0,0,0,127,22,
        1,0,0,0,128,129,5,62,0,0,129,130,1,0,0,0,130,131,6,10,3,0,131,24,
        1,0,0,0,132,134,7,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,
        1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,6,11,4,0,138,26,
        1,0,0,0,139,141,8,0,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,
        1,0,0,0,142,143,1,0,0,0,143,28,1,0,0,0,144,145,5,60,0,0,145,146,
        1,0,0,0,146,147,6,13,5,0,147,30,1,0,0,0,148,149,5,60,0,0,149,150,
        5,47,0,0,150,151,5,99,0,0,151,152,5,111,0,0,152,153,5,109,0,0,153,
        154,5,109,0,0,154,155,5,101,0,0,155,156,5,110,0,0,156,157,5,116,
        0,0,157,158,5,62,0,0,158,159,1,0,0,0,159,160,6,14,3,0,160,32,1,0,
        0,0,13,0,1,2,88,93,101,110,112,120,122,126,135,142,6,5,1,0,5,2,0,
        0,1,0,4,0,0,6,0,0,7,13,0
    ]

class MoldoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INSIDE_OPEN_TAG_MODE = 1
    INSIDE_MOLDO_COMMENT_MODE = 2

    T_OPEN_MBLOCK = 1
    T_OPEN_PYTHON = 2
    T_OPEN_COMMENT = 3
    T_CLOSE_MBLOCK = 4
    T_CLOSE_PYTHON = 5
    PCDATA = 6
    WS = 7
    T_ID = 8
    T_EQUALS = 9
    T_STRING = 10
    T_END_OPEN_TAG = 11
    MODE_WS_SKIP = 12
    COMMENT_TEXT_CONTENT = 13
    T_CLOSE_COMMENT = 14
    COMMENT_LT_SIGN = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "INSIDE_OPEN_TAG_MODE", "INSIDE_MOLDO_COMMENT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<mblock'", "'<python'", "'<comment>'", "'</mblock>'", "'</python>'", 
            "'='", "'>'", "'</comment>'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "T_OPEN_MBLOCK", "T_OPEN_PYTHON", "T_OPEN_COMMENT", "T_CLOSE_MBLOCK", 
            "T_CLOSE_PYTHON", "PCDATA", "WS", "T_ID", "T_EQUALS", "T_STRING", 
            "T_END_OPEN_TAG", "MODE_WS_SKIP", "COMMENT_TEXT_CONTENT", "T_CLOSE_COMMENT", 
            "COMMENT_LT_SIGN" ]

    ruleNames = [ "T_OPEN_MBLOCK", "T_OPEN_PYTHON", "T_OPEN_COMMENT", "T_CLOSE_MBLOCK", 
                  "T_CLOSE_PYTHON", "PCDATA", "WS", "T_ID", "T_EQUALS", 
                  "T_STRING", "T_END_OPEN_TAG", "MODE_WS_SKIP", "COMMENT_TEXT_CONTENT", 
                  "COMMENT_LT_SIGN", "T_CLOSE_COMMENT" ]

    grammarFileName = "MoldoLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


