{"version":3,"file":"dfnotebook_lib_index_js.37a2d9cbd655b340707a.js","mappings":"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","sources":["webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/cellexecutor.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/index.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/model.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/modelfactory.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/panel.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/tokens.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/widget.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/widgetfactory.ts"],"sourcesContent":["import { Dialog, ISessionContext, showDialog } from '@jupyterlab/apputils';\nimport {\n    CodeCell,\n  type Cell,\n  type ICodeCellModel,\n  type MarkdownCell\n} from '@jupyterlab/cells';\nimport type { KernelMessage } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { findIndex } from '@lumino/algorithm';\nimport { KernelError, INotebookModel, INotebookCellExecutor } from '@jupyterlab/notebook';\nimport { DataflowCodeCell } from '@dfnotebook/dfcells';\nimport { DataflowNotebookModel } from './model';\nimport { notebookCellMap, getNotebookId } from '@dfnotebook/dfcells';\nimport { truncateCellId } from '@dfnotebook/dfutils';\n\n/**\n * Run a single notebook cell.\n *\n * @param options Cell execution options\n * @returns Execution status\n */\n  export async function runCell({\n    cell,\n    notebook,\n    notebookConfig,\n    onCellExecuted,\n    onCellExecutionScheduled,\n    sessionContext,\n    sessionDialogs,\n    translator\n  }: INotebookCellExecutor.IRunCellOptions): Promise<boolean> {\n    translator = translator ?? nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const notebookId = getNotebookId(cell as DataflowCodeCell);\n    switch (cell.model.type) {\n      case 'markdown':\n        (cell as MarkdownCell).rendered = true;\n        cell.inputHidden = false;\n        onCellExecuted({ cell, success: true });\n        break;\n      case 'code':\n        if (sessionContext) {\n          if (sessionContext.isTerminating) {\n            await showDialog({\n              title: trans.__('Kernel Terminating'),\n              body: trans.__(\n                'The kernel for %1 appears to be terminating. You can not run any cell for now.',\n                sessionContext.session?.path\n              ),\n              buttons: [Dialog.okButton()]\n            });\n            break;\n          }\n          if (sessionContext.pendingInput) {\n            await showDialog({\n              title: trans.__('Cell not executed due to pending input'),\n              body: trans.__(\n                'The cell has not been executed to avoid kernel deadlock as there is another pending input! Submit your pending input and try again.'\n              ),\n              buttons: [Dialog.okButton()]\n            });\n            return false;\n          }\n          if (sessionContext.hasNoKernel) {\n            const shouldSelect = await sessionContext.startKernel();\n            if (shouldSelect && sessionDialogs) {\n              await sessionDialogs.selectKernel(sessionContext);\n            }\n          }\n          \n          if (sessionContext.hasNoKernel) {\n            cell.model.sharedModel.transact(() => {\n              (cell.model as ICodeCellModel).clearExecution();\n            });\n            return true;\n          }\n\n          const deletedCells = notebook.deletedCells;\n         \n          onCellExecutionScheduled({ cell });\n\n          let ran = false;\n          try {\n            let reply: KernelMessage.IExecuteReplyMsg | void;\n            // !!! DATAFLOW NOTEBOOK CODE !!!\n            if (notebook instanceof DataflowNotebookModel) {\n              const cellUUID =  truncateCellId(cell.model.id);\n              let dfData = getCellsMetadata(notebook, cellUUID)\n            \n              if(!notebook.getMetadata('enable_tags')){\n                dfData.dfMetadata.input_tags={};\n              }\n\n              reply = await DataflowCodeCell.execute(\n                  cell as DataflowCodeCell,\n                  sessionContext,\n                  {\n                  deletedCells,\n                  recordTiming: notebookConfig.recordTiming\n                  },\n                  dfData.dfMetadata,\n                  dfData.cellIdModelMap\n              );\n              \n              resetCellPrompt(notebook, cell)\n              \n              if (reply) {\n                await updateDataflowMetadata(notebook, reply, notebookId);\n              }\n\n              if (sessionContext?.session?.kernel) {\n                await dfCommPostData(notebookId, notebook as DataflowNotebookModel, sessionContext)\n              }\n            } \n            else {\n              reply = await CodeCell.execute(\n                cell as CodeCell,\n                sessionContext,\n                {\n                    deletedCells,\n                    recordTiming: notebookConfig.recordTiming\n                }\n              );\n            }\n            // !!! END DATAFLOW NOTEBOOK CODE !!!\n\n            deletedCells.splice(0, deletedCells.length);\n\n            ran = (() => {\n              if (cell.isDisposed) {\n                return false;\n              }\n\n              if (!reply) {\n                return true;\n              }\n              if (reply.content.status === 'ok') {\n                const content = reply.content;\n\n                if (content.payload && content.payload.length) {\n                  handlePayload(content, notebook, cell);\n                }\n\n                return true;\n              } else {\n                throw new KernelError(reply.content);\n              }\n            })();\n          } catch (reason) {\n            if (cell.isDisposed || reason.message.startsWith('Canceled')) {\n              ran = false;\n            } else {\n              onCellExecuted({\n                cell,\n                success: false,\n                error: reason\n              });\n              throw reason;\n            }\n          }\n\n          if (ran) {\n            onCellExecuted({ cell, success: true });\n          }\n\n          return ran;\n        }\n        cell.model.sharedModel.transact(() => {\n          (cell.model as ICodeCellModel).clearExecution();\n        }, false);\n        break;\n      default:\n        break;\n    }\n\n    return Promise.resolve(true);\n  }\n\n  async function dfCommPostData(notebookId: string|undefined, notebook: DataflowNotebookModel, sessionContext: ISessionContext): Promise<void> {\n    const dfData = getCellsMetadata(notebook, '');\n    if (!notebook.getMetadata('enable_tags')) {\n      dfData.dfMetadata.input_tags = {};\n    }\n    try {\n      const response = await dfCommGetData(sessionContext, {'dfMetadata': dfData.dfMetadata});\n      if (response?.code_dict && Object.keys(response.code_dict).length > 0) {\n        await updateNotebookCells(notebook, notebookId, response.code_dict);\n      }\n    } catch (error) {\n      console.error('Error during kernel communication:', error);\n    }\n  }\n\n  export async function dfCommGetData(sessionContext: ISessionContext, commData: any): Promise<any> {\n    return new Promise<void>((resolve) => {\n      const comm = sessionContext.session?.kernel?.createComm('dfcode');\n      if (!comm) {\n        resolve();\n        return;\n      }\n      comm.open();\n      comm.send(commData);\n      comm.onMsg = (msg: any) => {\n        const content = msg.content.data;\n        resolve(content);\n      };\n    });\n  }\n\n  async function updateNotebookCells(notebook: DataflowNotebookModel, notebookId:string|undefined, codeDict: { [key: string]: any }) {\n    const cellMap = notebookId ? notebookCellMap.get(notebookId) : undefined;\n    const cellsArray = Array.from(notebook.cells);\n    cellsArray.forEach(cell => {\n      if (cell.type === 'code') {\n        const cId = truncateCellId(cell.id);\n        if (codeDict.hasOwnProperty(cId)) {\n          const updatedCode = codeDict[cId];\n          const dfmetadata = cell.getMetadata('dfmetadata');\n\n          if (cellMap) {\n            if (cellMap?.get(cId) !== cell.sharedModel.getSource()) {\n              cell.sharedModel.setSource(updatedCode);\n              cellMap.set(cId, updatedCode.trim());\n            } else {\n              cellMap.set(cId, updatedCode.trim());\n              cell.sharedModel.setSource(updatedCode);\n            }\n          }\n          cell.setMetadata('dfmetadata', dfmetadata);\n        }\n      }\n    });\n  }\n\n  async function updateDataflowMetadata(notebook: DataflowNotebookModel, reply: KernelMessage.IExecuteReplyMsg, notebookId: string|undefined): Promise<void> {\n    const content = reply?.content as any;\n\n    if (!content) return;\n\n    const cellMap = notebookId ? notebookCellMap.get(notebookId) : undefined;\n    const allTags = getAllTags(notebook);\n    const cellsArray = Array.from(notebook.cells);\n\n    cellsArray.forEach((cell, index) => {\n      if (cell.type === 'code') {\n        updateCellMetadata(cell as ICodeCellModel, content, allTags, cellMap);\n      }\n    });\n  }\n\n  function updateCellMetadata(cellModel: ICodeCellModel, content: any, allTags: { [key: string]: string }, cellMap: Map<string, string> | undefined): void {\n    const cId = truncateCellId(cellModel.id);\n    const dfmetadata = cellModel.getMetadata('dfmetadata') || {};\n\n    if (content.persistent_code?.[cId]) {\n      dfmetadata.persistentCode = content.persistent_code[cId];\n    }\n\n    if (content.identifier_refs?.[cId]) {\n      const refs = content.identifier_refs[cId];\n      dfmetadata.inputVars = {\n        ref: refs,\n        tag_refs: mapTagsToRefs(refs, allTags)\n      };\n\n      let cellOutputTags: string[] = [];\n      for (let i = 0; i < cellModel.outputs.length; ++i) {\n        const out = cellModel.outputs.get(i);\n        if(out.metadata['output_tag']){\n          cellOutputTags.push(out.metadata['output_tag'] as string);\n        }\n      }\n      dfmetadata.outputVars = cellOutputTags;\n\n      if (cellMap) {\n        cellMap.set(cId, cellModel.sharedModel.getSource());\n      }\n    }\n    cellModel.setMetadata('dfmetadata', dfmetadata);\n  }\n\n  function mapTagsToRefs(refs: { [key: string]: any }, allTags: { [key: string]: string }): { [key: string]: string } {\n    const tagRefs: { [key: string]: string } = {};\n\n    Object.keys(refs).forEach(key => {\n      if (allTags[key]) {\n        tagRefs[key] = allTags[key];\n      }\n    });\n\n    return tagRefs;\n  }\n\n  function resetCellPrompt(notebook: DataflowNotebookModel, cell: Cell) {\n    const currInputArea = cell.inputArea as any;\n    const dfmetadata = cell.model?.getMetadata('dfmetadata');\n    const currTag = dfmetadata.tag;\n    if(currInputArea){\n      if(!notebook.getMetadata('enable_tags')){\n        currInputArea.addTag(\"\");\n        cell.model?.setMetadata('dfmetadata', dfmetadata);\n      }\n      else{\n        currInputArea.addTag(currTag);\n      }\n    }\n  }\n\n  export function getAllTags(notebook: DataflowNotebookModel): { [key: string]: string } {\n    const allTags: { [key: string]: string } = {};\n    const cellsArray = Array.from(notebook.cells);\n\n    cellsArray.forEach(cell => {\n      if (cell.type === 'code') {\n        const dfmetadata = cell.getMetadata('dfmetadata');\n        const tag = dfmetadata?.tag;\n        if (tag) {\n          const cId = truncateCellId(cell.id);\n          allTags[cId] = tag;\n        }\n      }\n    });\n\n    return allTags;\n  }\n\n  export function getCellsMetadata(notebook: DataflowNotebookModel, cellUUID: string) {\n    const codeDict: { [key: string]: string } = {};\n    const cellIdModelMap: { [key: string]: any } = {};\n    const outputTags: { [key: string]: string[] } = {};\n    const inputTags: { [key: string]: string } = {};\n    const allRefs: { [key: string]: { [key: string]: string[] } } = {};\n    const cellsArray = Array.from(notebook.cells);\n\n    cellsArray.forEach(cell => {\n      if (cell.type === 'code') {\n        const c = cell as ICodeCellModel;\n        const cId = truncateCellId(c.id);\n        const dfmetadata = c.getMetadata('dfmetadata');\n        if(!dfmetadata.persistentCode)\n        {\n          cellIdModelMap[cId] = c;\n          return;\n        }\n        const inputTag = dfmetadata?.tag;\n\n        if (inputTag) {\n          inputTags[inputTag] = cId;\n        }\n\n        codeDict[cId] = c.sharedModel.getSource();\n        cellIdModelMap[cId] = c;\n        outputTags[cId] = dfmetadata.outputVars;\n        allRefs[cId] = dfmetadata.inputVars;      \n      }\n    });\n\n    const dfMetadata = {\n      // FIXME replace with utility function (see dfcells/widget)\n      uuid: cellUUID,\n      code_dict: codeDict,\n      output_tags: outputTags,\n      input_tags: inputTags,\n      auto_update_flags: {},\n      force_cached_flags: {},\n      all_refs: allRefs,\n      executed_code: {}\n    };\n    return { dfMetadata, cellIdModelMap };\n  }\n\n  /**\n   * Handle payloads from an execute reply.\n   *\n   * #### Notes\n   * Payloads are deprecated and there are no official interfaces for them in\n   * the kernel type definitions.\n   * See [Payloads (DEPRECATED)](https://jupyter-client.readthedocs.io/en/latest/messaging.html#payloads-deprecated).\n   */\n  function handlePayload(\n    content: KernelMessage.IExecuteReply,\n    notebook: INotebookModel,\n    cell: Cell\n  ) {\n    const setNextInput = content.payload?.filter(i => {\n      return (i as any).source === 'set_next_input';\n    })[0];\n\n    if (!setNextInput) {\n      return;\n    }\n\n    const text = setNextInput.text as string;\n    const replace = setNextInput.replace;\n\n    if (replace) {\n      cell.model.sharedModel.setSource(text);\n      return;\n    }\n\n    // Create a new code cell and add as the next cell.\n    const notebookModel = notebook.sharedModel;\n    const cells = notebook.cells;\n    const index = findIndex(cells, model => model === cell.model);\n\n    // While this cell has no outputs and could be trusted following the letter\n    // of Jupyter trust model, its content comes from kernel and hence is not\n    // necessarily controlled by the user; if we set it as trusted, a user\n    // executing cells in succession could end up with unwanted trusted output.\n    if (index === -1) {\n      notebookModel.insertCell(notebookModel.cells.length, {\n        cell_type: 'code',\n        source: text,\n        metadata: {\n          trusted: false\n        }\n      });\n    } else {\n      notebookModel.insertCell(index + 1, {\n        cell_type: 'code',\n        source: text,\n        metadata: {\n          trusted: false\n        }\n      });\n    }\n  }","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module dfnotebook\n */\n\nexport * from './cellexecutor';\nexport * from './model';\nexport * from './modelfactory';\nexport * from './panel';\nexport * from './widget';\nexport * from './tokens';\nexport * from './widgetfactory';","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { NotebookModel } from '@jupyterlab/notebook';\nimport * as nbformat from '@jupyterlab/nbformat';\n\n\nexport class DataflowNotebookModel extends NotebookModel {\n\n  fromJSON(value: nbformat.INotebookContent): void {\n    let isDataflow = true;\n    if (value.metadata?.kernelspec?.name && value.metadata.kernelspec.name != 'dfpython3') {\n      isDataflow = false;\n    }\n    super.fromJSON(value);\n    this.setMetadata('dfnotebook', isDataflow);\n    this.setMetadata('enable_tags', true);\n  }\n\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { DataflowNotebookModel } from './model';\nimport { INotebookModel, NotebookModelFactory } from '@jupyterlab/notebook';\nimport type { ISharedNotebook } from '@jupyter/ydoc';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\n/**\n * A model factory for notebooks.\n */\nexport class DataflowNotebookModelFactory extends NotebookModelFactory {\n\n  /**\n   * Create a new model for a given path.\n   *\n   * @param languagePreference - An optional kernel language preference.\n   *\n   * @returns A new document model.\n   */\n  createNew(\n    options: DocumentRegistry.IModelOptions<ISharedNotebook> = {}\n  ): INotebookModel {\n    return new DataflowNotebookModel({\n      languagePreference: options.languagePreference,\n      sharedModel: options.sharedModel,\n      collaborationEnabled: options.collaborationEnabled && this.collaborative,\n      //@ts-ignore\n      disableDocumentWideUndoRedo: this._disableDocumentWideUndoRedo\n    });\n  }\n\n  /**\n   * The name of the model.\n   */\n   get name(): string {\n    return 'dfnotebook';\n  }\n\n  // FIXME: Can only assign to notebook | file | directory\n  //\n  // /**\n  //  * The content type of the file.\n  //  */\n  // get contentType(): Contents.ContentType {\n  //   return 'dfnotebook';\n  // }  \n}\n\nexport namespace DataflowNotebookModelFactory {\n  export interface IFactory extends DocumentRegistry.IModelFactory<INotebookModel> {\n\n  }\n}","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\nimport { DataflowNotebook } from './widget';\nimport { Token } from '@lumino/coreutils';\n/**\n * A namespace for `DataflowNotebookPanel` statics.\n */\nexport namespace DataflowNotebookPanel {\n  export interface IContentFactory extends NotebookPanel.IContentFactory {\n\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory extends DataflowNotebook.ContentFactory implements IContentFactory {\n    /**\n     * Create a new content area for the panel.\n     */\n    createNotebook(options: Notebook.IOptions): Notebook {\n      return new DataflowNotebook(options);\n    }\n  }\n\n  /**\n   * The notebook renderer token.\n   */\n  export const IContentFactory = new Token<IContentFactory>(\n    '@dfnotebook/dfnotebook:IContentFactory',\n    `A factory object that creates new dataflow notebooks.\n    Use this if you want to create and host dataflow notebooks in your own UI elements.`\n  )\n}\n\n\n","import { Token } from '@lumino/coreutils';\nimport { DataflowNotebookWidgetFactory } from './widgetfactory';\n\n/**\n * The dfnotebook widget factory token.\n */\nexport const IDataflowNotebookWidgetFactory = new Token<DataflowNotebookWidgetFactory.IFactory>(\n    '@dfnotebook/dfnotebook:DataflowNotebookWidgetFactory',\n    'A service to create the dataflow notebook viewer.'\n);","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  CodeCell,\n  MarkdownCell,\n  RawCell,\n} from '@jupyterlab/cells';\nimport { Notebook, StaticNotebook } from '@jupyterlab/notebook';\n\nimport {\n  DataflowCell,\n  DataflowCodeCell,\n  DataflowMarkdownCell,\n  DataflowRawCell,\n} from '@dfnotebook/dfcells';\n\n/**\n * The namespace for the `StaticNotebook` class statics.\n */\nexport namespace DataflowStaticNotebook {\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n   export class ContentFactory extends DataflowCell.ContentFactory implements StaticNotebook.IContentFactory {\n    /**\n     * Create a new code cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createCodeCell(\n      options: CodeCell.IOptions    \n    ): CodeCell {      \n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowCodeCell(options).initializeState();\n    }\n\n    /**\n     * Create a new markdown cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createMarkdownCell(\n      options: MarkdownCell.IOptions,\n    ): MarkdownCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowMarkdownCell(options).initializeState();\n    }\n\n    /**\n     * Create a new raw cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createRawCell(options: RawCell.IOptions): RawCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowRawCell(options).initializeState();\n    }\n  }\n}\n\nexport class DataflowNotebook extends Notebook { }\n\nexport namespace DataflowNotebook {\n  /**\n   * The default implementation of a notebook content factory..\n   *\n   * #### Notes\n   * Override methods on this class to customize the default notebook factory\n   * methods that create notebook content.\n   */\n  export class ContentFactory extends DataflowStaticNotebook.ContentFactory {}\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// import { DocumentRegistry } from \"@jupyterlab/docregistry\";\nimport { NotebookWidgetFactory } from \"@jupyterlab/notebook\";\n\n/**\n * A widget factory for notebook panels.\n */\nexport class DataflowNotebookWidgetFactory extends NotebookWidgetFactory {\n\n  // What matters here is that the contentFactory gets set to use\n  // DataflowNotebookPanel, so we don't need to override this\n  \n  // protected createNewWidget(\n  //   context: DocumentRegistry.IContext<INotebookModel>,\n  //   source?: NotebookPanel\n  // ): NotebookPanel {\n  //   const translator = (context as any).translator;\n  //   const nbOptions = {\n  //     rendermime: source\n  //       ? source.content.rendermime\n  //       : this.rendermime.clone({ resolver: context.urlResolver }),\n  //     contentFactory: this.contentFactory,\n  //     mimeTypeService: this.mimeTypeService,\n  //     editorConfig: source ? source.content.editorConfig : this.editorConfig,\n  //     notebookConfig: source\n  //       ? source.content.notebookConfig\n  //       : this.notebookConfig,\n  //     translator\n  //   };\n  //   const content = this.contentFactory.createNotebook(nbOptions);\n\n  //   return new NotebookPanel({ context, content });\n  // }\n\n\n}\n\nexport namespace DataflowNotebookWidgetFactory {\n  export interface IFactory extends NotebookWidgetFactory.IFactory {\n\n  }\n}"],"names":[],"sourceRoot":""}