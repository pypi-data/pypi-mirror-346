on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci-mac:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", 3.11, 3.12, 3.13, 3.13t, 3.14]
    steps:
      - run: brew update && brew install protobuf
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - run: |
          uv python install ${{ matrix.python-version }}
          uv venv
          uv pip install .
          uv sync --all-groups --resolution lowest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check
          uv sync --all-groups --resolution highest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check

  ci-win:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", 3.11, 3.12, 3.13, 3.13t, 3.14]
    steps:
      - run: choco install protoc
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - run: |
          uv python install ${{ matrix.python-version }}
          uv venv
          uv pip install .
          uv sync --all-groups --resolution lowest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check
          uv sync --all-groups --resolution highest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check

  ci:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", 3.11, 3.12, 3.13, 3.13t, 3.14]
    steps:
      - run: sudo apt-get update && sudo apt-get install protobuf-compiler
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - run: |
          uv python install ${{ matrix.python-version }}
          uv venv
          uv pip install .
          uv sync --all-groups --resolution lowest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check
          uv sync --all-groups --resolution highest
          uv pip freeze
          uv run pytest
          uv run pyright
          uv run ruff check

  linux:
    needs: ci
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          # Some container images are based on Ubuntu, others on CentOS
          before-script-linux: |
            which unzip || apt install unzip || echo "not apt"
            which unzip || yum install unzip || echo "not yum"
            which unzip
            PROTOC=protoc-21.12-linux-x86_64.zip
            if [ "$(arch)" == "i686" ]; then PROTOC=protoc-21.12-linux-x86_32.zip; fi
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC
            unzip $PROTOC -d protoc3
            mv -v protoc3/bin/* /usr/local/bin/
            mv -v protoc3/include/* /usr/local/include/
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    needs: ci
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          before-script-linux: |
            apt install unzip
            PROTOC=protoc-21.12-linux-x86_64.zip
            if [ "$(arch)" == "i686" ]; then PROTOC=protoc-21.12-linux-x86_32.zip; fi
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC
            unzip $PROTOC -d protoc3
            mv -v protoc3/bin/* /usr/local/bin/
            mv -v protoc3/include/* /usr/local/include/
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: ci-win
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - run: choco install protoc
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: ci-mac
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - run: brew update && brew install protobuf
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    needs: [linux, musllinux, windows, macos, sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - run: ls -halt dist/
      - run: rm -vf dist/.gitignore  # https://github.com/astral-sh/uv/issues/11652
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
      - run: rm -f dist/*.attestation  # should I parametrise release instead?
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
