from .utils.json_map import JsonMap
from ..net.transport.api_error import ApiError
from .utils.sentinel import SENTINEL


@JsonMap({"type_": "type"})
class SaladCloudImdsError(ApiError):
    """An API error. The `code` and `type` uniquely identify the type of the error. The `code` is a short value that may be used for programmatic error handling. The `type` is an absolute URL that may be resolved for more detailed information. Refer to the [SaladCloud IMDS reference](https://leaf.salad.com/l/saladcloud-imds-errors) for a list of the expected `code` and `type` values. Also, note that all properties are optional. Clients should implement robust error handling to account for unexpected errors.

    :param code: The error code that identifies the error type. This is a short value that may be used for programmatic error handling., defaults to None
    :type code: str, optional
    :param detail: The human-readable explanation specific to this occurrence of the error., defaults to None
    :type detail: str, optional
    :param errors: The contextualized map of human-readable explanations specific to this occurrence of the error. This is often used to provide property-specific errors, such as validation errors. In these scenarios, the key is the property name and the value is an array of human-readable explanations specific to this property and this occurrence of the error., defaults to None
    :type errors: dict, optional
    :param instance: The URI reference that identifies the specific occurrence of the error., defaults to None
    :type instance: str, optional
    :param status: The HTTP status code generated by the origin server for this occurrence of the error., defaults to None
    :type status: int, optional
    :param title: The short, human-readable summary of the error type., defaults to None
    :type title: str, optional
    :param type_: The URI reference that identifies the error type., defaults to None
    :type type_: str, optional
    """

    def __init__(
        self,
        code: str = SENTINEL,
        detail: str = SENTINEL,
        errors: dict = SENTINEL,
        instance: str = SENTINEL,
        status: int = SENTINEL,
        title: str = SENTINEL,
        type_: str = SENTINEL,
        **kwargs
    ):
        """An API error. The `code` and `type` uniquely identify the type of the error. The `code` is a short value that may be used for programmatic error handling. The `type` is an absolute URL that may be resolved for more detailed information. Refer to the [SaladCloud IMDS reference](https://leaf.salad.com/l/saladcloud-imds-errors) for a list of the expected `code` and `type` values. Also, note that all properties are optional. Clients should implement robust error handling to account for unexpected errors.

        :param code: The error code that identifies the error type. This is a short value that may be used for programmatic error handling., defaults to None
        :type code: str, optional
        :param detail: The human-readable explanation specific to this occurrence of the error., defaults to None
        :type detail: str, optional
        :param errors: The contextualized map of human-readable explanations specific to this occurrence of the error. This is often used to provide property-specific errors, such as validation errors. In these scenarios, the key is the property name and the value is an array of human-readable explanations specific to this property and this occurrence of the error., defaults to None
        :type errors: dict, optional
        :param instance: The URI reference that identifies the specific occurrence of the error., defaults to None
        :type instance: str, optional
        :param status: The HTTP status code generated by the origin server for this occurrence of the error., defaults to None
        :type status: int, optional
        :param title: The short, human-readable summary of the error type., defaults to None
        :type title: str, optional
        :param type_: The URI reference that identifies the error type., defaults to None
        :type type_: str, optional
        """
        if code is not SENTINEL:
            self.code = self._define_str("code", code, min_length=1, max_length=100)
        if detail is not SENTINEL:
            self.detail = self._define_str(
                "detail", detail, min_length=1, max_length=10000
            )
        if errors is not SENTINEL:
            self.errors = errors
        if instance is not SENTINEL:
            self.instance = self._define_str(
                "instance", instance, min_length=1, max_length=2048
            )
        if status is not SENTINEL:
            self.status = self._define_number("status", status, ge=100, le=599)
        if title is not SENTINEL:
            self.title = self._define_str(
                "title", title, min_length=1, max_length=10000
            )
        if type_ is not SENTINEL:
            self.type_ = self._define_str("type_", type_, min_length=1, max_length=2048)
        self._kwargs = kwargs
