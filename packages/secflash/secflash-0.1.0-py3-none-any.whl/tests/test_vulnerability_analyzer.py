# tests/test_vulnerability_analyzer.py
"""
Unit tests for the VulnerabilityAnalyzer class.
"""

import unittest
from unittest.mock import patch, MagicMock
import sqlite3
import json
import os
import logging
from secflash import VulnerabilityAnalyzer
from secflash.config import config


class TestVulnerabilityAnalyzer(unittest.TestCase):
    """Test cases for VulnerabilityAnalyzer."""
    def setUp(self):
        """Set up test fixtures."""
        logging.basicConfig(level=logging.INFO)
        self.analyzer = VulnerabilityAnalyzer(db_path=":memory:")
        self.network_data = {
            "location": "Test Corp",
            "hosts": [
                {
                    "ip": "192.168.1.10",
                    "status": "active",
                    "ports": [80],
                    "services": ["Apache httpd 2.4.49"],
                    "time": "2024-05-05 10:00:00"
                }
            ]
        }
        self.mock_cve = MagicMock()
        self.mock_cve.id = "CVE-2021-44228"
        self.mock_cve.descriptions = [MagicMock(value="Test vulnerability")]
        self.mock_cve.metrics.cvssMetricV31 = [MagicMock(cvssData=MagicMock(baseScore=9.8, vectorString="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"))]
        self.mock_cve.metrics.cvssMetricV40 = []
        self.mock_cve.metrics.cvssMetricV30 = []
        self.mock_cve.metrics.cvssMetricV2 = []
        self.mock_cve.published = "2021-12-10T00:00:00.000"
        self.mock_cve.lastModified = "2021-12-15T00:00:00.000"
        self.mock_cve.references = [MagicMock(url="http://example.com")]
        self.mock_cve.configurations = [
            MagicMock(nodes=[
                MagicMock(cpeMatch=[
                    MagicMock(vulnerable=True, criteria="cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*")
                ])
            ])
        ]

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_analyze_network_with_api(self, mock_search_cpe, mock_search_cve):
        """Test network analysis with API response."""
        mock_cpe = MagicMock()
        mock_cpe.cpeName = "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
        mock_search_cpe.return_value = [mock_cpe]
        mock_search_cve.return_value = [self.mock_cve]

        findings = self.analyzer.analyze_network(self.network_data)
        self.assertIsInstance(findings, list)
        self.assertGreaterEqual(len(findings), 1)
        self.assertEqual(findings[0]["cve_id"], "CVE-2021-44228")
        self.assertEqual(findings[0]["severity"], "Critical")
        self.assertEqual(findings[0]["cvss"], 9.8)

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_analyze_network_no_api_key(self, mock_search_cpe, mock_search_cve):
        """Test network analysis without API key."""
        original_api_key = config.NVD_API_KEY
        config.NVD_API_KEY = None

        mock_cpe = MagicMock()
        mock_cpe.cpeName = "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
        mock_search_cpe.return_value = [mock_cpe]
        mock_search_cve.return_value = [self.mock_cve]

        findings = self.analyzer.analyze_network(self.network_data)
        self.assertIsInstance(findings, list)
        self.assertGreaterEqual(len(findings), 1)

        config.NVD_API_KEY = original_api_key

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_analyze_network_cached(self, mock_search_cpe, mock_search_cve):
        """Test network analysis with cached vulnerabilities."""
        logging.info("Inserting test data into vulnerabilities table")
        conn = self.analyzer._connect_db()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO vulnerabilities (
                cve_id, cpe, description, published, last_modified,
                cvss_score, cvss_vector, vuln_references, configurations
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            "CVE-2021-44228",
            "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*",
            "Test vulnerability",
            "2021-12-10T00:00:00.000",
            "2021-12-15T00:00:00.000",
            9.8,
            "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            json.dumps(["http://example.com"]),
            json.dumps([{
                "nodes": [{
                    "cpeMatch": [{
                        "vulnerable": True,
                        "criteria": "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
                    }]
                }]
            }])
        ))
        conn.commit()

        # Проверяем содержимое базы данных
        cursor.execute("SELECT cve_id, cpe FROM vulnerabilities")
        rows = cursor.fetchall()
        logging.info(f"Database contents: {rows}")

        # Убедимся, что API не вызывается
        mock_search_cpe.return_value = []
        mock_search_cve.return_value = []

        findings = self.analyzer.analyze_network(self.network_data)
        self.assertIsInstance(findings, list)
        self.assertGreaterEqual(len(findings), 1)
        self.assertEqual(findings[0]["cve_id"], "CVE-2021-44228")

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_analyze_network_no_vulnerabilities(self, mock_search_cpe, mock_search_cve):
        """Test network analysis with no vulnerabilities found."""
        mock_search_cpe.return_value = []
        mock_search_cve.return_value = []

        findings = self.analyzer.analyze_network(self.network_data)
        self.assertIsInstance(findings, list)
        self.assertEqual(len(findings), 0)

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_analyze_network_no_cache(self, mock_search_cpe, mock_search_cve):
        """Test network analysis with empty database, forcing API query."""
        mock_cpe = MagicMock()
        mock_cpe.cpeName = "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
        mock_search_cpe.return_value = [mock_cpe]
        mock_search_cve.return_value = [self.mock_cve]

        logging.info("Clearing vulnerabilities table")
        conn = self.analyzer._connect_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM vulnerabilities")
        conn.commit()

        findings = self.analyzer.analyze_network(self.network_data)
        self.assertIsInstance(findings, list)
        self.assertGreaterEqual(len(findings), 1)
        self.assertEqual(findings[0]["cve_id"], "CVE-2021-44228")

        # Проверяем содержимое базы данных
        cursor.execute("SELECT cve_id, cpe FROM vulnerabilities")
        rows = cursor.fetchall()
        logging.info(f"Database contents after analysis: {rows}")

        cursor.execute("SELECT cve_id FROM vulnerabilities WHERE cpe = ?", (mock_cpe.cpeName,))
        cached = cursor.fetchone()
        self.assertIsNotNone(cached)
        self.assertEqual(cached[0], "CVE-2021-44228")

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCVE')
    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_generate_all_reports(self, mock_search_cpe, mock_search_cve):
        """Test report generation functionality."""
        mock_cpe = MagicMock()
        mock_cpe.cpeName = "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
        mock_search_cpe.return_value = [mock_cpe]
        mock_search_cve.return_value = [self.mock_cve]

        result = self.analyzer.generate_all_reports(self.network_data)
        self.assertIn("reports", result)
        self.assertIn("archive", result)
        self.assertEqual(len(result["reports"]), 4)
        self.assertTrue(os.path.exists(result["archive"]))
        logging.info(f"Generated reports: {result['reports']}")
        logging.info(f"Archive created: {result['archive']}")

    def test_database_initialization(self):
        """Test database initialization."""
        logging.info("Checking database initialization")
        conn = self.analyzer._connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='vulnerabilities'")
        result = cursor.fetchone()
        self.assertIsNotNone(result, "Vulnerabilities table was not created")
        self.assertEqual(result[0], "vulnerabilities")

    @patch('secflash.vulnerability_analyzer.nvdlib.searchCPE')
    def test_validate_cpe(self, mock_search_cpe):
        """Test CPE validation."""
        mock_cpe = MagicMock()
        mock_cpe.cpeName = "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*"
        mock_search_cpe.return_value = [mock_cpe]

        cpe = self.analyzer._validate_cpe("a", "apache", "http_server", "2.4.49")
        self.assertEqual(cpe, "cpe:2.3:a:apache:http_server:2.4.49:*:*:*:*:*:*:*")


if __name__ == '__main__':
    unittest.main()