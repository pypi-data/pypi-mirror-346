import pytest
from unittest.mock import patch, MagicMock
from secflash.vulnerability_analyzer import VulnerabilityAnalyzer

@pytest.fixture
def analyzer():
    with patch('secflash.vulnerability_analyzer.ReportGenerator') as MockReportGen, \
         patch('secflash.vulnerability_analyzer.NVDClient') as MockNVDClient, \
         patch('secflash.vulnerability_analyzer.NVDDatabase') as MockNVDDB:
        MockReportGen.return_value.generate_no_gradient_black.return_value = 'report1.pdf'
        MockReportGen.return_value.generate_no_gradient_black_booklet.return_value = 'report2.pdf'
        MockReportGen.return_value.generate_gradient_white_black.return_value = 'report3.pdf'
        MockReportGen.return_value.generate_gradient_white_black_booklet.return_value = 'report4.pdf'
        yield VulnerabilityAnalyzer(db_path=':memory:')

def test_analyze_network_empty(analyzer):
    result = analyzer.analyze_network({"hosts": []})
    assert result == []

def test_analyze_network_inactive_host(analyzer):
    data = {"hosts": [{"status": "inactive", "ip": "1.2.3.4", "services": ["nginx 1.18.0"]}]}
    result = analyzer.analyze_network(data)
    assert result == []

def test_analyze_network_known_service_cached(monkeypatch, analyzer):
    data = {"hosts": [{"status": "active", "ip": "1.2.3.4", "services": ["nginx 1.18.0"], "ports": [80]}]}
    vuln = {"cve_id": "CVE-1234", "cpe": "cpe:2.3:a:nginx:nginx:1.18.0", "description": "desc", "severity": "High", "cvss": 8.0, "recommendations": ["update"]}
    monkeypatch.setattr(analyzer, '_query_cached_vulnerabilities', lambda *a, **kw: [vuln])
    monkeypatch.setattr(analyzer, '_fetch_nvd_vulnerabilities', lambda *a, **kw: [])
    result = analyzer.analyze_network(data)
    assert result[0]['cve_id'] == 'CVE-1234'
    assert result[0]['ip'] == '1.2.3.4'
    assert result[0]['service'] == 'nginx 1.18.0'

def test_analyze_network_known_service_not_cached(monkeypatch, analyzer):
    data = {"hosts": [{"status": "active", "ip": "1.2.3.4", "services": ["nginx 1.18.0"], "ports": [80]}]}
    vuln = {"cve_id": "CVE-5678", "cpe": "cpe:2.3:a:nginx:nginx:1.18.0", "description": "desc2", "severity": "Medium", "cvss": 5.0, "recommendations": ["patch"]}
    monkeypatch.setattr(analyzer, '_query_cached_vulnerabilities', lambda *a, **kw: [])
    monkeypatch.setattr(analyzer, '_fetch_nvd_vulnerabilities', lambda *a, **kw: [vuln])
    result = analyzer.analyze_network(data)
    assert result[0]['cve_id'] == 'CVE-5678'
    assert result[0]['ip'] == '1.2.3.4'
    assert result[0]['service'] == 'nginx 1.18.0'

def test_generate_all_reports(monkeypatch, analyzer, tmp_path):
    data = {"hosts": [], "location": "Test Company"}
    monkeypatch.setattr(analyzer, 'analyze_network', lambda *a, **kw: [])
    # Мокаем os.path.exists и os.rename для файлов
    monkeypatch.setattr('os.path.exists', lambda x: True)
    monkeypatch.setattr('os.rename', lambda src, dst: None)
    # Мокаем os.makedirs
    monkeypatch.setattr('os.makedirs', lambda *a, **kw: None)
    # Мокаем shutil.rmtree
    monkeypatch.setattr('shutil.rmtree', lambda *a, **kw: None)
    # Мокаем zipfile.ZipFile
    class DummyZip:
        def __init__(self, *a, **kw): pass
        def __enter__(self): return self
        def __exit__(self, *a): pass
        def write(self, *a, **kw): pass
    monkeypatch.setattr('zipfile.ZipFile', DummyZip)
    # Мокаем os.walk
    monkeypatch.setattr('os.walk', lambda x: [(x, [], ['report1.pdf', 'report2.pdf', 'report3.pdf', 'report4.pdf'])])
    analyzer.base_path = str(tmp_path)
    result = analyzer.generate_all_reports(data)
    assert 'archive' in result
    assert result['archive'].endswith('archive.zip') 