# GitHub Actions workflow for Sequenzo package
# 打包 wheel（.whl）
# 支持三大平台：
# Linux (manylinux) → 用 cibuildwheel
# macOS (universal2) → 用 build_ext + build
# Windows → 用 cibuildwheel

name: Build Wheels for Sequenzo

on:
  push:
    tags:
      - "v*"  # 比如 v0.1.0
  workflow_dispatch:  # 支持手动触发

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 全局设置

jobs:
  build:
    name: Build ${{ matrix.os }} Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout source with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 安装依赖时指定仅安装已有 wheel，不构建源码包，防止 linux 系统里面 scipy 问题
      # 项目依赖了 scipy，而 scipy 在 Linux 上 从源码构建时依赖 OpenBLAS（或 MKL）库 来支持矩阵/线性代数功能。
      # 但 GitHub Actions 的基础镜像里默认没装 OpenBLAS 开发库，所以构建失败了。
      # 这通常发生在 构建轮子的时候自动触发了某些依赖（比如 scipy）从源码编译，而不是直接使用已有 wheel。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --prefer-binary numpy scipy
          pip install --prefer-binary Cython pybind11 build cibuildwheel twine

      - name: Build Cython wheels on macOS
        if: runner.os == 'macOS'
        run: |
          python setup.py build_ext --inplace
          python -m build

      # 在 Linux/windows 构建开始前，加一步“干净化”操作
      # 加上 shell: bash 就能在 Windows 上也“模拟”出 Bash 环境运行这些命令
      - name: Clean previous build outputs
        if: runner.os != 'macOS'
        run: |
          rm -rf build/ dist/ *.egg-info
          find . -name "*.so" -delete
        shell: bash

      # CIBW_SKIP: "pp*" 表示跳过所有 PyPy 构建（如 pp39-*, pp310-* 等）。
      # 不支持 32-bit Windows：几乎没人用了、内存限制太严重、生态系统正在放弃、PyPI 上传倾向 64-bit
      # 我们的项目里有大量的 Cython 模块、.cpp / .pyx 扩展、pybind11 接口
      # 这些都是 为 CPython 编译的本地扩展，PyPy 对它们支持很不完善，编译也会失败
      # Linux 也如此，禁止使用 32-bit，因为主流 Linux 发行版（Ubuntu, Debian, CentOS 等）早已默认发布 64-bit 系统。
      - name: Build wheels with cibuildwheel
        if: runner.os != 'macOS'
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_SKIP: "pp*"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_ARCHS_LINUX: "x86_64"

      - name: List wheel files (Linux/macOS only)
        if: runner.os != 'Windows'
        run: find dist/ -type f -name "*.whl" -print

      # 这样就能看到 actions 机器上， wheel 文件是否生成成功
      # Windows 的 bash 环境一样支持 ls，并不会有问题。这样最简洁、最少坑
      - name: Show dist content
        run: ls -lah dist/
        shell: bash

      # 检查 .whl 和 .tar.gz 是否符合 PyPI 的格式规范，提前捕获打包错误，避免上传 PyPI 后才失败
      - name: Check wheels
        run: twine check dist/*

      # 把打好的文件上传到 GitHub Actions 的界面中，可以供我们下载
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/

