# coding: utf-8

"""
    Protean API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.11
    Contact: support@cogrow.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateFixedSizeChunksRequest(BaseModel):
    """
    CreateFixedSizeChunksRequest
    """ # noqa: E501
    text: StrictStr = Field(description="The text to chunk.")
    chunk_size: Optional[StrictInt] = Field(default=800, description="The target size of each text chunk in tokens.", alias="chunkSize")
    min_chunk_size_chars: Optional[StrictInt] = Field(default=350, description="The minimum size of each text chunk in characters.", alias="minChunkSizeChars")
    min_chunk_length_to_embed: Optional[StrictInt] = Field(default=5, description="The minimum length of a chunk to be included.", alias="minChunkLengthToEmbed")
    max_num_chunks: Optional[StrictInt] = Field(default=10000, description="The maximum number of chunks to generate from a text.", alias="maxNumChunks")
    keep_separator: Optional[StrictBool] = Field(default=True, description="Whether to keep separators (like newlines) in the chunks.", alias="keepSeparator")
    __properties: ClassVar[List[str]] = ["text", "chunkSize", "minChunkSizeChars", "minChunkLengthToEmbed", "maxNumChunks", "keepSeparator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFixedSizeChunksRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFixedSizeChunksRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "chunkSize": obj.get("chunkSize") if obj.get("chunkSize") is not None else 800,
            "minChunkSizeChars": obj.get("minChunkSizeChars") if obj.get("minChunkSizeChars") is not None else 350,
            "minChunkLengthToEmbed": obj.get("minChunkLengthToEmbed") if obj.get("minChunkLengthToEmbed") is not None else 5,
            "maxNumChunks": obj.get("maxNumChunks") if obj.get("maxNumChunks") is not None else 10000,
            "keepSeparator": obj.get("keepSeparator") if obj.get("keepSeparator") is not None else True
        })
        return _obj


