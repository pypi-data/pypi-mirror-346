# coding: utf-8

"""
    Protean API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.11
    Contact: support@cogrow.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from protean.models.client_tools import ClientTools
from typing import Optional, Set
from typing_extensions import Self

class ChatQuestionRequest(BaseModel):
    """
    ChatQuestionRequest
    """ # noqa: E501
    model: Annotated[str, Field(min_length=1, strict=True)] = Field(description="ID of the model to use when generating the response.")
    system_message: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The system message to use when generating the response.", alias="systemMessage")
    user_message: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user prompt to generate response for.", alias="userMessage")
    temperature: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=0.4, description="Affects the level of creativity that should be applied when generating response. Accepts values from 0.0 to 1.0 where higher value implies higher level of creativity applied during generation.")
    datasets: Optional[List[StrictStr]] = Field(default=None, description="The datasets to be used for RAG purposes during generation. Expected values are either dataset GUID or '*', where '*' implies to use all datasets that are available to you.")
    limit: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=3, description="The maximum number of dataset chunks to include into the context during generation.")
    relevance_threshold: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]] = Field(default=0.8, description="Cut off point for the relevance of dataset chunks to the provided user_message. Higher value implies higher level of relevance of the dataset chunks to the provided user_message.", alias="relevanceThreshold")
    assistant_id: Optional[StrictStr] = Field(default=None, description="The assistant ID to use when generating the response.", alias="assistantId")
    client_tools: Optional[ClientTools] = Field(default=None, description="List of functions the model may generate JSON inputs for.", alias="clientTools")
    __properties: ClassVar[List[str]] = ["model", "systemMessage", "userMessage", "temperature", "datasets", "limit", "relevanceThreshold", "assistantId", "clientTools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatQuestionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_tools
        if self.client_tools:
            _dict['clientTools'] = self.client_tools.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatQuestionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model"),
            "systemMessage": obj.get("systemMessage"),
            "userMessage": obj.get("userMessage"),
            "temperature": obj.get("temperature") if obj.get("temperature") is not None else 0.4,
            "datasets": obj.get("datasets"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 3,
            "relevanceThreshold": obj.get("relevanceThreshold") if obj.get("relevanceThreshold") is not None else 0.8,
            "assistantId": obj.get("assistantId"),
            "clientTools": ClientTools.from_dict(obj["clientTools"]) if obj.get("clientTools") is not None else None
        })
        return _obj


