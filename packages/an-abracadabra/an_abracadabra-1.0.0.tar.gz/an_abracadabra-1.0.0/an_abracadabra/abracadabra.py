# -*- coding: utf-8 -*-
"""ABRA_20250510_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14luJ1Tp8RX2rhAHKjWQpA4_fAdcJczuf

# Abracadabra
シンボリックリンクを生成する。

リンク元をPersistent(GDrive), リンク先をLocalに置き、実行権限を持たない大量のストレージ領域を、持つものに変えることがAbracadabraの主目的である。


```
2025/05/10 1.0.0 暫定版完成
```

---

# Abracadabra

## 1. モジュール定義
"""

# @title FileSymlinksUtility 定義
# abracadabra.py

import os
import shutil
import logging
from pathlib import Path

logger = logging.getLogger(__name__)
if not logger.hasHandlers():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
        force=True
    )

#―――――――――――――
# モジュールレベルのデフォルト定義
#―――――――――――――
FILE_PAIRS = {
    "Config/config.json":       "config.json",
    "Config/styles.csv":        "styles.csv",
    "Config/webui-user.sh":     "webui-user.sh"
}


#―――――――――――――
# ファイル用シンボリックリンクユーティリティ
#―――――――――――――
class FileSymlinksUtility:
    def __init__(self,
                 gd_root: Path,
                 sd_root: Path,
                 extra_file_pairs: dict = None):
        """
        ファイル間のシンボリックリンクを生成します。
        args:
            gd_root( Path ) : Google Drive 側 root パス
            sd_root( Path ): SD WebUI 側 root パス
            extra_file_pairs( dict{ str: str } ): 追加/上書きするファイルペア {sd_rel: gd_rel, …}
        """
        self.gd_root    = Path(gd_root)
        self.sd_root    = Path(sd_root)
        self.file_pairs = FILE_PAIRS.copy()
        if extra_file_pairs:
            self.file_pairs.update(extra_file_pairs)

    def _initialize_file(self, gd_file: Path, default_content: str = ""):
        """必要なら Drive 側に初期ファイルを作成"""
        gd_file.parent.mkdir(parents=True, exist_ok=True)
        if not gd_file.exists():
            gd_file.write_text(default_content, encoding="utf-8")
            logger.info(f"初期ファイル作成: {gd_file}")

    def _create_symlink(self, sd_path: Path, gd_path: Path):
        """シンボリックリンク作成（既存削除含む）"""
        if sd_path.exists() or sd_path.is_symlink():
            sd_path.unlink()
            logger.info(f"既存ファイル削除: {sd_path}")
        sd_path.parent.mkdir(parents=True, exist_ok=True)
        sd_path.symlink_to(gd_path, target_is_directory=False)
        logger.info(f"ファイルリンク作成: {sd_path} → {gd_path}")

    def create_file_symlinks(self):
        """ファイルタイプのリンクをすべて作成"""
        logger.info("=== ファイルのシンボリックリンク作成 ===")
        for sd_rel, gd_rel in self.file_pairs.items():
            sd_file = self.sd_root / sd_rel
            gd_file = self.gd_root / gd_rel

            # 必要に応じ初期ファイル
            if gd_file.name == "config.json":
                self._initialize_file(gd_file, "{}")
            elif gd_file.name == "styles.csv":
                self._initialize_file(gd_file, "")

            self._create_symlink(sd_file, gd_file)

# @title b. FolderSymlinksUtility 定義
import os
import shutil
import logging
from pathlib import Path

logger = logging.getLogger(__name__)
if not logger.hasHandlers():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
        force=True
    )

#―――――――――――――
# モジュールレベルのデフォルト定義
#―――――――――――――
FOLDER_PAIRS = {
    "models/Stable-diffusion":  "CheckPoint",
    "models/Lora":              "Lora",
    "models/VAE":               "VAE",
    "models/ESRGAN":            "ESRGAN",
    "models/ControlNet":        "ControlNet",
    "models/hypernetworks":     "hypernetworks",
    "models/embeddings":        "embeddings",
    "models/extensions":        "extensions"
}

#―――――――――――――
# フォルダ用シンボリックリンクユーティリティ
#―――――――――――――
class FolderSymlinksUtility:
    def __init__(self,
                 gd_root: Path,
                 sd_root: Path,
                 extra_folder_pairs: dict = None):
        """
        フォルダ間のシンボリックリンクを生成します
        args:
            gd_root( Path ): Google Drive 側 root パス
            sd_root( Path ): SD WebUI 側 root パス
            extra_folder_pairs( dict{ str : str } ): 追加/上書きするフォルダペア {sd_rel: gd_rel, …}
        """
        self.gd_root     = Path(gd_root)
        self.sd_root     = Path(sd_root)
        self.folder_pairs = FOLDER_PAIRS.copy()
        if extra_folder_pairs:
            self.folder_pairs.update(extra_folder_pairs)

    def _create_symlink(self, sd_path: Path, gd_path: Path):
        """シンボリックリンク作成（既存削除含む）"""
        if sd_path.exists() or sd_path.is_symlink():
            if sd_path.is_dir() and not sd_path.is_symlink():
                shutil.rmtree(sd_path)
            else:
                sd_path.unlink()
            logger.info(f"既存フォルダ削除: {sd_path}")
        sd_path.parent.mkdir(parents=True, exist_ok=True)
        sd_path.symlink_to(gd_path, target_is_directory=True)
        logger.info(f"フォルダリンク作成: {sd_path} → {gd_path}")

    def create_folder_symlinks(self):
        """フォルダタイプのリンクをすべて作成"""
        logger.info("=== フォルダのシンボリックリンク作成 ===")
        for sd_rel, gd_rel in self.folder_pairs.items():
            sd_dir = self.sd_root / sd_rel
            gd_dir = self.gd_root / gd_rel
            gd_dir.mkdir(parents=True, exist_ok=True)
            self._create_symlink(sd_dir, gd_dir)