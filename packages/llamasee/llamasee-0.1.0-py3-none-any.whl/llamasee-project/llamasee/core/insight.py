"""
Insight class for representing data insights in LlamaSee.
"""
from typing import Dict, Any, List, Optional

class Insight:
    """
    Represents a single insight derived from data comparison.
    
    Attributes:
        id (str): Unique identifier for the insight
        description (str): Human-readable description of the insight
        importance_score (float): Score indicating the importance of the insight (0-1)
        source_data (Dict[str, Any]): Raw data that generated this insight
        trace (Dict[str, Any]): Traceability information linking to source data
        llm_tags (List[str]): Tags generated by LLM for this insight
        llm_annotation (Optional[str]): Detailed annotation generated by LLM
        insight_type (Optional[str]): Type of insight (difference, trend, anomaly, scope, distribution)
        scope_level (Optional[str]): Scope level (aggregate, dimension, individual)
        dimensions (List[str]): Relevant dimensions for this insight
        magnitude (float): Normalized magnitude (0-1)
        frequency (float): Normalized frequency (0-1)
        business_impact (float): Normalized business impact (0-1)
        uniqueness (float): Normalized uniqueness (0-1)
        weighted_score (float): Weighted importance score
        insight_subtype (Optional[str]): Subtype of insight
        scope_details (Dict[str, Any]): Additional scope information
    """
    
    def __init__(self, id: str, description: str, importance_score: float, source_data: Dict[str, Any]):
        """
        Initialize a new Insight.
        
        Args:
            id: Unique identifier for the insight
            description: Human-readable description of the insight
            importance_score: Score indicating the importance of the insight (0-1)
            source_data: Raw data that generated this insight
        """
        self.id = id
        self.description = description
        self.importance_score = importance_score
        self.source_data = source_data
        
        # New attributes for type and scope
        self.insight_type = None  # 'data_science', 'data_structure', 'context'
        self.insight_subtype = None  # 'trend', 'anomaly', 'difference', etc.
        self.scope_level = None  # 'aggregate', 'dimension', 'individual'
        self.scope_details = {}  # Additional scope information (dimension_id, key, value)
        
        # Enhanced traceability
        self.trace = {
            'data_indices': [],  # Row indices in original datasets
            'columns': [],       # Column names
            'values': {},        # Key-value pairs
            'context': {},       # Additional context
            'dataset_a': {       # Dataset A specific trace
                'indices': [],
                'columns': [],
                'values': {}
            },
            'dataset_b': {       # Dataset B specific trace
                'indices': [],
                'columns': [],
                'values': {}
            },
            'dimension_context': {},  # Dimension-specific context
            'comparison_context': {}  # Comparison-specific context
        }
        
        self.llm_tags = []
        self.llm_annotation = None
        
        # Categorization fields
        self.dimensions = []      # relevant dimensions
        self.magnitude = 0.0      # normalized magnitude (0-1)
        self.frequency = 0.0      # normalized frequency (0-1)
        self.business_impact = 0.0 # normalized business impact (0-1)
        self.uniqueness = 0.0     # normalized uniqueness (0-1)
        self.weighted_score = importance_score  # initially same as importance_score, can be updated
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the insight to a dictionary representation.
        
        Returns:
            Dict[str, Any]: Dictionary representation of the insight
        """
        return {
            'id': self.id,
            'description': self.description,
            'importance_score': self.importance_score,
            'source_data': self.source_data,
            'trace': self.trace,
            'llm_tags': self.llm_tags,
            'llm_annotation': self.llm_annotation,
            'insight_type': self.insight_type,
            'insight_subtype': self.insight_subtype,
            'scope_level': self.scope_level,
            'scope_details': self.scope_details,
            'dimensions': self.dimensions,
            'magnitude': self.magnitude,
            'frequency': self.frequency,
            'business_impact': self.business_impact,
            'uniqueness': self.uniqueness,
            'weighted_score': self.weighted_score
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Insight':
        """
        Create an Insight instance from a dictionary.
        
        Args:
            data: Dictionary representation of an insight
            
        Returns:
            Insight: New Insight instance
        """
        insight = cls(
            id=data['id'],
            description=data['description'],
            importance_score=data['importance_score'],
            source_data=data['source_data']
        )
        
        insight.trace = data.get('trace', {})
        insight.llm_tags = data.get('llm_tags', [])
        insight.llm_annotation = data.get('llm_annotation')
        insight.insight_type = data.get('insight_type')
        insight.insight_subtype = data.get('insight_subtype')
        insight.scope_level = data.get('scope_level')
        insight.scope_details = data.get('scope_details', {})
        insight.dimensions = data.get('dimensions', [])
        insight.magnitude = data.get('magnitude', 0.0)
        insight.frequency = data.get('frequency', 0.0)
        insight.business_impact = data.get('business_impact', 0.0)
        insight.uniqueness = data.get('uniqueness', 0.0)
        insight.weighted_score = data.get('weighted_score', insight.importance_score)
        
        return insight 