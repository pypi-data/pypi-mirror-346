[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "permguard"
description = 'The official Python SDK for Permguard (https://www.permguard.com)'
readme = "README.md"
requires-python = ">=3.8"
license = "Apache-2.0"
keywords = [
  "Permguard",
  "Nitro Agility S.r.l."
]
authors = [
  { name = "Nitro Agility S.r.l.", email = "opensource@permguard.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "pytz~=2023.3",
  "tzlocal~=4.3",
  "deepdiff~=8.0.1",
  "pydantic~=2.10.6",
  "grpcio~=1.70.0",
  "protobuf~=5.29.3"
]
dynamic = ["version"]

[project.urls]
Documentation = "https://www.permguard.com"
Source = "https://github.com/permguard/permguard"

[tool.hatch.version]
path = "permguard/__about__.py"

[tool.mypy]
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = 'skip'
ignore_missing_imports = true
no_implicit_reexport = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "*.hatchling.*",
    "*.hatch.utils.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_no_return = true

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38"]

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
  "A",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B024", "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  "PLC1901", # empty string comparisons
  "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
  "FBT001", "FBT002", "FBT003",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["hatch", "hatchling"]

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Allow print/pprint
"scripts/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "permguard/__about__.py",
  "permguard/**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
