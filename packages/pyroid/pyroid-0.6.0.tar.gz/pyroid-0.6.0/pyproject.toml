[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "pyroid"
version = "0.6.0"
description = "High-performance Rust functions for Python with a simplified architecture"
authors = [{ name = "Pyroid Team", email = "support@ataiva.com" }]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Rust",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
"Homepage" = "https://github.com/ao/pyroid"
"Bug Tracker" = "https://github.com/ao/pyroid/issues"
"Documentation" = "https://github.com/ao/pyroid/blob/main/README.md"

[tool.maturin]
python-source = "python"
features = [
  "pyo3/extension-module",
  "math",
  "text",
  "data",
  "io",
  "image",
  "ml",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version", "Cargo.toml:package.version"]
version_pattern = [
    "python/pyroid/__init__.py:__version__ = \"$version\"",
    "setup.py:version=\"$version\""
]
branch = "main"
upload_to_pypi = false # We use the publish.yml workflow for this
upload_to_release = true
build_command = "echo 'Skipping build during semantic release'"
tag_commit = true # Ensure tags are created
commit = true # Ensure version changes are committed
push = true # Ensure commits and tags are pushed
tag_format = "v{version}" # Ensure tags start with "v"
changelog_file = "CHANGELOG.md" # Explicitly specify the changelog file
changelog_sections = [
  "feature",
  "fix",
  "breaking",
  "documentation",
  "performance",
  "refactor",
]
major_on_zero = false # Treat 0.x versions as major releases
version_source = "commit" # Use commit messages to determine version
commit_version_number = true # Include version number in commit message
commit_subject = "chore(release): {version} [skip ci]" # Commit message format
commit_author = "github-actions <actions@github.com>" # Commit author

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.remote]
type = "github"

[tool.semantic_release.parser]
parse_version_from_commit = true

