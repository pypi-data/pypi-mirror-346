# generated by datamodel-codegen:
#   filename:  data_room_compute_action.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Kind(Enum):
    media = 'media'


class DataRoomComputeAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getMatchingValidationReport: Mapping[str, Any]


class DataRoomComputeAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getSegmentsValidationReport: Mapping[str, Any]


class DataRoomComputeAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getDemographicsValidationReport: Mapping[str, Any]


class DataRoomComputeAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiencesValidationReport: Mapping[str, Any]


class DataRoomComputeAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    computeInsights: Mapping[str, Any]


class DataRoomComputeAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    computeOverlapStatistics: Mapping[str, Any]


class DataRoomComputeAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getDataAttributes: Mapping[str, Any]


class DataRoomComputeAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    retrieveModelQualityReport: Mapping[str, Any]


class GetAudiences(BaseModel):
    user: str


class DataRoomComputeAction10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiences: GetAudiences


class Kind56(Enum):
    BASE = 'BASE'


class AudienceReference13(BaseModel):
    kind: Kind56


class Kind57(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference14(BaseModel):
    id: str
    kind: Kind57


class Kind58(Enum):
    SEED = 'SEED'


class AudienceReference15(BaseModel):
    audienceType: str
    kind: Kind58


class AudienceReference(
    RootModel[Union[AudienceReference13, AudienceReference14, AudienceReference15]]
):
    root: Union[AudienceReference13, AudienceReference14, AudienceReference15]


class GetLookalikeAudienceStatistics(BaseModel):
    audienceRef: AudienceReference


class DataRoomComputeAction9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class EstimateAudienceSize(GetLookalikeAudienceStatistics):
    pass


class DataRoomComputeAction11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    estimateAudienceSize: EstimateAudienceSize


class GetAudienceUserList(GetLookalikeAudienceStatistics):
    pass


class DataRoomComputeAction12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudienceUserList: GetAudienceUserList


class DataRoomComputeAction(
    RootModel[
        Union[
            DataRoomComputeAction1,
            DataRoomComputeAction2,
            DataRoomComputeAction3,
            DataRoomComputeAction4,
            DataRoomComputeAction5,
            DataRoomComputeAction6,
            DataRoomComputeAction7,
            DataRoomComputeAction8,
            DataRoomComputeAction9,
            DataRoomComputeAction10,
            DataRoomComputeAction11,
            DataRoomComputeAction12,
        ]
    ]
):
    root: Union[
        DataRoomComputeAction1,
        DataRoomComputeAction2,
        DataRoomComputeAction3,
        DataRoomComputeAction4,
        DataRoomComputeAction5,
        DataRoomComputeAction6,
        DataRoomComputeAction7,
        DataRoomComputeAction8,
        DataRoomComputeAction9,
        DataRoomComputeAction10,
        DataRoomComputeAction11,
        DataRoomComputeAction12,
    ] = Field(..., title='DataRoomComputeAction')
