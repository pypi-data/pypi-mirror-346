# generated by datamodel-codegen:
#   filename:  data_room_action_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    media = 'media'


class DataRoomActionResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    provisionBaseAudiencePolicyIds: Mapping[str, Any]


class DataRoomActionResponse2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class DataRoomActionResponse3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    provisionSeedAudiencePolicyIds: Mapping[str, Any]


class DataRoomActionResponse4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(BaseModel):
    numDeletedAudiences: conint(ge=0)


class DataRoomActionResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deleteCustomAudience: DeleteCustomAudience


class Kind39(Enum):
    BASE = 'BASE'


class AudienceReference10(BaseModel):
    kind: Kind39


class Kind40(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference11(BaseModel):
    id: str
    kind: Kind40


class Kind41(Enum):
    SEED = 'SEED'


class AudienceReference12(BaseModel):
    audienceType: str
    kind: Kind41


class AudienceReference(
    RootModel[Union[AudienceReference10, AudienceReference11, AudienceReference12]]
):
    root: Union[AudienceReference10, AudienceReference11, AudienceReference12]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind42(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition7(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind42
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind43(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition8(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind43
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition7, CustomAudienceDefinition8]]
):
    root: Union[CustomAudienceDefinition7, CustomAudienceDefinition8]


class CustomAudience(BaseModel):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: Optional[bool] = False
    id: str
    isStale: Optional[bool] = Field(
        False,
        description='Whether this audience cannot be generated with the current data provisioned to the MDCR. NOTE: This is added here so that the types we generate are correct. This value can only be set in the Python computation get_audiences that has access to the actual data.',
    )
    name: str
    sharedWith: Optional[Sequence[str]] = []


class DeleteCustomAudiences(BaseModel):
    conflictingAudiences: Sequence[CustomAudience]


class DataRoomActionResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deleteCustomAudiences: DeleteCustomAudiences


class GetAudiencePrerequisites(BaseModel):
    audiences: Sequence[CustomAudience]


class DataRoomActionResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiencePrerequisites: GetAudiencePrerequisites


class CreateCustomAudience(BaseModel):
    audience: CustomAudience


class DataRoomActionResponse8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(BaseModel):
    audience: Optional[CustomAudience] = None


class DataRoomActionResponse9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    updateCustomAudience: UpdateCustomAudience


class DataRoomActionResponse(
    RootModel[
        Union[
            DataRoomActionResponse1,
            DataRoomActionResponse2,
            DataRoomActionResponse3,
            DataRoomActionResponse4,
            DataRoomActionResponse5,
            DataRoomActionResponse6,
            DataRoomActionResponse7,
            DataRoomActionResponse8,
            DataRoomActionResponse9,
        ]
    ]
):
    root: Union[
        DataRoomActionResponse1,
        DataRoomActionResponse2,
        DataRoomActionResponse3,
        DataRoomActionResponse4,
        DataRoomActionResponse5,
        DataRoomActionResponse6,
        DataRoomActionResponse7,
        DataRoomActionResponse8,
        DataRoomActionResponse9,
    ] = Field(..., title='DataRoomActionResponse')
