# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 65.1.13-v202505071419
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestor': 'ColumnRuleAncestorInputV1',
        'asset_creator': 'ColumnRuleAssetCreatorInputV1',
        'concat_columns': 'ColumnRuleConcatInputV1',
        'constant': 'ColumnRuleConstantInputV1',
        'descendant': 'ColumnRuleDescendantInputV1',
        'event_property': 'ColumnRuleEventPropertyInputV1',
        'formula_creator': 'ColumnRuleFormulaCreatorInputV1',
        'item_property': 'ColumnRuleItemPropertyInputV1',
        'path': 'ColumnRulePathInputV1',
        'tree_path_creator': 'ColumnRuleTreePathCreatorInputV1'
    }

    attribute_map = {
        'ancestor': 'ancestor',
        'asset_creator': 'assetCreator',
        'concat_columns': 'concatColumns',
        'constant': 'constant',
        'descendant': 'descendant',
        'event_property': 'eventProperty',
        'formula_creator': 'formulaCreator',
        'item_property': 'itemProperty',
        'path': 'path',
        'tree_path_creator': 'treePathCreator'
    }

    def __init__(self, ancestor=None, asset_creator=None, concat_columns=None, constant=None, descendant=None, event_property=None, formula_creator=None, item_property=None, path=None, tree_path_creator=None):
        """
        ColumnRuleInputV1 - a model defined in Swagger
        """

        self._ancestor = None
        self._asset_creator = None
        self._concat_columns = None
        self._constant = None
        self._descendant = None
        self._event_property = None
        self._formula_creator = None
        self._item_property = None
        self._path = None
        self._tree_path_creator = None

        if ancestor is not None:
          self.ancestor = ancestor
        if asset_creator is not None:
          self.asset_creator = asset_creator
        if concat_columns is not None:
          self.concat_columns = concat_columns
        if constant is not None:
          self.constant = constant
        if descendant is not None:
          self.descendant = descendant
        if event_property is not None:
          self.event_property = event_property
        if formula_creator is not None:
          self.formula_creator = formula_creator
        if item_property is not None:
          self.item_property = item_property
        if path is not None:
          self.path = path
        if tree_path_creator is not None:
          self.tree_path_creator = tree_path_creator

    @property
    def ancestor(self):
        """
        Gets the ancestor of this ColumnRuleInputV1.

        :return: The ancestor of this ColumnRuleInputV1.
        :rtype: ColumnRuleAncestorInputV1
        """
        return self._ancestor

    @ancestor.setter
    def ancestor(self, ancestor):
        """
        Sets the ancestor of this ColumnRuleInputV1.

        :param ancestor: The ancestor of this ColumnRuleInputV1.
        :type: ColumnRuleAncestorInputV1
        """

        self._ancestor = ancestor

    @property
    def asset_creator(self):
        """
        Gets the asset_creator of this ColumnRuleInputV1.

        :return: The asset_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleAssetCreatorInputV1
        """
        return self._asset_creator

    @asset_creator.setter
    def asset_creator(self, asset_creator):
        """
        Sets the asset_creator of this ColumnRuleInputV1.

        :param asset_creator: The asset_creator of this ColumnRuleInputV1.
        :type: ColumnRuleAssetCreatorInputV1
        """

        self._asset_creator = asset_creator

    @property
    def concat_columns(self):
        """
        Gets the concat_columns of this ColumnRuleInputV1.

        :return: The concat_columns of this ColumnRuleInputV1.
        :rtype: ColumnRuleConcatInputV1
        """
        return self._concat_columns

    @concat_columns.setter
    def concat_columns(self, concat_columns):
        """
        Sets the concat_columns of this ColumnRuleInputV1.

        :param concat_columns: The concat_columns of this ColumnRuleInputV1.
        :type: ColumnRuleConcatInputV1
        """

        self._concat_columns = concat_columns

    @property
    def constant(self):
        """
        Gets the constant of this ColumnRuleInputV1.

        :return: The constant of this ColumnRuleInputV1.
        :rtype: ColumnRuleConstantInputV1
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """
        Sets the constant of this ColumnRuleInputV1.

        :param constant: The constant of this ColumnRuleInputV1.
        :type: ColumnRuleConstantInputV1
        """

        self._constant = constant

    @property
    def descendant(self):
        """
        Gets the descendant of this ColumnRuleInputV1.

        :return: The descendant of this ColumnRuleInputV1.
        :rtype: ColumnRuleDescendantInputV1
        """
        return self._descendant

    @descendant.setter
    def descendant(self, descendant):
        """
        Sets the descendant of this ColumnRuleInputV1.

        :param descendant: The descendant of this ColumnRuleInputV1.
        :type: ColumnRuleDescendantInputV1
        """

        self._descendant = descendant

    @property
    def event_property(self):
        """
        Gets the event_property of this ColumnRuleInputV1.

        :return: The event_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleEventPropertyInputV1
        """
        return self._event_property

    @event_property.setter
    def event_property(self, event_property):
        """
        Sets the event_property of this ColumnRuleInputV1.

        :param event_property: The event_property of this ColumnRuleInputV1.
        :type: ColumnRuleEventPropertyInputV1
        """

        self._event_property = event_property

    @property
    def formula_creator(self):
        """
        Gets the formula_creator of this ColumnRuleInputV1.

        :return: The formula_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleFormulaCreatorInputV1
        """
        return self._formula_creator

    @formula_creator.setter
    def formula_creator(self, formula_creator):
        """
        Sets the formula_creator of this ColumnRuleInputV1.

        :param formula_creator: The formula_creator of this ColumnRuleInputV1.
        :type: ColumnRuleFormulaCreatorInputV1
        """

        self._formula_creator = formula_creator

    @property
    def item_property(self):
        """
        Gets the item_property of this ColumnRuleInputV1.

        :return: The item_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleItemPropertyInputV1
        """
        return self._item_property

    @item_property.setter
    def item_property(self, item_property):
        """
        Sets the item_property of this ColumnRuleInputV1.

        :param item_property: The item_property of this ColumnRuleInputV1.
        :type: ColumnRuleItemPropertyInputV1
        """

        self._item_property = item_property

    @property
    def path(self):
        """
        Gets the path of this ColumnRuleInputV1.

        :return: The path of this ColumnRuleInputV1.
        :rtype: ColumnRulePathInputV1
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ColumnRuleInputV1.

        :param path: The path of this ColumnRuleInputV1.
        :type: ColumnRulePathInputV1
        """

        self._path = path

    @property
    def tree_path_creator(self):
        """
        Gets the tree_path_creator of this ColumnRuleInputV1.

        :return: The tree_path_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleTreePathCreatorInputV1
        """
        return self._tree_path_creator

    @tree_path_creator.setter
    def tree_path_creator(self, tree_path_creator):
        """
        Sets the tree_path_creator of this ColumnRuleInputV1.

        :param tree_path_creator: The tree_path_creator of this ColumnRuleInputV1.
        :type: ColumnRuleTreePathCreatorInputV1
        """

        self._tree_path_creator = tree_path_creator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
