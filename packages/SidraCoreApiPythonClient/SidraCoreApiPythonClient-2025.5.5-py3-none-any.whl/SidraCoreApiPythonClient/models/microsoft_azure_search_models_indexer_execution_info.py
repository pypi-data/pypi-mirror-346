# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureSearchModelsIndexerExecutionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'MicrosoftAzureSearchModelsIndexerStatus',
        'last_result': 'MicrosoftAzureSearchModelsIndexerExecutionResult',
        'execution_history': 'list[MicrosoftAzureSearchModelsIndexerExecutionResult]',
        'limits': 'MicrosoftAzureSearchModelsIndexerLimits'
    }

    attribute_map = {
        'status': 'status',
        'last_result': 'lastResult',
        'execution_history': 'executionHistory',
        'limits': 'limits'
    }

    def __init__(self, status=None, last_result=None, execution_history=None, limits=None):  # noqa: E501
        """MicrosoftAzureSearchModelsIndexerExecutionInfo - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._last_result = None
        self._execution_history = None
        self._limits = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if last_result is not None:
            self.last_result = last_result
        if execution_history is not None:
            self.execution_history = execution_history
        if limits is not None:
            self.limits = limits

    @property
    def status(self):
        """Gets the status of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501


        :return: The status of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :rtype: MicrosoftAzureSearchModelsIndexerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MicrosoftAzureSearchModelsIndexerExecutionInfo.


        :param status: The status of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :type: MicrosoftAzureSearchModelsIndexerStatus
        """

        self._status = status

    @property
    def last_result(self):
        """Gets the last_result of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501


        :return: The last_result of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :rtype: MicrosoftAzureSearchModelsIndexerExecutionResult
        """
        return self._last_result

    @last_result.setter
    def last_result(self, last_result):
        """Sets the last_result of this MicrosoftAzureSearchModelsIndexerExecutionInfo.


        :param last_result: The last_result of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :type: MicrosoftAzureSearchModelsIndexerExecutionResult
        """

        self._last_result = last_result

    @property
    def execution_history(self):
        """Gets the execution_history of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501


        :return: The execution_history of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :rtype: list[MicrosoftAzureSearchModelsIndexerExecutionResult]
        """
        return self._execution_history

    @execution_history.setter
    def execution_history(self, execution_history):
        """Sets the execution_history of this MicrosoftAzureSearchModelsIndexerExecutionInfo.


        :param execution_history: The execution_history of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :type: list[MicrosoftAzureSearchModelsIndexerExecutionResult]
        """

        self._execution_history = execution_history

    @property
    def limits(self):
        """Gets the limits of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501


        :return: The limits of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :rtype: MicrosoftAzureSearchModelsIndexerLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this MicrosoftAzureSearchModelsIndexerExecutionInfo.


        :param limits: The limits of this MicrosoftAzureSearchModelsIndexerExecutionInfo.  # noqa: E501
        :type: MicrosoftAzureSearchModelsIndexerLimits
        """

        self._limits = limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureSearchModelsIndexerExecutionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureSearchModelsIndexerExecutionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
