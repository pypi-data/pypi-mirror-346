# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDatabricksDipJobUpsertDefinitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_intake_process_id': 'str',
        'parameters': 'str',
        'job_name': 'str',
        'notebook_path': 'str',
        'data_storage_unit_id': 'int',
        'user_parameters': 'list[APIDatabricksJobUpsertParameter]',
        'run_immediately': 'bool',
        'quartz_cron_expression': 'str',
        'tags': 'list[APIDatabricksJobUpsertTag]'
    }

    attribute_map = {
        'data_intake_process_id': 'dataIntakeProcessId',
        'parameters': 'parameters',
        'job_name': 'jobName',
        'notebook_path': 'notebookPath',
        'data_storage_unit_id': 'dataStorageUnitId',
        'user_parameters': 'userParameters',
        'run_immediately': 'runImmediately',
        'quartz_cron_expression': 'quartzCronExpression',
        'tags': 'tags'
    }

    def __init__(self, data_intake_process_id=None, parameters=None, job_name=None, notebook_path=None, data_storage_unit_id=None, user_parameters=None, run_immediately=None, quartz_cron_expression=None, tags=None):  # noqa: E501
        """APIDatabricksDipJobUpsertDefinitionRequest - a model defined in Swagger"""  # noqa: E501
        self._data_intake_process_id = None
        self._parameters = None
        self._job_name = None
        self._notebook_path = None
        self._data_storage_unit_id = None
        self._user_parameters = None
        self._run_immediately = None
        self._quartz_cron_expression = None
        self._tags = None
        self.discriminator = None
        if data_intake_process_id is not None:
            self.data_intake_process_id = data_intake_process_id
        if parameters is not None:
            self.parameters = parameters
        if job_name is not None:
            self.job_name = job_name
        if notebook_path is not None:
            self.notebook_path = notebook_path
        if data_storage_unit_id is not None:
            self.data_storage_unit_id = data_storage_unit_id
        if user_parameters is not None:
            self.user_parameters = user_parameters
        if run_immediately is not None:
            self.run_immediately = run_immediately
        if quartz_cron_expression is not None:
            self.quartz_cron_expression = quartz_cron_expression
        if tags is not None:
            self.tags = tags

    @property
    def data_intake_process_id(self):
        """Gets the data_intake_process_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The data_intake_process_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_intake_process_id

    @data_intake_process_id.setter
    def data_intake_process_id(self, data_intake_process_id):
        """Sets the data_intake_process_id of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param data_intake_process_id: The data_intake_process_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._data_intake_process_id = data_intake_process_id

    @property
    def parameters(self):
        """Gets the parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param parameters: The parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def job_name(self):
        """Gets the job_name of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The job_name of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param job_name: The job_name of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def notebook_path(self):
        """Gets the notebook_path of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The notebook_path of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._notebook_path

    @notebook_path.setter
    def notebook_path(self, notebook_path):
        """Sets the notebook_path of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param notebook_path: The notebook_path of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._notebook_path = notebook_path

    @property
    def data_storage_unit_id(self):
        """Gets the data_storage_unit_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The data_storage_unit_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: int
        """
        return self._data_storage_unit_id

    @data_storage_unit_id.setter
    def data_storage_unit_id(self, data_storage_unit_id):
        """Sets the data_storage_unit_id of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param data_storage_unit_id: The data_storage_unit_id of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: int
        """

        self._data_storage_unit_id = data_storage_unit_id

    @property
    def user_parameters(self):
        """Gets the user_parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The user_parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: list[APIDatabricksJobUpsertParameter]
        """
        return self._user_parameters

    @user_parameters.setter
    def user_parameters(self, user_parameters):
        """Sets the user_parameters of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param user_parameters: The user_parameters of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: list[APIDatabricksJobUpsertParameter]
        """

        self._user_parameters = user_parameters

    @property
    def run_immediately(self):
        """Gets the run_immediately of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The run_immediately of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_immediately

    @run_immediately.setter
    def run_immediately(self, run_immediately):
        """Sets the run_immediately of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param run_immediately: The run_immediately of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._run_immediately = run_immediately

    @property
    def quartz_cron_expression(self):
        """Gets the quartz_cron_expression of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The quartz_cron_expression of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._quartz_cron_expression

    @quartz_cron_expression.setter
    def quartz_cron_expression(self, quartz_cron_expression):
        """Sets the quartz_cron_expression of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param quartz_cron_expression: The quartz_cron_expression of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._quartz_cron_expression = quartz_cron_expression

    @property
    def tags(self):
        """Gets the tags of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501


        :return: The tags of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :rtype: list[APIDatabricksJobUpsertTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this APIDatabricksDipJobUpsertDefinitionRequest.


        :param tags: The tags of this APIDatabricksDipJobUpsertDefinitionRequest.  # noqa: E501
        :type: list[APIDatabricksJobUpsertTag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDatabricksDipJobUpsertDefinitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDatabricksDipJobUpsertDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
