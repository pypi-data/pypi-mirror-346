# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataTypeTranslationTypeTranslationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'connector_id': 'str',
        'connector_version': 'str',
        'id_type_translation_sink': 'DataIngestionTypeTranslationSinkEnum',
        'source_type': 'str',
        'translation': 'str',
        'stored_as_base64': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'connector_id': 'connectorId',
        'connector_version': 'connectorVersion',
        'id_type_translation_sink': 'idTypeTranslationSink',
        'source_type': 'sourceType',
        'translation': 'translation',
        'stored_as_base64': 'storedAsBase64'
    }

    def __init__(self, id=None, connector_id=None, connector_version=None, id_type_translation_sink=None, source_type=None, translation=None, stored_as_base64=None):  # noqa: E501
        """MetadataTypeTranslationTypeTranslationDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._connector_id = None
        self._connector_version = None
        self._id_type_translation_sink = None
        self._source_type = None
        self._translation = None
        self._stored_as_base64 = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if connector_id is not None:
            self.connector_id = connector_id
        if connector_version is not None:
            self.connector_version = connector_version
        if id_type_translation_sink is not None:
            self.id_type_translation_sink = id_type_translation_sink
        if source_type is not None:
            self.source_type = source_type
        if translation is not None:
            self.translation = translation
        if stored_as_base64 is not None:
            self.stored_as_base64 = stored_as_base64

    @property
    def id(self):
        """Gets the id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataTypeTranslationTypeTranslationDTO.


        :param id: The id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def connector_id(self):
        """Gets the connector_id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The connector_id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this MetadataTypeTranslationTypeTranslationDTO.


        :param connector_id: The connector_id of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def connector_version(self):
        """Gets the connector_version of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The connector_version of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this MetadataTypeTranslationTypeTranslationDTO.


        :param connector_version: The connector_version of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: str
        """

        self._connector_version = connector_version

    @property
    def id_type_translation_sink(self):
        """Gets the id_type_translation_sink of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The id_type_translation_sink of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: DataIngestionTypeTranslationSinkEnum
        """
        return self._id_type_translation_sink

    @id_type_translation_sink.setter
    def id_type_translation_sink(self, id_type_translation_sink):
        """Sets the id_type_translation_sink of this MetadataTypeTranslationTypeTranslationDTO.


        :param id_type_translation_sink: The id_type_translation_sink of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: DataIngestionTypeTranslationSinkEnum
        """

        self._id_type_translation_sink = id_type_translation_sink

    @property
    def source_type(self):
        """Gets the source_type of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The source_type of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this MetadataTypeTranslationTypeTranslationDTO.


        :param source_type: The source_type of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def translation(self):
        """Gets the translation of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The translation of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: str
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this MetadataTypeTranslationTypeTranslationDTO.


        :param translation: The translation of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: str
        """

        self._translation = translation

    @property
    def stored_as_base64(self):
        """Gets the stored_as_base64 of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501


        :return: The stored_as_base64 of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._stored_as_base64

    @stored_as_base64.setter
    def stored_as_base64(self, stored_as_base64):
        """Sets the stored_as_base64 of this MetadataTypeTranslationTypeTranslationDTO.


        :param stored_as_base64: The stored_as_base64 of this MetadataTypeTranslationTypeTranslationDTO.  # noqa: E501
        :type: bool
        """

        self._stored_as_base64 = stored_as_base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataTypeTranslationTypeTranslationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataTypeTranslationTypeTranslationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
