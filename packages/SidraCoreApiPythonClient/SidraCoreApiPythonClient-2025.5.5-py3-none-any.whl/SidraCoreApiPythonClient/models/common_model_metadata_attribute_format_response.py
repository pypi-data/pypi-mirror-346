# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelMetadataAttributeFormatResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'hql_expression': 'str',
        'id_attribute': 'int',
        'reg_exp': 'str',
        'source_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'hql_expression': 'hqlExpression',
        'id_attribute': 'idAttribute',
        'reg_exp': 'regExp',
        'source_value': 'sourceValue'
    }

    def __init__(self, id=None, hql_expression=None, id_attribute=None, reg_exp=None, source_value=None):  # noqa: E501
        """CommonModelMetadataAttributeFormatResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._hql_expression = None
        self._id_attribute = None
        self._reg_exp = None
        self._source_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if hql_expression is not None:
            self.hql_expression = hql_expression
        if id_attribute is not None:
            self.id_attribute = id_attribute
        if reg_exp is not None:
            self.reg_exp = reg_exp
        if source_value is not None:
            self.source_value = source_value

    @property
    def id(self):
        """Gets the id of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501


        :return: The id of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonModelMetadataAttributeFormatResponse.


        :param id: The id of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hql_expression(self):
        """Gets the hql_expression of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501


        :return: The hql_expression of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :rtype: str
        """
        return self._hql_expression

    @hql_expression.setter
    def hql_expression(self, hql_expression):
        """Sets the hql_expression of this CommonModelMetadataAttributeFormatResponse.


        :param hql_expression: The hql_expression of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :type: str
        """

        self._hql_expression = hql_expression

    @property
    def id_attribute(self):
        """Gets the id_attribute of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501


        :return: The id_attribute of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :rtype: int
        """
        return self._id_attribute

    @id_attribute.setter
    def id_attribute(self, id_attribute):
        """Sets the id_attribute of this CommonModelMetadataAttributeFormatResponse.


        :param id_attribute: The id_attribute of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :type: int
        """

        self._id_attribute = id_attribute

    @property
    def reg_exp(self):
        """Gets the reg_exp of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501


        :return: The reg_exp of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :rtype: str
        """
        return self._reg_exp

    @reg_exp.setter
    def reg_exp(self, reg_exp):
        """Sets the reg_exp of this CommonModelMetadataAttributeFormatResponse.


        :param reg_exp: The reg_exp of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :type: str
        """

        self._reg_exp = reg_exp

    @property
    def source_value(self):
        """Gets the source_value of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501


        :return: The source_value of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_value

    @source_value.setter
    def source_value(self, source_value):
        """Sets the source_value of this CommonModelMetadataAttributeFormatResponse.


        :param source_value: The source_value of this CommonModelMetadataAttributeFormatResponse.  # noqa: E501
        :type: str
        """

        self._source_value = source_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelMetadataAttributeFormatResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelMetadataAttributeFormatResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
