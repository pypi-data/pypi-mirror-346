# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataEntitiesEntityLightWithAttributesDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_provider': 'int',
        'id_table_format': 'PersistenceCommonEntitiesDataIngestionTableFormatEnum',
        'generate_delta_table': 'bool',
        're_create_table_on_deployment': 'bool',
        'table_name': 'str',
        'view_definition': 'str',
        'entity_type': 'DataIngestionEntityTypeEnum',
        'attributes': 'list[MetadataAttributesAttributeDTO]'
    }

    attribute_map = {
        'id': 'id',
        'id_provider': 'idProvider',
        'id_table_format': 'idTableFormat',
        'generate_delta_table': 'generateDeltaTable',
        're_create_table_on_deployment': 'reCreateTableOnDeployment',
        'table_name': 'tableName',
        'view_definition': 'viewDefinition',
        'entity_type': 'entityType',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, id_provider=None, id_table_format=None, generate_delta_table=None, re_create_table_on_deployment=None, table_name=None, view_definition=None, entity_type=None, attributes=None):  # noqa: E501
        """MetadataEntitiesEntityLightWithAttributesDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_provider = None
        self._id_table_format = None
        self._generate_delta_table = None
        self._re_create_table_on_deployment = None
        self._table_name = None
        self._view_definition = None
        self._entity_type = None
        self._attributes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_provider is not None:
            self.id_provider = id_provider
        if id_table_format is not None:
            self.id_table_format = id_table_format
        if generate_delta_table is not None:
            self.generate_delta_table = generate_delta_table
        if re_create_table_on_deployment is not None:
            self.re_create_table_on_deployment = re_create_table_on_deployment
        if table_name is not None:
            self.table_name = table_name
        if view_definition is not None:
            self.view_definition = view_definition
        if entity_type is not None:
            self.entity_type = entity_type
        if attributes is not None:
            self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The id of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param id: The id of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The id_provider of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param id_provider: The id_provider of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_table_format(self):
        """Gets the id_table_format of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The id_table_format of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: PersistenceCommonEntitiesDataIngestionTableFormatEnum
        """
        return self._id_table_format

    @id_table_format.setter
    def id_table_format(self, id_table_format):
        """Sets the id_table_format of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param id_table_format: The id_table_format of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: PersistenceCommonEntitiesDataIngestionTableFormatEnum
        """

        self._id_table_format = id_table_format

    @property
    def generate_delta_table(self):
        """Gets the generate_delta_table of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The generate_delta_table of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: bool
        """
        return self._generate_delta_table

    @generate_delta_table.setter
    def generate_delta_table(self, generate_delta_table):
        """Sets the generate_delta_table of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param generate_delta_table: The generate_delta_table of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: bool
        """

        self._generate_delta_table = generate_delta_table

    @property
    def re_create_table_on_deployment(self):
        """Gets the re_create_table_on_deployment of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The re_create_table_on_deployment of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: bool
        """
        return self._re_create_table_on_deployment

    @re_create_table_on_deployment.setter
    def re_create_table_on_deployment(self, re_create_table_on_deployment):
        """Sets the re_create_table_on_deployment of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param re_create_table_on_deployment: The re_create_table_on_deployment of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: bool
        """

        self._re_create_table_on_deployment = re_create_table_on_deployment

    @property
    def table_name(self):
        """Gets the table_name of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The table_name of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param table_name: The table_name of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def view_definition(self):
        """Gets the view_definition of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The view_definition of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: str
        """
        return self._view_definition

    @view_definition.setter
    def view_definition(self, view_definition):
        """Sets the view_definition of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param view_definition: The view_definition of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: str
        """

        self._view_definition = view_definition

    @property
    def entity_type(self):
        """Gets the entity_type of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The entity_type of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: DataIngestionEntityTypeEnum
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param entity_type: The entity_type of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: DataIngestionEntityTypeEnum
        """

        self._entity_type = entity_type

    @property
    def attributes(self):
        """Gets the attributes of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501


        :return: The attributes of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :rtype: list[MetadataAttributesAttributeDTO]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MetadataEntitiesEntityLightWithAttributesDTO.


        :param attributes: The attributes of this MetadataEntitiesEntityLightWithAttributesDTO.  # noqa: E501
        :type: list[MetadataAttributesAttributeDTO]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEntitiesEntityLightWithAttributesDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEntitiesEntityLightWithAttributesDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
