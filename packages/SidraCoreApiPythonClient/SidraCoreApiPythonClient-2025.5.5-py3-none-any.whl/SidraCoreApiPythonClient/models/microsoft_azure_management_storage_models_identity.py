# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'principal_id': 'str',
        'tenant_id': 'str',
        'type': 'str',
        'user_assigned_identities': 'dict(str, MicrosoftAzureManagementStorageModelsUserAssignedIdentity)'
    }

    attribute_map = {
        'principal_id': 'principalId',
        'tenant_id': 'tenantId',
        'type': 'type',
        'user_assigned_identities': 'userAssignedIdentities'
    }

    def __init__(self, principal_id=None, tenant_id=None, type=None, user_assigned_identities=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsIdentity - a model defined in Swagger"""  # noqa: E501
        self._principal_id = None
        self._tenant_id = None
        self._type = None
        self._user_assigned_identities = None
        self.discriminator = None
        if principal_id is not None:
            self.principal_id = principal_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if type is not None:
            self.type = type
        if user_assigned_identities is not None:
            self.user_assigned_identities = user_assigned_identities

    @property
    def principal_id(self):
        """Gets the principal_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501


        :return: The principal_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this MicrosoftAzureManagementStorageModelsIdentity.


        :param principal_id: The principal_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :type: str
        """

        self._principal_id = principal_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501


        :return: The tenant_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this MicrosoftAzureManagementStorageModelsIdentity.


        :param tenant_id: The tenant_id of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """Gets the type of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501


        :return: The type of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MicrosoftAzureManagementStorageModelsIdentity.


        :param type: The type of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_assigned_identities(self):
        """Gets the user_assigned_identities of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501


        :return: The user_assigned_identities of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :rtype: dict(str, MicrosoftAzureManagementStorageModelsUserAssignedIdentity)
        """
        return self._user_assigned_identities

    @user_assigned_identities.setter
    def user_assigned_identities(self, user_assigned_identities):
        """Sets the user_assigned_identities of this MicrosoftAzureManagementStorageModelsIdentity.


        :param user_assigned_identities: The user_assigned_identities of this MicrosoftAzureManagementStorageModelsIdentity.  # noqa: E501
        :type: dict(str, MicrosoftAzureManagementStorageModelsUserAssignedIdentity)
        """

        self._user_assigned_identities = user_assigned_identities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsIdentity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
