# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIIntegrationHubModelSasTokenDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expires_at_utc': 'datetime',
        'token_value': 'str',
        'token_type': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'expires_at_utc': 'expiresAtUtc',
        'token_value': 'tokenValue',
        'token_type': 'tokenType',
        'namespace': 'namespace'
    }

    def __init__(self, expires_at_utc=None, token_value=None, token_type=None, namespace=None):  # noqa: E501
        """APIIntegrationHubModelSasTokenDto - a model defined in Swagger"""  # noqa: E501
        self._expires_at_utc = None
        self._token_value = None
        self._token_type = None
        self._namespace = None
        self.discriminator = None
        if expires_at_utc is not None:
            self.expires_at_utc = expires_at_utc
        if token_value is not None:
            self.token_value = token_value
        if token_type is not None:
            self.token_type = token_type
        if namespace is not None:
            self.namespace = namespace

    @property
    def expires_at_utc(self):
        """Gets the expires_at_utc of this APIIntegrationHubModelSasTokenDto.  # noqa: E501


        :return: The expires_at_utc of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at_utc

    @expires_at_utc.setter
    def expires_at_utc(self, expires_at_utc):
        """Sets the expires_at_utc of this APIIntegrationHubModelSasTokenDto.


        :param expires_at_utc: The expires_at_utc of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :type: datetime
        """

        self._expires_at_utc = expires_at_utc

    @property
    def token_value(self):
        """Gets the token_value of this APIIntegrationHubModelSasTokenDto.  # noqa: E501


        :return: The token_value of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._token_value

    @token_value.setter
    def token_value(self, token_value):
        """Sets the token_value of this APIIntegrationHubModelSasTokenDto.


        :param token_value: The token_value of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :type: str
        """

        self._token_value = token_value

    @property
    def token_type(self):
        """Gets the token_type of this APIIntegrationHubModelSasTokenDto.  # noqa: E501


        :return: The token_type of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this APIIntegrationHubModelSasTokenDto.


        :param token_type: The token_type of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def namespace(self):
        """Gets the namespace of this APIIntegrationHubModelSasTokenDto.  # noqa: E501


        :return: The namespace of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this APIIntegrationHubModelSasTokenDto.


        :param namespace: The namespace of this APIIntegrationHubModelSasTokenDto.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIIntegrationHubModelSasTokenDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIIntegrationHubModelSasTokenDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
