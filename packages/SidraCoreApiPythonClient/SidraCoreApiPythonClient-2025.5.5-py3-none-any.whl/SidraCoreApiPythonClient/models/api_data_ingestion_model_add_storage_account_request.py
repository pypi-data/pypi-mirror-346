# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDataIngestionModelAddStorageAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_storage_unit_id': 'int',
        'name': 'str',
        'role': 'DataIngestionStorageRoleEnum',
        'configuration': 'MicrosoftAzureManagementStorageModelsStorageAccountCreateParameters'
    }

    attribute_map = {
        'data_storage_unit_id': 'dataStorageUnitId',
        'name': 'name',
        'role': 'role',
        'configuration': 'configuration'
    }

    def __init__(self, data_storage_unit_id=None, name=None, role=None, configuration=None):  # noqa: E501
        """APIDataIngestionModelAddStorageAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._data_storage_unit_id = None
        self._name = None
        self._role = None
        self._configuration = None
        self.discriminator = None
        self.data_storage_unit_id = data_storage_unit_id
        self.name = name
        self.role = role
        if configuration is not None:
            self.configuration = configuration

    @property
    def data_storage_unit_id(self):
        """Gets the data_storage_unit_id of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501


        :return: The data_storage_unit_id of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._data_storage_unit_id

    @data_storage_unit_id.setter
    def data_storage_unit_id(self, data_storage_unit_id):
        """Sets the data_storage_unit_id of this APIDataIngestionModelAddStorageAccountRequest.


        :param data_storage_unit_id: The data_storage_unit_id of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :type: int
        """
        if data_storage_unit_id is None:
            raise ValueError("Invalid value for `data_storage_unit_id`, must not be `None`")  # noqa: E501

        self._data_storage_unit_id = data_storage_unit_id

    @property
    def name(self):
        """Gets the name of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501


        :return: The name of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIDataIngestionModelAddStorageAccountRequest.


        :param name: The name of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def role(self):
        """Gets the role of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501


        :return: The role of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :rtype: DataIngestionStorageRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this APIDataIngestionModelAddStorageAccountRequest.


        :param role: The role of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :type: DataIngestionStorageRoleEnum
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def configuration(self):
        """Gets the configuration of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501


        :return: The configuration of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsStorageAccountCreateParameters
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this APIDataIngestionModelAddStorageAccountRequest.


        :param configuration: The configuration of this APIDataIngestionModelAddStorageAccountRequest.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsStorageAccountCreateParameters
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDataIngestionModelAddStorageAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDataIngestionModelAddStorageAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
