# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelAzureSearchSearchRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_text': 'str',
        'include_total_result_count': 'bool',
        'facets': 'list[str]',
        'filter': 'str',
        'highlight_fields': 'list[str]',
        'highlight_post_tag': 'str',
        'highlight_pre_tag': 'str',
        'minimum_coverage': 'float',
        'order_by': 'list[str]',
        'query_type': 'CommonModelAzureSearchSearchQueryTypeEnum',
        'scoring_parameters': 'list[CommonModelAzureSearchSearchScoringParameter]',
        'scoring_profile': 'str',
        'search_fields': 'list[str]',
        'search_mode': 'CommonModelAzureSearchSearchModeEnum',
        'select': 'list[str]',
        'skip': 'int',
        'top': 'int'
    }

    attribute_map = {
        'search_text': 'searchText',
        'include_total_result_count': 'includeTotalResultCount',
        'facets': 'facets',
        'filter': 'filter',
        'highlight_fields': 'highlightFields',
        'highlight_post_tag': 'highlightPostTag',
        'highlight_pre_tag': 'highlightPreTag',
        'minimum_coverage': 'minimumCoverage',
        'order_by': 'orderBy',
        'query_type': 'queryType',
        'scoring_parameters': 'scoringParameters',
        'scoring_profile': 'scoringProfile',
        'search_fields': 'searchFields',
        'search_mode': 'searchMode',
        'select': 'select',
        'skip': 'skip',
        'top': 'top'
    }

    def __init__(self, search_text=None, include_total_result_count=None, facets=None, filter=None, highlight_fields=None, highlight_post_tag=None, highlight_pre_tag=None, minimum_coverage=None, order_by=None, query_type=None, scoring_parameters=None, scoring_profile=None, search_fields=None, search_mode=None, select=None, skip=None, top=None):  # noqa: E501
        """CommonModelAzureSearchSearchRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._search_text = None
        self._include_total_result_count = None
        self._facets = None
        self._filter = None
        self._highlight_fields = None
        self._highlight_post_tag = None
        self._highlight_pre_tag = None
        self._minimum_coverage = None
        self._order_by = None
        self._query_type = None
        self._scoring_parameters = None
        self._scoring_profile = None
        self._search_fields = None
        self._search_mode = None
        self._select = None
        self._skip = None
        self._top = None
        self.discriminator = None
        if search_text is not None:
            self.search_text = search_text
        if include_total_result_count is not None:
            self.include_total_result_count = include_total_result_count
        if facets is not None:
            self.facets = facets
        if filter is not None:
            self.filter = filter
        if highlight_fields is not None:
            self.highlight_fields = highlight_fields
        if highlight_post_tag is not None:
            self.highlight_post_tag = highlight_post_tag
        if highlight_pre_tag is not None:
            self.highlight_pre_tag = highlight_pre_tag
        if minimum_coverage is not None:
            self.minimum_coverage = minimum_coverage
        if order_by is not None:
            self.order_by = order_by
        if query_type is not None:
            self.query_type = query_type
        if scoring_parameters is not None:
            self.scoring_parameters = scoring_parameters
        if scoring_profile is not None:
            self.scoring_profile = scoring_profile
        if search_fields is not None:
            self.search_fields = search_fields
        if search_mode is not None:
            self.search_mode = search_mode
        if select is not None:
            self.select = select
        if skip is not None:
            self.skip = skip
        if top is not None:
            self.top = top

    @property
    def search_text(self):
        """Gets the search_text of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The search_text of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this CommonModelAzureSearchSearchRequestDTO.


        :param search_text: The search_text of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def include_total_result_count(self):
        """Gets the include_total_result_count of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The include_total_result_count of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_total_result_count

    @include_total_result_count.setter
    def include_total_result_count(self, include_total_result_count):
        """Sets the include_total_result_count of this CommonModelAzureSearchSearchRequestDTO.


        :param include_total_result_count: The include_total_result_count of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: bool
        """

        self._include_total_result_count = include_total_result_count

    @property
    def facets(self):
        """Gets the facets of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The facets of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this CommonModelAzureSearchSearchRequestDTO.


        :param facets: The facets of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._facets = facets

    @property
    def filter(self):
        """Gets the filter of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The filter of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CommonModelAzureSearchSearchRequestDTO.


        :param filter: The filter of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def highlight_fields(self):
        """Gets the highlight_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The highlight_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlight_fields

    @highlight_fields.setter
    def highlight_fields(self, highlight_fields):
        """Sets the highlight_fields of this CommonModelAzureSearchSearchRequestDTO.


        :param highlight_fields: The highlight_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._highlight_fields = highlight_fields

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The highlight_post_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this CommonModelAzureSearchSearchRequestDTO.


        :param highlight_post_tag: The highlight_post_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The highlight_pre_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this CommonModelAzureSearchSearchRequestDTO.


        :param highlight_pre_tag: The highlight_pre_tag of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The minimum_coverage of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this CommonModelAzureSearchSearchRequestDTO.


        :param minimum_coverage: The minimum_coverage of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def order_by(self):
        """Gets the order_by of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The order_by of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this CommonModelAzureSearchSearchRequestDTO.


        :param order_by: The order_by of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._order_by = order_by

    @property
    def query_type(self):
        """Gets the query_type of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The query_type of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: CommonModelAzureSearchSearchQueryTypeEnum
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this CommonModelAzureSearchSearchRequestDTO.


        :param query_type: The query_type of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: CommonModelAzureSearchSearchQueryTypeEnum
        """

        self._query_type = query_type

    @property
    def scoring_parameters(self):
        """Gets the scoring_parameters of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The scoring_parameters of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[CommonModelAzureSearchSearchScoringParameter]
        """
        return self._scoring_parameters

    @scoring_parameters.setter
    def scoring_parameters(self, scoring_parameters):
        """Sets the scoring_parameters of this CommonModelAzureSearchSearchRequestDTO.


        :param scoring_parameters: The scoring_parameters of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[CommonModelAzureSearchSearchScoringParameter]
        """

        self._scoring_parameters = scoring_parameters

    @property
    def scoring_profile(self):
        """Gets the scoring_profile of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The scoring_profile of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._scoring_profile

    @scoring_profile.setter
    def scoring_profile(self, scoring_profile):
        """Sets the scoring_profile of this CommonModelAzureSearchSearchRequestDTO.


        :param scoring_profile: The scoring_profile of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: str
        """

        self._scoring_profile = scoring_profile

    @property
    def search_fields(self):
        """Gets the search_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The search_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this CommonModelAzureSearchSearchRequestDTO.


        :param search_fields: The search_fields of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._search_fields = search_fields

    @property
    def search_mode(self):
        """Gets the search_mode of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The search_mode of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: CommonModelAzureSearchSearchModeEnum
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this CommonModelAzureSearchSearchRequestDTO.


        :param search_mode: The search_mode of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: CommonModelAzureSearchSearchModeEnum
        """

        self._search_mode = search_mode

    @property
    def select(self):
        """Gets the select of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The select of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this CommonModelAzureSearchSearchRequestDTO.


        :param select: The select of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._select = select

    @property
    def skip(self):
        """Gets the skip of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The skip of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this CommonModelAzureSearchSearchRequestDTO.


        :param skip: The skip of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def top(self):
        """Gets the top of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501


        :return: The top of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this CommonModelAzureSearchSearchRequestDTO.


        :param top: The top of this CommonModelAzureSearchSearchRequestDTO.  # noqa: E501
        :type: int
        """

        self._top = top

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelAzureSearchSearchRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelAzureSearchSearchRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
