# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataCatalogDataPreviewLoadHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_entity': 'int',
        'table_name': 'str',
        'load_date': 'datetime',
        'load_json': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_entity': 'idEntity',
        'table_name': 'tableName',
        'load_date': 'loadDate',
        'load_json': 'loadJson'
    }

    def __init__(self, id=None, id_entity=None, table_name=None, load_date=None, load_json=None):  # noqa: E501
        """DataCatalogDataPreviewLoadHistory - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_entity = None
        self._table_name = None
        self._load_date = None
        self._load_json = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_entity is not None:
            self.id_entity = id_entity
        if table_name is not None:
            self.table_name = table_name
        if load_date is not None:
            self.load_date = load_date
        if load_json is not None:
            self.load_json = load_json

    @property
    def id(self):
        """Gets the id of this DataCatalogDataPreviewLoadHistory.  # noqa: E501


        :return: The id of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataCatalogDataPreviewLoadHistory.


        :param id: The id of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_entity(self):
        """Gets the id_entity of this DataCatalogDataPreviewLoadHistory.  # noqa: E501


        :return: The id_entity of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataCatalogDataPreviewLoadHistory.


        :param id_entity: The id_entity of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def table_name(self):
        """Gets the table_name of this DataCatalogDataPreviewLoadHistory.  # noqa: E501


        :return: The table_name of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DataCatalogDataPreviewLoadHistory.


        :param table_name: The table_name of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def load_date(self):
        """Gets the load_date of this DataCatalogDataPreviewLoadHistory.  # noqa: E501


        :return: The load_date of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._load_date

    @load_date.setter
    def load_date(self, load_date):
        """Sets the load_date of this DataCatalogDataPreviewLoadHistory.


        :param load_date: The load_date of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :type: datetime
        """

        self._load_date = load_date

    @property
    def load_json(self):
        """Gets the load_json of this DataCatalogDataPreviewLoadHistory.  # noqa: E501


        :return: The load_json of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :rtype: str
        """
        return self._load_json

    @load_json.setter
    def load_json(self, load_json):
        """Sets the load_json of this DataCatalogDataPreviewLoadHistory.


        :param load_json: The load_json of this DataCatalogDataPreviewLoadHistory.  # noqa: E501
        :type: str
        """

        self._load_json = load_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCatalogDataPreviewLoadHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCatalogDataPreviewLoadHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
