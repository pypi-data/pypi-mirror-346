# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataAssetsAssetAdditionalPropertiesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_entity': 'int',
        'asset_name_regex': 'str',
        'additional_properties': 'str',
        'order': 'int'
    }

    attribute_map = {
        'id': 'id',
        'id_entity': 'idEntity',
        'asset_name_regex': 'assetNameRegex',
        'additional_properties': 'additionalProperties',
        'order': 'order'
    }

    def __init__(self, id=None, id_entity=None, asset_name_regex=None, additional_properties=None, order=None):  # noqa: E501
        """MetadataAssetsAssetAdditionalPropertiesDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_entity = None
        self._asset_name_regex = None
        self._additional_properties = None
        self._order = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_entity is not None:
            self.id_entity = id_entity
        if asset_name_regex is not None:
            self.asset_name_regex = asset_name_regex
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if order is not None:
            self.order = order

    @property
    def id(self):
        """Gets the id of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501


        :return: The id of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataAssetsAssetAdditionalPropertiesDto.


        :param id: The id of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_entity(self):
        """Gets the id_entity of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501


        :return: The id_entity of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this MetadataAssetsAssetAdditionalPropertiesDto.


        :param id_entity: The id_entity of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def asset_name_regex(self):
        """Gets the asset_name_regex of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501


        :return: The asset_name_regex of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_name_regex

    @asset_name_regex.setter
    def asset_name_regex(self, asset_name_regex):
        """Sets the asset_name_regex of this MetadataAssetsAssetAdditionalPropertiesDto.


        :param asset_name_regex: The asset_name_regex of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :type: str
        """

        self._asset_name_regex = asset_name_regex

    @property
    def additional_properties(self):
        """Gets the additional_properties of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501


        :return: The additional_properties of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this MetadataAssetsAssetAdditionalPropertiesDto.


        :param additional_properties: The additional_properties of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :type: str
        """

        self._additional_properties = additional_properties

    @property
    def order(self):
        """Gets the order of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501


        :return: The order of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this MetadataAssetsAssetAdditionalPropertiesDto.


        :param order: The order of this MetadataAssetsAssetAdditionalPropertiesDto.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataAssetsAssetAdditionalPropertiesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataAssetsAssetAdditionalPropertiesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
