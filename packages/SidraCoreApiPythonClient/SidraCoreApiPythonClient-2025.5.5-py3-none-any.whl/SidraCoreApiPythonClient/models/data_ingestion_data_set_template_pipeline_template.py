# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionDataSetTemplatePipelineTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'id': 'int',
        'id_pipeline_template': 'int',
        'id_data_set_template': 'int',
        'parameters': 'str',
        'data_set_template': 'DataIngestionDataSetTemplate',
        'pipeline_template': 'DataIngestionPipelineTemplate'
    }

    attribute_map = {
        'item_id': 'itemId',
        'id': 'id',
        'id_pipeline_template': 'idPipelineTemplate',
        'id_data_set_template': 'idDataSetTemplate',
        'parameters': 'parameters',
        'data_set_template': 'dataSetTemplate',
        'pipeline_template': 'pipelineTemplate'
    }

    def __init__(self, item_id=None, id=None, id_pipeline_template=None, id_data_set_template=None, parameters=None, data_set_template=None, pipeline_template=None):  # noqa: E501
        """DataIngestionDataSetTemplatePipelineTemplate - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._id = None
        self._id_pipeline_template = None
        self._id_data_set_template = None
        self._parameters = None
        self._data_set_template = None
        self._pipeline_template = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if id is not None:
            self.id = id
        if id_pipeline_template is not None:
            self.id_pipeline_template = id_pipeline_template
        if id_data_set_template is not None:
            self.id_data_set_template = id_data_set_template
        if parameters is not None:
            self.parameters = parameters
        if data_set_template is not None:
            self.data_set_template = data_set_template
        if pipeline_template is not None:
            self.pipeline_template = pipeline_template

    @property
    def item_id(self):
        """Gets the item_id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The item_id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this DataIngestionDataSetTemplatePipelineTemplate.


        :param item_id: The item_id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id(self):
        """Gets the id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionDataSetTemplatePipelineTemplate.


        :param id: The id of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_pipeline_template(self):
        """Gets the id_pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The id_pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id_pipeline_template

    @id_pipeline_template.setter
    def id_pipeline_template(self, id_pipeline_template):
        """Sets the id_pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.


        :param id_pipeline_template: The id_pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: int
        """

        self._id_pipeline_template = id_pipeline_template

    @property
    def id_data_set_template(self):
        """Gets the id_data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The id_data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id_data_set_template

    @id_data_set_template.setter
    def id_data_set_template(self, id_data_set_template):
        """Sets the id_data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.


        :param id_data_set_template: The id_data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: int
        """

        self._id_data_set_template = id_data_set_template

    @property
    def parameters(self):
        """Gets the parameters of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The parameters of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DataIngestionDataSetTemplatePipelineTemplate.


        :param parameters: The parameters of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def data_set_template(self):
        """Gets the data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: DataIngestionDataSetTemplate
        """
        return self._data_set_template

    @data_set_template.setter
    def data_set_template(self, data_set_template):
        """Sets the data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.


        :param data_set_template: The data_set_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: DataIngestionDataSetTemplate
        """

        self._data_set_template = data_set_template

    @property
    def pipeline_template(self):
        """Gets the pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501


        :return: The pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :rtype: DataIngestionPipelineTemplate
        """
        return self._pipeline_template

    @pipeline_template.setter
    def pipeline_template(self, pipeline_template):
        """Sets the pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.


        :param pipeline_template: The pipeline_template of this DataIngestionDataSetTemplatePipelineTemplate.  # noqa: E501
        :type: DataIngestionPipelineTemplate
        """

        self._pipeline_template = pipeline_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionDataSetTemplatePipelineTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionDataSetTemplatePipelineTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
