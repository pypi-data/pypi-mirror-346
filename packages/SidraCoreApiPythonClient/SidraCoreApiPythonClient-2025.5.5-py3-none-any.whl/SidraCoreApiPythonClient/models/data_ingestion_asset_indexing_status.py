# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionAssetIndexingStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_asset': 'int',
        'id_pipeline': 'int',
        'id_status': 'PersistenceCommonEntitiesDataIngestionAssetStatusEnum',
        'indexers_execution_errors': 'str',
        'indexers_execution_warnings': 'str',
        'indexers_knowledge_store': 'str',
        'last_updated': 'datetime',
        'asset': 'DataIngestionAsset',
        'pipeline': 'DataIngestionPipeline',
        'asset_status': 'DataIngestionAssetStatus'
    }

    attribute_map = {
        'id_asset': 'idAsset',
        'id_pipeline': 'idPipeline',
        'id_status': 'idStatus',
        'indexers_execution_errors': 'indexersExecutionErrors',
        'indexers_execution_warnings': 'indexersExecutionWarnings',
        'indexers_knowledge_store': 'indexersKnowledgeStore',
        'last_updated': 'lastUpdated',
        'asset': 'asset',
        'pipeline': 'pipeline',
        'asset_status': 'assetStatus'
    }

    def __init__(self, id_asset=None, id_pipeline=None, id_status=None, indexers_execution_errors=None, indexers_execution_warnings=None, indexers_knowledge_store=None, last_updated=None, asset=None, pipeline=None, asset_status=None):  # noqa: E501
        """DataIngestionAssetIndexingStatus - a model defined in Swagger"""  # noqa: E501
        self._id_asset = None
        self._id_pipeline = None
        self._id_status = None
        self._indexers_execution_errors = None
        self._indexers_execution_warnings = None
        self._indexers_knowledge_store = None
        self._last_updated = None
        self._asset = None
        self._pipeline = None
        self._asset_status = None
        self.discriminator = None
        if id_asset is not None:
            self.id_asset = id_asset
        if id_pipeline is not None:
            self.id_pipeline = id_pipeline
        if id_status is not None:
            self.id_status = id_status
        if indexers_execution_errors is not None:
            self.indexers_execution_errors = indexers_execution_errors
        if indexers_execution_warnings is not None:
            self.indexers_execution_warnings = indexers_execution_warnings
        if indexers_knowledge_store is not None:
            self.indexers_knowledge_store = indexers_knowledge_store
        if last_updated is not None:
            self.last_updated = last_updated
        if asset is not None:
            self.asset = asset
        if pipeline is not None:
            self.pipeline = pipeline
        if asset_status is not None:
            self.asset_status = asset_status

    @property
    def id_asset(self):
        """Gets the id_asset of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The id_asset of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: int
        """
        return self._id_asset

    @id_asset.setter
    def id_asset(self, id_asset):
        """Sets the id_asset of this DataIngestionAssetIndexingStatus.


        :param id_asset: The id_asset of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: int
        """

        self._id_asset = id_asset

    @property
    def id_pipeline(self):
        """Gets the id_pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The id_pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: int
        """
        return self._id_pipeline

    @id_pipeline.setter
    def id_pipeline(self, id_pipeline):
        """Sets the id_pipeline of this DataIngestionAssetIndexingStatus.


        :param id_pipeline: The id_pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: int
        """

        self._id_pipeline = id_pipeline

    @property
    def id_status(self):
        """Gets the id_status of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The id_status of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: PersistenceCommonEntitiesDataIngestionAssetStatusEnum
        """
        return self._id_status

    @id_status.setter
    def id_status(self, id_status):
        """Sets the id_status of this DataIngestionAssetIndexingStatus.


        :param id_status: The id_status of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: PersistenceCommonEntitiesDataIngestionAssetStatusEnum
        """

        self._id_status = id_status

    @property
    def indexers_execution_errors(self):
        """Gets the indexers_execution_errors of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The indexers_execution_errors of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: str
        """
        return self._indexers_execution_errors

    @indexers_execution_errors.setter
    def indexers_execution_errors(self, indexers_execution_errors):
        """Sets the indexers_execution_errors of this DataIngestionAssetIndexingStatus.


        :param indexers_execution_errors: The indexers_execution_errors of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: str
        """

        self._indexers_execution_errors = indexers_execution_errors

    @property
    def indexers_execution_warnings(self):
        """Gets the indexers_execution_warnings of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The indexers_execution_warnings of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: str
        """
        return self._indexers_execution_warnings

    @indexers_execution_warnings.setter
    def indexers_execution_warnings(self, indexers_execution_warnings):
        """Sets the indexers_execution_warnings of this DataIngestionAssetIndexingStatus.


        :param indexers_execution_warnings: The indexers_execution_warnings of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: str
        """

        self._indexers_execution_warnings = indexers_execution_warnings

    @property
    def indexers_knowledge_store(self):
        """Gets the indexers_knowledge_store of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The indexers_knowledge_store of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: str
        """
        return self._indexers_knowledge_store

    @indexers_knowledge_store.setter
    def indexers_knowledge_store(self, indexers_knowledge_store):
        """Sets the indexers_knowledge_store of this DataIngestionAssetIndexingStatus.


        :param indexers_knowledge_store: The indexers_knowledge_store of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: str
        """

        self._indexers_knowledge_store = indexers_knowledge_store

    @property
    def last_updated(self):
        """Gets the last_updated of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The last_updated of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DataIngestionAssetIndexingStatus.


        :param last_updated: The last_updated of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def asset(self):
        """Gets the asset of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The asset of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: DataIngestionAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DataIngestionAssetIndexingStatus.


        :param asset: The asset of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: DataIngestionAsset
        """

        self._asset = asset

    @property
    def pipeline(self):
        """Gets the pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: DataIngestionPipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this DataIngestionAssetIndexingStatus.


        :param pipeline: The pipeline of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: DataIngestionPipeline
        """

        self._pipeline = pipeline

    @property
    def asset_status(self):
        """Gets the asset_status of this DataIngestionAssetIndexingStatus.  # noqa: E501


        :return: The asset_status of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :rtype: DataIngestionAssetStatus
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this DataIngestionAssetIndexingStatus.


        :param asset_status: The asset_status of this DataIngestionAssetIndexingStatus.  # noqa: E501
        :type: DataIngestionAssetStatus
        """

        self._asset_status = asset_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionAssetIndexingStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionAssetIndexingStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
