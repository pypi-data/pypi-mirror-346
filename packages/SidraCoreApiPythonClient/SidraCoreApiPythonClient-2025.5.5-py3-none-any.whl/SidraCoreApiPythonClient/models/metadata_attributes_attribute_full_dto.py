# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataAttributesAttributeFullDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'attribute_formats': 'list[MetadataAttributeFormatsAttributeFormatDto]',
        'tags': 'list[MetadataTagsTagFullDTO]',
        'sql_type': 'str',
        'is_metadata': 'bool',
        'is_partition_column': 'bool',
        'is_calculated': 'bool',
        'order': 'int',
        'is_primary_key': 'bool',
        'treat_empty_as_null': 'bool',
        'special_format': 'str',
        'replacement_text': 'str',
        'replaced_text': 'str',
        'remove_quotes': 'bool',
        'need_trim': 'bool',
        'is_nullable': 'bool',
        'max_len': 'int',
        'hive_type': 'str',
        'name': 'str',
        'id_entity': 'int',
        'validation_text': 'str',
        'description': 'str',
        'source_name': 'str',
        'is_encrypted': 'bool',
        'item_id': 'str',
        'id_provider': 'int',
        'id_data_storage_unit': 'int',
        'data_mask': 'str',
        'parent_security_path': 'str',
        'security_path': 'str',
        'source_type': 'str',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'attribute_formats': 'attributeFormats',
        'tags': 'tags',
        'sql_type': 'sqlType',
        'is_metadata': 'isMetadata',
        'is_partition_column': 'isPartitionColumn',
        'is_calculated': 'isCalculated',
        'order': 'order',
        'is_primary_key': 'isPrimaryKey',
        'treat_empty_as_null': 'treatEmptyAsNull',
        'special_format': 'specialFormat',
        'replacement_text': 'replacementText',
        'replaced_text': 'replacedText',
        'remove_quotes': 'removeQuotes',
        'need_trim': 'needTrim',
        'is_nullable': 'isNullable',
        'max_len': 'maxLen',
        'hive_type': 'hiveType',
        'name': 'name',
        'id_entity': 'idEntity',
        'validation_text': 'validationText',
        'description': 'description',
        'source_name': 'sourceName',
        'is_encrypted': 'isEncrypted',
        'item_id': 'itemId',
        'id_provider': 'idProvider',
        'id_data_storage_unit': 'idDataStorageUnit',
        'data_mask': 'dataMask',
        'parent_security_path': 'parentSecurityPath',
        'security_path': 'securityPath',
        'source_type': 'sourceType',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, id=None, attribute_formats=None, tags=None, sql_type=None, is_metadata=None, is_partition_column=None, is_calculated=None, order=None, is_primary_key=None, treat_empty_as_null=None, special_format=None, replacement_text=None, replaced_text=None, remove_quotes=None, need_trim=None, is_nullable=None, max_len=None, hive_type=None, name=None, id_entity=None, validation_text=None, description=None, source_name=None, is_encrypted=None, item_id=None, id_provider=None, id_data_storage_unit=None, data_mask=None, parent_security_path=None, security_path=None, source_type=None, last_updated=None):  # noqa: E501
        """MetadataAttributesAttributeFullDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._attribute_formats = None
        self._tags = None
        self._sql_type = None
        self._is_metadata = None
        self._is_partition_column = None
        self._is_calculated = None
        self._order = None
        self._is_primary_key = None
        self._treat_empty_as_null = None
        self._special_format = None
        self._replacement_text = None
        self._replaced_text = None
        self._remove_quotes = None
        self._need_trim = None
        self._is_nullable = None
        self._max_len = None
        self._hive_type = None
        self._name = None
        self._id_entity = None
        self._validation_text = None
        self._description = None
        self._source_name = None
        self._is_encrypted = None
        self._item_id = None
        self._id_provider = None
        self._id_data_storage_unit = None
        self._data_mask = None
        self._parent_security_path = None
        self._security_path = None
        self._source_type = None
        self._last_updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if attribute_formats is not None:
            self.attribute_formats = attribute_formats
        if tags is not None:
            self.tags = tags
        if sql_type is not None:
            self.sql_type = sql_type
        if is_metadata is not None:
            self.is_metadata = is_metadata
        if is_partition_column is not None:
            self.is_partition_column = is_partition_column
        if is_calculated is not None:
            self.is_calculated = is_calculated
        if order is not None:
            self.order = order
        if is_primary_key is not None:
            self.is_primary_key = is_primary_key
        if treat_empty_as_null is not None:
            self.treat_empty_as_null = treat_empty_as_null
        if special_format is not None:
            self.special_format = special_format
        if replacement_text is not None:
            self.replacement_text = replacement_text
        if replaced_text is not None:
            self.replaced_text = replaced_text
        if remove_quotes is not None:
            self.remove_quotes = remove_quotes
        if need_trim is not None:
            self.need_trim = need_trim
        if is_nullable is not None:
            self.is_nullable = is_nullable
        if max_len is not None:
            self.max_len = max_len
        if hive_type is not None:
            self.hive_type = hive_type
        if name is not None:
            self.name = name
        if id_entity is not None:
            self.id_entity = id_entity
        if validation_text is not None:
            self.validation_text = validation_text
        if description is not None:
            self.description = description
        if source_name is not None:
            self.source_name = source_name
        if is_encrypted is not None:
            self.is_encrypted = is_encrypted
        if item_id is not None:
            self.item_id = item_id
        if id_provider is not None:
            self.id_provider = id_provider
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if data_mask is not None:
            self.data_mask = data_mask
        if parent_security_path is not None:
            self.parent_security_path = parent_security_path
        if security_path is not None:
            self.security_path = security_path
        if source_type is not None:
            self.source_type = source_type
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The id of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataAttributesAttributeFullDTO.


        :param id: The id of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def attribute_formats(self):
        """Gets the attribute_formats of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The attribute_formats of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: list[MetadataAttributeFormatsAttributeFormatDto]
        """
        return self._attribute_formats

    @attribute_formats.setter
    def attribute_formats(self, attribute_formats):
        """Sets the attribute_formats of this MetadataAttributesAttributeFullDTO.


        :param attribute_formats: The attribute_formats of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: list[MetadataAttributeFormatsAttributeFormatDto]
        """

        self._attribute_formats = attribute_formats

    @property
    def tags(self):
        """Gets the tags of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The tags of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: list[MetadataTagsTagFullDTO]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MetadataAttributesAttributeFullDTO.


        :param tags: The tags of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: list[MetadataTagsTagFullDTO]
        """

        self._tags = tags

    @property
    def sql_type(self):
        """Gets the sql_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The sql_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._sql_type

    @sql_type.setter
    def sql_type(self, sql_type):
        """Sets the sql_type of this MetadataAttributesAttributeFullDTO.


        :param sql_type: The sql_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._sql_type = sql_type

    @property
    def is_metadata(self):
        """Gets the is_metadata of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_metadata of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_metadata

    @is_metadata.setter
    def is_metadata(self, is_metadata):
        """Sets the is_metadata of this MetadataAttributesAttributeFullDTO.


        :param is_metadata: The is_metadata of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_metadata = is_metadata

    @property
    def is_partition_column(self):
        """Gets the is_partition_column of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_partition_column of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_partition_column

    @is_partition_column.setter
    def is_partition_column(self, is_partition_column):
        """Sets the is_partition_column of this MetadataAttributesAttributeFullDTO.


        :param is_partition_column: The is_partition_column of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_partition_column = is_partition_column

    @property
    def is_calculated(self):
        """Gets the is_calculated of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_calculated of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_calculated

    @is_calculated.setter
    def is_calculated(self, is_calculated):
        """Sets the is_calculated of this MetadataAttributesAttributeFullDTO.


        :param is_calculated: The is_calculated of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_calculated = is_calculated

    @property
    def order(self):
        """Gets the order of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The order of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this MetadataAttributesAttributeFullDTO.


        :param order: The order of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_primary_key of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this MetadataAttributesAttributeFullDTO.


        :param is_primary_key: The is_primary_key of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def treat_empty_as_null(self):
        """Gets the treat_empty_as_null of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The treat_empty_as_null of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._treat_empty_as_null

    @treat_empty_as_null.setter
    def treat_empty_as_null(self, treat_empty_as_null):
        """Sets the treat_empty_as_null of this MetadataAttributesAttributeFullDTO.


        :param treat_empty_as_null: The treat_empty_as_null of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._treat_empty_as_null = treat_empty_as_null

    @property
    def special_format(self):
        """Gets the special_format of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The special_format of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._special_format

    @special_format.setter
    def special_format(self, special_format):
        """Sets the special_format of this MetadataAttributesAttributeFullDTO.


        :param special_format: The special_format of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._special_format = special_format

    @property
    def replacement_text(self):
        """Gets the replacement_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The replacement_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._replacement_text

    @replacement_text.setter
    def replacement_text(self, replacement_text):
        """Sets the replacement_text of this MetadataAttributesAttributeFullDTO.


        :param replacement_text: The replacement_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._replacement_text = replacement_text

    @property
    def replaced_text(self):
        """Gets the replaced_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The replaced_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._replaced_text

    @replaced_text.setter
    def replaced_text(self, replaced_text):
        """Sets the replaced_text of this MetadataAttributesAttributeFullDTO.


        :param replaced_text: The replaced_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._replaced_text = replaced_text

    @property
    def remove_quotes(self):
        """Gets the remove_quotes of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The remove_quotes of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._remove_quotes

    @remove_quotes.setter
    def remove_quotes(self, remove_quotes):
        """Sets the remove_quotes of this MetadataAttributesAttributeFullDTO.


        :param remove_quotes: The remove_quotes of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._remove_quotes = remove_quotes

    @property
    def need_trim(self):
        """Gets the need_trim of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The need_trim of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._need_trim

    @need_trim.setter
    def need_trim(self, need_trim):
        """Sets the need_trim of this MetadataAttributesAttributeFullDTO.


        :param need_trim: The need_trim of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._need_trim = need_trim

    @property
    def is_nullable(self):
        """Gets the is_nullable of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_nullable of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """Sets the is_nullable of this MetadataAttributesAttributeFullDTO.


        :param is_nullable: The is_nullable of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_nullable = is_nullable

    @property
    def max_len(self):
        """Gets the max_len of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The max_len of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._max_len

    @max_len.setter
    def max_len(self, max_len):
        """Sets the max_len of this MetadataAttributesAttributeFullDTO.


        :param max_len: The max_len of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._max_len = max_len

    @property
    def hive_type(self):
        """Gets the hive_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The hive_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._hive_type

    @hive_type.setter
    def hive_type(self, hive_type):
        """Sets the hive_type of this MetadataAttributesAttributeFullDTO.


        :param hive_type: The hive_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._hive_type = hive_type

    @property
    def name(self):
        """Gets the name of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The name of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataAttributesAttributeFullDTO.


        :param name: The name of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id_entity(self):
        """Gets the id_entity of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The id_entity of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this MetadataAttributesAttributeFullDTO.


        :param id_entity: The id_entity of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def validation_text(self):
        """Gets the validation_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The validation_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._validation_text

    @validation_text.setter
    def validation_text(self, validation_text):
        """Sets the validation_text of this MetadataAttributesAttributeFullDTO.


        :param validation_text: The validation_text of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._validation_text = validation_text

    @property
    def description(self):
        """Gets the description of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The description of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataAttributesAttributeFullDTO.


        :param description: The description of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source_name(self):
        """Gets the source_name of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The source_name of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this MetadataAttributesAttributeFullDTO.


        :param source_name: The source_name of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The is_encrypted of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this MetadataAttributesAttributeFullDTO.


        :param is_encrypted: The is_encrypted of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def item_id(self):
        """Gets the item_id of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The item_id of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this MetadataAttributesAttributeFullDTO.


        :param item_id: The item_id of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The id_provider of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataAttributesAttributeFullDTO.


        :param id_provider: The id_provider of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The id_data_storage_unit of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this MetadataAttributesAttributeFullDTO.


        :param id_data_storage_unit: The id_data_storage_unit of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def data_mask(self):
        """Gets the data_mask of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The data_mask of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_mask

    @data_mask.setter
    def data_mask(self, data_mask):
        """Sets the data_mask of this MetadataAttributesAttributeFullDTO.


        :param data_mask: The data_mask of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._data_mask = data_mask

    @property
    def parent_security_path(self):
        """Gets the parent_security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The parent_security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._parent_security_path

    @parent_security_path.setter
    def parent_security_path(self, parent_security_path):
        """Sets the parent_security_path of this MetadataAttributesAttributeFullDTO.


        :param parent_security_path: The parent_security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._parent_security_path = parent_security_path

    @property
    def security_path(self):
        """Gets the security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this MetadataAttributesAttributeFullDTO.


        :param security_path: The security_path of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def source_type(self):
        """Gets the source_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The source_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this MetadataAttributesAttributeFullDTO.


        :param source_type: The source_type of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def last_updated(self):
        """Gets the last_updated of this MetadataAttributesAttributeFullDTO.  # noqa: E501


        :return: The last_updated of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MetadataAttributesAttributeFullDTO.


        :param last_updated: The last_updated of this MetadataAttributesAttributeFullDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataAttributesAttributeFullDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataAttributesAttributeFullDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
