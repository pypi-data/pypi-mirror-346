# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelClusterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cluster_name': 'str',
        'resource_group_name': 'str',
        'cluster_type': 'str',
        'status': 'CommonModelOtherClusterSimplifiedState',
        'min_nodes': 'int',
        'max_nodes': 'int',
        'cores': 'float',
        'up_time': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'resource_group_name': 'resourceGroupName',
        'cluster_type': 'clusterType',
        'status': 'status',
        'min_nodes': 'minNodes',
        'max_nodes': 'maxNodes',
        'cores': 'cores',
        'up_time': 'upTime'
    }

    def __init__(self, cluster_id=None, cluster_name=None, resource_group_name=None, cluster_type=None, status=None, min_nodes=None, max_nodes=None, cores=None, up_time=None):  # noqa: E501
        """CommonModelClusterStatus - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._cluster_name = None
        self._resource_group_name = None
        self._cluster_type = None
        self._status = None
        self._min_nodes = None
        self._max_nodes = None
        self._cores = None
        self._up_time = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if resource_group_name is not None:
            self.resource_group_name = resource_group_name
        if cluster_type is not None:
            self.cluster_type = cluster_type
        if status is not None:
            self.status = status
        if min_nodes is not None:
            self.min_nodes = min_nodes
        if max_nodes is not None:
            self.max_nodes = max_nodes
        if cores is not None:
            self.cores = cores
        if up_time is not None:
            self.up_time = up_time

    @property
    def cluster_id(self):
        """Gets the cluster_id of this CommonModelClusterStatus.  # noqa: E501


        :return: The cluster_id of this CommonModelClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this CommonModelClusterStatus.


        :param cluster_id: The cluster_id of this CommonModelClusterStatus.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this CommonModelClusterStatus.  # noqa: E501


        :return: The cluster_name of this CommonModelClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this CommonModelClusterStatus.


        :param cluster_name: The cluster_name of this CommonModelClusterStatus.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this CommonModelClusterStatus.  # noqa: E501


        :return: The resource_group_name of this CommonModelClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this CommonModelClusterStatus.


        :param resource_group_name: The resource_group_name of this CommonModelClusterStatus.  # noqa: E501
        :type: str
        """

        self._resource_group_name = resource_group_name

    @property
    def cluster_type(self):
        """Gets the cluster_type of this CommonModelClusterStatus.  # noqa: E501


        :return: The cluster_type of this CommonModelClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this CommonModelClusterStatus.


        :param cluster_type: The cluster_type of this CommonModelClusterStatus.  # noqa: E501
        :type: str
        """

        self._cluster_type = cluster_type

    @property
    def status(self):
        """Gets the status of this CommonModelClusterStatus.  # noqa: E501


        :return: The status of this CommonModelClusterStatus.  # noqa: E501
        :rtype: CommonModelOtherClusterSimplifiedState
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonModelClusterStatus.


        :param status: The status of this CommonModelClusterStatus.  # noqa: E501
        :type: CommonModelOtherClusterSimplifiedState
        """

        self._status = status

    @property
    def min_nodes(self):
        """Gets the min_nodes of this CommonModelClusterStatus.  # noqa: E501


        :return: The min_nodes of this CommonModelClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._min_nodes

    @min_nodes.setter
    def min_nodes(self, min_nodes):
        """Sets the min_nodes of this CommonModelClusterStatus.


        :param min_nodes: The min_nodes of this CommonModelClusterStatus.  # noqa: E501
        :type: int
        """

        self._min_nodes = min_nodes

    @property
    def max_nodes(self):
        """Gets the max_nodes of this CommonModelClusterStatus.  # noqa: E501


        :return: The max_nodes of this CommonModelClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this CommonModelClusterStatus.


        :param max_nodes: The max_nodes of this CommonModelClusterStatus.  # noqa: E501
        :type: int
        """

        self._max_nodes = max_nodes

    @property
    def cores(self):
        """Gets the cores of this CommonModelClusterStatus.  # noqa: E501


        :return: The cores of this CommonModelClusterStatus.  # noqa: E501
        :rtype: float
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this CommonModelClusterStatus.


        :param cores: The cores of this CommonModelClusterStatus.  # noqa: E501
        :type: float
        """

        self._cores = cores

    @property
    def up_time(self):
        """Gets the up_time of this CommonModelClusterStatus.  # noqa: E501


        :return: The up_time of this CommonModelClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """Sets the up_time of this CommonModelClusterStatus.


        :param up_time: The up_time of this CommonModelClusterStatus.  # noqa: E501
        :type: str
        """

        self._up_time = up_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelClusterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelClusterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
