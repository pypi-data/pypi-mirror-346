# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InferenceDataTypeInferenceDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_uri': 'str',
        'has_header': 'bool',
        'separator': 'str',
        'id_provider': 'int'
    }

    attribute_map = {
        'file_uri': 'fileUri',
        'has_header': 'hasHeader',
        'separator': 'separator',
        'id_provider': 'idProvider'
    }

    def __init__(self, file_uri=None, has_header=None, separator=None, id_provider=None):  # noqa: E501
        """InferenceDataTypeInferenceDTO - a model defined in Swagger"""  # noqa: E501
        self._file_uri = None
        self._has_header = None
        self._separator = None
        self._id_provider = None
        self.discriminator = None
        if file_uri is not None:
            self.file_uri = file_uri
        if has_header is not None:
            self.has_header = has_header
        if separator is not None:
            self.separator = separator
        if id_provider is not None:
            self.id_provider = id_provider

    @property
    def file_uri(self):
        """Gets the file_uri of this InferenceDataTypeInferenceDTO.  # noqa: E501


        :return: The file_uri of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this InferenceDataTypeInferenceDTO.


        :param file_uri: The file_uri of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :type: str
        """

        self._file_uri = file_uri

    @property
    def has_header(self):
        """Gets the has_header of this InferenceDataTypeInferenceDTO.  # noqa: E501


        :return: The has_header of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :rtype: bool
        """
        return self._has_header

    @has_header.setter
    def has_header(self, has_header):
        """Sets the has_header of this InferenceDataTypeInferenceDTO.


        :param has_header: The has_header of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :type: bool
        """

        self._has_header = has_header

    @property
    def separator(self):
        """Gets the separator of this InferenceDataTypeInferenceDTO.  # noqa: E501


        :return: The separator of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :rtype: str
        """
        return self._separator

    @separator.setter
    def separator(self, separator):
        """Sets the separator of this InferenceDataTypeInferenceDTO.


        :param separator: The separator of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :type: str
        """

        self._separator = separator

    @property
    def id_provider(self):
        """Gets the id_provider of this InferenceDataTypeInferenceDTO.  # noqa: E501


        :return: The id_provider of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this InferenceDataTypeInferenceDTO.


        :param id_provider: The id_provider of this InferenceDataTypeInferenceDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InferenceDataTypeInferenceDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InferenceDataTypeInferenceDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
