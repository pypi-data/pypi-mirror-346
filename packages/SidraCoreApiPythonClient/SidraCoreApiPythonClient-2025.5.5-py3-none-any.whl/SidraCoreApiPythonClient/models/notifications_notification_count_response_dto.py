# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsNotificationCountResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'int',
        'general': 'int',
        'intake': 'int',
        'apps': 'int'
    }

    attribute_map = {
        'all': 'all',
        'general': 'general',
        'intake': 'intake',
        'apps': 'apps'
    }

    def __init__(self, all=None, general=None, intake=None, apps=None):  # noqa: E501
        """NotificationsNotificationCountResponseDto - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._general = None
        self._intake = None
        self._apps = None
        self.discriminator = None
        if all is not None:
            self.all = all
        if general is not None:
            self.general = general
        if intake is not None:
            self.intake = intake
        if apps is not None:
            self.apps = apps

    @property
    def all(self):
        """Gets the all of this NotificationsNotificationCountResponseDto.  # noqa: E501


        :return: The all of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this NotificationsNotificationCountResponseDto.


        :param all: The all of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :type: int
        """

        self._all = all

    @property
    def general(self):
        """Gets the general of this NotificationsNotificationCountResponseDto.  # noqa: E501


        :return: The general of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this NotificationsNotificationCountResponseDto.


        :param general: The general of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :type: int
        """

        self._general = general

    @property
    def intake(self):
        """Gets the intake of this NotificationsNotificationCountResponseDto.  # noqa: E501


        :return: The intake of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._intake

    @intake.setter
    def intake(self, intake):
        """Sets the intake of this NotificationsNotificationCountResponseDto.


        :param intake: The intake of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :type: int
        """

        self._intake = intake

    @property
    def apps(self):
        """Gets the apps of this NotificationsNotificationCountResponseDto.  # noqa: E501


        :return: The apps of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this NotificationsNotificationCountResponseDto.


        :param apps: The apps of this NotificationsNotificationCountResponseDto.  # noqa: E501
        :type: int
        """

        self._apps = apps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsNotificationCountResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsNotificationCountResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
