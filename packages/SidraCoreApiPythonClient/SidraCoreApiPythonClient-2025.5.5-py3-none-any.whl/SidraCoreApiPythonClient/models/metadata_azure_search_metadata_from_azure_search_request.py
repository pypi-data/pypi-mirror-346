# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataAzureSearchMetadataFromAzureSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata_types': 'list[MetadataAzureSearchMetadataTypeEnum]',
        'tags': 'list[str]',
        'fulltext': 'str',
        'custom_filter': 'str',
        'selected_fields': 'list[str]',
        'order_by_fields': 'list[str]',
        'search_fields': 'list[str]',
        'take': 'int',
        'skip': 'int'
    }

    attribute_map = {
        'metadata_types': 'metadataTypes',
        'tags': 'tags',
        'fulltext': 'fulltext',
        'custom_filter': 'customFilter',
        'selected_fields': 'selectedFields',
        'order_by_fields': 'orderByFields',
        'search_fields': 'searchFields',
        'take': 'take',
        'skip': 'skip'
    }

    def __init__(self, metadata_types=None, tags=None, fulltext=None, custom_filter=None, selected_fields=None, order_by_fields=None, search_fields=None, take=None, skip=None):  # noqa: E501
        """MetadataAzureSearchMetadataFromAzureSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._metadata_types = None
        self._tags = None
        self._fulltext = None
        self._custom_filter = None
        self._selected_fields = None
        self._order_by_fields = None
        self._search_fields = None
        self._take = None
        self._skip = None
        self.discriminator = None
        if metadata_types is not None:
            self.metadata_types = metadata_types
        if tags is not None:
            self.tags = tags
        if fulltext is not None:
            self.fulltext = fulltext
        if custom_filter is not None:
            self.custom_filter = custom_filter
        if selected_fields is not None:
            self.selected_fields = selected_fields
        if order_by_fields is not None:
            self.order_by_fields = order_by_fields
        if search_fields is not None:
            self.search_fields = search_fields
        if take is not None:
            self.take = take
        if skip is not None:
            self.skip = skip

    @property
    def metadata_types(self):
        """Gets the metadata_types of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The metadata_types of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: list[MetadataAzureSearchMetadataTypeEnum]
        """
        return self._metadata_types

    @metadata_types.setter
    def metadata_types(self, metadata_types):
        """Sets the metadata_types of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param metadata_types: The metadata_types of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: list[MetadataAzureSearchMetadataTypeEnum]
        """

        self._metadata_types = metadata_types

    @property
    def tags(self):
        """Gets the tags of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The tags of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param tags: The tags of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def fulltext(self):
        """Gets the fulltext of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The fulltext of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._fulltext

    @fulltext.setter
    def fulltext(self, fulltext):
        """Sets the fulltext of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param fulltext: The fulltext of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: str
        """

        self._fulltext = fulltext

    @property
    def custom_filter(self):
        """Gets the custom_filter of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The custom_filter of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._custom_filter

    @custom_filter.setter
    def custom_filter(self, custom_filter):
        """Sets the custom_filter of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param custom_filter: The custom_filter of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: str
        """

        self._custom_filter = custom_filter

    @property
    def selected_fields(self):
        """Gets the selected_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The selected_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_fields

    @selected_fields.setter
    def selected_fields(self, selected_fields):
        """Sets the selected_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param selected_fields: The selected_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._selected_fields = selected_fields

    @property
    def order_by_fields(self):
        """Gets the order_by_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The order_by_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_by_fields

    @order_by_fields.setter
    def order_by_fields(self, order_by_fields):
        """Sets the order_by_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param order_by_fields: The order_by_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._order_by_fields = order_by_fields

    @property
    def search_fields(self):
        """Gets the search_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The search_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param search_fields: The search_fields of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._search_fields = search_fields

    @property
    def take(self):
        """Gets the take of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The take of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param take: The take of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: int
        """

        self._take = take

    @property
    def skip(self):
        """Gets the skip of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501


        :return: The skip of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this MetadataAzureSearchMetadataFromAzureSearchRequest.


        :param skip: The skip of this MetadataAzureSearchMetadataFromAzureSearchRequest.  # noqa: E501
        :type: int
        """

        self._skip = skip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataAzureSearchMetadataFromAzureSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataAzureSearchMetadataFromAzureSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
