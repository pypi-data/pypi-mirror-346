# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelAzureSearchSearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'coverage': 'float',
        'facets': 'dict(str, list[CommonModelAzureSearchSearchFacet])',
        'results': 'list[CommonModelAzureSearchSearchDocumentResult]'
    }

    attribute_map = {
        'count': 'count',
        'coverage': 'coverage',
        'facets': 'facets',
        'results': 'results'
    }

    def __init__(self, count=None, coverage=None, facets=None, results=None):  # noqa: E501
        """CommonModelAzureSearchSearchResponse - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._coverage = None
        self._facets = None
        self._results = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if coverage is not None:
            self.coverage = coverage
        if facets is not None:
            self.facets = facets
        if results is not None:
            self.results = results

    @property
    def count(self):
        """Gets the count of this CommonModelAzureSearchSearchResponse.  # noqa: E501


        :return: The count of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CommonModelAzureSearchSearchResponse.


        :param count: The count of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def coverage(self):
        """Gets the coverage of this CommonModelAzureSearchSearchResponse.  # noqa: E501


        :return: The coverage of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :rtype: float
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this CommonModelAzureSearchSearchResponse.


        :param coverage: The coverage of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :type: float
        """

        self._coverage = coverage

    @property
    def facets(self):
        """Gets the facets of this CommonModelAzureSearchSearchResponse.  # noqa: E501


        :return: The facets of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :rtype: dict(str, list[CommonModelAzureSearchSearchFacet])
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this CommonModelAzureSearchSearchResponse.


        :param facets: The facets of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :type: dict(str, list[CommonModelAzureSearchSearchFacet])
        """

        self._facets = facets

    @property
    def results(self):
        """Gets the results of this CommonModelAzureSearchSearchResponse.  # noqa: E501


        :return: The results of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :rtype: list[CommonModelAzureSearchSearchDocumentResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this CommonModelAzureSearchSearchResponse.


        :param results: The results of this CommonModelAzureSearchSearchResponse.  # noqa: E501
        :type: list[CommonModelAzureSearchSearchDocumentResult]
        """

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelAzureSearchSearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelAzureSearchSearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
