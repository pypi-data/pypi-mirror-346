# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelAzureSearchSearchDocumentResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'dict(str, object)',
        'score': 'float',
        'highlights': 'dict(str, list[str])'
    }

    attribute_map = {
        'document': 'document',
        'score': 'score',
        'highlights': 'highlights'
    }

    def __init__(self, document=None, score=None, highlights=None):  # noqa: E501
        """CommonModelAzureSearchSearchDocumentResult - a model defined in Swagger"""  # noqa: E501
        self._document = None
        self._score = None
        self._highlights = None
        self.discriminator = None
        if document is not None:
            self.document = document
        if score is not None:
            self.score = score
        if highlights is not None:
            self.highlights = highlights

    @property
    def document(self):
        """Gets the document of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501


        :return: The document of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this CommonModelAzureSearchSearchDocumentResult.


        :param document: The document of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._document = document

    @property
    def score(self):
        """Gets the score of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501


        :return: The score of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CommonModelAzureSearchSearchDocumentResult.


        :param score: The score of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def highlights(self):
        """Gets the highlights of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501


        :return: The highlights of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this CommonModelAzureSearchSearchDocumentResult.


        :param highlights: The highlights of this CommonModelAzureSearchSearchDocumentResult.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._highlights = highlights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelAzureSearchSearchDocumentResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelAzureSearchSearchDocumentResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
