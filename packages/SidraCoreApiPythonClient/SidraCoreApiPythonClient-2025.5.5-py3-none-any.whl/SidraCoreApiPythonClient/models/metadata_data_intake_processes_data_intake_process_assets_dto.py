# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataDataIntakeProcessesDataIntakeProcessAssetsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_id': 'int',
        'entity_id': 'int',
        'entity_item_id': 'str',
        'table_name': 'str',
        'data_intake_process_id': 'int',
        'provider_id': 'int',
        'database_name': 'str'
    }

    attribute_map = {
        'asset_id': 'assetId',
        'entity_id': 'entityId',
        'entity_item_id': 'entityItemId',
        'table_name': 'tableName',
        'data_intake_process_id': 'dataIntakeProcessId',
        'provider_id': 'providerId',
        'database_name': 'databaseName'
    }

    def __init__(self, asset_id=None, entity_id=None, entity_item_id=None, table_name=None, data_intake_process_id=None, provider_id=None, database_name=None):  # noqa: E501
        """MetadataDataIntakeProcessesDataIntakeProcessAssetsDto - a model defined in Swagger"""  # noqa: E501
        self._asset_id = None
        self._entity_id = None
        self._entity_item_id = None
        self._table_name = None
        self._data_intake_process_id = None
        self._provider_id = None
        self._database_name = None
        self.discriminator = None
        if asset_id is not None:
            self.asset_id = asset_id
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_item_id is not None:
            self.entity_item_id = entity_item_id
        if table_name is not None:
            self.table_name = table_name
        if data_intake_process_id is not None:
            self.data_intake_process_id = data_intake_process_id
        if provider_id is not None:
            self.provider_id = provider_id
        if database_name is not None:
            self.database_name = database_name

    @property
    def asset_id(self):
        """Gets the asset_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The asset_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param asset_id: The asset_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def entity_id(self):
        """Gets the entity_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The entity_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param entity_id: The entity_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_item_id(self):
        """Gets the entity_item_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The entity_item_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_item_id

    @entity_item_id.setter
    def entity_item_id(self, entity_item_id):
        """Sets the entity_item_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param entity_item_id: The entity_item_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: str
        """

        self._entity_item_id = entity_item_id

    @property
    def table_name(self):
        """Gets the table_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The table_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param table_name: The table_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def data_intake_process_id(self):
        """Gets the data_intake_process_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The data_intake_process_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: int
        """
        return self._data_intake_process_id

    @data_intake_process_id.setter
    def data_intake_process_id(self, data_intake_process_id):
        """Sets the data_intake_process_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param data_intake_process_id: The data_intake_process_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: int
        """

        self._data_intake_process_id = data_intake_process_id

    @property
    def provider_id(self):
        """Gets the provider_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The provider_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param provider_id: The provider_id of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def database_name(self):
        """Gets the database_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501


        :return: The database_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.


        :param database_name: The database_name of this MetadataDataIntakeProcessesDataIntakeProcessAssetsDto.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataDataIntakeProcessesDataIntakeProcessAssetsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataDataIntakeProcessesDataIntakeProcessAssetsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
