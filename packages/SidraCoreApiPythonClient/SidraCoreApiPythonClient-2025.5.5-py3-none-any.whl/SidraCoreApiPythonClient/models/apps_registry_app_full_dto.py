# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppsRegistryAppFullDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'name': 'str',
        'application_display_name': 'str',
        'description': 'str',
        'image_url': 'str',
        'owner': 'OwnerOwnerDto',
        'detail': 'str',
        'parameters': 'str',
        'id_plugin': 'str',
        'id_plugin_version': 'str',
        'available_update_plugin_version_number': 'str',
        'current_plugin_version_number': 'str',
        'available_update_plugin_version': 'str',
        'update_available': 'bool',
        'is_compatible_with_data_product_version': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'name': 'name',
        'application_display_name': 'applicationDisplayName',
        'description': 'description',
        'image_url': 'imageUrl',
        'owner': 'owner',
        'detail': 'detail',
        'parameters': 'parameters',
        'id_plugin': 'idPlugin',
        'id_plugin_version': 'idPluginVersion',
        'available_update_plugin_version_number': 'availableUpdatePluginVersionNumber',
        'current_plugin_version_number': 'currentPluginVersionNumber',
        'available_update_plugin_version': 'availableUpdatePluginVersion',
        'update_available': 'updateAvailable',
        'is_compatible_with_data_product_version': 'isCompatibleWithDataProductVersion'
    }

    def __init__(self, id=None, item_id=None, name=None, application_display_name=None, description=None, image_url=None, owner=None, detail=None, parameters=None, id_plugin=None, id_plugin_version=None, available_update_plugin_version_number=None, current_plugin_version_number=None, available_update_plugin_version=None, update_available=None, is_compatible_with_data_product_version=None):  # noqa: E501
        """AppsRegistryAppFullDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._name = None
        self._application_display_name = None
        self._description = None
        self._image_url = None
        self._owner = None
        self._detail = None
        self._parameters = None
        self._id_plugin = None
        self._id_plugin_version = None
        self._available_update_plugin_version_number = None
        self._current_plugin_version_number = None
        self._available_update_plugin_version = None
        self._update_available = None
        self._is_compatible_with_data_product_version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if application_display_name is not None:
            self.application_display_name = application_display_name
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if owner is not None:
            self.owner = owner
        if detail is not None:
            self.detail = detail
        if parameters is not None:
            self.parameters = parameters
        if id_plugin is not None:
            self.id_plugin = id_plugin
        if id_plugin_version is not None:
            self.id_plugin_version = id_plugin_version
        if available_update_plugin_version_number is not None:
            self.available_update_plugin_version_number = available_update_plugin_version_number
        if current_plugin_version_number is not None:
            self.current_plugin_version_number = current_plugin_version_number
        if available_update_plugin_version is not None:
            self.available_update_plugin_version = available_update_plugin_version
        if update_available is not None:
            self.update_available = update_available
        if is_compatible_with_data_product_version is not None:
            self.is_compatible_with_data_product_version = is_compatible_with_data_product_version

    @property
    def id(self):
        """Gets the id of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The id of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppsRegistryAppFullDto.


        :param id: The id of this AppsRegistryAppFullDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The item_id of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this AppsRegistryAppFullDto.


        :param item_id: The item_id of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The name of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppsRegistryAppFullDto.


        :param name: The name of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application_display_name(self):
        """Gets the application_display_name of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The application_display_name of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._application_display_name

    @application_display_name.setter
    def application_display_name(self, application_display_name):
        """Sets the application_display_name of this AppsRegistryAppFullDto.


        :param application_display_name: The application_display_name of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._application_display_name = application_display_name

    @property
    def description(self):
        """Gets the description of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The description of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppsRegistryAppFullDto.


        :param description: The description of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The image_url of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AppsRegistryAppFullDto.


        :param image_url: The image_url of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def owner(self):
        """Gets the owner of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The owner of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: OwnerOwnerDto
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AppsRegistryAppFullDto.


        :param owner: The owner of this AppsRegistryAppFullDto.  # noqa: E501
        :type: OwnerOwnerDto
        """

        self._owner = owner

    @property
    def detail(self):
        """Gets the detail of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The detail of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AppsRegistryAppFullDto.


        :param detail: The detail of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def parameters(self):
        """Gets the parameters of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The parameters of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AppsRegistryAppFullDto.


        :param parameters: The parameters of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def id_plugin(self):
        """Gets the id_plugin of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The id_plugin of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin

    @id_plugin.setter
    def id_plugin(self, id_plugin):
        """Sets the id_plugin of this AppsRegistryAppFullDto.


        :param id_plugin: The id_plugin of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._id_plugin = id_plugin

    @property
    def id_plugin_version(self):
        """Gets the id_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The id_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin_version

    @id_plugin_version.setter
    def id_plugin_version(self, id_plugin_version):
        """Sets the id_plugin_version of this AppsRegistryAppFullDto.


        :param id_plugin_version: The id_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._id_plugin_version = id_plugin_version

    @property
    def available_update_plugin_version_number(self):
        """Gets the available_update_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The available_update_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._available_update_plugin_version_number

    @available_update_plugin_version_number.setter
    def available_update_plugin_version_number(self, available_update_plugin_version_number):
        """Sets the available_update_plugin_version_number of this AppsRegistryAppFullDto.


        :param available_update_plugin_version_number: The available_update_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._available_update_plugin_version_number = available_update_plugin_version_number

    @property
    def current_plugin_version_number(self):
        """Gets the current_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The current_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._current_plugin_version_number

    @current_plugin_version_number.setter
    def current_plugin_version_number(self, current_plugin_version_number):
        """Sets the current_plugin_version_number of this AppsRegistryAppFullDto.


        :param current_plugin_version_number: The current_plugin_version_number of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._current_plugin_version_number = current_plugin_version_number

    @property
    def available_update_plugin_version(self):
        """Gets the available_update_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The available_update_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: str
        """
        return self._available_update_plugin_version

    @available_update_plugin_version.setter
    def available_update_plugin_version(self, available_update_plugin_version):
        """Sets the available_update_plugin_version of this AppsRegistryAppFullDto.


        :param available_update_plugin_version: The available_update_plugin_version of this AppsRegistryAppFullDto.  # noqa: E501
        :type: str
        """

        self._available_update_plugin_version = available_update_plugin_version

    @property
    def update_available(self):
        """Gets the update_available of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The update_available of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: bool
        """
        return self._update_available

    @update_available.setter
    def update_available(self, update_available):
        """Sets the update_available of this AppsRegistryAppFullDto.


        :param update_available: The update_available of this AppsRegistryAppFullDto.  # noqa: E501
        :type: bool
        """

        self._update_available = update_available

    @property
    def is_compatible_with_data_product_version(self):
        """Gets the is_compatible_with_data_product_version of this AppsRegistryAppFullDto.  # noqa: E501


        :return: The is_compatible_with_data_product_version of this AppsRegistryAppFullDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_compatible_with_data_product_version

    @is_compatible_with_data_product_version.setter
    def is_compatible_with_data_product_version(self, is_compatible_with_data_product_version):
        """Sets the is_compatible_with_data_product_version of this AppsRegistryAppFullDto.


        :param is_compatible_with_data_product_version: The is_compatible_with_data_product_version of this AppsRegistryAppFullDto.  # noqa: E501
        :type: bool
        """

        self._is_compatible_with_data_product_version = is_compatible_with_data_product_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppsRegistryAppFullDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppsRegistryAppFullDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
