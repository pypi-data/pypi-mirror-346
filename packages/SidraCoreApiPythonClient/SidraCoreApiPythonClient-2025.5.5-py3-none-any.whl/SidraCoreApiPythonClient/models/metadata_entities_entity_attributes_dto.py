# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataEntitiesEntityAttributesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files_per_drop': 'int',
        'row_delimiter': 'str',
        're_create_table_on_deployment': 'bool',
        'null_text': 'str',
        'format': 'str',
        'last_deployed': 'datetime',
        'last_updated': 'datetime',
        'field_delimiter': 'str',
        'header_lines': 'int',
        'encoding': 'str',
        'serde_properties': 'str',
        'serde': 'str',
        'end_valid_date': 'datetime',
        'start_valid_date': 'datetime',
        'regular_expression': 'str',
        'table_name': 'str',
        'name': 'str',
        'description': 'str',
        'id_provider': 'int',
        'attributes': 'list[MetadataAttributesAttributeDTO]'
    }

    attribute_map = {
        'files_per_drop': 'filesPerDrop',
        'row_delimiter': 'rowDelimiter',
        're_create_table_on_deployment': 'reCreateTableOnDeployment',
        'null_text': 'nullText',
        'format': 'format',
        'last_deployed': 'lastDeployed',
        'last_updated': 'lastUpdated',
        'field_delimiter': 'fieldDelimiter',
        'header_lines': 'headerLines',
        'encoding': 'encoding',
        'serde_properties': 'serdeProperties',
        'serde': 'serde',
        'end_valid_date': 'endValidDate',
        'start_valid_date': 'startValidDate',
        'regular_expression': 'regularExpression',
        'table_name': 'tableName',
        'name': 'name',
        'description': 'description',
        'id_provider': 'idProvider',
        'attributes': 'attributes'
    }

    def __init__(self, files_per_drop=None, row_delimiter=None, re_create_table_on_deployment=None, null_text=None, format=None, last_deployed=None, last_updated=None, field_delimiter=None, header_lines=None, encoding=None, serde_properties=None, serde=None, end_valid_date=None, start_valid_date=None, regular_expression=None, table_name=None, name=None, description=None, id_provider=None, attributes=None):  # noqa: E501
        """MetadataEntitiesEntityAttributesDto - a model defined in Swagger"""  # noqa: E501
        self._files_per_drop = None
        self._row_delimiter = None
        self._re_create_table_on_deployment = None
        self._null_text = None
        self._format = None
        self._last_deployed = None
        self._last_updated = None
        self._field_delimiter = None
        self._header_lines = None
        self._encoding = None
        self._serde_properties = None
        self._serde = None
        self._end_valid_date = None
        self._start_valid_date = None
        self._regular_expression = None
        self._table_name = None
        self._name = None
        self._description = None
        self._id_provider = None
        self._attributes = None
        self.discriminator = None
        if files_per_drop is not None:
            self.files_per_drop = files_per_drop
        if row_delimiter is not None:
            self.row_delimiter = row_delimiter
        if re_create_table_on_deployment is not None:
            self.re_create_table_on_deployment = re_create_table_on_deployment
        if null_text is not None:
            self.null_text = null_text
        if format is not None:
            self.format = format
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if last_updated is not None:
            self.last_updated = last_updated
        if field_delimiter is not None:
            self.field_delimiter = field_delimiter
        if header_lines is not None:
            self.header_lines = header_lines
        if encoding is not None:
            self.encoding = encoding
        if serde_properties is not None:
            self.serde_properties = serde_properties
        if serde is not None:
            self.serde = serde
        if end_valid_date is not None:
            self.end_valid_date = end_valid_date
        if start_valid_date is not None:
            self.start_valid_date = start_valid_date
        if regular_expression is not None:
            self.regular_expression = regular_expression
        if table_name is not None:
            self.table_name = table_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id_provider is not None:
            self.id_provider = id_provider
        if attributes is not None:
            self.attributes = attributes

    @property
    def files_per_drop(self):
        """Gets the files_per_drop of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The files_per_drop of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._files_per_drop

    @files_per_drop.setter
    def files_per_drop(self, files_per_drop):
        """Sets the files_per_drop of this MetadataEntitiesEntityAttributesDto.


        :param files_per_drop: The files_per_drop of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: int
        """

        self._files_per_drop = files_per_drop

    @property
    def row_delimiter(self):
        """Gets the row_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The row_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._row_delimiter

    @row_delimiter.setter
    def row_delimiter(self, row_delimiter):
        """Sets the row_delimiter of this MetadataEntitiesEntityAttributesDto.


        :param row_delimiter: The row_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._row_delimiter = row_delimiter

    @property
    def re_create_table_on_deployment(self):
        """Gets the re_create_table_on_deployment of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The re_create_table_on_deployment of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: bool
        """
        return self._re_create_table_on_deployment

    @re_create_table_on_deployment.setter
    def re_create_table_on_deployment(self, re_create_table_on_deployment):
        """Sets the re_create_table_on_deployment of this MetadataEntitiesEntityAttributesDto.


        :param re_create_table_on_deployment: The re_create_table_on_deployment of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: bool
        """

        self._re_create_table_on_deployment = re_create_table_on_deployment

    @property
    def null_text(self):
        """Gets the null_text of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The null_text of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._null_text

    @null_text.setter
    def null_text(self, null_text):
        """Sets the null_text of this MetadataEntitiesEntityAttributesDto.


        :param null_text: The null_text of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._null_text = null_text

    @property
    def format(self):
        """Gets the format of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The format of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MetadataEntitiesEntityAttributesDto.


        :param format: The format of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def last_deployed(self):
        """Gets the last_deployed of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The last_deployed of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this MetadataEntitiesEntityAttributesDto.


        :param last_deployed: The last_deployed of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def last_updated(self):
        """Gets the last_updated of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The last_updated of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MetadataEntitiesEntityAttributesDto.


        :param last_updated: The last_updated of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The field_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this MetadataEntitiesEntityAttributesDto.


        :param field_delimiter: The field_delimiter of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._field_delimiter = field_delimiter

    @property
    def header_lines(self):
        """Gets the header_lines of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The header_lines of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._header_lines

    @header_lines.setter
    def header_lines(self, header_lines):
        """Sets the header_lines of this MetadataEntitiesEntityAttributesDto.


        :param header_lines: The header_lines of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: int
        """

        self._header_lines = header_lines

    @property
    def encoding(self):
        """Gets the encoding of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The encoding of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this MetadataEntitiesEntityAttributesDto.


        :param encoding: The encoding of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def serde_properties(self):
        """Gets the serde_properties of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The serde_properties of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._serde_properties

    @serde_properties.setter
    def serde_properties(self, serde_properties):
        """Sets the serde_properties of this MetadataEntitiesEntityAttributesDto.


        :param serde_properties: The serde_properties of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._serde_properties = serde_properties

    @property
    def serde(self):
        """Gets the serde of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The serde of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._serde

    @serde.setter
    def serde(self, serde):
        """Sets the serde of this MetadataEntitiesEntityAttributesDto.


        :param serde: The serde of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._serde = serde

    @property
    def end_valid_date(self):
        """Gets the end_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The end_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_valid_date

    @end_valid_date.setter
    def end_valid_date(self, end_valid_date):
        """Sets the end_valid_date of this MetadataEntitiesEntityAttributesDto.


        :param end_valid_date: The end_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._end_valid_date = end_valid_date

    @property
    def start_valid_date(self):
        """Gets the start_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The start_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_valid_date

    @start_valid_date.setter
    def start_valid_date(self, start_valid_date):
        """Sets the start_valid_date of this MetadataEntitiesEntityAttributesDto.


        :param start_valid_date: The start_valid_date of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._start_valid_date = start_valid_date

    @property
    def regular_expression(self):
        """Gets the regular_expression of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The regular_expression of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this MetadataEntitiesEntityAttributesDto.


        :param regular_expression: The regular_expression of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._regular_expression = regular_expression

    @property
    def table_name(self):
        """Gets the table_name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The table_name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MetadataEntitiesEntityAttributesDto.


        :param table_name: The table_name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def name(self):
        """Gets the name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataEntitiesEntityAttributesDto.


        :param name: The name of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The description of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataEntitiesEntityAttributesDto.


        :param description: The description of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The id_provider of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataEntitiesEntityAttributesDto.


        :param id_provider: The id_provider of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def attributes(self):
        """Gets the attributes of this MetadataEntitiesEntityAttributesDto.  # noqa: E501


        :return: The attributes of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :rtype: list[MetadataAttributesAttributeDTO]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MetadataEntitiesEntityAttributesDto.


        :param attributes: The attributes of this MetadataEntitiesEntityAttributesDto.  # noqa: E501
        :type: list[MetadataAttributesAttributeDTO]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEntitiesEntityAttributesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEntitiesEntityAttributesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
