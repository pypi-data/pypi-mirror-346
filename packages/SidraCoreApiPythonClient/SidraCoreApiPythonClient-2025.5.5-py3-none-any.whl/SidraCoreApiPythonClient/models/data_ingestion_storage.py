# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'id_data_storage_unit': 'int',
        'id_storage_role': 'DataIngestionStorageRoleEnum',
        'storage_role': 'DataIngestionStorageRole',
        'data_storage_unit': 'DataIngestionDataStorageUnit',
        'landing_zones': 'list[DataIngestionLandingZone]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'id_data_storage_unit': 'idDataStorageUnit',
        'id_storage_role': 'idStorageRole',
        'storage_role': 'storageRole',
        'data_storage_unit': 'dataStorageUnit',
        'landing_zones': 'landingZones'
    }

    def __init__(self, id=None, name=None, id_data_storage_unit=None, id_storage_role=None, storage_role=None, data_storage_unit=None, landing_zones=None):  # noqa: E501
        """DataIngestionStorage - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._id_data_storage_unit = None
        self._id_storage_role = None
        self._storage_role = None
        self._data_storage_unit = None
        self._landing_zones = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if id_storage_role is not None:
            self.id_storage_role = id_storage_role
        if storage_role is not None:
            self.storage_role = storage_role
        if data_storage_unit is not None:
            self.data_storage_unit = data_storage_unit
        if landing_zones is not None:
            self.landing_zones = landing_zones

    @property
    def id(self):
        """Gets the id of this DataIngestionStorage.  # noqa: E501


        :return: The id of this DataIngestionStorage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionStorage.


        :param id: The id of this DataIngestionStorage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataIngestionStorage.  # noqa: E501


        :return: The name of this DataIngestionStorage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataIngestionStorage.


        :param name: The name of this DataIngestionStorage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this DataIngestionStorage.  # noqa: E501


        :return: The id_data_storage_unit of this DataIngestionStorage.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this DataIngestionStorage.


        :param id_data_storage_unit: The id_data_storage_unit of this DataIngestionStorage.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def id_storage_role(self):
        """Gets the id_storage_role of this DataIngestionStorage.  # noqa: E501


        :return: The id_storage_role of this DataIngestionStorage.  # noqa: E501
        :rtype: DataIngestionStorageRoleEnum
        """
        return self._id_storage_role

    @id_storage_role.setter
    def id_storage_role(self, id_storage_role):
        """Sets the id_storage_role of this DataIngestionStorage.


        :param id_storage_role: The id_storage_role of this DataIngestionStorage.  # noqa: E501
        :type: DataIngestionStorageRoleEnum
        """

        self._id_storage_role = id_storage_role

    @property
    def storage_role(self):
        """Gets the storage_role of this DataIngestionStorage.  # noqa: E501


        :return: The storage_role of this DataIngestionStorage.  # noqa: E501
        :rtype: DataIngestionStorageRole
        """
        return self._storage_role

    @storage_role.setter
    def storage_role(self, storage_role):
        """Sets the storage_role of this DataIngestionStorage.


        :param storage_role: The storage_role of this DataIngestionStorage.  # noqa: E501
        :type: DataIngestionStorageRole
        """

        self._storage_role = storage_role

    @property
    def data_storage_unit(self):
        """Gets the data_storage_unit of this DataIngestionStorage.  # noqa: E501


        :return: The data_storage_unit of this DataIngestionStorage.  # noqa: E501
        :rtype: DataIngestionDataStorageUnit
        """
        return self._data_storage_unit

    @data_storage_unit.setter
    def data_storage_unit(self, data_storage_unit):
        """Sets the data_storage_unit of this DataIngestionStorage.


        :param data_storage_unit: The data_storage_unit of this DataIngestionStorage.  # noqa: E501
        :type: DataIngestionDataStorageUnit
        """

        self._data_storage_unit = data_storage_unit

    @property
    def landing_zones(self):
        """Gets the landing_zones of this DataIngestionStorage.  # noqa: E501


        :return: The landing_zones of this DataIngestionStorage.  # noqa: E501
        :rtype: list[DataIngestionLandingZone]
        """
        return self._landing_zones

    @landing_zones.setter
    def landing_zones(self, landing_zones):
        """Sets the landing_zones of this DataIngestionStorage.


        :param landing_zones: The landing_zones of this DataIngestionStorage.  # noqa: E501
        :type: list[DataIngestionLandingZone]
        """

        self._landing_zones = landing_zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
