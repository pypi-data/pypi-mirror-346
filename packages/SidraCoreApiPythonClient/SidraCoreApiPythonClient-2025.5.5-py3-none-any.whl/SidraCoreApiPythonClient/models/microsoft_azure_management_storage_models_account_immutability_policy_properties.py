# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'immutability_period_since_creation_in_days': 'int',
        'state': 'str',
        'allow_protected_append_writes': 'bool'
    }

    attribute_map = {
        'immutability_period_since_creation_in_days': 'immutabilityPeriodSinceCreationInDays',
        'state': 'state',
        'allow_protected_append_writes': 'allowProtectedAppendWrites'
    }

    def __init__(self, immutability_period_since_creation_in_days=None, state=None, allow_protected_append_writes=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties - a model defined in Swagger"""  # noqa: E501
        self._immutability_period_since_creation_in_days = None
        self._state = None
        self._allow_protected_append_writes = None
        self.discriminator = None
        if immutability_period_since_creation_in_days is not None:
            self.immutability_period_since_creation_in_days = immutability_period_since_creation_in_days
        if state is not None:
            self.state = state
        if allow_protected_append_writes is not None:
            self.allow_protected_append_writes = allow_protected_append_writes

    @property
    def immutability_period_since_creation_in_days(self):
        """Gets the immutability_period_since_creation_in_days of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501


        :return: The immutability_period_since_creation_in_days of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :rtype: int
        """
        return self._immutability_period_since_creation_in_days

    @immutability_period_since_creation_in_days.setter
    def immutability_period_since_creation_in_days(self, immutability_period_since_creation_in_days):
        """Sets the immutability_period_since_creation_in_days of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.


        :param immutability_period_since_creation_in_days: The immutability_period_since_creation_in_days of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :type: int
        """

        self._immutability_period_since_creation_in_days = immutability_period_since_creation_in_days

    @property
    def state(self):
        """Gets the state of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501


        :return: The state of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.


        :param state: The state of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def allow_protected_append_writes(self):
        """Gets the allow_protected_append_writes of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501


        :return: The allow_protected_append_writes of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :rtype: bool
        """
        return self._allow_protected_append_writes

    @allow_protected_append_writes.setter
    def allow_protected_append_writes(self, allow_protected_append_writes):
        """Sets the allow_protected_append_writes of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.


        :param allow_protected_append_writes: The allow_protected_append_writes of this MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties.  # noqa: E501
        :type: bool
        """

        self._allow_protected_append_writes = allow_protected_append_writes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsAccountImmutabilityPolicyProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
