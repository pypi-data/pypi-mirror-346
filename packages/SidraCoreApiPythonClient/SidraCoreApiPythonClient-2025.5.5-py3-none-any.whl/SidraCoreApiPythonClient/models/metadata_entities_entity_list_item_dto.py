# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataEntitiesEntityListItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id_provider': 'int',
        'id': 'int',
        'tags': 'list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]',
        'image_url': 'str',
        'provider_name': 'str',
        'format': 'str',
        'entity_size': 'int',
        'data_storage_unit_id': 'int',
        'creation_date': 'datetime',
        'rows': 'int',
        'source_path': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id_provider': 'idProvider',
        'id': 'id',
        'tags': 'tags',
        'image_url': 'imageUrl',
        'provider_name': 'providerName',
        'format': 'format',
        'entity_size': 'entitySize',
        'data_storage_unit_id': 'dataStorageUnitId',
        'creation_date': 'creationDate',
        'rows': 'rows',
        'source_path': 'sourcePath'
    }

    def __init__(self, name=None, description=None, id_provider=None, id=None, tags=None, image_url=None, provider_name=None, format=None, entity_size=None, data_storage_unit_id=None, creation_date=None, rows=None, source_path=None):  # noqa: E501
        """MetadataEntitiesEntityListItemDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._id_provider = None
        self._id = None
        self._tags = None
        self._image_url = None
        self._provider_name = None
        self._format = None
        self._entity_size = None
        self._data_storage_unit_id = None
        self._creation_date = None
        self._rows = None
        self._source_path = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id_provider is not None:
            self.id_provider = id_provider
        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if image_url is not None:
            self.image_url = image_url
        if provider_name is not None:
            self.provider_name = provider_name
        if format is not None:
            self.format = format
        if entity_size is not None:
            self.entity_size = entity_size
        if data_storage_unit_id is not None:
            self.data_storage_unit_id = data_storage_unit_id
        if creation_date is not None:
            self.creation_date = creation_date
        if rows is not None:
            self.rows = rows
        if source_path is not None:
            self.source_path = source_path

    @property
    def name(self):
        """Gets the name of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The name of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataEntitiesEntityListItemDto.


        :param name: The name of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The description of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataEntitiesEntityListItemDto.


        :param description: The description of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The id_provider of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataEntitiesEntityListItemDto.


        :param id_provider: The id_provider of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id(self):
        """Gets the id of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The id of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataEntitiesEntityListItemDto.


        :param id: The id of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The tags of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MetadataEntitiesEntityListItemDto.


        :param tags: The tags of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]
        """

        self._tags = tags

    @property
    def image_url(self):
        """Gets the image_url of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The image_url of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this MetadataEntitiesEntityListItemDto.


        :param image_url: The image_url of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def provider_name(self):
        """Gets the provider_name of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The provider_name of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this MetadataEntitiesEntityListItemDto.


        :param provider_name: The provider_name of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def format(self):
        """Gets the format of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The format of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MetadataEntitiesEntityListItemDto.


        :param format: The format of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def entity_size(self):
        """Gets the entity_size of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The entity_size of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: int
        """
        return self._entity_size

    @entity_size.setter
    def entity_size(self, entity_size):
        """Sets the entity_size of this MetadataEntitiesEntityListItemDto.


        :param entity_size: The entity_size of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: int
        """

        self._entity_size = entity_size

    @property
    def data_storage_unit_id(self):
        """Gets the data_storage_unit_id of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The data_storage_unit_id of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: int
        """
        return self._data_storage_unit_id

    @data_storage_unit_id.setter
    def data_storage_unit_id(self, data_storage_unit_id):
        """Sets the data_storage_unit_id of this MetadataEntitiesEntityListItemDto.


        :param data_storage_unit_id: The data_storage_unit_id of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: int
        """

        self._data_storage_unit_id = data_storage_unit_id

    @property
    def creation_date(self):
        """Gets the creation_date of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The creation_date of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this MetadataEntitiesEntityListItemDto.


        :param creation_date: The creation_date of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def rows(self):
        """Gets the rows of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The rows of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this MetadataEntitiesEntityListItemDto.


        :param rows: The rows of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def source_path(self):
        """Gets the source_path of this MetadataEntitiesEntityListItemDto.  # noqa: E501


        :return: The source_path of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this MetadataEntitiesEntityListItemDto.


        :param source_path: The source_path of this MetadataEntitiesEntityListItemDto.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEntitiesEntityListItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEntitiesEntityListItemDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
