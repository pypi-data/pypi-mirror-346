# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDatabricksDatabricksJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_name': 'str',
        'resource_group': 'str',
        'databricks_region': 'str',
        'run_id': 'int',
        'job_id': 'int',
        'job_name': 'str'
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'resource_group': 'resourceGroup',
        'databricks_region': 'databricksRegion',
        'run_id': 'runId',
        'job_id': 'jobId',
        'job_name': 'jobName'
    }

    def __init__(self, cluster_name=None, resource_group=None, databricks_region=None, run_id=None, job_id=None, job_name=None):  # noqa: E501
        """APIDatabricksDatabricksJob - a model defined in Swagger"""  # noqa: E501
        self._cluster_name = None
        self._resource_group = None
        self._databricks_region = None
        self._run_id = None
        self._job_id = None
        self._job_name = None
        self.discriminator = None
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if resource_group is not None:
            self.resource_group = resource_group
        if databricks_region is not None:
            self.databricks_region = databricks_region
        if run_id is not None:
            self.run_id = run_id
        if job_id is not None:
            self.job_id = job_id
        if job_name is not None:
            self.job_name = job_name

    @property
    def cluster_name(self):
        """Gets the cluster_name of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The cluster_name of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this APIDatabricksDatabricksJob.


        :param cluster_name: The cluster_name of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def resource_group(self):
        """Gets the resource_group of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The resource_group of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this APIDatabricksDatabricksJob.


        :param resource_group: The resource_group of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: str
        """

        self._resource_group = resource_group

    @property
    def databricks_region(self):
        """Gets the databricks_region of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The databricks_region of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: str
        """
        return self._databricks_region

    @databricks_region.setter
    def databricks_region(self, databricks_region):
        """Sets the databricks_region of this APIDatabricksDatabricksJob.


        :param databricks_region: The databricks_region of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: str
        """

        self._databricks_region = databricks_region

    @property
    def run_id(self):
        """Gets the run_id of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The run_id of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this APIDatabricksDatabricksJob.


        :param run_id: The run_id of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def job_id(self):
        """Gets the job_id of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The job_id of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this APIDatabricksDatabricksJob.


        :param job_id: The job_id of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this APIDatabricksDatabricksJob.  # noqa: E501


        :return: The job_name of this APIDatabricksDatabricksJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this APIDatabricksDatabricksJob.


        :param job_name: The job_name of this APIDatabricksDatabricksJob.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDatabricksDatabricksJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDatabricksDatabricksJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
