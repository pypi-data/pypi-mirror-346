# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'id_entity': 'int',
        'id_provider': 'int',
        'id_data_storage_unit': 'int',
        'asset_name': 'str',
        'asset_date': 'datetime',
        'last_updated': 'datetime',
        'id_status': 'PersistenceCommonEntitiesDataIngestionAssetStatusEnum',
        'notes': 'str',
        'source_path': 'str',
        'destination_path': 'str',
        'entities': 'int',
        'byte_size': 'int',
        'asset_status': 'DataIngestionAssetStatus',
        'entity': 'DataIngestionEntity',
        'asset_parts': 'list[DataIngestionAssetPart]',
        'pipeline_executions': 'list[DataIngestionPipelineExecution]',
        'asset_indexing_status': 'list[DataIngestionAssetIndexingStatus]',
        'parent_security_path': 'str',
        'security_path': 'str',
        'parent_type': 'str',
        'parent_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'id_entity': 'idEntity',
        'id_provider': 'idProvider',
        'id_data_storage_unit': 'idDataStorageUnit',
        'asset_name': 'assetName',
        'asset_date': 'assetDate',
        'last_updated': 'lastUpdated',
        'id_status': 'idStatus',
        'notes': 'notes',
        'source_path': 'sourcePath',
        'destination_path': 'destinationPath',
        'entities': 'entities',
        'byte_size': 'byteSize',
        'asset_status': 'assetStatus',
        'entity': 'entity',
        'asset_parts': 'assetParts',
        'pipeline_executions': 'pipelineExecutions',
        'asset_indexing_status': 'assetIndexingStatus',
        'parent_security_path': 'parentSecurityPath',
        'security_path': 'securityPath',
        'parent_type': 'parentType',
        'parent_id': 'parentId'
    }

    def __init__(self, id=None, item_id=None, id_entity=None, id_provider=None, id_data_storage_unit=None, asset_name=None, asset_date=None, last_updated=None, id_status=None, notes=None, source_path=None, destination_path=None, entities=None, byte_size=None, asset_status=None, entity=None, asset_parts=None, pipeline_executions=None, asset_indexing_status=None, parent_security_path=None, security_path=None, parent_type=None, parent_id=None):  # noqa: E501
        """DataIngestionAsset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._id_entity = None
        self._id_provider = None
        self._id_data_storage_unit = None
        self._asset_name = None
        self._asset_date = None
        self._last_updated = None
        self._id_status = None
        self._notes = None
        self._source_path = None
        self._destination_path = None
        self._entities = None
        self._byte_size = None
        self._asset_status = None
        self._entity = None
        self._asset_parts = None
        self._pipeline_executions = None
        self._asset_indexing_status = None
        self._parent_security_path = None
        self._security_path = None
        self._parent_type = None
        self._parent_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if id_entity is not None:
            self.id_entity = id_entity
        if id_provider is not None:
            self.id_provider = id_provider
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if asset_name is not None:
            self.asset_name = asset_name
        if asset_date is not None:
            self.asset_date = asset_date
        if last_updated is not None:
            self.last_updated = last_updated
        if id_status is not None:
            self.id_status = id_status
        if notes is not None:
            self.notes = notes
        if source_path is not None:
            self.source_path = source_path
        if destination_path is not None:
            self.destination_path = destination_path
        if entities is not None:
            self.entities = entities
        if byte_size is not None:
            self.byte_size = byte_size
        if asset_status is not None:
            self.asset_status = asset_status
        if entity is not None:
            self.entity = entity
        if asset_parts is not None:
            self.asset_parts = asset_parts
        if pipeline_executions is not None:
            self.pipeline_executions = pipeline_executions
        if asset_indexing_status is not None:
            self.asset_indexing_status = asset_indexing_status
        if parent_security_path is not None:
            self.parent_security_path = parent_security_path
        if security_path is not None:
            self.security_path = security_path
        if parent_type is not None:
            self.parent_type = parent_type
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this DataIngestionAsset.  # noqa: E501


        :return: The id of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionAsset.


        :param id: The id of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this DataIngestionAsset.  # noqa: E501


        :return: The item_id of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this DataIngestionAsset.


        :param item_id: The item_id of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id_entity(self):
        """Gets the id_entity of this DataIngestionAsset.  # noqa: E501


        :return: The id_entity of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataIngestionAsset.


        :param id_entity: The id_entity of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def id_provider(self):
        """Gets the id_provider of this DataIngestionAsset.  # noqa: E501


        :return: The id_provider of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this DataIngestionAsset.


        :param id_provider: The id_provider of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this DataIngestionAsset.  # noqa: E501


        :return: The id_data_storage_unit of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this DataIngestionAsset.


        :param id_data_storage_unit: The id_data_storage_unit of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def asset_name(self):
        """Gets the asset_name of this DataIngestionAsset.  # noqa: E501


        :return: The asset_name of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this DataIngestionAsset.


        :param asset_name: The asset_name of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def asset_date(self):
        """Gets the asset_date of this DataIngestionAsset.  # noqa: E501


        :return: The asset_date of this DataIngestionAsset.  # noqa: E501
        :rtype: datetime
        """
        return self._asset_date

    @asset_date.setter
    def asset_date(self, asset_date):
        """Sets the asset_date of this DataIngestionAsset.


        :param asset_date: The asset_date of this DataIngestionAsset.  # noqa: E501
        :type: datetime
        """

        self._asset_date = asset_date

    @property
    def last_updated(self):
        """Gets the last_updated of this DataIngestionAsset.  # noqa: E501


        :return: The last_updated of this DataIngestionAsset.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DataIngestionAsset.


        :param last_updated: The last_updated of this DataIngestionAsset.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def id_status(self):
        """Gets the id_status of this DataIngestionAsset.  # noqa: E501


        :return: The id_status of this DataIngestionAsset.  # noqa: E501
        :rtype: PersistenceCommonEntitiesDataIngestionAssetStatusEnum
        """
        return self._id_status

    @id_status.setter
    def id_status(self, id_status):
        """Sets the id_status of this DataIngestionAsset.


        :param id_status: The id_status of this DataIngestionAsset.  # noqa: E501
        :type: PersistenceCommonEntitiesDataIngestionAssetStatusEnum
        """

        self._id_status = id_status

    @property
    def notes(self):
        """Gets the notes of this DataIngestionAsset.  # noqa: E501


        :return: The notes of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DataIngestionAsset.


        :param notes: The notes of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def source_path(self):
        """Gets the source_path of this DataIngestionAsset.  # noqa: E501


        :return: The source_path of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this DataIngestionAsset.


        :param source_path: The source_path of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def destination_path(self):
        """Gets the destination_path of this DataIngestionAsset.  # noqa: E501


        :return: The destination_path of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._destination_path

    @destination_path.setter
    def destination_path(self, destination_path):
        """Sets the destination_path of this DataIngestionAsset.


        :param destination_path: The destination_path of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._destination_path = destination_path

    @property
    def entities(self):
        """Gets the entities of this DataIngestionAsset.  # noqa: E501


        :return: The entities of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this DataIngestionAsset.


        :param entities: The entities of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._entities = entities

    @property
    def byte_size(self):
        """Gets the byte_size of this DataIngestionAsset.  # noqa: E501


        :return: The byte_size of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._byte_size

    @byte_size.setter
    def byte_size(self, byte_size):
        """Sets the byte_size of this DataIngestionAsset.


        :param byte_size: The byte_size of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._byte_size = byte_size

    @property
    def asset_status(self):
        """Gets the asset_status of this DataIngestionAsset.  # noqa: E501


        :return: The asset_status of this DataIngestionAsset.  # noqa: E501
        :rtype: DataIngestionAssetStatus
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this DataIngestionAsset.


        :param asset_status: The asset_status of this DataIngestionAsset.  # noqa: E501
        :type: DataIngestionAssetStatus
        """

        self._asset_status = asset_status

    @property
    def entity(self):
        """Gets the entity of this DataIngestionAsset.  # noqa: E501


        :return: The entity of this DataIngestionAsset.  # noqa: E501
        :rtype: DataIngestionEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this DataIngestionAsset.


        :param entity: The entity of this DataIngestionAsset.  # noqa: E501
        :type: DataIngestionEntity
        """

        self._entity = entity

    @property
    def asset_parts(self):
        """Gets the asset_parts of this DataIngestionAsset.  # noqa: E501


        :return: The asset_parts of this DataIngestionAsset.  # noqa: E501
        :rtype: list[DataIngestionAssetPart]
        """
        return self._asset_parts

    @asset_parts.setter
    def asset_parts(self, asset_parts):
        """Sets the asset_parts of this DataIngestionAsset.


        :param asset_parts: The asset_parts of this DataIngestionAsset.  # noqa: E501
        :type: list[DataIngestionAssetPart]
        """

        self._asset_parts = asset_parts

    @property
    def pipeline_executions(self):
        """Gets the pipeline_executions of this DataIngestionAsset.  # noqa: E501


        :return: The pipeline_executions of this DataIngestionAsset.  # noqa: E501
        :rtype: list[DataIngestionPipelineExecution]
        """
        return self._pipeline_executions

    @pipeline_executions.setter
    def pipeline_executions(self, pipeline_executions):
        """Sets the pipeline_executions of this DataIngestionAsset.


        :param pipeline_executions: The pipeline_executions of this DataIngestionAsset.  # noqa: E501
        :type: list[DataIngestionPipelineExecution]
        """

        self._pipeline_executions = pipeline_executions

    @property
    def asset_indexing_status(self):
        """Gets the asset_indexing_status of this DataIngestionAsset.  # noqa: E501


        :return: The asset_indexing_status of this DataIngestionAsset.  # noqa: E501
        :rtype: list[DataIngestionAssetIndexingStatus]
        """
        return self._asset_indexing_status

    @asset_indexing_status.setter
    def asset_indexing_status(self, asset_indexing_status):
        """Sets the asset_indexing_status of this DataIngestionAsset.


        :param asset_indexing_status: The asset_indexing_status of this DataIngestionAsset.  # noqa: E501
        :type: list[DataIngestionAssetIndexingStatus]
        """

        self._asset_indexing_status = asset_indexing_status

    @property
    def parent_security_path(self):
        """Gets the parent_security_path of this DataIngestionAsset.  # noqa: E501


        :return: The parent_security_path of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._parent_security_path

    @parent_security_path.setter
    def parent_security_path(self, parent_security_path):
        """Sets the parent_security_path of this DataIngestionAsset.


        :param parent_security_path: The parent_security_path of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._parent_security_path = parent_security_path

    @property
    def security_path(self):
        """Gets the security_path of this DataIngestionAsset.  # noqa: E501


        :return: The security_path of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this DataIngestionAsset.


        :param security_path: The security_path of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def parent_type(self):
        """Gets the parent_type of this DataIngestionAsset.  # noqa: E501


        :return: The parent_type of this DataIngestionAsset.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this DataIngestionAsset.


        :param parent_type: The parent_type of this DataIngestionAsset.  # noqa: E501
        :type: str
        """

        self._parent_type = parent_type

    @property
    def parent_id(self):
        """Gets the parent_id of this DataIngestionAsset.  # noqa: E501


        :return: The parent_id of this DataIngestionAsset.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this DataIngestionAsset.


        :param parent_id: The parent_id of this DataIngestionAsset.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionAsset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionAsset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
