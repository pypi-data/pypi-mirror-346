# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataEntitiesEntityPipelineDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_entity': 'int',
        'id_pipeline': 'int',
        'entity_name': 'str',
        'pipeline_name': 'str',
        'pipeline_template_item_id': 'str',
        'pipeline_template_name': 'str'
    }

    attribute_map = {
        'id_entity': 'idEntity',
        'id_pipeline': 'idPipeline',
        'entity_name': 'entityName',
        'pipeline_name': 'pipelineName',
        'pipeline_template_item_id': 'pipelineTemplateItemId',
        'pipeline_template_name': 'pipelineTemplateName'
    }

    def __init__(self, id_entity=None, id_pipeline=None, entity_name=None, pipeline_name=None, pipeline_template_item_id=None, pipeline_template_name=None):  # noqa: E501
        """MetadataEntitiesEntityPipelineDTO - a model defined in Swagger"""  # noqa: E501
        self._id_entity = None
        self._id_pipeline = None
        self._entity_name = None
        self._pipeline_name = None
        self._pipeline_template_item_id = None
        self._pipeline_template_name = None
        self.discriminator = None
        self.id_entity = id_entity
        self.id_pipeline = id_pipeline
        self.entity_name = entity_name
        self.pipeline_name = pipeline_name
        self.pipeline_template_item_id = pipeline_template_item_id
        self.pipeline_template_name = pipeline_template_name

    @property
    def id_entity(self):
        """Gets the id_entity of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The id_entity of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this MetadataEntitiesEntityPipelineDTO.


        :param id_entity: The id_entity of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: int
        """
        if id_entity is None:
            raise ValueError("Invalid value for `id_entity`, must not be `None`")  # noqa: E501

        self._id_entity = id_entity

    @property
    def id_pipeline(self):
        """Gets the id_pipeline of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The id_pipeline of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_pipeline

    @id_pipeline.setter
    def id_pipeline(self, id_pipeline):
        """Sets the id_pipeline of this MetadataEntitiesEntityPipelineDTO.


        :param id_pipeline: The id_pipeline of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: int
        """
        if id_pipeline is None:
            raise ValueError("Invalid value for `id_pipeline`, must not be `None`")  # noqa: E501

        self._id_pipeline = id_pipeline

    @property
    def entity_name(self):
        """Gets the entity_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The entity_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this MetadataEntitiesEntityPipelineDTO.


        :param entity_name: The entity_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")  # noqa: E501

        self._entity_name = entity_name

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The pipeline_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this MetadataEntitiesEntityPipelineDTO.


        :param pipeline_name: The pipeline_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_template_item_id(self):
        """Gets the pipeline_template_item_id of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The pipeline_template_item_id of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_template_item_id

    @pipeline_template_item_id.setter
    def pipeline_template_item_id(self, pipeline_template_item_id):
        """Sets the pipeline_template_item_id of this MetadataEntitiesEntityPipelineDTO.


        :param pipeline_template_item_id: The pipeline_template_item_id of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: str
        """
        if pipeline_template_item_id is None:
            raise ValueError("Invalid value for `pipeline_template_item_id`, must not be `None`")  # noqa: E501

        self._pipeline_template_item_id = pipeline_template_item_id

    @property
    def pipeline_template_name(self):
        """Gets the pipeline_template_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501


        :return: The pipeline_template_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_template_name

    @pipeline_template_name.setter
    def pipeline_template_name(self, pipeline_template_name):
        """Sets the pipeline_template_name of this MetadataEntitiesEntityPipelineDTO.


        :param pipeline_template_name: The pipeline_template_name of this MetadataEntitiesEntityPipelineDTO.  # noqa: E501
        :type: str
        """
        if pipeline_template_name is None:
            raise ValueError("Invalid value for `pipeline_template_name`, must not be `None`")  # noqa: E501

        self._pipeline_template_name = pipeline_template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEntitiesEntityPipelineDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEntitiesEntityPipelineDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
