# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersistenceLogModelsDataFactoryActivityRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'log_date': 'datetime',
        'pipeline_name': 'str',
        'pipeline_run_id': 'str',
        'activity_name': 'str',
        'activity_run_id': 'str',
        'activity_status': 'str',
        'activity_run_start': 'datetime',
        'activity_run_end': 'datetime',
        'activity_duration': 'int',
        'pipeline_duration': 'int',
        'activity_error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'log_date': 'logDate',
        'pipeline_name': 'pipelineName',
        'pipeline_run_id': 'pipelineRunId',
        'activity_name': 'activityName',
        'activity_run_id': 'activityRunId',
        'activity_status': 'activityStatus',
        'activity_run_start': 'activityRunStart',
        'activity_run_end': 'activityRunEnd',
        'activity_duration': 'activityDuration',
        'pipeline_duration': 'pipelineDuration',
        'activity_error': 'activityError'
    }

    def __init__(self, id=None, log_date=None, pipeline_name=None, pipeline_run_id=None, activity_name=None, activity_run_id=None, activity_status=None, activity_run_start=None, activity_run_end=None, activity_duration=None, pipeline_duration=None, activity_error=None):  # noqa: E501
        """PersistenceLogModelsDataFactoryActivityRun - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._log_date = None
        self._pipeline_name = None
        self._pipeline_run_id = None
        self._activity_name = None
        self._activity_run_id = None
        self._activity_status = None
        self._activity_run_start = None
        self._activity_run_end = None
        self._activity_duration = None
        self._pipeline_duration = None
        self._activity_error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if log_date is not None:
            self.log_date = log_date
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if activity_name is not None:
            self.activity_name = activity_name
        if activity_run_id is not None:
            self.activity_run_id = activity_run_id
        if activity_status is not None:
            self.activity_status = activity_status
        if activity_run_start is not None:
            self.activity_run_start = activity_run_start
        if activity_run_end is not None:
            self.activity_run_end = activity_run_end
        if activity_duration is not None:
            self.activity_duration = activity_duration
        if pipeline_duration is not None:
            self.pipeline_duration = pipeline_duration
        if activity_error is not None:
            self.activity_error = activity_error

    @property
    def id(self):
        """Gets the id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersistenceLogModelsDataFactoryActivityRun.


        :param id: The id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def log_date(self):
        """Gets the log_date of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The log_date of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: datetime
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this PersistenceLogModelsDataFactoryActivityRun.


        :param log_date: The log_date of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: datetime
        """

        self._log_date = log_date

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The pipeline_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PersistenceLogModelsDataFactoryActivityRun.


        :param pipeline_name: The pipeline_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The pipeline_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this PersistenceLogModelsDataFactoryActivityRun.


        :param pipeline_run_id: The pipeline_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def activity_name(self):
        """Gets the activity_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_name: The activity_name of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._activity_name = activity_name

    @property
    def activity_run_id(self):
        """Gets the activity_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._activity_run_id

    @activity_run_id.setter
    def activity_run_id(self, activity_run_id):
        """Sets the activity_run_id of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_run_id: The activity_run_id of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._activity_run_id = activity_run_id

    @property
    def activity_status(self):
        """Gets the activity_status of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_status of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._activity_status

    @activity_status.setter
    def activity_status(self, activity_status):
        """Sets the activity_status of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_status: The activity_status of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._activity_status = activity_status

    @property
    def activity_run_start(self):
        """Gets the activity_run_start of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_run_start of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_run_start

    @activity_run_start.setter
    def activity_run_start(self, activity_run_start):
        """Sets the activity_run_start of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_run_start: The activity_run_start of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: datetime
        """

        self._activity_run_start = activity_run_start

    @property
    def activity_run_end(self):
        """Gets the activity_run_end of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_run_end of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_run_end

    @activity_run_end.setter
    def activity_run_end(self, activity_run_end):
        """Sets the activity_run_end of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_run_end: The activity_run_end of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: datetime
        """

        self._activity_run_end = activity_run_end

    @property
    def activity_duration(self):
        """Gets the activity_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: int
        """
        return self._activity_duration

    @activity_duration.setter
    def activity_duration(self, activity_duration):
        """Sets the activity_duration of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_duration: The activity_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: int
        """

        self._activity_duration = activity_duration

    @property
    def pipeline_duration(self):
        """Gets the pipeline_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The pipeline_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_duration

    @pipeline_duration.setter
    def pipeline_duration(self, pipeline_duration):
        """Sets the pipeline_duration of this PersistenceLogModelsDataFactoryActivityRun.


        :param pipeline_duration: The pipeline_duration of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: int
        """

        self._pipeline_duration = pipeline_duration

    @property
    def activity_error(self):
        """Gets the activity_error of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501


        :return: The activity_error of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :rtype: str
        """
        return self._activity_error

    @activity_error.setter
    def activity_error(self, activity_error):
        """Sets the activity_error of this PersistenceLogModelsDataFactoryActivityRun.


        :param activity_error: The activity_error of this PersistenceLogModelsDataFactoryActivityRun.  # noqa: E501
        :type: str
        """

        self._activity_error = activity_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersistenceLogModelsDataFactoryActivityRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersistenceLogModelsDataFactoryActivityRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
