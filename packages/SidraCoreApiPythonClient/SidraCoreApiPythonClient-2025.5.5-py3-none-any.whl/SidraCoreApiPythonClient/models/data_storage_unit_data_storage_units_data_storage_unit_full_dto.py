# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'resource_group_name': 'str',
        'cluster_name': 'str',
        'id_cluster_type': 'DataIngestionClusterTypeEnum',
        'id_location': 'int',
        'icon_url': 'str',
        'description': 'str',
        'detail': 'str',
        'region_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'resource_group_name': 'resourceGroupName',
        'cluster_name': 'clusterName',
        'id_cluster_type': 'idClusterType',
        'id_location': 'idLocation',
        'icon_url': 'iconURL',
        'description': 'description',
        'detail': 'detail',
        'region_id': 'regionId'
    }

    def __init__(self, id=None, name=None, resource_group_name=None, cluster_name=None, id_cluster_type=None, id_location=None, icon_url=None, description=None, detail=None, region_id=None):  # noqa: E501
        """DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._resource_group_name = None
        self._cluster_name = None
        self._id_cluster_type = None
        self._id_location = None
        self._icon_url = None
        self._description = None
        self._detail = None
        self._region_id = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.resource_group_name = resource_group_name
        self.cluster_name = cluster_name
        if id_cluster_type is not None:
            self.id_cluster_type = id_cluster_type
        if id_location is not None:
            self.id_location = id_location
        if icon_url is not None:
            self.icon_url = icon_url
        if description is not None:
            self.description = description
        if detail is not None:
            self.detail = detail
        if region_id is not None:
            self.region_id = region_id

    @property
    def id(self):
        """Gets the id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param id: The id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param name: The name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The resource_group_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param resource_group_name: The resource_group_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """
        if resource_group_name is None:
            raise ValueError("Invalid value for `resource_group_name`, must not be `None`")  # noqa: E501

        self._resource_group_name = resource_group_name

    @property
    def cluster_name(self):
        """Gets the cluster_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The cluster_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param cluster_name: The cluster_name of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def id_cluster_type(self):
        """Gets the id_cluster_type of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The id_cluster_type of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: DataIngestionClusterTypeEnum
        """
        return self._id_cluster_type

    @id_cluster_type.setter
    def id_cluster_type(self, id_cluster_type):
        """Sets the id_cluster_type of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param id_cluster_type: The id_cluster_type of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: DataIngestionClusterTypeEnum
        """

        self._id_cluster_type = id_cluster_type

    @property
    def id_location(self):
        """Gets the id_location of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The id_location of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_location

    @id_location.setter
    def id_location(self, id_location):
        """Sets the id_location of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param id_location: The id_location of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: int
        """

        self._id_location = id_location

    @property
    def icon_url(self):
        """Gets the icon_url of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The icon_url of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param icon_url: The icon_url of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def description(self):
        """Gets the description of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The description of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param description: The description of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The detail of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param detail: The detail of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def region_id(self):
        """Gets the region_id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501


        :return: The region_id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.


        :param region_id: The region_id of this DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataStorageUnitDataStorageUnitsDataStorageUnitFullDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
