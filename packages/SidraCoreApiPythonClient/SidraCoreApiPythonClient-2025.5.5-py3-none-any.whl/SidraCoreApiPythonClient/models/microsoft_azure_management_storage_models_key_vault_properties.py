# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsKeyVaultProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keyname': 'str',
        'keyversion': 'str',
        'keyvaulturi': 'str',
        'current_versioned_key_identifier': 'str',
        'last_key_rotation_timestamp': 'datetime'
    }

    attribute_map = {
        'keyname': 'keyname',
        'keyversion': 'keyversion',
        'keyvaulturi': 'keyvaulturi',
        'current_versioned_key_identifier': 'currentVersionedKeyIdentifier',
        'last_key_rotation_timestamp': 'lastKeyRotationTimestamp'
    }

    def __init__(self, keyname=None, keyversion=None, keyvaulturi=None, current_versioned_key_identifier=None, last_key_rotation_timestamp=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsKeyVaultProperties - a model defined in Swagger"""  # noqa: E501
        self._keyname = None
        self._keyversion = None
        self._keyvaulturi = None
        self._current_versioned_key_identifier = None
        self._last_key_rotation_timestamp = None
        self.discriminator = None
        if keyname is not None:
            self.keyname = keyname
        if keyversion is not None:
            self.keyversion = keyversion
        if keyvaulturi is not None:
            self.keyvaulturi = keyvaulturi
        if current_versioned_key_identifier is not None:
            self.current_versioned_key_identifier = current_versioned_key_identifier
        if last_key_rotation_timestamp is not None:
            self.last_key_rotation_timestamp = last_key_rotation_timestamp

    @property
    def keyname(self):
        """Gets the keyname of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501


        :return: The keyname of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :rtype: str
        """
        return self._keyname

    @keyname.setter
    def keyname(self, keyname):
        """Sets the keyname of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.


        :param keyname: The keyname of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :type: str
        """

        self._keyname = keyname

    @property
    def keyversion(self):
        """Gets the keyversion of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501


        :return: The keyversion of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :rtype: str
        """
        return self._keyversion

    @keyversion.setter
    def keyversion(self, keyversion):
        """Sets the keyversion of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.


        :param keyversion: The keyversion of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :type: str
        """

        self._keyversion = keyversion

    @property
    def keyvaulturi(self):
        """Gets the keyvaulturi of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501


        :return: The keyvaulturi of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :rtype: str
        """
        return self._keyvaulturi

    @keyvaulturi.setter
    def keyvaulturi(self, keyvaulturi):
        """Sets the keyvaulturi of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.


        :param keyvaulturi: The keyvaulturi of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :type: str
        """

        self._keyvaulturi = keyvaulturi

    @property
    def current_versioned_key_identifier(self):
        """Gets the current_versioned_key_identifier of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501


        :return: The current_versioned_key_identifier of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :rtype: str
        """
        return self._current_versioned_key_identifier

    @current_versioned_key_identifier.setter
    def current_versioned_key_identifier(self, current_versioned_key_identifier):
        """Sets the current_versioned_key_identifier of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.


        :param current_versioned_key_identifier: The current_versioned_key_identifier of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :type: str
        """

        self._current_versioned_key_identifier = current_versioned_key_identifier

    @property
    def last_key_rotation_timestamp(self):
        """Gets the last_key_rotation_timestamp of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501


        :return: The last_key_rotation_timestamp of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._last_key_rotation_timestamp

    @last_key_rotation_timestamp.setter
    def last_key_rotation_timestamp(self, last_key_rotation_timestamp):
        """Sets the last_key_rotation_timestamp of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.


        :param last_key_rotation_timestamp: The last_key_rotation_timestamp of this MicrosoftAzureManagementStorageModelsKeyVaultProperties.  # noqa: E501
        :type: datetime
        """

        self._last_key_rotation_timestamp = last_key_rotation_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsKeyVaultProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsKeyVaultProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
