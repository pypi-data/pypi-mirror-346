# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IngestionRegisterAssetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_uri': 'str',
        'invalidate_previous_assets': 'bool',
        'is_empty_asset': 'bool'
    }

    attribute_map = {
        'asset_uri': 'assetUri',
        'invalidate_previous_assets': 'invalidatePreviousAssets',
        'is_empty_asset': 'isEmptyAsset'
    }

    def __init__(self, asset_uri=None, invalidate_previous_assets=None, is_empty_asset=None):  # noqa: E501
        """IngestionRegisterAssetDTO - a model defined in Swagger"""  # noqa: E501
        self._asset_uri = None
        self._invalidate_previous_assets = None
        self._is_empty_asset = None
        self.discriminator = None
        if asset_uri is not None:
            self.asset_uri = asset_uri
        if invalidate_previous_assets is not None:
            self.invalidate_previous_assets = invalidate_previous_assets
        if is_empty_asset is not None:
            self.is_empty_asset = is_empty_asset

    @property
    def asset_uri(self):
        """Gets the asset_uri of this IngestionRegisterAssetDTO.  # noqa: E501


        :return: The asset_uri of this IngestionRegisterAssetDTO.  # noqa: E501
        :rtype: str
        """
        return self._asset_uri

    @asset_uri.setter
    def asset_uri(self, asset_uri):
        """Sets the asset_uri of this IngestionRegisterAssetDTO.


        :param asset_uri: The asset_uri of this IngestionRegisterAssetDTO.  # noqa: E501
        :type: str
        """

        self._asset_uri = asset_uri

    @property
    def invalidate_previous_assets(self):
        """Gets the invalidate_previous_assets of this IngestionRegisterAssetDTO.  # noqa: E501


        :return: The invalidate_previous_assets of this IngestionRegisterAssetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._invalidate_previous_assets

    @invalidate_previous_assets.setter
    def invalidate_previous_assets(self, invalidate_previous_assets):
        """Sets the invalidate_previous_assets of this IngestionRegisterAssetDTO.


        :param invalidate_previous_assets: The invalidate_previous_assets of this IngestionRegisterAssetDTO.  # noqa: E501
        :type: bool
        """

        self._invalidate_previous_assets = invalidate_previous_assets

    @property
    def is_empty_asset(self):
        """Gets the is_empty_asset of this IngestionRegisterAssetDTO.  # noqa: E501


        :return: The is_empty_asset of this IngestionRegisterAssetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_empty_asset

    @is_empty_asset.setter
    def is_empty_asset(self, is_empty_asset):
        """Sets the is_empty_asset of this IngestionRegisterAssetDTO.


        :param is_empty_asset: The is_empty_asset of this IngestionRegisterAssetDTO.  # noqa: E501
        :type: bool
        """

        self._is_empty_asset = is_empty_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IngestionRegisterAssetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IngestionRegisterAssetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
