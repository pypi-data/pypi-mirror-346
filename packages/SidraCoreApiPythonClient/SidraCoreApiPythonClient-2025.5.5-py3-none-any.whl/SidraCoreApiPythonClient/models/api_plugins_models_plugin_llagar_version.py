# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIPluginsModelsPluginLlagarVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'id_plugin': 'str',
        'plugin_public_storage': 'bool',
        'name': 'str',
        'title': 'str',
        'version_number': 'str',
        'notes': 'str',
        'enabled': 'bool',
        'editable': 'bool',
        'dependencies': 'list[APIPluginsModelsPluginVersionDependencyDTO]'
    }

    attribute_map = {
        'id': 'id',
        'id_plugin': 'idPlugin',
        'plugin_public_storage': 'pluginPublicStorage',
        'name': 'name',
        'title': 'title',
        'version_number': 'versionNumber',
        'notes': 'notes',
        'enabled': 'enabled',
        'editable': 'editable',
        'dependencies': 'dependencies'
    }

    def __init__(self, id=None, id_plugin=None, plugin_public_storage=None, name=None, title=None, version_number=None, notes=None, enabled=None, editable=None, dependencies=None):  # noqa: E501
        """APIPluginsModelsPluginLlagarVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_plugin = None
        self._plugin_public_storage = None
        self._name = None
        self._title = None
        self._version_number = None
        self._notes = None
        self._enabled = None
        self._editable = None
        self._dependencies = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_plugin is not None:
            self.id_plugin = id_plugin
        if plugin_public_storage is not None:
            self.plugin_public_storage = plugin_public_storage
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if version_number is not None:
            self.version_number = version_number
        if notes is not None:
            self.notes = notes
        if enabled is not None:
            self.enabled = enabled
        if editable is not None:
            self.editable = editable
        if dependencies is not None:
            self.dependencies = dependencies

    @property
    def id(self):
        """Gets the id of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The id of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIPluginsModelsPluginLlagarVersion.


        :param id: The id of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_plugin(self):
        """Gets the id_plugin of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The id_plugin of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin

    @id_plugin.setter
    def id_plugin(self, id_plugin):
        """Sets the id_plugin of this APIPluginsModelsPluginLlagarVersion.


        :param id_plugin: The id_plugin of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._id_plugin = id_plugin

    @property
    def plugin_public_storage(self):
        """Gets the plugin_public_storage of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The plugin_public_storage of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_public_storage

    @plugin_public_storage.setter
    def plugin_public_storage(self, plugin_public_storage):
        """Sets the plugin_public_storage of this APIPluginsModelsPluginLlagarVersion.


        :param plugin_public_storage: The plugin_public_storage of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: bool
        """

        self._plugin_public_storage = plugin_public_storage

    @property
    def name(self):
        """Gets the name of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The name of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIPluginsModelsPluginLlagarVersion.


        :param name: The name of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The title of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this APIPluginsModelsPluginLlagarVersion.


        :param title: The title of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version_number(self):
        """Gets the version_number of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The version_number of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this APIPluginsModelsPluginLlagarVersion.


        :param version_number: The version_number of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._version_number = version_number

    @property
    def notes(self):
        """Gets the notes of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The notes of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this APIPluginsModelsPluginLlagarVersion.


        :param notes: The notes of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def enabled(self):
        """Gets the enabled of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The enabled of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this APIPluginsModelsPluginLlagarVersion.


        :param enabled: The enabled of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def editable(self):
        """Gets the editable of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The editable of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this APIPluginsModelsPluginLlagarVersion.


        :param editable: The editable of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def dependencies(self):
        """Gets the dependencies of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501


        :return: The dependencies of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :rtype: list[APIPluginsModelsPluginVersionDependencyDTO]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this APIPluginsModelsPluginLlagarVersion.


        :param dependencies: The dependencies of this APIPluginsModelsPluginLlagarVersion.  # noqa: E501
        :type: list[APIPluginsModelsPluginVersionDependencyDTO]
        """

        self._dependencies = dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIPluginsModelsPluginLlagarVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIPluginsModelsPluginLlagarVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
