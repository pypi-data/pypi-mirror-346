# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataFactoryPipelinesPipelineUpsertDefinitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_name': 'str',
        'template_item_id': 'str',
        'parameters': 'str',
        'provider_resource_group_name': 'str',
        'id_plugin_version': 'str'
    }

    attribute_map = {
        'pipeline_name': 'pipelineName',
        'template_item_id': 'templateItemId',
        'parameters': 'parameters',
        'provider_resource_group_name': 'providerResourceGroupName',
        'id_plugin_version': 'idPluginVersion'
    }

    def __init__(self, pipeline_name=None, template_item_id=None, parameters=None, provider_resource_group_name=None, id_plugin_version=None):  # noqa: E501
        """DataFactoryPipelinesPipelineUpsertDefinitionRequest - a model defined in Swagger"""  # noqa: E501
        self._pipeline_name = None
        self._template_item_id = None
        self._parameters = None
        self._provider_resource_group_name = None
        self._id_plugin_version = None
        self.discriminator = None
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if template_item_id is not None:
            self.template_item_id = template_item_id
        if parameters is not None:
            self.parameters = parameters
        if provider_resource_group_name is not None:
            self.provider_resource_group_name = provider_resource_group_name
        if id_plugin_version is not None:
            self.id_plugin_version = id_plugin_version

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501


        :return: The pipeline_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.


        :param pipeline_name: The pipeline_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def template_item_id(self):
        """Gets the template_item_id of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501


        :return: The template_item_id of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_item_id

    @template_item_id.setter
    def template_item_id(self, template_item_id):
        """Sets the template_item_id of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.


        :param template_item_id: The template_item_id of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._template_item_id = template_item_id

    @property
    def parameters(self):
        """Gets the parameters of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501


        :return: The parameters of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.


        :param parameters: The parameters of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def provider_resource_group_name(self):
        """Gets the provider_resource_group_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501


        :return: The provider_resource_group_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider_resource_group_name

    @provider_resource_group_name.setter
    def provider_resource_group_name(self, provider_resource_group_name):
        """Sets the provider_resource_group_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.


        :param provider_resource_group_name: The provider_resource_group_name of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._provider_resource_group_name = provider_resource_group_name

    @property
    def id_plugin_version(self):
        """Gets the id_plugin_version of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501


        :return: The id_plugin_version of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin_version

    @id_plugin_version.setter
    def id_plugin_version(self, id_plugin_version):
        """Sets the id_plugin_version of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.


        :param id_plugin_version: The id_plugin_version of this DataFactoryPipelinesPipelineUpsertDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._id_plugin_version = id_plugin_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataFactoryPipelinesPipelineUpsertDefinitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFactoryPipelinesPipelineUpsertDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
