# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIPluginsModelsPluginLlagarWithMediaVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'version_number': 'str',
        'notes': 'str',
        'release_date': 'datetime',
        'enabled': 'bool',
        'editable': 'bool',
        'min_sidra_release_version': 'str',
        'max_sidra_release_version': 'str',
        'is_compatible_with_current_release': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'version_number': 'versionNumber',
        'notes': 'notes',
        'release_date': 'releaseDate',
        'enabled': 'enabled',
        'editable': 'editable',
        'min_sidra_release_version': 'minSidraReleaseVersion',
        'max_sidra_release_version': 'maxSidraReleaseVersion',
        'is_compatible_with_current_release': 'isCompatibleWithCurrentRelease'
    }

    def __init__(self, id=None, title=None, version_number=None, notes=None, release_date=None, enabled=None, editable=None, min_sidra_release_version=None, max_sidra_release_version=None, is_compatible_with_current_release=None):  # noqa: E501
        """APIPluginsModelsPluginLlagarWithMediaVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._version_number = None
        self._notes = None
        self._release_date = None
        self._enabled = None
        self._editable = None
        self._min_sidra_release_version = None
        self._max_sidra_release_version = None
        self._is_compatible_with_current_release = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if version_number is not None:
            self.version_number = version_number
        if notes is not None:
            self.notes = notes
        if release_date is not None:
            self.release_date = release_date
        if enabled is not None:
            self.enabled = enabled
        if editable is not None:
            self.editable = editable
        if min_sidra_release_version is not None:
            self.min_sidra_release_version = min_sidra_release_version
        if max_sidra_release_version is not None:
            self.max_sidra_release_version = max_sidra_release_version
        if is_compatible_with_current_release is not None:
            self.is_compatible_with_current_release = is_compatible_with_current_release

    @property
    def id(self):
        """Gets the id of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The id of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param id: The id of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The title of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param title: The title of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version_number(self):
        """Gets the version_number of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The version_number of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param version_number: The version_number of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._version_number = version_number

    @property
    def notes(self):
        """Gets the notes of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The notes of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param notes: The notes of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def release_date(self):
        """Gets the release_date of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The release_date of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param release_date: The release_date of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def enabled(self):
        """Gets the enabled of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The enabled of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param enabled: The enabled of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def editable(self):
        """Gets the editable of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The editable of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param editable: The editable of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def min_sidra_release_version(self):
        """Gets the min_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The min_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._min_sidra_release_version

    @min_sidra_release_version.setter
    def min_sidra_release_version(self, min_sidra_release_version):
        """Sets the min_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param min_sidra_release_version: The min_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._min_sidra_release_version = min_sidra_release_version

    @property
    def max_sidra_release_version(self):
        """Gets the max_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The max_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._max_sidra_release_version

    @max_sidra_release_version.setter
    def max_sidra_release_version(self, max_sidra_release_version):
        """Sets the max_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param max_sidra_release_version: The max_sidra_release_version of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._max_sidra_release_version = max_sidra_release_version

    @property
    def is_compatible_with_current_release(self):
        """Gets the is_compatible_with_current_release of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501


        :return: The is_compatible_with_current_release of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: bool
        """
        return self._is_compatible_with_current_release

    @is_compatible_with_current_release.setter
    def is_compatible_with_current_release(self, is_compatible_with_current_release):
        """Sets the is_compatible_with_current_release of this APIPluginsModelsPluginLlagarWithMediaVersion.


        :param is_compatible_with_current_release: The is_compatible_with_current_release of this APIPluginsModelsPluginLlagarWithMediaVersion.  # noqa: E501
        :type: bool
        """

        self._is_compatible_with_current_release = is_compatible_with_current_release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIPluginsModelsPluginLlagarWithMediaVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIPluginsModelsPluginLlagarWithMediaVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
