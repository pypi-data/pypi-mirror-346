# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIPluginsModelsPluginLlagarWithMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'public_storage': 'bool',
        'name': 'str',
        'title': 'str',
        'developed_by': 'str',
        'description': 'str',
        'enabled': 'bool',
        'editable': 'bool',
        'logo': 'str',
        'diagram': 'str',
        'id_type': 'APIPluginsModelsPluginTypeEnum',
        'versions': 'list[APIPluginsModelsPluginLlagarWithMediaVersion]'
    }

    attribute_map = {
        'id': 'id',
        'public_storage': 'publicStorage',
        'name': 'name',
        'title': 'title',
        'developed_by': 'developedBy',
        'description': 'description',
        'enabled': 'enabled',
        'editable': 'editable',
        'logo': 'logo',
        'diagram': 'diagram',
        'id_type': 'idType',
        'versions': 'versions'
    }

    def __init__(self, id=None, public_storage=None, name=None, title=None, developed_by=None, description=None, enabled=None, editable=None, logo=None, diagram=None, id_type=None, versions=None):  # noqa: E501
        """APIPluginsModelsPluginLlagarWithMedia - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._public_storage = None
        self._name = None
        self._title = None
        self._developed_by = None
        self._description = None
        self._enabled = None
        self._editable = None
        self._logo = None
        self._diagram = None
        self._id_type = None
        self._versions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if public_storage is not None:
            self.public_storage = public_storage
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if developed_by is not None:
            self.developed_by = developed_by
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if editable is not None:
            self.editable = editable
        if logo is not None:
            self.logo = logo
        if diagram is not None:
            self.diagram = diagram
        if id_type is not None:
            self.id_type = id_type
        if versions is not None:
            self.versions = versions

    @property
    def id(self):
        """Gets the id of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The id of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIPluginsModelsPluginLlagarWithMedia.


        :param id: The id of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def public_storage(self):
        """Gets the public_storage of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The public_storage of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: bool
        """
        return self._public_storage

    @public_storage.setter
    def public_storage(self, public_storage):
        """Sets the public_storage of this APIPluginsModelsPluginLlagarWithMedia.


        :param public_storage: The public_storage of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: bool
        """

        self._public_storage = public_storage

    @property
    def name(self):
        """Gets the name of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The name of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIPluginsModelsPluginLlagarWithMedia.


        :param name: The name of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The title of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this APIPluginsModelsPluginLlagarWithMedia.


        :param title: The title of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def developed_by(self):
        """Gets the developed_by of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The developed_by of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._developed_by

    @developed_by.setter
    def developed_by(self, developed_by):
        """Sets the developed_by of this APIPluginsModelsPluginLlagarWithMedia.


        :param developed_by: The developed_by of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._developed_by = developed_by

    @property
    def description(self):
        """Gets the description of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The description of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIPluginsModelsPluginLlagarWithMedia.


        :param description: The description of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The enabled of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this APIPluginsModelsPluginLlagarWithMedia.


        :param enabled: The enabled of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def editable(self):
        """Gets the editable of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The editable of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this APIPluginsModelsPluginLlagarWithMedia.


        :param editable: The editable of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def logo(self):
        """Gets the logo of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The logo of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this APIPluginsModelsPluginLlagarWithMedia.


        :param logo: The logo of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def diagram(self):
        """Gets the diagram of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The diagram of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: str
        """
        return self._diagram

    @diagram.setter
    def diagram(self, diagram):
        """Sets the diagram of this APIPluginsModelsPluginLlagarWithMedia.


        :param diagram: The diagram of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: str
        """

        self._diagram = diagram

    @property
    def id_type(self):
        """Gets the id_type of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The id_type of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: APIPluginsModelsPluginTypeEnum
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this APIPluginsModelsPluginLlagarWithMedia.


        :param id_type: The id_type of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: APIPluginsModelsPluginTypeEnum
        """

        self._id_type = id_type

    @property
    def versions(self):
        """Gets the versions of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501


        :return: The versions of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :rtype: list[APIPluginsModelsPluginLlagarWithMediaVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this APIPluginsModelsPluginLlagarWithMedia.


        :param versions: The versions of this APIPluginsModelsPluginLlagarWithMedia.  # noqa: E501
        :type: list[APIPluginsModelsPluginLlagarWithMediaVersion]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIPluginsModelsPluginLlagarWithMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIPluginsModelsPluginLlagarWithMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
