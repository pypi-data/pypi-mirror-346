# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsEncryption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'services': 'MicrosoftAzureManagementStorageModelsEncryptionServices',
        'key_source': 'str',
        'require_infrastructure_encryption': 'bool',
        'keyvaultproperties': 'MicrosoftAzureManagementStorageModelsKeyVaultProperties',
        'identity': 'MicrosoftAzureManagementStorageModelsEncryptionIdentity'
    }

    attribute_map = {
        'services': 'services',
        'key_source': 'keySource',
        'require_infrastructure_encryption': 'requireInfrastructureEncryption',
        'keyvaultproperties': 'keyvaultproperties',
        'identity': 'identity'
    }

    def __init__(self, services=None, key_source=None, require_infrastructure_encryption=None, keyvaultproperties=None, identity=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsEncryption - a model defined in Swagger"""  # noqa: E501
        self._services = None
        self._key_source = None
        self._require_infrastructure_encryption = None
        self._keyvaultproperties = None
        self._identity = None
        self.discriminator = None
        if services is not None:
            self.services = services
        if key_source is not None:
            self.key_source = key_source
        if require_infrastructure_encryption is not None:
            self.require_infrastructure_encryption = require_infrastructure_encryption
        if keyvaultproperties is not None:
            self.keyvaultproperties = keyvaultproperties
        if identity is not None:
            self.identity = identity

    @property
    def services(self):
        """Gets the services of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501


        :return: The services of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this MicrosoftAzureManagementStorageModelsEncryption.


        :param services: The services of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionServices
        """

        self._services = services

    @property
    def key_source(self):
        """Gets the key_source of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501


        :return: The key_source of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :rtype: str
        """
        return self._key_source

    @key_source.setter
    def key_source(self, key_source):
        """Sets the key_source of this MicrosoftAzureManagementStorageModelsEncryption.


        :param key_source: The key_source of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :type: str
        """

        self._key_source = key_source

    @property
    def require_infrastructure_encryption(self):
        """Gets the require_infrastructure_encryption of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501


        :return: The require_infrastructure_encryption of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :rtype: bool
        """
        return self._require_infrastructure_encryption

    @require_infrastructure_encryption.setter
    def require_infrastructure_encryption(self, require_infrastructure_encryption):
        """Sets the require_infrastructure_encryption of this MicrosoftAzureManagementStorageModelsEncryption.


        :param require_infrastructure_encryption: The require_infrastructure_encryption of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :type: bool
        """

        self._require_infrastructure_encryption = require_infrastructure_encryption

    @property
    def keyvaultproperties(self):
        """Gets the keyvaultproperties of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501


        :return: The keyvaultproperties of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsKeyVaultProperties
        """
        return self._keyvaultproperties

    @keyvaultproperties.setter
    def keyvaultproperties(self, keyvaultproperties):
        """Sets the keyvaultproperties of this MicrosoftAzureManagementStorageModelsEncryption.


        :param keyvaultproperties: The keyvaultproperties of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsKeyVaultProperties
        """

        self._keyvaultproperties = keyvaultproperties

    @property
    def identity(self):
        """Gets the identity of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501


        :return: The identity of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this MicrosoftAzureManagementStorageModelsEncryption.


        :param identity: The identity of this MicrosoftAzureManagementStorageModelsEncryption.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionIdentity
        """

        self._identity = identity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsEncryption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsEncryption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
