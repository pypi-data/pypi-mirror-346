# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIApplicationsApplicationRegistryModelsAppDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'application_display_name': 'str',
        'description': 'str',
        'owner': 'str',
        'is_system_app': 'bool',
        'tenant_id': 'str',
        'subscription_id': 'str',
        'subscription_name': 'str',
        'resource_group_name': 'str',
        'resource_group_location': 'str',
        'client_id': 'str',
        'image': 'str',
        'image_url': 'str',
        'extended_properties': 'str',
        'is_removed': 'bool',
        'last_updated': 'datetime',
        'last_deployed': 'datetime',
        'management_database': 'str',
        'management_database_server': 'str',
        'log_user': 'str',
        'log_password': 'str',
        'parameters': 'str',
        'id_plugin': 'str',
        'id_plugin_version': 'str',
        'current_plugin_version_number': 'str',
        'available_update_plugin_version_number': 'str',
        'available_update_plugin_version': 'str',
        'update_available': 'bool',
        'is_compatible_with_data_product_version': 'bool',
        'api_resources': 'list[str]',
        'client_scopes': 'list[str]',
        'roles': 'list[APIApplicationsApplicationRegistryModelsAppDTORoleDTO]',
        'permissions': 'list[APIApplicationsApplicationRegistryModelsAppDTOPermissionDTO]',
        'short_project_name': 'str',
        'short_product_name': 'str',
        'detail': 'str',
        'deployment_output': 'dict(str, str)',
        'tags': 'list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'application_display_name': 'applicationDisplayName',
        'description': 'description',
        'owner': 'owner',
        'is_system_app': 'isSystemApp',
        'tenant_id': 'tenantId',
        'subscription_id': 'subscriptionId',
        'subscription_name': 'subscriptionName',
        'resource_group_name': 'resourceGroupName',
        'resource_group_location': 'resourceGroupLocation',
        'client_id': 'clientId',
        'image': 'image',
        'image_url': 'imageUrl',
        'extended_properties': 'extendedProperties',
        'is_removed': 'isRemoved',
        'last_updated': 'lastUpdated',
        'last_deployed': 'lastDeployed',
        'management_database': 'managementDatabase',
        'management_database_server': 'managementDatabaseServer',
        'log_user': 'logUser',
        'log_password': 'logPassword',
        'parameters': 'parameters',
        'id_plugin': 'idPlugin',
        'id_plugin_version': 'idPluginVersion',
        'current_plugin_version_number': 'currentPluginVersionNumber',
        'available_update_plugin_version_number': 'availableUpdatePluginVersionNumber',
        'available_update_plugin_version': 'availableUpdatePluginVersion',
        'update_available': 'updateAvailable',
        'is_compatible_with_data_product_version': 'isCompatibleWithDataProductVersion',
        'api_resources': 'apiResources',
        'client_scopes': 'clientScopes',
        'roles': 'roles',
        'permissions': 'permissions',
        'short_project_name': 'shortProjectName',
        'short_product_name': 'shortProductName',
        'detail': 'detail',
        'deployment_output': 'deploymentOutput',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, application_display_name=None, description=None, owner=None, is_system_app=None, tenant_id=None, subscription_id=None, subscription_name=None, resource_group_name=None, resource_group_location=None, client_id=None, image=None, image_url=None, extended_properties=None, is_removed=None, last_updated=None, last_deployed=None, management_database=None, management_database_server=None, log_user=None, log_password=None, parameters=None, id_plugin=None, id_plugin_version=None, current_plugin_version_number=None, available_update_plugin_version_number=None, available_update_plugin_version=None, update_available=None, is_compatible_with_data_product_version=None, api_resources=None, client_scopes=None, roles=None, permissions=None, short_project_name=None, short_product_name=None, detail=None, deployment_output=None, tags=None):  # noqa: E501
        """APIApplicationsApplicationRegistryModelsAppDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._application_display_name = None
        self._description = None
        self._owner = None
        self._is_system_app = None
        self._tenant_id = None
        self._subscription_id = None
        self._subscription_name = None
        self._resource_group_name = None
        self._resource_group_location = None
        self._client_id = None
        self._image = None
        self._image_url = None
        self._extended_properties = None
        self._is_removed = None
        self._last_updated = None
        self._last_deployed = None
        self._management_database = None
        self._management_database_server = None
        self._log_user = None
        self._log_password = None
        self._parameters = None
        self._id_plugin = None
        self._id_plugin_version = None
        self._current_plugin_version_number = None
        self._available_update_plugin_version_number = None
        self._available_update_plugin_version = None
        self._update_available = None
        self._is_compatible_with_data_product_version = None
        self._api_resources = None
        self._client_scopes = None
        self._roles = None
        self._permissions = None
        self._short_project_name = None
        self._short_product_name = None
        self._detail = None
        self._deployment_output = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if application_display_name is not None:
            self.application_display_name = application_display_name
        if description is not None:
            self.description = description
        if owner is not None:
            self.owner = owner
        if is_system_app is not None:
            self.is_system_app = is_system_app
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if resource_group_name is not None:
            self.resource_group_name = resource_group_name
        if resource_group_location is not None:
            self.resource_group_location = resource_group_location
        if client_id is not None:
            self.client_id = client_id
        if image is not None:
            self.image = image
        if image_url is not None:
            self.image_url = image_url
        if extended_properties is not None:
            self.extended_properties = extended_properties
        if is_removed is not None:
            self.is_removed = is_removed
        if last_updated is not None:
            self.last_updated = last_updated
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if management_database is not None:
            self.management_database = management_database
        if management_database_server is not None:
            self.management_database_server = management_database_server
        if log_user is not None:
            self.log_user = log_user
        if log_password is not None:
            self.log_password = log_password
        if parameters is not None:
            self.parameters = parameters
        if id_plugin is not None:
            self.id_plugin = id_plugin
        if id_plugin_version is not None:
            self.id_plugin_version = id_plugin_version
        if current_plugin_version_number is not None:
            self.current_plugin_version_number = current_plugin_version_number
        if available_update_plugin_version_number is not None:
            self.available_update_plugin_version_number = available_update_plugin_version_number
        if available_update_plugin_version is not None:
            self.available_update_plugin_version = available_update_plugin_version
        if update_available is not None:
            self.update_available = update_available
        if is_compatible_with_data_product_version is not None:
            self.is_compatible_with_data_product_version = is_compatible_with_data_product_version
        if api_resources is not None:
            self.api_resources = api_resources
        if client_scopes is not None:
            self.client_scopes = client_scopes
        if roles is not None:
            self.roles = roles
        if permissions is not None:
            self.permissions = permissions
        if short_project_name is not None:
            self.short_project_name = short_project_name
        if short_product_name is not None:
            self.short_product_name = short_product_name
        if detail is not None:
            self.detail = detail
        if deployment_output is not None:
            self.deployment_output = deployment_output
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param id: The id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param name: The name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application_display_name(self):
        """Gets the application_display_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The application_display_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._application_display_name

    @application_display_name.setter
    def application_display_name(self, application_display_name):
        """Sets the application_display_name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param application_display_name: The application_display_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._application_display_name = application_display_name

    @property
    def description(self):
        """Gets the description of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The description of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param description: The description of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The owner of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param owner: The owner of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def is_system_app(self):
        """Gets the is_system_app of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The is_system_app of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_app

    @is_system_app.setter
    def is_system_app(self, is_system_app):
        """Sets the is_system_app of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param is_system_app: The is_system_app of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: bool
        """

        self._is_system_app = is_system_app

    @property
    def tenant_id(self):
        """Gets the tenant_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The tenant_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param tenant_id: The tenant_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The subscription_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param subscription_id: The subscription_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The subscription_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param subscription_name: The subscription_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The resource_group_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param resource_group_name: The resource_group_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._resource_group_name = resource_group_name

    @property
    def resource_group_location(self):
        """Gets the resource_group_location of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The resource_group_location of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_location

    @resource_group_location.setter
    def resource_group_location(self, resource_group_location):
        """Sets the resource_group_location of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param resource_group_location: The resource_group_location of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._resource_group_location = resource_group_location

    @property
    def client_id(self):
        """Gets the client_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The client_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param client_id: The client_id of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def image(self):
        """Gets the image of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The image of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param image: The image of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_url(self):
        """Gets the image_url of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The image_url of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param image_url: The image_url of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def extended_properties(self):
        """Gets the extended_properties of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The extended_properties of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param extended_properties: The extended_properties of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._extended_properties = extended_properties

    @property
    def is_removed(self):
        """Gets the is_removed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The is_removed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param is_removed: The is_removed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    @property
    def last_updated(self):
        """Gets the last_updated of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The last_updated of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param last_updated: The last_updated of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_deployed(self):
        """Gets the last_deployed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The last_deployed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param last_deployed: The last_deployed of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def management_database(self):
        """Gets the management_database of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The management_database of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._management_database

    @management_database.setter
    def management_database(self, management_database):
        """Sets the management_database of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param management_database: The management_database of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._management_database = management_database

    @property
    def management_database_server(self):
        """Gets the management_database_server of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The management_database_server of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._management_database_server

    @management_database_server.setter
    def management_database_server(self, management_database_server):
        """Sets the management_database_server of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param management_database_server: The management_database_server of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._management_database_server = management_database_server

    @property
    def log_user(self):
        """Gets the log_user of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The log_user of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._log_user

    @log_user.setter
    def log_user(self, log_user):
        """Sets the log_user of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param log_user: The log_user of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._log_user = log_user

    @property
    def log_password(self):
        """Gets the log_password of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The log_password of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._log_password

    @log_password.setter
    def log_password(self, log_password):
        """Sets the log_password of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param log_password: The log_password of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._log_password = log_password

    @property
    def parameters(self):
        """Gets the parameters of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The parameters of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param parameters: The parameters of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def id_plugin(self):
        """Gets the id_plugin of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The id_plugin of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin

    @id_plugin.setter
    def id_plugin(self, id_plugin):
        """Sets the id_plugin of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param id_plugin: The id_plugin of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._id_plugin = id_plugin

    @property
    def id_plugin_version(self):
        """Gets the id_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The id_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin_version

    @id_plugin_version.setter
    def id_plugin_version(self, id_plugin_version):
        """Sets the id_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param id_plugin_version: The id_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._id_plugin_version = id_plugin_version

    @property
    def current_plugin_version_number(self):
        """Gets the current_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The current_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._current_plugin_version_number

    @current_plugin_version_number.setter
    def current_plugin_version_number(self, current_plugin_version_number):
        """Sets the current_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param current_plugin_version_number: The current_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._current_plugin_version_number = current_plugin_version_number

    @property
    def available_update_plugin_version_number(self):
        """Gets the available_update_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The available_update_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._available_update_plugin_version_number

    @available_update_plugin_version_number.setter
    def available_update_plugin_version_number(self, available_update_plugin_version_number):
        """Sets the available_update_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param available_update_plugin_version_number: The available_update_plugin_version_number of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._available_update_plugin_version_number = available_update_plugin_version_number

    @property
    def available_update_plugin_version(self):
        """Gets the available_update_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The available_update_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._available_update_plugin_version

    @available_update_plugin_version.setter
    def available_update_plugin_version(self, available_update_plugin_version):
        """Sets the available_update_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param available_update_plugin_version: The available_update_plugin_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._available_update_plugin_version = available_update_plugin_version

    @property
    def update_available(self):
        """Gets the update_available of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The update_available of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: bool
        """
        return self._update_available

    @update_available.setter
    def update_available(self, update_available):
        """Sets the update_available of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param update_available: The update_available of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: bool
        """

        self._update_available = update_available

    @property
    def is_compatible_with_data_product_version(self):
        """Gets the is_compatible_with_data_product_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The is_compatible_with_data_product_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_compatible_with_data_product_version

    @is_compatible_with_data_product_version.setter
    def is_compatible_with_data_product_version(self, is_compatible_with_data_product_version):
        """Sets the is_compatible_with_data_product_version of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param is_compatible_with_data_product_version: The is_compatible_with_data_product_version of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: bool
        """

        self._is_compatible_with_data_product_version = is_compatible_with_data_product_version

    @property
    def api_resources(self):
        """Gets the api_resources of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The api_resources of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._api_resources

    @api_resources.setter
    def api_resources(self, api_resources):
        """Sets the api_resources of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param api_resources: The api_resources of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: list[str]
        """

        self._api_resources = api_resources

    @property
    def client_scopes(self):
        """Gets the client_scopes of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The client_scopes of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_scopes

    @client_scopes.setter
    def client_scopes(self, client_scopes):
        """Sets the client_scopes of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param client_scopes: The client_scopes of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: list[str]
        """

        self._client_scopes = client_scopes

    @property
    def roles(self):
        """Gets the roles of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The roles of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: list[APIApplicationsApplicationRegistryModelsAppDTORoleDTO]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param roles: The roles of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: list[APIApplicationsApplicationRegistryModelsAppDTORoleDTO]
        """

        self._roles = roles

    @property
    def permissions(self):
        """Gets the permissions of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The permissions of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: list[APIApplicationsApplicationRegistryModelsAppDTOPermissionDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param permissions: The permissions of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: list[APIApplicationsApplicationRegistryModelsAppDTOPermissionDTO]
        """

        self._permissions = permissions

    @property
    def short_project_name(self):
        """Gets the short_project_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The short_project_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._short_project_name

    @short_project_name.setter
    def short_project_name(self, short_project_name):
        """Sets the short_project_name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param short_project_name: The short_project_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._short_project_name = short_project_name

    @property
    def short_product_name(self):
        """Gets the short_product_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The short_product_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._short_product_name

    @short_product_name.setter
    def short_product_name(self, short_product_name):
        """Sets the short_product_name of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param short_product_name: The short_product_name of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._short_product_name = short_product_name

    @property
    def detail(self):
        """Gets the detail of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The detail of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param detail: The detail of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def deployment_output(self):
        """Gets the deployment_output of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The deployment_output of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._deployment_output

    @deployment_output.setter
    def deployment_output(self, deployment_output):
        """Sets the deployment_output of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param deployment_output: The deployment_output of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: dict(str, str)
        """

        self._deployment_output = deployment_output

    @property
    def tags(self):
        """Gets the tags of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501


        :return: The tags of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :rtype: list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this APIApplicationsApplicationRegistryModelsAppDTO.


        :param tags: The tags of this APIApplicationsApplicationRegistryModelsAppDTO.  # noqa: E501
        :type: list[APIDataIngestionMetadataModelTagTagTypeSystemCheckDto]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIApplicationsApplicationRegistryModelsAppDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIApplicationsApplicationRegistryModelsAppDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
