# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDataIngestionModelAssetFromLanding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_path': 'str',
        'file_name': 'str',
        'source_uri': 'str',
        'destination_uri': 'str',
        'destination_wasbs': 'str',
        'should_be_encrypted': 'bool',
        'encryptation_folder_path': 'str',
        'encryptation_wasbs': 'str',
        'asset_id': 'int',
        'asset_date': 'str'
    }

    attribute_map = {
        'folder_path': 'folderPath',
        'file_name': 'fileName',
        'source_uri': 'sourceUri',
        'destination_uri': 'destinationUri',
        'destination_wasbs': 'destinationWasbs',
        'should_be_encrypted': 'shouldBeEncrypted',
        'encryptation_folder_path': 'encryptationFolderPath',
        'encryptation_wasbs': 'encryptationWasbs',
        'asset_id': 'assetId',
        'asset_date': 'assetDate'
    }

    def __init__(self, folder_path=None, file_name=None, source_uri=None, destination_uri=None, destination_wasbs=None, should_be_encrypted=None, encryptation_folder_path=None, encryptation_wasbs=None, asset_id=None, asset_date=None):  # noqa: E501
        """APIDataIngestionModelAssetFromLanding - a model defined in Swagger"""  # noqa: E501
        self._folder_path = None
        self._file_name = None
        self._source_uri = None
        self._destination_uri = None
        self._destination_wasbs = None
        self._should_be_encrypted = None
        self._encryptation_folder_path = None
        self._encryptation_wasbs = None
        self._asset_id = None
        self._asset_date = None
        self.discriminator = None
        self.folder_path = folder_path
        self.file_name = file_name
        self.source_uri = source_uri
        self.destination_uri = destination_uri
        if destination_wasbs is not None:
            self.destination_wasbs = destination_wasbs
        if should_be_encrypted is not None:
            self.should_be_encrypted = should_be_encrypted
        if encryptation_folder_path is not None:
            self.encryptation_folder_path = encryptation_folder_path
        if encryptation_wasbs is not None:
            self.encryptation_wasbs = encryptation_wasbs
        self.asset_id = asset_id
        if asset_date is not None:
            self.asset_date = asset_date

    @property
    def folder_path(self):
        """Gets the folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this APIDataIngestionModelAssetFromLanding.


        :param folder_path: The folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")  # noqa: E501

        self._folder_path = folder_path

    @property
    def file_name(self):
        """Gets the file_name of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The file_name of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this APIDataIngestionModelAssetFromLanding.


        :param file_name: The file_name of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def source_uri(self):
        """Gets the source_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The source_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this APIDataIngestionModelAssetFromLanding.


        :param source_uri: The source_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """
        if source_uri is None:
            raise ValueError("Invalid value for `source_uri`, must not be `None`")  # noqa: E501

        self._source_uri = source_uri

    @property
    def destination_uri(self):
        """Gets the destination_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The destination_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._destination_uri

    @destination_uri.setter
    def destination_uri(self, destination_uri):
        """Sets the destination_uri of this APIDataIngestionModelAssetFromLanding.


        :param destination_uri: The destination_uri of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """
        if destination_uri is None:
            raise ValueError("Invalid value for `destination_uri`, must not be `None`")  # noqa: E501

        self._destination_uri = destination_uri

    @property
    def destination_wasbs(self):
        """Gets the destination_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The destination_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._destination_wasbs

    @destination_wasbs.setter
    def destination_wasbs(self, destination_wasbs):
        """Sets the destination_wasbs of this APIDataIngestionModelAssetFromLanding.


        :param destination_wasbs: The destination_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """

        self._destination_wasbs = destination_wasbs

    @property
    def should_be_encrypted(self):
        """Gets the should_be_encrypted of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The should_be_encrypted of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: bool
        """
        return self._should_be_encrypted

    @should_be_encrypted.setter
    def should_be_encrypted(self, should_be_encrypted):
        """Sets the should_be_encrypted of this APIDataIngestionModelAssetFromLanding.


        :param should_be_encrypted: The should_be_encrypted of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: bool
        """

        self._should_be_encrypted = should_be_encrypted

    @property
    def encryptation_folder_path(self):
        """Gets the encryptation_folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The encryptation_folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._encryptation_folder_path

    @encryptation_folder_path.setter
    def encryptation_folder_path(self, encryptation_folder_path):
        """Sets the encryptation_folder_path of this APIDataIngestionModelAssetFromLanding.


        :param encryptation_folder_path: The encryptation_folder_path of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """

        self._encryptation_folder_path = encryptation_folder_path

    @property
    def encryptation_wasbs(self):
        """Gets the encryptation_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The encryptation_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._encryptation_wasbs

    @encryptation_wasbs.setter
    def encryptation_wasbs(self, encryptation_wasbs):
        """Sets the encryptation_wasbs of this APIDataIngestionModelAssetFromLanding.


        :param encryptation_wasbs: The encryptation_wasbs of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """

        self._encryptation_wasbs = encryptation_wasbs

    @property
    def asset_id(self):
        """Gets the asset_id of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The asset_id of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this APIDataIngestionModelAssetFromLanding.


        :param asset_id: The asset_id of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: int
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def asset_date(self):
        """Gets the asset_date of this APIDataIngestionModelAssetFromLanding.  # noqa: E501


        :return: The asset_date of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :rtype: str
        """
        return self._asset_date

    @asset_date.setter
    def asset_date(self, asset_date):
        """Sets the asset_date of this APIDataIngestionModelAssetFromLanding.


        :param asset_date: The asset_date of this APIDataIngestionModelAssetFromLanding.  # noqa: E501
        :type: str
        """

        self._asset_date = asset_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDataIngestionModelAssetFromLanding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDataIngestionModelAssetFromLanding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
