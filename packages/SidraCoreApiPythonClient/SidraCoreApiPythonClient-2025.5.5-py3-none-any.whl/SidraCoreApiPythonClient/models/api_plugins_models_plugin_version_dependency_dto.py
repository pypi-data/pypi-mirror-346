# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIPluginsModelsPluginVersionDependencyDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depends_on': 'str',
        'min_version_number': 'str',
        'max_version_number': 'str'
    }

    attribute_map = {
        'depends_on': 'dependsOn',
        'min_version_number': 'minVersionNumber',
        'max_version_number': 'maxVersionNumber'
    }

    def __init__(self, depends_on=None, min_version_number=None, max_version_number=None):  # noqa: E501
        """APIPluginsModelsPluginVersionDependencyDTO - a model defined in Swagger"""  # noqa: E501
        self._depends_on = None
        self._min_version_number = None
        self._max_version_number = None
        self.discriminator = None
        if depends_on is not None:
            self.depends_on = depends_on
        if min_version_number is not None:
            self.min_version_number = min_version_number
        if max_version_number is not None:
            self.max_version_number = max_version_number

    @property
    def depends_on(self):
        """Gets the depends_on of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501


        :return: The depends_on of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :rtype: str
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this APIPluginsModelsPluginVersionDependencyDTO.


        :param depends_on: The depends_on of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :type: str
        """

        self._depends_on = depends_on

    @property
    def min_version_number(self):
        """Gets the min_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501


        :return: The min_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :rtype: str
        """
        return self._min_version_number

    @min_version_number.setter
    def min_version_number(self, min_version_number):
        """Sets the min_version_number of this APIPluginsModelsPluginVersionDependencyDTO.


        :param min_version_number: The min_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :type: str
        """

        self._min_version_number = min_version_number

    @property
    def max_version_number(self):
        """Gets the max_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501


        :return: The max_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :rtype: str
        """
        return self._max_version_number

    @max_version_number.setter
    def max_version_number(self, max_version_number):
        """Sets the max_version_number of this APIPluginsModelsPluginVersionDependencyDTO.


        :param max_version_number: The max_version_number of this APIPluginsModelsPluginVersionDependencyDTO.  # noqa: E501
        :type: str
        """

        self._max_version_number = max_version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIPluginsModelsPluginVersionDependencyDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIPluginsModelsPluginVersionDependencyDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
