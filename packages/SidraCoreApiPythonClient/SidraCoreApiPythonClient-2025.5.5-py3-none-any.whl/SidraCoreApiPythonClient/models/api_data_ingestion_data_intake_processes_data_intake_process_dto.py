# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'name': 'str',
        'description': 'str',
        'id_provider': 'int',
        'id_plugin_version': 'str',
        'id_plugin': 'str',
        'last_execution_configuration': 'str',
        'is_removed': 'bool',
        'consolidation_mode': 'CommonModelOtherConsolidationMode'
    }

    attribute_map = {
        'item_id': 'itemId',
        'name': 'name',
        'description': 'description',
        'id_provider': 'idProvider',
        'id_plugin_version': 'idPluginVersion',
        'id_plugin': 'idPlugin',
        'last_execution_configuration': 'lastExecutionConfiguration',
        'is_removed': 'isRemoved',
        'consolidation_mode': 'consolidationMode'
    }

    def __init__(self, item_id=None, name=None, description=None, id_provider=None, id_plugin_version=None, id_plugin=None, last_execution_configuration=None, is_removed=None, consolidation_mode=None):  # noqa: E501
        """APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._name = None
        self._description = None
        self._id_provider = None
        self._id_plugin_version = None
        self._id_plugin = None
        self._last_execution_configuration = None
        self._is_removed = None
        self._consolidation_mode = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id_provider is not None:
            self.id_provider = id_provider
        if id_plugin_version is not None:
            self.id_plugin_version = id_plugin_version
        if id_plugin is not None:
            self.id_plugin = id_plugin
        if last_execution_configuration is not None:
            self.last_execution_configuration = last_execution_configuration
        if is_removed is not None:
            self.is_removed = is_removed
        if consolidation_mode is not None:
            self.consolidation_mode = consolidation_mode

    @property
    def item_id(self):
        """Gets the item_id of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The item_id of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param item_id: The item_id of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The name of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param name: The name of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The description of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param description: The description of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_provider(self):
        """Gets the id_provider of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The id_provider of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param id_provider: The id_provider of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_plugin_version(self):
        """Gets the id_plugin_version of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The id_plugin_version of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin_version

    @id_plugin_version.setter
    def id_plugin_version(self, id_plugin_version):
        """Sets the id_plugin_version of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param id_plugin_version: The id_plugin_version of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._id_plugin_version = id_plugin_version

    @property
    def id_plugin(self):
        """Gets the id_plugin of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The id_plugin of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin

    @id_plugin.setter
    def id_plugin(self, id_plugin):
        """Sets the id_plugin of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param id_plugin: The id_plugin of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._id_plugin = id_plugin

    @property
    def last_execution_configuration(self):
        """Gets the last_execution_configuration of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The last_execution_configuration of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_execution_configuration

    @last_execution_configuration.setter
    def last_execution_configuration(self, last_execution_configuration):
        """Sets the last_execution_configuration of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param last_execution_configuration: The last_execution_configuration of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: str
        """

        self._last_execution_configuration = last_execution_configuration

    @property
    def is_removed(self):
        """Gets the is_removed of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The is_removed of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param is_removed: The is_removed of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    @property
    def consolidation_mode(self):
        """Gets the consolidation_mode of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501


        :return: The consolidation_mode of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :rtype: CommonModelOtherConsolidationMode
        """
        return self._consolidation_mode

    @consolidation_mode.setter
    def consolidation_mode(self, consolidation_mode):
        """Sets the consolidation_mode of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.


        :param consolidation_mode: The consolidation_mode of this APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO.  # noqa: E501
        :type: CommonModelOtherConsolidationMode
        """

        self._consolidation_mode = consolidation_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDataIngestionDataIntakeProcessesDataIntakeProcessDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
