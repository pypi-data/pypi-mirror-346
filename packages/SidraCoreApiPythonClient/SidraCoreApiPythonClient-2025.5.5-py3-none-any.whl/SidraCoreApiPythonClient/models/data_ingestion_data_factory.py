# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionDataFactory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'resource_group': 'str',
        'pipelines': 'list[DataIngestionPipeline]',
        'triggers': 'list[DataIngestionTrigger]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'resource_group': 'resourceGroup',
        'pipelines': 'pipelines',
        'triggers': 'triggers'
    }

    def __init__(self, id=None, name=None, resource_group=None, pipelines=None, triggers=None):  # noqa: E501
        """DataIngestionDataFactory - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._resource_group = None
        self._pipelines = None
        self._triggers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_group is not None:
            self.resource_group = resource_group
        if pipelines is not None:
            self.pipelines = pipelines
        if triggers is not None:
            self.triggers = triggers

    @property
    def id(self):
        """Gets the id of this DataIngestionDataFactory.  # noqa: E501


        :return: The id of this DataIngestionDataFactory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionDataFactory.


        :param id: The id of this DataIngestionDataFactory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataIngestionDataFactory.  # noqa: E501


        :return: The name of this DataIngestionDataFactory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataIngestionDataFactory.


        :param name: The name of this DataIngestionDataFactory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_group(self):
        """Gets the resource_group of this DataIngestionDataFactory.  # noqa: E501


        :return: The resource_group of this DataIngestionDataFactory.  # noqa: E501
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this DataIngestionDataFactory.


        :param resource_group: The resource_group of this DataIngestionDataFactory.  # noqa: E501
        :type: str
        """

        self._resource_group = resource_group

    @property
    def pipelines(self):
        """Gets the pipelines of this DataIngestionDataFactory.  # noqa: E501


        :return: The pipelines of this DataIngestionDataFactory.  # noqa: E501
        :rtype: list[DataIngestionPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this DataIngestionDataFactory.


        :param pipelines: The pipelines of this DataIngestionDataFactory.  # noqa: E501
        :type: list[DataIngestionPipeline]
        """

        self._pipelines = pipelines

    @property
    def triggers(self):
        """Gets the triggers of this DataIngestionDataFactory.  # noqa: E501


        :return: The triggers of this DataIngestionDataFactory.  # noqa: E501
        :rtype: list[DataIngestionTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this DataIngestionDataFactory.


        :param triggers: The triggers of this DataIngestionDataFactory.  # noqa: E501
        :type: list[DataIngestionTrigger]
        """

        self._triggers = triggers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionDataFactory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionDataFactory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
