# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FabricCreateLakehouseResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_provider': 'int',
        'id_data_storage_unit': 'int',
        'database_name': 'str',
        'fabric_workspace_id': 'str',
        'fabric_lake_house_id': 'str'
    }

    attribute_map = {
        'id_provider': 'idProvider',
        'id_data_storage_unit': 'idDataStorageUnit',
        'database_name': 'databaseName',
        'fabric_workspace_id': 'fabricWorkspaceId',
        'fabric_lake_house_id': 'fabricLakeHouseId'
    }

    def __init__(self, id_provider=None, id_data_storage_unit=None, database_name=None, fabric_workspace_id=None, fabric_lake_house_id=None):  # noqa: E501
        """FabricCreateLakehouseResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id_provider = None
        self._id_data_storage_unit = None
        self._database_name = None
        self._fabric_workspace_id = None
        self._fabric_lake_house_id = None
        self.discriminator = None
        if id_provider is not None:
            self.id_provider = id_provider
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if database_name is not None:
            self.database_name = database_name
        if fabric_workspace_id is not None:
            self.fabric_workspace_id = fabric_workspace_id
        if fabric_lake_house_id is not None:
            self.fabric_lake_house_id = fabric_lake_house_id

    @property
    def id_provider(self):
        """Gets the id_provider of this FabricCreateLakehouseResponseDto.  # noqa: E501


        :return: The id_provider of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this FabricCreateLakehouseResponseDto.


        :param id_provider: The id_provider of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this FabricCreateLakehouseResponseDto.  # noqa: E501


        :return: The id_data_storage_unit of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this FabricCreateLakehouseResponseDto.


        :param id_data_storage_unit: The id_data_storage_unit of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def database_name(self):
        """Gets the database_name of this FabricCreateLakehouseResponseDto.  # noqa: E501


        :return: The database_name of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this FabricCreateLakehouseResponseDto.


        :param database_name: The database_name of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def fabric_workspace_id(self):
        """Gets the fabric_workspace_id of this FabricCreateLakehouseResponseDto.  # noqa: E501


        :return: The fabric_workspace_id of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._fabric_workspace_id

    @fabric_workspace_id.setter
    def fabric_workspace_id(self, fabric_workspace_id):
        """Sets the fabric_workspace_id of this FabricCreateLakehouseResponseDto.


        :param fabric_workspace_id: The fabric_workspace_id of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :type: str
        """

        self._fabric_workspace_id = fabric_workspace_id

    @property
    def fabric_lake_house_id(self):
        """Gets the fabric_lake_house_id of this FabricCreateLakehouseResponseDto.  # noqa: E501


        :return: The fabric_lake_house_id of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._fabric_lake_house_id

    @fabric_lake_house_id.setter
    def fabric_lake_house_id(self, fabric_lake_house_id):
        """Sets the fabric_lake_house_id of this FabricCreateLakehouseResponseDto.


        :param fabric_lake_house_id: The fabric_lake_house_id of this FabricCreateLakehouseResponseDto.  # noqa: E501
        :type: str
        """

        self._fabric_lake_house_id = fabric_lake_house_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FabricCreateLakehouseResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FabricCreateLakehouseResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
