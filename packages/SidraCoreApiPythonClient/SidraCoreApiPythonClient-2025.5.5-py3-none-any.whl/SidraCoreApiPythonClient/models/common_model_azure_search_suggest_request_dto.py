# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelAzureSearchSuggestRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_text': 'str',
        'suggester_name': 'str',
        'suggest_parameters': 'MicrosoftAzureSearchModelsSuggestParameters'
    }

    attribute_map = {
        'search_text': 'searchText',
        'suggester_name': 'suggesterName',
        'suggest_parameters': 'suggestParameters'
    }

    def __init__(self, search_text=None, suggester_name=None, suggest_parameters=None):  # noqa: E501
        """CommonModelAzureSearchSuggestRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._search_text = None
        self._suggester_name = None
        self._suggest_parameters = None
        self.discriminator = None
        if search_text is not None:
            self.search_text = search_text
        if suggester_name is not None:
            self.suggester_name = suggester_name
        if suggest_parameters is not None:
            self.suggest_parameters = suggest_parameters

    @property
    def search_text(self):
        """Gets the search_text of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501


        :return: The search_text of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this CommonModelAzureSearchSuggestRequestDTO.


        :param search_text: The search_text of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def suggester_name(self):
        """Gets the suggester_name of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501


        :return: The suggester_name of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._suggester_name

    @suggester_name.setter
    def suggester_name(self, suggester_name):
        """Sets the suggester_name of this CommonModelAzureSearchSuggestRequestDTO.


        :param suggester_name: The suggester_name of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :type: str
        """

        self._suggester_name = suggester_name

    @property
    def suggest_parameters(self):
        """Gets the suggest_parameters of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501


        :return: The suggest_parameters of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :rtype: MicrosoftAzureSearchModelsSuggestParameters
        """
        return self._suggest_parameters

    @suggest_parameters.setter
    def suggest_parameters(self, suggest_parameters):
        """Sets the suggest_parameters of this CommonModelAzureSearchSuggestRequestDTO.


        :param suggest_parameters: The suggest_parameters of this CommonModelAzureSearchSuggestRequestDTO.  # noqa: E501
        :type: MicrosoftAzureSearchModelsSuggestParameters
        """

        self._suggest_parameters = suggest_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelAzureSearchSuggestRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelAzureSearchSuggestRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
