# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIExternalLlagarReleaseNotesModelsBaseReleaseNotes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'str',
        'package_version': 'str',
        '_date': 'datetime',
        'description': 'str',
        'markdown': 'str',
        'short_markdown': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'package_version': 'packageVersion',
        '_date': 'date',
        'description': 'description',
        'markdown': 'markdown',
        'short_markdown': 'shortMarkdown'
    }

    def __init__(self, id=None, version=None, package_version=None, _date=None, description=None, markdown=None, short_markdown=None):  # noqa: E501
        """APIExternalLlagarReleaseNotesModelsBaseReleaseNotes - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._package_version = None
        self.__date = None
        self._description = None
        self._markdown = None
        self._short_markdown = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if package_version is not None:
            self.package_version = package_version
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if markdown is not None:
            self.markdown = markdown
        if short_markdown is not None:
            self.short_markdown = short_markdown

    @property
    def id(self):
        """Gets the id of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The id of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param id: The id of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param version: The version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def package_version(self):
        """Gets the package_version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The package_version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param package_version: The package_version of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._package_version = package_version

    @property
    def _date(self):
        """Gets the _date of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The _date of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param _date: The _date of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The description of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param description: The description of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def markdown(self):
        """Gets the markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param markdown: The markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._markdown = markdown

    @property
    def short_markdown(self):
        """Gets the short_markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501


        :return: The short_markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :rtype: str
        """
        return self._short_markdown

    @short_markdown.setter
    def short_markdown(self, short_markdown):
        """Sets the short_markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.


        :param short_markdown: The short_markdown of this APIExternalLlagarReleaseNotesModelsBaseReleaseNotes.  # noqa: E501
        :type: str
        """

        self._short_markdown = short_markdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIExternalLlagarReleaseNotesModelsBaseReleaseNotes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIExternalLlagarReleaseNotesModelsBaseReleaseNotes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
