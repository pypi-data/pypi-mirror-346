# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PIIModelsEntitiesForPIIDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_intake_process_name': 'str',
        'entities': 'list[PIIModelsEntityForPIIDto]',
        'total': 'int'
    }

    attribute_map = {
        'data_intake_process_name': 'dataIntakeProcessName',
        'entities': 'entities',
        'total': 'total'
    }

    def __init__(self, data_intake_process_name=None, entities=None, total=None):  # noqa: E501
        """PIIModelsEntitiesForPIIDto - a model defined in Swagger"""  # noqa: E501
        self._data_intake_process_name = None
        self._entities = None
        self._total = None
        self.discriminator = None
        if data_intake_process_name is not None:
            self.data_intake_process_name = data_intake_process_name
        if entities is not None:
            self.entities = entities
        if total is not None:
            self.total = total

    @property
    def data_intake_process_name(self):
        """Gets the data_intake_process_name of this PIIModelsEntitiesForPIIDto.  # noqa: E501


        :return: The data_intake_process_name of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :rtype: str
        """
        return self._data_intake_process_name

    @data_intake_process_name.setter
    def data_intake_process_name(self, data_intake_process_name):
        """Sets the data_intake_process_name of this PIIModelsEntitiesForPIIDto.


        :param data_intake_process_name: The data_intake_process_name of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :type: str
        """

        self._data_intake_process_name = data_intake_process_name

    @property
    def entities(self):
        """Gets the entities of this PIIModelsEntitiesForPIIDto.  # noqa: E501


        :return: The entities of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :rtype: list[PIIModelsEntityForPIIDto]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this PIIModelsEntitiesForPIIDto.


        :param entities: The entities of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :type: list[PIIModelsEntityForPIIDto]
        """

        self._entities = entities

    @property
    def total(self):
        """Gets the total of this PIIModelsEntitiesForPIIDto.  # noqa: E501


        :return: The total of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PIIModelsEntitiesForPIIDto.


        :param total: The total of this PIIModelsEntitiesForPIIDto.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PIIModelsEntitiesForPIIDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PIIModelsEntitiesForPIIDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
