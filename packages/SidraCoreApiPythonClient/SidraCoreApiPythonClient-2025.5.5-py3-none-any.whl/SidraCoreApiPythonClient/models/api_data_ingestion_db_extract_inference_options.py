# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDataIngestionDBExtractInferenceOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_item_id': 'str',
        'db_types_file': 'str',
        'db_types': 'list[APIDataIngestionModelSqlDataTypeDto]',
        'provider_item_id': 'str',
        'store': 'bool',
        'file_name_style': 'APIDataIngestionModelFileNameSuffixStyle',
        'default_schema': 'str',
        'qualified_table_name_format': 'str',
        'enable_custom_table_name_prefix': 'bool',
        'custom_table_name_prefix': 'str',
        'data_type_max_size': 'int',
        'connector_id': 'str',
        'connector_version': 'str',
        'server_name': 'str',
        'database_name': 'str',
        'assets_are_folders': 'bool'
    }

    attribute_map = {
        'pipeline_item_id': 'pipelineItemId',
        'db_types_file': 'dbTypesFile',
        'db_types': 'dbTypes',
        'provider_item_id': 'providerItemId',
        'store': 'store',
        'file_name_style': 'fileNameStyle',
        'default_schema': 'defaultSchema',
        'qualified_table_name_format': 'qualifiedTableNameFormat',
        'enable_custom_table_name_prefix': 'enableCustomTableNamePrefix',
        'custom_table_name_prefix': 'customTableNamePrefix',
        'data_type_max_size': 'dataTypeMaxSize',
        'connector_id': 'connectorId',
        'connector_version': 'connectorVersion',
        'server_name': 'serverName',
        'database_name': 'databaseName',
        'assets_are_folders': 'assetsAreFolders'
    }

    def __init__(self, pipeline_item_id=None, db_types_file=None, db_types=None, provider_item_id=None, store=None, file_name_style=None, default_schema=None, qualified_table_name_format=None, enable_custom_table_name_prefix=None, custom_table_name_prefix=None, data_type_max_size=None, connector_id=None, connector_version=None, server_name=None, database_name=None, assets_are_folders=None):  # noqa: E501
        """APIDataIngestionDBExtractInferenceOptions - a model defined in Swagger"""  # noqa: E501
        self._pipeline_item_id = None
        self._db_types_file = None
        self._db_types = None
        self._provider_item_id = None
        self._store = None
        self._file_name_style = None
        self._default_schema = None
        self._qualified_table_name_format = None
        self._enable_custom_table_name_prefix = None
        self._custom_table_name_prefix = None
        self._data_type_max_size = None
        self._connector_id = None
        self._connector_version = None
        self._server_name = None
        self._database_name = None
        self._assets_are_folders = None
        self.discriminator = None
        if pipeline_item_id is not None:
            self.pipeline_item_id = pipeline_item_id
        if db_types_file is not None:
            self.db_types_file = db_types_file
        if db_types is not None:
            self.db_types = db_types
        if provider_item_id is not None:
            self.provider_item_id = provider_item_id
        if store is not None:
            self.store = store
        if file_name_style is not None:
            self.file_name_style = file_name_style
        if default_schema is not None:
            self.default_schema = default_schema
        if qualified_table_name_format is not None:
            self.qualified_table_name_format = qualified_table_name_format
        if enable_custom_table_name_prefix is not None:
            self.enable_custom_table_name_prefix = enable_custom_table_name_prefix
        if custom_table_name_prefix is not None:
            self.custom_table_name_prefix = custom_table_name_prefix
        if data_type_max_size is not None:
            self.data_type_max_size = data_type_max_size
        if connector_id is not None:
            self.connector_id = connector_id
        if connector_version is not None:
            self.connector_version = connector_version
        if server_name is not None:
            self.server_name = server_name
        if database_name is not None:
            self.database_name = database_name
        if assets_are_folders is not None:
            self.assets_are_folders = assets_are_folders

    @property
    def pipeline_item_id(self):
        """Gets the pipeline_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The pipeline_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_item_id

    @pipeline_item_id.setter
    def pipeline_item_id(self, pipeline_item_id):
        """Sets the pipeline_item_id of this APIDataIngestionDBExtractInferenceOptions.


        :param pipeline_item_id: The pipeline_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._pipeline_item_id = pipeline_item_id

    @property
    def db_types_file(self):
        """Gets the db_types_file of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The db_types_file of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._db_types_file

    @db_types_file.setter
    def db_types_file(self, db_types_file):
        """Sets the db_types_file of this APIDataIngestionDBExtractInferenceOptions.


        :param db_types_file: The db_types_file of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._db_types_file = db_types_file

    @property
    def db_types(self):
        """Gets the db_types of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The db_types of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: list[APIDataIngestionModelSqlDataTypeDto]
        """
        return self._db_types

    @db_types.setter
    def db_types(self, db_types):
        """Sets the db_types of this APIDataIngestionDBExtractInferenceOptions.


        :param db_types: The db_types of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: list[APIDataIngestionModelSqlDataTypeDto]
        """

        self._db_types = db_types

    @property
    def provider_item_id(self):
        """Gets the provider_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The provider_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._provider_item_id

    @provider_item_id.setter
    def provider_item_id(self, provider_item_id):
        """Sets the provider_item_id of this APIDataIngestionDBExtractInferenceOptions.


        :param provider_item_id: The provider_item_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._provider_item_id = provider_item_id

    @property
    def store(self):
        """Gets the store of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The store of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this APIDataIngestionDBExtractInferenceOptions.


        :param store: The store of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: bool
        """

        self._store = store

    @property
    def file_name_style(self):
        """Gets the file_name_style of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The file_name_style of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: APIDataIngestionModelFileNameSuffixStyle
        """
        return self._file_name_style

    @file_name_style.setter
    def file_name_style(self, file_name_style):
        """Sets the file_name_style of this APIDataIngestionDBExtractInferenceOptions.


        :param file_name_style: The file_name_style of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: APIDataIngestionModelFileNameSuffixStyle
        """

        self._file_name_style = file_name_style

    @property
    def default_schema(self):
        """Gets the default_schema of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The default_schema of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_schema

    @default_schema.setter
    def default_schema(self, default_schema):
        """Sets the default_schema of this APIDataIngestionDBExtractInferenceOptions.


        :param default_schema: The default_schema of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._default_schema = default_schema

    @property
    def qualified_table_name_format(self):
        """Gets the qualified_table_name_format of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The qualified_table_name_format of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._qualified_table_name_format

    @qualified_table_name_format.setter
    def qualified_table_name_format(self, qualified_table_name_format):
        """Sets the qualified_table_name_format of this APIDataIngestionDBExtractInferenceOptions.


        :param qualified_table_name_format: The qualified_table_name_format of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._qualified_table_name_format = qualified_table_name_format

    @property
    def enable_custom_table_name_prefix(self):
        """Gets the enable_custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The enable_custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_custom_table_name_prefix

    @enable_custom_table_name_prefix.setter
    def enable_custom_table_name_prefix(self, enable_custom_table_name_prefix):
        """Sets the enable_custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.


        :param enable_custom_table_name_prefix: The enable_custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: bool
        """

        self._enable_custom_table_name_prefix = enable_custom_table_name_prefix

    @property
    def custom_table_name_prefix(self):
        """Gets the custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._custom_table_name_prefix

    @custom_table_name_prefix.setter
    def custom_table_name_prefix(self, custom_table_name_prefix):
        """Sets the custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.


        :param custom_table_name_prefix: The custom_table_name_prefix of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._custom_table_name_prefix = custom_table_name_prefix

    @property
    def data_type_max_size(self):
        """Gets the data_type_max_size of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The data_type_max_size of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: int
        """
        return self._data_type_max_size

    @data_type_max_size.setter
    def data_type_max_size(self, data_type_max_size):
        """Sets the data_type_max_size of this APIDataIngestionDBExtractInferenceOptions.


        :param data_type_max_size: The data_type_max_size of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: int
        """

        self._data_type_max_size = data_type_max_size

    @property
    def connector_id(self):
        """Gets the connector_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The connector_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this APIDataIngestionDBExtractInferenceOptions.


        :param connector_id: The connector_id of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def connector_version(self):
        """Gets the connector_version of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The connector_version of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this APIDataIngestionDBExtractInferenceOptions.


        :param connector_version: The connector_version of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._connector_version = connector_version

    @property
    def server_name(self):
        """Gets the server_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The server_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this APIDataIngestionDBExtractInferenceOptions.


        :param server_name: The server_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def database_name(self):
        """Gets the database_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The database_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this APIDataIngestionDBExtractInferenceOptions.


        :param database_name: The database_name of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def assets_are_folders(self):
        """Gets the assets_are_folders of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501


        :return: The assets_are_folders of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :rtype: bool
        """
        return self._assets_are_folders

    @assets_are_folders.setter
    def assets_are_folders(self, assets_are_folders):
        """Sets the assets_are_folders of this APIDataIngestionDBExtractInferenceOptions.


        :param assets_are_folders: The assets_are_folders of this APIDataIngestionDBExtractInferenceOptions.  # noqa: E501
        :type: bool
        """

        self._assets_are_folders = assets_are_folders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDataIngestionDBExtractInferenceOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDataIngestionDBExtractInferenceOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
