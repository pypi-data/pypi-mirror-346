# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelDataStoragUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'resource_group_name': 'str',
        'region': 'str',
        'region_id': 'str',
        'location': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'stored_volume': 'int',
        'description': 'str',
        'detail': 'str',
        'icon_url': 'str',
        'total_entities': 'int',
        'total_providers': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'resource_group_name': 'resourceGroupName',
        'region': 'region',
        'region_id': 'regionId',
        'location': 'location',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'stored_volume': 'storedVolume',
        'description': 'description',
        'detail': 'detail',
        'icon_url': 'iconURL',
        'total_entities': 'totalEntities',
        'total_providers': 'totalProviders'
    }

    def __init__(self, id=None, name=None, resource_group_name=None, region=None, region_id=None, location=None, longitude=None, latitude=None, stored_volume=None, description=None, detail=None, icon_url=None, total_entities=None, total_providers=None):  # noqa: E501
        """CommonModelDataStoragUnit - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._resource_group_name = None
        self._region = None
        self._region_id = None
        self._location = None
        self._longitude = None
        self._latitude = None
        self._stored_volume = None
        self._description = None
        self._detail = None
        self._icon_url = None
        self._total_entities = None
        self._total_providers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_group_name is not None:
            self.resource_group_name = resource_group_name
        if region is not None:
            self.region = region
        if region_id is not None:
            self.region_id = region_id
        if location is not None:
            self.location = location
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if stored_volume is not None:
            self.stored_volume = stored_volume
        if description is not None:
            self.description = description
        if detail is not None:
            self.detail = detail
        if icon_url is not None:
            self.icon_url = icon_url
        if total_entities is not None:
            self.total_entities = total_entities
        if total_providers is not None:
            self.total_providers = total_providers

    @property
    def id(self):
        """Gets the id of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The id of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonModelDataStoragUnit.


        :param id: The id of this CommonModelDataStoragUnit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The name of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonModelDataStoragUnit.


        :param name: The name of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The resource_group_name of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this CommonModelDataStoragUnit.


        :param resource_group_name: The resource_group_name of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._resource_group_name = resource_group_name

    @property
    def region(self):
        """Gets the region of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The region of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CommonModelDataStoragUnit.


        :param region: The region of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_id(self):
        """Gets the region_id of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The region_id of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this CommonModelDataStoragUnit.


        :param region_id: The region_id of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def location(self):
        """Gets the location of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The location of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CommonModelDataStoragUnit.


        :param location: The location of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def longitude(self):
        """Gets the longitude of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The longitude of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CommonModelDataStoragUnit.


        :param longitude: The longitude of this CommonModelDataStoragUnit.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The latitude of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CommonModelDataStoragUnit.


        :param latitude: The latitude of this CommonModelDataStoragUnit.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def stored_volume(self):
        """Gets the stored_volume of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The stored_volume of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: int
        """
        return self._stored_volume

    @stored_volume.setter
    def stored_volume(self, stored_volume):
        """Sets the stored_volume of this CommonModelDataStoragUnit.


        :param stored_volume: The stored_volume of this CommonModelDataStoragUnit.  # noqa: E501
        :type: int
        """

        self._stored_volume = stored_volume

    @property
    def description(self):
        """Gets the description of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The description of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonModelDataStoragUnit.


        :param description: The description of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The detail of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this CommonModelDataStoragUnit.


        :param detail: The detail of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def icon_url(self):
        """Gets the icon_url of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The icon_url of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this CommonModelDataStoragUnit.


        :param icon_url: The icon_url of this CommonModelDataStoragUnit.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def total_entities(self):
        """Gets the total_entities of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The total_entities of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: int
        """
        return self._total_entities

    @total_entities.setter
    def total_entities(self, total_entities):
        """Sets the total_entities of this CommonModelDataStoragUnit.


        :param total_entities: The total_entities of this CommonModelDataStoragUnit.  # noqa: E501
        :type: int
        """

        self._total_entities = total_entities

    @property
    def total_providers(self):
        """Gets the total_providers of this CommonModelDataStoragUnit.  # noqa: E501


        :return: The total_providers of this CommonModelDataStoragUnit.  # noqa: E501
        :rtype: int
        """
        return self._total_providers

    @total_providers.setter
    def total_providers(self, total_providers):
        """Sets the total_providers of this CommonModelDataStoragUnit.


        :param total_providers: The total_providers of this CommonModelDataStoragUnit.  # noqa: E501
        :type: int
        """

        self._total_providers = total_providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelDataStoragUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelDataStoragUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
