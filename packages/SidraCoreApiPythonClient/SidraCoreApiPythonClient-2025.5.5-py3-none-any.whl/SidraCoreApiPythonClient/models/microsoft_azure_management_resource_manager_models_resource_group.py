# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementResourceManagerModelsResourceGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'properties': 'MicrosoftAzureManagementResourceManagerModelsResourceGroupProperties',
        'location': 'str',
        'managed_by': 'str',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'properties': 'properties',
        'location': 'location',
        'managed_by': 'managedBy',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, type=None, properties=None, location=None, managed_by=None, tags=None):  # noqa: E501
        """MicrosoftAzureManagementResourceManagerModelsResourceGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._properties = None
        self._location = None
        self._managed_by = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if properties is not None:
            self.properties = properties
        if location is not None:
            self.location = location
        if managed_by is not None:
            self.managed_by = managed_by
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The id of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param id: The id of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The name of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param name: The name of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The type of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param type: The type of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def properties(self):
        """Gets the properties of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The properties of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: MicrosoftAzureManagementResourceManagerModelsResourceGroupProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param properties: The properties of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: MicrosoftAzureManagementResourceManagerModelsResourceGroupProperties
        """

        self._properties = properties

    @property
    def location(self):
        """Gets the location of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The location of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param location: The location of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def managed_by(self):
        """Gets the managed_by of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The managed_by of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param managed_by: The managed_by of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def tags(self):
        """Gets the tags of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501


        :return: The tags of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.


        :param tags: The tags of this MicrosoftAzureManagementResourceManagerModelsResourceGroup.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementResourceManagerModelsResourceGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementResourceManagerModelsResourceGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
