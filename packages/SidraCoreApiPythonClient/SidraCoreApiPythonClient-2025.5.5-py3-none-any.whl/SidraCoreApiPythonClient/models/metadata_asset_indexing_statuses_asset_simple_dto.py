# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataAssetIndexingStatusesAssetSimpleDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_entity': 'int',
        'id_data_storage_unit': 'int',
        'id_provider': 'int',
        'asset_name': 'str',
        'asset_date': 'datetime',
        'last_updated': 'datetime',
        'notes': 'str',
        'source_path': 'str',
        'destination_path': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_entity': 'idEntity',
        'id_data_storage_unit': 'idDataStorageUnit',
        'id_provider': 'idProvider',
        'asset_name': 'assetName',
        'asset_date': 'assetDate',
        'last_updated': 'lastUpdated',
        'notes': 'notes',
        'source_path': 'sourcePath',
        'destination_path': 'destinationPath'
    }

    def __init__(self, id=None, id_entity=None, id_data_storage_unit=None, id_provider=None, asset_name=None, asset_date=None, last_updated=None, notes=None, source_path=None, destination_path=None):  # noqa: E501
        """MetadataAssetIndexingStatusesAssetSimpleDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_entity = None
        self._id_data_storage_unit = None
        self._id_provider = None
        self._asset_name = None
        self._asset_date = None
        self._last_updated = None
        self._notes = None
        self._source_path = None
        self._destination_path = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_entity is not None:
            self.id_entity = id_entity
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if id_provider is not None:
            self.id_provider = id_provider
        if asset_name is not None:
            self.asset_name = asset_name
        if asset_date is not None:
            self.asset_date = asset_date
        if last_updated is not None:
            self.last_updated = last_updated
        if notes is not None:
            self.notes = notes
        if source_path is not None:
            self.source_path = source_path
        if destination_path is not None:
            self.destination_path = destination_path

    @property
    def id(self):
        """Gets the id of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The id of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param id: The id of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_entity(self):
        """Gets the id_entity of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The id_entity of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param id_entity: The id_entity of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The id_data_storage_unit of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param id_data_storage_unit: The id_data_storage_unit of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The id_provider of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param id_provider: The id_provider of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def asset_name(self):
        """Gets the asset_name of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The asset_name of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param asset_name: The asset_name of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def asset_date(self):
        """Gets the asset_date of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The asset_date of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._asset_date

    @asset_date.setter
    def asset_date(self, asset_date):
        """Sets the asset_date of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param asset_date: The asset_date of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: datetime
        """

        self._asset_date = asset_date

    @property
    def last_updated(self):
        """Gets the last_updated of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The last_updated of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param last_updated: The last_updated of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def notes(self):
        """Gets the notes of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The notes of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param notes: The notes of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def source_path(self):
        """Gets the source_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The source_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param source_path: The source_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def destination_path(self):
        """Gets the destination_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501


        :return: The destination_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :rtype: str
        """
        return self._destination_path

    @destination_path.setter
    def destination_path(self, destination_path):
        """Sets the destination_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.


        :param destination_path: The destination_path of this MetadataAssetIndexingStatusesAssetSimpleDTO.  # noqa: E501
        :type: str
        """

        self._destination_path = destination_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataAssetIndexingStatusesAssetSimpleDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataAssetIndexingStatusesAssetSimpleDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
