# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationHubPermissionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topics': 'list[str]',
        'subject': 'str',
        'can_send': 'bool',
        'can_listen': 'bool',
        'can_manage': 'bool'
    }

    attribute_map = {
        'topics': 'topics',
        'subject': 'subject',
        'can_send': 'canSend',
        'can_listen': 'canListen',
        'can_manage': 'canManage'
    }

    def __init__(self, topics=None, subject=None, can_send=None, can_listen=None, can_manage=None):  # noqa: E501
        """IntegrationHubPermissionRequest - a model defined in Swagger"""  # noqa: E501
        self._topics = None
        self._subject = None
        self._can_send = None
        self._can_listen = None
        self._can_manage = None
        self.discriminator = None
        if topics is not None:
            self.topics = topics
        if subject is not None:
            self.subject = subject
        if can_send is not None:
            self.can_send = can_send
        if can_listen is not None:
            self.can_listen = can_listen
        if can_manage is not None:
            self.can_manage = can_manage

    @property
    def topics(self):
        """Gets the topics of this IntegrationHubPermissionRequest.  # noqa: E501


        :return: The topics of this IntegrationHubPermissionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this IntegrationHubPermissionRequest.


        :param topics: The topics of this IntegrationHubPermissionRequest.  # noqa: E501
        :type: list[str]
        """

        self._topics = topics

    @property
    def subject(self):
        """Gets the subject of this IntegrationHubPermissionRequest.  # noqa: E501


        :return: The subject of this IntegrationHubPermissionRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this IntegrationHubPermissionRequest.


        :param subject: The subject of this IntegrationHubPermissionRequest.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def can_send(self):
        """Gets the can_send of this IntegrationHubPermissionRequest.  # noqa: E501


        :return: The can_send of this IntegrationHubPermissionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._can_send

    @can_send.setter
    def can_send(self, can_send):
        """Sets the can_send of this IntegrationHubPermissionRequest.


        :param can_send: The can_send of this IntegrationHubPermissionRequest.  # noqa: E501
        :type: bool
        """

        self._can_send = can_send

    @property
    def can_listen(self):
        """Gets the can_listen of this IntegrationHubPermissionRequest.  # noqa: E501


        :return: The can_listen of this IntegrationHubPermissionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._can_listen

    @can_listen.setter
    def can_listen(self, can_listen):
        """Sets the can_listen of this IntegrationHubPermissionRequest.


        :param can_listen: The can_listen of this IntegrationHubPermissionRequest.  # noqa: E501
        :type: bool
        """

        self._can_listen = can_listen

    @property
    def can_manage(self):
        """Gets the can_manage of this IntegrationHubPermissionRequest.  # noqa: E501


        :return: The can_manage of this IntegrationHubPermissionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage

    @can_manage.setter
    def can_manage(self, can_manage):
        """Sets the can_manage of this IntegrationHubPermissionRequest.


        :param can_manage: The can_manage of this IntegrationHubPermissionRequest.  # noqa: E501
        :type: bool
        """

        self._can_manage = can_manage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationHubPermissionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationHubPermissionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
