# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIDataIngestionModelSqlDataTypeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tabl_e_schema': 'str',
        'tabl_e_name': 'str',
        'colum_n_name': 'str',
        'dat_a_type': 'str',
        'numeri_c_precision': 'int',
        'numeri_c_scale': 'int',
        'characte_r_maximum_length': 'int',
        'datetim_e_precision': 'int',
        'ordina_l_position': 'int',
        'i_s_nullable': 'bool',
        'i_s_pk': 'bool'
    }

    attribute_map = {
        'tabl_e_schema': 'tablE_SCHEMA',
        'tabl_e_name': 'tablE_NAME',
        'colum_n_name': 'columN_NAME',
        'dat_a_type': 'datA_TYPE',
        'numeri_c_precision': 'numeriC_PRECISION',
        'numeri_c_scale': 'numeriC_SCALE',
        'characte_r_maximum_length': 'characteR_MAXIMUM_LENGTH',
        'datetim_e_precision': 'datetimE_PRECISION',
        'ordina_l_position': 'ordinaL_POSITION',
        'i_s_nullable': 'iS_NULLABLE',
        'i_s_pk': 'iS_PK'
    }

    def __init__(self, tabl_e_schema=None, tabl_e_name=None, colum_n_name=None, dat_a_type=None, numeri_c_precision=None, numeri_c_scale=None, characte_r_maximum_length=None, datetim_e_precision=None, ordina_l_position=None, i_s_nullable=None, i_s_pk=None):  # noqa: E501
        """APIDataIngestionModelSqlDataTypeDto - a model defined in Swagger"""  # noqa: E501
        self._tabl_e_schema = None
        self._tabl_e_name = None
        self._colum_n_name = None
        self._dat_a_type = None
        self._numeri_c_precision = None
        self._numeri_c_scale = None
        self._characte_r_maximum_length = None
        self._datetim_e_precision = None
        self._ordina_l_position = None
        self._i_s_nullable = None
        self._i_s_pk = None
        self.discriminator = None
        if tabl_e_schema is not None:
            self.tabl_e_schema = tabl_e_schema
        if tabl_e_name is not None:
            self.tabl_e_name = tabl_e_name
        if colum_n_name is not None:
            self.colum_n_name = colum_n_name
        if dat_a_type is not None:
            self.dat_a_type = dat_a_type
        if numeri_c_precision is not None:
            self.numeri_c_precision = numeri_c_precision
        if numeri_c_scale is not None:
            self.numeri_c_scale = numeri_c_scale
        if characte_r_maximum_length is not None:
            self.characte_r_maximum_length = characte_r_maximum_length
        if datetim_e_precision is not None:
            self.datetim_e_precision = datetim_e_precision
        if ordina_l_position is not None:
            self.ordina_l_position = ordina_l_position
        if i_s_nullable is not None:
            self.i_s_nullable = i_s_nullable
        if i_s_pk is not None:
            self.i_s_pk = i_s_pk

    @property
    def tabl_e_schema(self):
        """Gets the tabl_e_schema of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The tabl_e_schema of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._tabl_e_schema

    @tabl_e_schema.setter
    def tabl_e_schema(self, tabl_e_schema):
        """Sets the tabl_e_schema of this APIDataIngestionModelSqlDataTypeDto.


        :param tabl_e_schema: The tabl_e_schema of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: str
        """

        self._tabl_e_schema = tabl_e_schema

    @property
    def tabl_e_name(self):
        """Gets the tabl_e_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The tabl_e_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._tabl_e_name

    @tabl_e_name.setter
    def tabl_e_name(self, tabl_e_name):
        """Sets the tabl_e_name of this APIDataIngestionModelSqlDataTypeDto.


        :param tabl_e_name: The tabl_e_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: str
        """

        self._tabl_e_name = tabl_e_name

    @property
    def colum_n_name(self):
        """Gets the colum_n_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The colum_n_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._colum_n_name

    @colum_n_name.setter
    def colum_n_name(self, colum_n_name):
        """Sets the colum_n_name of this APIDataIngestionModelSqlDataTypeDto.


        :param colum_n_name: The colum_n_name of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: str
        """

        self._colum_n_name = colum_n_name

    @property
    def dat_a_type(self):
        """Gets the dat_a_type of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The dat_a_type of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._dat_a_type

    @dat_a_type.setter
    def dat_a_type(self, dat_a_type):
        """Sets the dat_a_type of this APIDataIngestionModelSqlDataTypeDto.


        :param dat_a_type: The dat_a_type of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: str
        """

        self._dat_a_type = dat_a_type

    @property
    def numeri_c_precision(self):
        """Gets the numeri_c_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The numeri_c_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._numeri_c_precision

    @numeri_c_precision.setter
    def numeri_c_precision(self, numeri_c_precision):
        """Sets the numeri_c_precision of this APIDataIngestionModelSqlDataTypeDto.


        :param numeri_c_precision: The numeri_c_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: int
        """

        self._numeri_c_precision = numeri_c_precision

    @property
    def numeri_c_scale(self):
        """Gets the numeri_c_scale of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The numeri_c_scale of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._numeri_c_scale

    @numeri_c_scale.setter
    def numeri_c_scale(self, numeri_c_scale):
        """Sets the numeri_c_scale of this APIDataIngestionModelSqlDataTypeDto.


        :param numeri_c_scale: The numeri_c_scale of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: int
        """

        self._numeri_c_scale = numeri_c_scale

    @property
    def characte_r_maximum_length(self):
        """Gets the characte_r_maximum_length of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The characte_r_maximum_length of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._characte_r_maximum_length

    @characte_r_maximum_length.setter
    def characte_r_maximum_length(self, characte_r_maximum_length):
        """Sets the characte_r_maximum_length of this APIDataIngestionModelSqlDataTypeDto.


        :param characte_r_maximum_length: The characte_r_maximum_length of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: int
        """

        self._characte_r_maximum_length = characte_r_maximum_length

    @property
    def datetim_e_precision(self):
        """Gets the datetim_e_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The datetim_e_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._datetim_e_precision

    @datetim_e_precision.setter
    def datetim_e_precision(self, datetim_e_precision):
        """Sets the datetim_e_precision of this APIDataIngestionModelSqlDataTypeDto.


        :param datetim_e_precision: The datetim_e_precision of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: int
        """

        self._datetim_e_precision = datetim_e_precision

    @property
    def ordina_l_position(self):
        """Gets the ordina_l_position of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The ordina_l_position of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._ordina_l_position

    @ordina_l_position.setter
    def ordina_l_position(self, ordina_l_position):
        """Sets the ordina_l_position of this APIDataIngestionModelSqlDataTypeDto.


        :param ordina_l_position: The ordina_l_position of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: int
        """

        self._ordina_l_position = ordina_l_position

    @property
    def i_s_nullable(self):
        """Gets the i_s_nullable of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The i_s_nullable of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: bool
        """
        return self._i_s_nullable

    @i_s_nullable.setter
    def i_s_nullable(self, i_s_nullable):
        """Sets the i_s_nullable of this APIDataIngestionModelSqlDataTypeDto.


        :param i_s_nullable: The i_s_nullable of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: bool
        """

        self._i_s_nullable = i_s_nullable

    @property
    def i_s_pk(self):
        """Gets the i_s_pk of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501


        :return: The i_s_pk of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :rtype: bool
        """
        return self._i_s_pk

    @i_s_pk.setter
    def i_s_pk(self, i_s_pk):
        """Sets the i_s_pk of this APIDataIngestionModelSqlDataTypeDto.


        :param i_s_pk: The i_s_pk of this APIDataIngestionModelSqlDataTypeDto.  # noqa: E501
        :type: bool
        """

        self._i_s_pk = i_s_pk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDataIngestionModelSqlDataTypeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDataIngestionModelSqlDataTypeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
