# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionPipeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'name': 'str',
        'valid_from': 'datetime',
        'valid_until': 'datetime',
        'id_template': 'int',
        'last_updated': 'datetime',
        'last_deployed': 'datetime',
        'id_data_factory': 'int',
        'is_removed': 'bool',
        'parameters': 'str',
        'id_data_intake_process': 'int',
        'data_intake_process': 'DataIngestionDataIntakeProcess',
        'data_factory': 'DataIngestionDataFactory',
        'pipeline_template': 'DataIngestionPipelineTemplate',
        'triggers': 'list[DataIngestionTriggerPipeline]',
        'asset_indexing_status': 'list[DataIngestionAssetIndexingStatus]',
        'entities': 'list[DataIngestionEntityPipeline]'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'name': 'name',
        'valid_from': 'validFrom',
        'valid_until': 'validUntil',
        'id_template': 'idTemplate',
        'last_updated': 'lastUpdated',
        'last_deployed': 'lastDeployed',
        'id_data_factory': 'idDataFactory',
        'is_removed': 'isRemoved',
        'parameters': 'parameters',
        'id_data_intake_process': 'idDataIntakeProcess',
        'data_intake_process': 'dataIntakeProcess',
        'data_factory': 'dataFactory',
        'pipeline_template': 'pipelineTemplate',
        'triggers': 'triggers',
        'asset_indexing_status': 'assetIndexingStatus',
        'entities': 'entities'
    }

    def __init__(self, id=None, item_id=None, name=None, valid_from=None, valid_until=None, id_template=None, last_updated=None, last_deployed=None, id_data_factory=None, is_removed=None, parameters=None, id_data_intake_process=None, data_intake_process=None, data_factory=None, pipeline_template=None, triggers=None, asset_indexing_status=None, entities=None):  # noqa: E501
        """DataIngestionPipeline - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._name = None
        self._valid_from = None
        self._valid_until = None
        self._id_template = None
        self._last_updated = None
        self._last_deployed = None
        self._id_data_factory = None
        self._is_removed = None
        self._parameters = None
        self._id_data_intake_process = None
        self._data_intake_process = None
        self._data_factory = None
        self._pipeline_template = None
        self._triggers = None
        self._asset_indexing_status = None
        self._entities = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if id_template is not None:
            self.id_template = id_template
        if last_updated is not None:
            self.last_updated = last_updated
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if id_data_factory is not None:
            self.id_data_factory = id_data_factory
        if is_removed is not None:
            self.is_removed = is_removed
        if parameters is not None:
            self.parameters = parameters
        if id_data_intake_process is not None:
            self.id_data_intake_process = id_data_intake_process
        if data_intake_process is not None:
            self.data_intake_process = data_intake_process
        if data_factory is not None:
            self.data_factory = data_factory
        if pipeline_template is not None:
            self.pipeline_template = pipeline_template
        if triggers is not None:
            self.triggers = triggers
        if asset_indexing_status is not None:
            self.asset_indexing_status = asset_indexing_status
        if entities is not None:
            self.entities = entities

    @property
    def id(self):
        """Gets the id of this DataIngestionPipeline.  # noqa: E501


        :return: The id of this DataIngestionPipeline.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionPipeline.


        :param id: The id of this DataIngestionPipeline.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this DataIngestionPipeline.  # noqa: E501


        :return: The item_id of this DataIngestionPipeline.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this DataIngestionPipeline.


        :param item_id: The item_id of this DataIngestionPipeline.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this DataIngestionPipeline.  # noqa: E501


        :return: The name of this DataIngestionPipeline.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataIngestionPipeline.


        :param name: The name of this DataIngestionPipeline.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def valid_from(self):
        """Gets the valid_from of this DataIngestionPipeline.  # noqa: E501


        :return: The valid_from of this DataIngestionPipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this DataIngestionPipeline.


        :param valid_from: The valid_from of this DataIngestionPipeline.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this DataIngestionPipeline.  # noqa: E501


        :return: The valid_until of this DataIngestionPipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this DataIngestionPipeline.


        :param valid_until: The valid_until of this DataIngestionPipeline.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def id_template(self):
        """Gets the id_template of this DataIngestionPipeline.  # noqa: E501


        :return: The id_template of this DataIngestionPipeline.  # noqa: E501
        :rtype: int
        """
        return self._id_template

    @id_template.setter
    def id_template(self, id_template):
        """Sets the id_template of this DataIngestionPipeline.


        :param id_template: The id_template of this DataIngestionPipeline.  # noqa: E501
        :type: int
        """

        self._id_template = id_template

    @property
    def last_updated(self):
        """Gets the last_updated of this DataIngestionPipeline.  # noqa: E501


        :return: The last_updated of this DataIngestionPipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DataIngestionPipeline.


        :param last_updated: The last_updated of this DataIngestionPipeline.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_deployed(self):
        """Gets the last_deployed of this DataIngestionPipeline.  # noqa: E501


        :return: The last_deployed of this DataIngestionPipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this DataIngestionPipeline.


        :param last_deployed: The last_deployed of this DataIngestionPipeline.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def id_data_factory(self):
        """Gets the id_data_factory of this DataIngestionPipeline.  # noqa: E501


        :return: The id_data_factory of this DataIngestionPipeline.  # noqa: E501
        :rtype: int
        """
        return self._id_data_factory

    @id_data_factory.setter
    def id_data_factory(self, id_data_factory):
        """Sets the id_data_factory of this DataIngestionPipeline.


        :param id_data_factory: The id_data_factory of this DataIngestionPipeline.  # noqa: E501
        :type: int
        """

        self._id_data_factory = id_data_factory

    @property
    def is_removed(self):
        """Gets the is_removed of this DataIngestionPipeline.  # noqa: E501


        :return: The is_removed of this DataIngestionPipeline.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this DataIngestionPipeline.


        :param is_removed: The is_removed of this DataIngestionPipeline.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    @property
    def parameters(self):
        """Gets the parameters of this DataIngestionPipeline.  # noqa: E501


        :return: The parameters of this DataIngestionPipeline.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DataIngestionPipeline.


        :param parameters: The parameters of this DataIngestionPipeline.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def id_data_intake_process(self):
        """Gets the id_data_intake_process of this DataIngestionPipeline.  # noqa: E501


        :return: The id_data_intake_process of this DataIngestionPipeline.  # noqa: E501
        :rtype: int
        """
        return self._id_data_intake_process

    @id_data_intake_process.setter
    def id_data_intake_process(self, id_data_intake_process):
        """Sets the id_data_intake_process of this DataIngestionPipeline.


        :param id_data_intake_process: The id_data_intake_process of this DataIngestionPipeline.  # noqa: E501
        :type: int
        """

        self._id_data_intake_process = id_data_intake_process

    @property
    def data_intake_process(self):
        """Gets the data_intake_process of this DataIngestionPipeline.  # noqa: E501


        :return: The data_intake_process of this DataIngestionPipeline.  # noqa: E501
        :rtype: DataIngestionDataIntakeProcess
        """
        return self._data_intake_process

    @data_intake_process.setter
    def data_intake_process(self, data_intake_process):
        """Sets the data_intake_process of this DataIngestionPipeline.


        :param data_intake_process: The data_intake_process of this DataIngestionPipeline.  # noqa: E501
        :type: DataIngestionDataIntakeProcess
        """

        self._data_intake_process = data_intake_process

    @property
    def data_factory(self):
        """Gets the data_factory of this DataIngestionPipeline.  # noqa: E501


        :return: The data_factory of this DataIngestionPipeline.  # noqa: E501
        :rtype: DataIngestionDataFactory
        """
        return self._data_factory

    @data_factory.setter
    def data_factory(self, data_factory):
        """Sets the data_factory of this DataIngestionPipeline.


        :param data_factory: The data_factory of this DataIngestionPipeline.  # noqa: E501
        :type: DataIngestionDataFactory
        """

        self._data_factory = data_factory

    @property
    def pipeline_template(self):
        """Gets the pipeline_template of this DataIngestionPipeline.  # noqa: E501


        :return: The pipeline_template of this DataIngestionPipeline.  # noqa: E501
        :rtype: DataIngestionPipelineTemplate
        """
        return self._pipeline_template

    @pipeline_template.setter
    def pipeline_template(self, pipeline_template):
        """Sets the pipeline_template of this DataIngestionPipeline.


        :param pipeline_template: The pipeline_template of this DataIngestionPipeline.  # noqa: E501
        :type: DataIngestionPipelineTemplate
        """

        self._pipeline_template = pipeline_template

    @property
    def triggers(self):
        """Gets the triggers of this DataIngestionPipeline.  # noqa: E501


        :return: The triggers of this DataIngestionPipeline.  # noqa: E501
        :rtype: list[DataIngestionTriggerPipeline]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this DataIngestionPipeline.


        :param triggers: The triggers of this DataIngestionPipeline.  # noqa: E501
        :type: list[DataIngestionTriggerPipeline]
        """

        self._triggers = triggers

    @property
    def asset_indexing_status(self):
        """Gets the asset_indexing_status of this DataIngestionPipeline.  # noqa: E501


        :return: The asset_indexing_status of this DataIngestionPipeline.  # noqa: E501
        :rtype: list[DataIngestionAssetIndexingStatus]
        """
        return self._asset_indexing_status

    @asset_indexing_status.setter
    def asset_indexing_status(self, asset_indexing_status):
        """Sets the asset_indexing_status of this DataIngestionPipeline.


        :param asset_indexing_status: The asset_indexing_status of this DataIngestionPipeline.  # noqa: E501
        :type: list[DataIngestionAssetIndexingStatus]
        """

        self._asset_indexing_status = asset_indexing_status

    @property
    def entities(self):
        """Gets the entities of this DataIngestionPipeline.  # noqa: E501


        :return: The entities of this DataIngestionPipeline.  # noqa: E501
        :rtype: list[DataIngestionEntityPipeline]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this DataIngestionPipeline.


        :param entities: The entities of this DataIngestionPipeline.  # noqa: E501
        :type: list[DataIngestionEntityPipeline]
        """

        self._entities = entities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionPipeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionPipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
