# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsEncryptionServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blob': 'MicrosoftAzureManagementStorageModelsEncryptionService',
        'file': 'MicrosoftAzureManagementStorageModelsEncryptionService',
        'table': 'MicrosoftAzureManagementStorageModelsEncryptionService',
        'queue': 'MicrosoftAzureManagementStorageModelsEncryptionService'
    }

    attribute_map = {
        'blob': 'blob',
        'file': 'file',
        'table': 'table',
        'queue': 'queue'
    }

    def __init__(self, blob=None, file=None, table=None, queue=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsEncryptionServices - a model defined in Swagger"""  # noqa: E501
        self._blob = None
        self._file = None
        self._table = None
        self._queue = None
        self.discriminator = None
        if blob is not None:
            self.blob = blob
        if file is not None:
            self.file = file
        if table is not None:
            self.table = table
        if queue is not None:
            self.queue = queue

    @property
    def blob(self):
        """Gets the blob of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501


        :return: The blob of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionService
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this MicrosoftAzureManagementStorageModelsEncryptionServices.


        :param blob: The blob of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionService
        """

        self._blob = blob

    @property
    def file(self):
        """Gets the file of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501


        :return: The file of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionService
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this MicrosoftAzureManagementStorageModelsEncryptionServices.


        :param file: The file of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionService
        """

        self._file = file

    @property
    def table(self):
        """Gets the table of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501


        :return: The table of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionService
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this MicrosoftAzureManagementStorageModelsEncryptionServices.


        :param table: The table of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionService
        """

        self._table = table

    @property
    def queue(self):
        """Gets the queue of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501


        :return: The queue of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :rtype: MicrosoftAzureManagementStorageModelsEncryptionService
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this MicrosoftAzureManagementStorageModelsEncryptionServices.


        :param queue: The queue of this MicrosoftAzureManagementStorageModelsEncryptionServices.  # noqa: E501
        :type: MicrosoftAzureManagementStorageModelsEncryptionService
        """

        self._queue = queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsEncryptionServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsEncryptionServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
