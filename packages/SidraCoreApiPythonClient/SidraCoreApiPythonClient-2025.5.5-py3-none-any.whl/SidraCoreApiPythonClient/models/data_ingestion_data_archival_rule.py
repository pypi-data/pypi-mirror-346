# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionDataArchivalRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'rule': 'str',
        'action_type': 'DataIngestionDataArchivalRuleActionTypeEnum',
        'id_entity': 'int',
        'entity': 'DataIngestionEntity'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'rule': 'rule',
        'action_type': 'actionType',
        'id_entity': 'idEntity',
        'entity': 'entity'
    }

    def __init__(self, id=None, item_id=None, rule=None, action_type=None, id_entity=None, entity=None):  # noqa: E501
        """DataIngestionDataArchivalRule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._rule = None
        self._action_type = None
        self._id_entity = None
        self._entity = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if rule is not None:
            self.rule = rule
        if action_type is not None:
            self.action_type = action_type
        if id_entity is not None:
            self.id_entity = id_entity
        if entity is not None:
            self.entity = entity

    @property
    def id(self):
        """Gets the id of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The id of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionDataArchivalRule.


        :param id: The id of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The item_id of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this DataIngestionDataArchivalRule.


        :param item_id: The item_id of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def rule(self):
        """Gets the rule of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The rule of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this DataIngestionDataArchivalRule.


        :param rule: The rule of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def action_type(self):
        """Gets the action_type of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The action_type of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: DataIngestionDataArchivalRuleActionTypeEnum
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this DataIngestionDataArchivalRule.


        :param action_type: The action_type of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: DataIngestionDataArchivalRuleActionTypeEnum
        """

        self._action_type = action_type

    @property
    def id_entity(self):
        """Gets the id_entity of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The id_entity of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataIngestionDataArchivalRule.


        :param id_entity: The id_entity of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def entity(self):
        """Gets the entity of this DataIngestionDataArchivalRule.  # noqa: E501


        :return: The entity of this DataIngestionDataArchivalRule.  # noqa: E501
        :rtype: DataIngestionEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this DataIngestionDataArchivalRule.


        :param entity: The entity of this DataIngestionDataArchivalRule.  # noqa: E501
        :type: DataIngestionEntity
        """

        self._entity = entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionDataArchivalRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionDataArchivalRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
