# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureDatabricksClientModelsAzureAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_on_demand': 'int',
        'availability': 'MicrosoftAzureDatabricksClientModelsAzureAvailability',
        'spot_bid_max_price': 'float'
    }

    attribute_map = {
        'first_on_demand': 'firstOnDemand',
        'availability': 'availability',
        'spot_bid_max_price': 'spotBidMaxPrice'
    }

    def __init__(self, first_on_demand=None, availability=None, spot_bid_max_price=None):  # noqa: E501
        """MicrosoftAzureDatabricksClientModelsAzureAttributes - a model defined in Swagger"""  # noqa: E501
        self._first_on_demand = None
        self._availability = None
        self._spot_bid_max_price = None
        self.discriminator = None
        if first_on_demand is not None:
            self.first_on_demand = first_on_demand
        if availability is not None:
            self.availability = availability
        if spot_bid_max_price is not None:
            self.spot_bid_max_price = spot_bid_max_price

    @property
    def first_on_demand(self):
        """Gets the first_on_demand of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501


        :return: The first_on_demand of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :rtype: int
        """
        return self._first_on_demand

    @first_on_demand.setter
    def first_on_demand(self, first_on_demand):
        """Sets the first_on_demand of this MicrosoftAzureDatabricksClientModelsAzureAttributes.


        :param first_on_demand: The first_on_demand of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :type: int
        """

        self._first_on_demand = first_on_demand

    @property
    def availability(self):
        """Gets the availability of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501


        :return: The availability of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientModelsAzureAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this MicrosoftAzureDatabricksClientModelsAzureAttributes.


        :param availability: The availability of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientModelsAzureAvailability
        """

        self._availability = availability

    @property
    def spot_bid_max_price(self):
        """Gets the spot_bid_max_price of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501


        :return: The spot_bid_max_price of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :rtype: float
        """
        return self._spot_bid_max_price

    @spot_bid_max_price.setter
    def spot_bid_max_price(self, spot_bid_max_price):
        """Sets the spot_bid_max_price of this MicrosoftAzureDatabricksClientModelsAzureAttributes.


        :param spot_bid_max_price: The spot_bid_max_price of this MicrosoftAzureDatabricksClientModelsAzureAttributes.  # noqa: E501
        :type: float
        """

        self._spot_bid_max_price = spot_bid_max_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureDatabricksClientModelsAzureAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureDatabricksClientModelsAzureAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
