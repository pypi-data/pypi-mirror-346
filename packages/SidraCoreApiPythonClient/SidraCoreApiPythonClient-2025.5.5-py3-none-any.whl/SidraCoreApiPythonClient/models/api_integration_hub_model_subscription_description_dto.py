# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIIntegrationHubModelSubscriptionDescriptionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'subscription_name': 'str',
        'topic_path': 'str',
        'requires_session': 'bool',
        'max_delivery_count': 'int',
        'enable_dead_lettering_on_filter_evaluation_exceptions': 'bool',
        'enable_dead_lettering_on_message_expiration': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'subscription_name': 'subscriptionName',
        'topic_path': 'topicPath',
        'requires_session': 'requiresSession',
        'max_delivery_count': 'maxDeliveryCount',
        'enable_dead_lettering_on_filter_evaluation_exceptions': 'enableDeadLetteringOnFilterEvaluationExceptions',
        'enable_dead_lettering_on_message_expiration': 'enableDeadLetteringOnMessageExpiration'
    }

    def __init__(self, status=None, subscription_name=None, topic_path=None, requires_session=None, max_delivery_count=None, enable_dead_lettering_on_filter_evaluation_exceptions=None, enable_dead_lettering_on_message_expiration=None):  # noqa: E501
        """APIIntegrationHubModelSubscriptionDescriptionDto - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._subscription_name = None
        self._topic_path = None
        self._requires_session = None
        self._max_delivery_count = None
        self._enable_dead_lettering_on_filter_evaluation_exceptions = None
        self._enable_dead_lettering_on_message_expiration = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if topic_path is not None:
            self.topic_path = topic_path
        if requires_session is not None:
            self.requires_session = requires_session
        if max_delivery_count is not None:
            self.max_delivery_count = max_delivery_count
        if enable_dead_lettering_on_filter_evaluation_exceptions is not None:
            self.enable_dead_lettering_on_filter_evaluation_exceptions = enable_dead_lettering_on_filter_evaluation_exceptions
        if enable_dead_lettering_on_message_expiration is not None:
            self.enable_dead_lettering_on_message_expiration = enable_dead_lettering_on_message_expiration

    @property
    def status(self):
        """Gets the status of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The status of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param status: The status of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscription_name(self):
        """Gets the subscription_name of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The subscription_name of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param subscription_name: The subscription_name of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def topic_path(self):
        """Gets the topic_path of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The topic_path of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._topic_path

    @topic_path.setter
    def topic_path(self, topic_path):
        """Sets the topic_path of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param topic_path: The topic_path of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: str
        """

        self._topic_path = topic_path

    @property
    def requires_session(self):
        """Gets the requires_session of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The requires_session of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._requires_session

    @requires_session.setter
    def requires_session(self, requires_session):
        """Sets the requires_session of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param requires_session: The requires_session of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: bool
        """

        self._requires_session = requires_session

    @property
    def max_delivery_count(self):
        """Gets the max_delivery_count of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The max_delivery_count of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: int
        """
        return self._max_delivery_count

    @max_delivery_count.setter
    def max_delivery_count(self, max_delivery_count):
        """Sets the max_delivery_count of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param max_delivery_count: The max_delivery_count of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: int
        """

        self._max_delivery_count = max_delivery_count

    @property
    def enable_dead_lettering_on_filter_evaluation_exceptions(self):
        """Gets the enable_dead_lettering_on_filter_evaluation_exceptions of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The enable_dead_lettering_on_filter_evaluation_exceptions of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dead_lettering_on_filter_evaluation_exceptions

    @enable_dead_lettering_on_filter_evaluation_exceptions.setter
    def enable_dead_lettering_on_filter_evaluation_exceptions(self, enable_dead_lettering_on_filter_evaluation_exceptions):
        """Sets the enable_dead_lettering_on_filter_evaluation_exceptions of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param enable_dead_lettering_on_filter_evaluation_exceptions: The enable_dead_lettering_on_filter_evaluation_exceptions of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: bool
        """

        self._enable_dead_lettering_on_filter_evaluation_exceptions = enable_dead_lettering_on_filter_evaluation_exceptions

    @property
    def enable_dead_lettering_on_message_expiration(self):
        """Gets the enable_dead_lettering_on_message_expiration of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501


        :return: The enable_dead_lettering_on_message_expiration of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dead_lettering_on_message_expiration

    @enable_dead_lettering_on_message_expiration.setter
    def enable_dead_lettering_on_message_expiration(self, enable_dead_lettering_on_message_expiration):
        """Sets the enable_dead_lettering_on_message_expiration of this APIIntegrationHubModelSubscriptionDescriptionDto.


        :param enable_dead_lettering_on_message_expiration: The enable_dead_lettering_on_message_expiration of this APIIntegrationHubModelSubscriptionDescriptionDto.  # noqa: E501
        :type: bool
        """

        self._enable_dead_lettering_on_message_expiration = enable_dead_lettering_on_message_expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIIntegrationHubModelSubscriptionDescriptionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIIntegrationHubModelSubscriptionDescriptionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
