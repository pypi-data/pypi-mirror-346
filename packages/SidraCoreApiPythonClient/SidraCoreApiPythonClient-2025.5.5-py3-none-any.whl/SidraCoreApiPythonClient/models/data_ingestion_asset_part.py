# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionAssetPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_asset': 'int',
        'asset': 'DataIngestionAsset',
        'asset_part_name': 'str',
        'parent_security_path': 'str',
        'security_path': 'str',
        'id_entity': 'int',
        'id_provider': 'int',
        'id_data_storage_unit': 'int',
        'parent_type': 'str',
        'parent_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'id_asset': 'idAsset',
        'asset': 'asset',
        'asset_part_name': 'assetPartName',
        'parent_security_path': 'parentSecurityPath',
        'security_path': 'securityPath',
        'id_entity': 'idEntity',
        'id_provider': 'idProvider',
        'id_data_storage_unit': 'idDataStorageUnit',
        'parent_type': 'parentType',
        'parent_id': 'parentId'
    }

    def __init__(self, id=None, id_asset=None, asset=None, asset_part_name=None, parent_security_path=None, security_path=None, id_entity=None, id_provider=None, id_data_storage_unit=None, parent_type=None, parent_id=None):  # noqa: E501
        """DataIngestionAssetPart - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_asset = None
        self._asset = None
        self._asset_part_name = None
        self._parent_security_path = None
        self._security_path = None
        self._id_entity = None
        self._id_provider = None
        self._id_data_storage_unit = None
        self._parent_type = None
        self._parent_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_asset is not None:
            self.id_asset = id_asset
        if asset is not None:
            self.asset = asset
        if asset_part_name is not None:
            self.asset_part_name = asset_part_name
        if parent_security_path is not None:
            self.parent_security_path = parent_security_path
        if security_path is not None:
            self.security_path = security_path
        if id_entity is not None:
            self.id_entity = id_entity
        if id_provider is not None:
            self.id_provider = id_provider
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if parent_type is not None:
            self.parent_type = parent_type
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this DataIngestionAssetPart.  # noqa: E501


        :return: The id of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionAssetPart.


        :param id: The id of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_asset(self):
        """Gets the id_asset of this DataIngestionAssetPart.  # noqa: E501


        :return: The id_asset of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._id_asset

    @id_asset.setter
    def id_asset(self, id_asset):
        """Sets the id_asset of this DataIngestionAssetPart.


        :param id_asset: The id_asset of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._id_asset = id_asset

    @property
    def asset(self):
        """Gets the asset of this DataIngestionAssetPart.  # noqa: E501


        :return: The asset of this DataIngestionAssetPart.  # noqa: E501
        :rtype: DataIngestionAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DataIngestionAssetPart.


        :param asset: The asset of this DataIngestionAssetPart.  # noqa: E501
        :type: DataIngestionAsset
        """

        self._asset = asset

    @property
    def asset_part_name(self):
        """Gets the asset_part_name of this DataIngestionAssetPart.  # noqa: E501


        :return: The asset_part_name of this DataIngestionAssetPart.  # noqa: E501
        :rtype: str
        """
        return self._asset_part_name

    @asset_part_name.setter
    def asset_part_name(self, asset_part_name):
        """Sets the asset_part_name of this DataIngestionAssetPart.


        :param asset_part_name: The asset_part_name of this DataIngestionAssetPart.  # noqa: E501
        :type: str
        """

        self._asset_part_name = asset_part_name

    @property
    def parent_security_path(self):
        """Gets the parent_security_path of this DataIngestionAssetPart.  # noqa: E501


        :return: The parent_security_path of this DataIngestionAssetPart.  # noqa: E501
        :rtype: str
        """
        return self._parent_security_path

    @parent_security_path.setter
    def parent_security_path(self, parent_security_path):
        """Sets the parent_security_path of this DataIngestionAssetPart.


        :param parent_security_path: The parent_security_path of this DataIngestionAssetPart.  # noqa: E501
        :type: str
        """

        self._parent_security_path = parent_security_path

    @property
    def security_path(self):
        """Gets the security_path of this DataIngestionAssetPart.  # noqa: E501


        :return: The security_path of this DataIngestionAssetPart.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this DataIngestionAssetPart.


        :param security_path: The security_path of this DataIngestionAssetPart.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def id_entity(self):
        """Gets the id_entity of this DataIngestionAssetPart.  # noqa: E501


        :return: The id_entity of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataIngestionAssetPart.


        :param id_entity: The id_entity of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def id_provider(self):
        """Gets the id_provider of this DataIngestionAssetPart.  # noqa: E501


        :return: The id_provider of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this DataIngestionAssetPart.


        :param id_provider: The id_provider of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this DataIngestionAssetPart.  # noqa: E501


        :return: The id_data_storage_unit of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this DataIngestionAssetPart.


        :param id_data_storage_unit: The id_data_storage_unit of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def parent_type(self):
        """Gets the parent_type of this DataIngestionAssetPart.  # noqa: E501


        :return: The parent_type of this DataIngestionAssetPart.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this DataIngestionAssetPart.


        :param parent_type: The parent_type of this DataIngestionAssetPart.  # noqa: E501
        :type: str
        """

        self._parent_type = parent_type

    @property
    def parent_id(self):
        """Gets the parent_id of this DataIngestionAssetPart.  # noqa: E501


        :return: The parent_id of this DataIngestionAssetPart.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this DataIngestionAssetPart.


        :param parent_id: The parent_id of this DataIngestionAssetPart.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionAssetPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionAssetPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
