# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelMetadataAttributeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_entity': 'int',
        'name': 'str',
        'hive_type': 'str',
        'max_len': 'int',
        'is_nullable': 'bool',
        'need_trim': 'bool',
        'remove_quotes': 'bool',
        'replaced_text': 'str',
        'replacement_text': 'str',
        'special_format': 'str',
        'treat_empty_as_null': 'bool',
        'is_primary_key': 'bool',
        'is_calculated': 'bool',
        'order': 'int',
        'is_metadata': 'bool',
        'is_partition_column': 'bool',
        'validation_text': 'str',
        'sql_type': 'str',
        'source_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_entity': 'idEntity',
        'name': 'name',
        'hive_type': 'hiveType',
        'max_len': 'maxLen',
        'is_nullable': 'isNullable',
        'need_trim': 'needTrim',
        'remove_quotes': 'removeQuotes',
        'replaced_text': 'replacedText',
        'replacement_text': 'replacementText',
        'special_format': 'specialFormat',
        'treat_empty_as_null': 'treatEmptyAsNull',
        'is_primary_key': 'isPrimaryKey',
        'is_calculated': 'isCalculated',
        'order': 'order',
        'is_metadata': 'isMetadata',
        'is_partition_column': 'isPartitionColumn',
        'validation_text': 'validationText',
        'sql_type': 'sqlType',
        'source_type': 'sourceType'
    }

    def __init__(self, id=None, id_entity=None, name=None, hive_type=None, max_len=None, is_nullable=None, need_trim=None, remove_quotes=None, replaced_text=None, replacement_text=None, special_format=None, treat_empty_as_null=None, is_primary_key=None, is_calculated=None, order=None, is_metadata=None, is_partition_column=None, validation_text=None, sql_type=None, source_type=None):  # noqa: E501
        """CommonModelMetadataAttributeResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_entity = None
        self._name = None
        self._hive_type = None
        self._max_len = None
        self._is_nullable = None
        self._need_trim = None
        self._remove_quotes = None
        self._replaced_text = None
        self._replacement_text = None
        self._special_format = None
        self._treat_empty_as_null = None
        self._is_primary_key = None
        self._is_calculated = None
        self._order = None
        self._is_metadata = None
        self._is_partition_column = None
        self._validation_text = None
        self._sql_type = None
        self._source_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_entity is not None:
            self.id_entity = id_entity
        if name is not None:
            self.name = name
        if hive_type is not None:
            self.hive_type = hive_type
        if max_len is not None:
            self.max_len = max_len
        if is_nullable is not None:
            self.is_nullable = is_nullable
        if need_trim is not None:
            self.need_trim = need_trim
        if remove_quotes is not None:
            self.remove_quotes = remove_quotes
        if replaced_text is not None:
            self.replaced_text = replaced_text
        if replacement_text is not None:
            self.replacement_text = replacement_text
        if special_format is not None:
            self.special_format = special_format
        if treat_empty_as_null is not None:
            self.treat_empty_as_null = treat_empty_as_null
        if is_primary_key is not None:
            self.is_primary_key = is_primary_key
        if is_calculated is not None:
            self.is_calculated = is_calculated
        if order is not None:
            self.order = order
        if is_metadata is not None:
            self.is_metadata = is_metadata
        if is_partition_column is not None:
            self.is_partition_column = is_partition_column
        if validation_text is not None:
            self.validation_text = validation_text
        if sql_type is not None:
            self.sql_type = sql_type
        if source_type is not None:
            self.source_type = source_type

    @property
    def id(self):
        """Gets the id of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The id of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonModelMetadataAttributeResponse.


        :param id: The id of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_entity(self):
        """Gets the id_entity of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The id_entity of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this CommonModelMetadataAttributeResponse.


        :param id_entity: The id_entity of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def name(self):
        """Gets the name of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The name of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonModelMetadataAttributeResponse.


        :param name: The name of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hive_type(self):
        """Gets the hive_type of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The hive_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._hive_type

    @hive_type.setter
    def hive_type(self, hive_type):
        """Sets the hive_type of this CommonModelMetadataAttributeResponse.


        :param hive_type: The hive_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._hive_type = hive_type

    @property
    def max_len(self):
        """Gets the max_len of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The max_len of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_len

    @max_len.setter
    def max_len(self, max_len):
        """Sets the max_len of this CommonModelMetadataAttributeResponse.


        :param max_len: The max_len of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: int
        """

        self._max_len = max_len

    @property
    def is_nullable(self):
        """Gets the is_nullable of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The is_nullable of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """Sets the is_nullable of this CommonModelMetadataAttributeResponse.


        :param is_nullable: The is_nullable of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._is_nullable = is_nullable

    @property
    def need_trim(self):
        """Gets the need_trim of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The need_trim of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._need_trim

    @need_trim.setter
    def need_trim(self, need_trim):
        """Sets the need_trim of this CommonModelMetadataAttributeResponse.


        :param need_trim: The need_trim of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._need_trim = need_trim

    @property
    def remove_quotes(self):
        """Gets the remove_quotes of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The remove_quotes of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._remove_quotes

    @remove_quotes.setter
    def remove_quotes(self, remove_quotes):
        """Sets the remove_quotes of this CommonModelMetadataAttributeResponse.


        :param remove_quotes: The remove_quotes of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._remove_quotes = remove_quotes

    @property
    def replaced_text(self):
        """Gets the replaced_text of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The replaced_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._replaced_text

    @replaced_text.setter
    def replaced_text(self, replaced_text):
        """Sets the replaced_text of this CommonModelMetadataAttributeResponse.


        :param replaced_text: The replaced_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._replaced_text = replaced_text

    @property
    def replacement_text(self):
        """Gets the replacement_text of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The replacement_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._replacement_text

    @replacement_text.setter
    def replacement_text(self, replacement_text):
        """Sets the replacement_text of this CommonModelMetadataAttributeResponse.


        :param replacement_text: The replacement_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._replacement_text = replacement_text

    @property
    def special_format(self):
        """Gets the special_format of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The special_format of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._special_format

    @special_format.setter
    def special_format(self, special_format):
        """Sets the special_format of this CommonModelMetadataAttributeResponse.


        :param special_format: The special_format of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._special_format = special_format

    @property
    def treat_empty_as_null(self):
        """Gets the treat_empty_as_null of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The treat_empty_as_null of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._treat_empty_as_null

    @treat_empty_as_null.setter
    def treat_empty_as_null(self, treat_empty_as_null):
        """Sets the treat_empty_as_null of this CommonModelMetadataAttributeResponse.


        :param treat_empty_as_null: The treat_empty_as_null of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._treat_empty_as_null = treat_empty_as_null

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The is_primary_key of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this CommonModelMetadataAttributeResponse.


        :param is_primary_key: The is_primary_key of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def is_calculated(self):
        """Gets the is_calculated of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The is_calculated of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_calculated

    @is_calculated.setter
    def is_calculated(self, is_calculated):
        """Sets the is_calculated of this CommonModelMetadataAttributeResponse.


        :param is_calculated: The is_calculated of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._is_calculated = is_calculated

    @property
    def order(self):
        """Gets the order of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The order of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CommonModelMetadataAttributeResponse.


        :param order: The order of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def is_metadata(self):
        """Gets the is_metadata of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The is_metadata of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_metadata

    @is_metadata.setter
    def is_metadata(self, is_metadata):
        """Sets the is_metadata of this CommonModelMetadataAttributeResponse.


        :param is_metadata: The is_metadata of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._is_metadata = is_metadata

    @property
    def is_partition_column(self):
        """Gets the is_partition_column of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The is_partition_column of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_partition_column

    @is_partition_column.setter
    def is_partition_column(self, is_partition_column):
        """Sets the is_partition_column of this CommonModelMetadataAttributeResponse.


        :param is_partition_column: The is_partition_column of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: bool
        """

        self._is_partition_column = is_partition_column

    @property
    def validation_text(self):
        """Gets the validation_text of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The validation_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._validation_text

    @validation_text.setter
    def validation_text(self, validation_text):
        """Sets the validation_text of this CommonModelMetadataAttributeResponse.


        :param validation_text: The validation_text of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._validation_text = validation_text

    @property
    def sql_type(self):
        """Gets the sql_type of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The sql_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._sql_type

    @sql_type.setter
    def sql_type(self, sql_type):
        """Sets the sql_type of this CommonModelMetadataAttributeResponse.


        :param sql_type: The sql_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._sql_type = sql_type

    @property
    def source_type(self):
        """Gets the source_type of this CommonModelMetadataAttributeResponse.  # noqa: E501


        :return: The source_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CommonModelMetadataAttributeResponse.


        :param source_type: The source_type of this CommonModelMetadataAttributeResponse.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelMetadataAttributeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelMetadataAttributeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
