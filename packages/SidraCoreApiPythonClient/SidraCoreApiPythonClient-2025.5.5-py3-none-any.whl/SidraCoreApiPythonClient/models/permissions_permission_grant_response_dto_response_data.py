# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionsPermissionGrantResponseDtoResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_id': 'int',
        'security_path': 'str',
        'can_read': 'bool',
        'can_write': 'bool',
        'can_delete': 'bool',
        'filter': 'str',
        'filter_typed': 'list[PermissionsPermissionGrantResponseDtoResponseDataFiltering]'
    }

    attribute_map = {
        'element_id': 'elementId',
        'security_path': 'securityPath',
        'can_read': 'canRead',
        'can_write': 'canWrite',
        'can_delete': 'canDelete',
        'filter': 'filter',
        'filter_typed': 'filterTyped'
    }

    def __init__(self, element_id=None, security_path=None, can_read=None, can_write=None, can_delete=None, filter=None, filter_typed=None):  # noqa: E501
        """PermissionsPermissionGrantResponseDtoResponseData - a model defined in Swagger"""  # noqa: E501
        self._element_id = None
        self._security_path = None
        self._can_read = None
        self._can_write = None
        self._can_delete = None
        self._filter = None
        self._filter_typed = None
        self.discriminator = None
        if element_id is not None:
            self.element_id = element_id
        if security_path is not None:
            self.security_path = security_path
        if can_read is not None:
            self.can_read = can_read
        if can_write is not None:
            self.can_write = can_write
        if can_delete is not None:
            self.can_delete = can_delete
        if filter is not None:
            self.filter = filter
        if filter_typed is not None:
            self.filter_typed = filter_typed

    @property
    def element_id(self):
        """Gets the element_id of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The element_id of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: int
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this PermissionsPermissionGrantResponseDtoResponseData.


        :param element_id: The element_id of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: int
        """

        self._element_id = element_id

    @property
    def security_path(self):
        """Gets the security_path of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The security_path of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this PermissionsPermissionGrantResponseDtoResponseData.


        :param security_path: The security_path of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def can_read(self):
        """Gets the can_read of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The can_read of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this PermissionsPermissionGrantResponseDtoResponseData.


        :param can_read: The can_read of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: bool
        """

        self._can_read = can_read

    @property
    def can_write(self):
        """Gets the can_write of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The can_write of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write):
        """Sets the can_write of this PermissionsPermissionGrantResponseDtoResponseData.


        :param can_write: The can_write of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: bool
        """

        self._can_write = can_write

    @property
    def can_delete(self):
        """Gets the can_delete of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The can_delete of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this PermissionsPermissionGrantResponseDtoResponseData.


        :param can_delete: The can_delete of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def filter(self):
        """Gets the filter of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The filter of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PermissionsPermissionGrantResponseDtoResponseData.


        :param filter: The filter of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def filter_typed(self):
        """Gets the filter_typed of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501


        :return: The filter_typed of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :rtype: list[PermissionsPermissionGrantResponseDtoResponseDataFiltering]
        """
        return self._filter_typed

    @filter_typed.setter
    def filter_typed(self, filter_typed):
        """Sets the filter_typed of this PermissionsPermissionGrantResponseDtoResponseData.


        :param filter_typed: The filter_typed of this PermissionsPermissionGrantResponseDtoResponseData.  # noqa: E501
        :type: list[PermissionsPermissionGrantResponseDtoResponseDataFiltering]
        """

        self._filter_typed = filter_typed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionsPermissionGrantResponseDtoResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionsPermissionGrantResponseDtoResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
