# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionEntityTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_entity': 'int',
        'id_tag': 'int',
        'id_tag_type': 'SharedTagTypeEnum',
        'tag_type': 'SharedTagType',
        'entity': 'DataIngestionEntity',
        'tag': 'DataIngestionTag'
    }

    attribute_map = {
        'id_entity': 'idEntity',
        'id_tag': 'idTag',
        'id_tag_type': 'idTagType',
        'tag_type': 'tagType',
        'entity': 'entity',
        'tag': 'tag'
    }

    def __init__(self, id_entity=None, id_tag=None, id_tag_type=None, tag_type=None, entity=None, tag=None):  # noqa: E501
        """DataIngestionEntityTag - a model defined in Swagger"""  # noqa: E501
        self._id_entity = None
        self._id_tag = None
        self._id_tag_type = None
        self._tag_type = None
        self._entity = None
        self._tag = None
        self.discriminator = None
        if id_entity is not None:
            self.id_entity = id_entity
        if id_tag is not None:
            self.id_tag = id_tag
        if id_tag_type is not None:
            self.id_tag_type = id_tag_type
        if tag_type is not None:
            self.tag_type = tag_type
        if entity is not None:
            self.entity = entity
        if tag is not None:
            self.tag = tag

    @property
    def id_entity(self):
        """Gets the id_entity of this DataIngestionEntityTag.  # noqa: E501


        :return: The id_entity of this DataIngestionEntityTag.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this DataIngestionEntityTag.


        :param id_entity: The id_entity of this DataIngestionEntityTag.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def id_tag(self):
        """Gets the id_tag of this DataIngestionEntityTag.  # noqa: E501


        :return: The id_tag of this DataIngestionEntityTag.  # noqa: E501
        :rtype: int
        """
        return self._id_tag

    @id_tag.setter
    def id_tag(self, id_tag):
        """Sets the id_tag of this DataIngestionEntityTag.


        :param id_tag: The id_tag of this DataIngestionEntityTag.  # noqa: E501
        :type: int
        """

        self._id_tag = id_tag

    @property
    def id_tag_type(self):
        """Gets the id_tag_type of this DataIngestionEntityTag.  # noqa: E501


        :return: The id_tag_type of this DataIngestionEntityTag.  # noqa: E501
        :rtype: SharedTagTypeEnum
        """
        return self._id_tag_type

    @id_tag_type.setter
    def id_tag_type(self, id_tag_type):
        """Sets the id_tag_type of this DataIngestionEntityTag.


        :param id_tag_type: The id_tag_type of this DataIngestionEntityTag.  # noqa: E501
        :type: SharedTagTypeEnum
        """

        self._id_tag_type = id_tag_type

    @property
    def tag_type(self):
        """Gets the tag_type of this DataIngestionEntityTag.  # noqa: E501


        :return: The tag_type of this DataIngestionEntityTag.  # noqa: E501
        :rtype: SharedTagType
        """
        return self._tag_type

    @tag_type.setter
    def tag_type(self, tag_type):
        """Sets the tag_type of this DataIngestionEntityTag.


        :param tag_type: The tag_type of this DataIngestionEntityTag.  # noqa: E501
        :type: SharedTagType
        """

        self._tag_type = tag_type

    @property
    def entity(self):
        """Gets the entity of this DataIngestionEntityTag.  # noqa: E501


        :return: The entity of this DataIngestionEntityTag.  # noqa: E501
        :rtype: DataIngestionEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this DataIngestionEntityTag.


        :param entity: The entity of this DataIngestionEntityTag.  # noqa: E501
        :type: DataIngestionEntity
        """

        self._entity = entity

    @property
    def tag(self):
        """Gets the tag of this DataIngestionEntityTag.  # noqa: E501


        :return: The tag of this DataIngestionEntityTag.  # noqa: E501
        :rtype: DataIngestionTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DataIngestionEntityTag.


        :param tag: The tag of this DataIngestionEntityTag.  # noqa: E501
        :type: DataIngestionTag
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionEntityTag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionEntityTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
