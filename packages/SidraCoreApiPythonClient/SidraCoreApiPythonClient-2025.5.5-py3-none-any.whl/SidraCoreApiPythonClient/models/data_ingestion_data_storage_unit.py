# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataIngestionDataStorageUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'id_location': 'int',
        'resource_group_name': 'str',
        'cluster_name': 'str',
        'id_cluster_type': 'DataIngestionClusterTypeEnum',
        'fabric_workspace_id': 'str',
        'security_path': 'str',
        'icon': 'str',
        'description': 'str',
        'detail': 'str',
        'additional_properties': 'str',
        'storages': 'list[DataIngestionStorage]',
        'providers': 'list[DataIngestionProvider]',
        'cluster_type': 'DataIngestionClusterType',
        'location': 'ManagementAzureRegion',
        'triggers': 'list[DataIngestionTrigger]',
        'default_staging_storage': 'DataIngestionStorage',
        'default_principal_storage': 'DataIngestionStorage',
        'default_backup_storage': 'DataIngestionStorage'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'id_location': 'idLocation',
        'resource_group_name': 'resourceGroupName',
        'cluster_name': 'clusterName',
        'id_cluster_type': 'idClusterType',
        'fabric_workspace_id': 'fabricWorkspaceId',
        'security_path': 'securityPath',
        'icon': 'icon',
        'description': 'description',
        'detail': 'detail',
        'additional_properties': 'additionalProperties',
        'storages': 'storages',
        'providers': 'providers',
        'cluster_type': 'clusterType',
        'location': 'location',
        'triggers': 'triggers',
        'default_staging_storage': 'defaultStagingStorage',
        'default_principal_storage': 'defaultPrincipalStorage',
        'default_backup_storage': 'defaultBackupStorage'
    }

    def __init__(self, id=None, name=None, id_location=None, resource_group_name=None, cluster_name=None, id_cluster_type=None, fabric_workspace_id=None, security_path=None, icon=None, description=None, detail=None, additional_properties=None, storages=None, providers=None, cluster_type=None, location=None, triggers=None, default_staging_storage=None, default_principal_storage=None, default_backup_storage=None):  # noqa: E501
        """DataIngestionDataStorageUnit - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._id_location = None
        self._resource_group_name = None
        self._cluster_name = None
        self._id_cluster_type = None
        self._fabric_workspace_id = None
        self._security_path = None
        self._icon = None
        self._description = None
        self._detail = None
        self._additional_properties = None
        self._storages = None
        self._providers = None
        self._cluster_type = None
        self._location = None
        self._triggers = None
        self._default_staging_storage = None
        self._default_principal_storage = None
        self._default_backup_storage = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if id_location is not None:
            self.id_location = id_location
        if resource_group_name is not None:
            self.resource_group_name = resource_group_name
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if id_cluster_type is not None:
            self.id_cluster_type = id_cluster_type
        if fabric_workspace_id is not None:
            self.fabric_workspace_id = fabric_workspace_id
        if security_path is not None:
            self.security_path = security_path
        if icon is not None:
            self.icon = icon
        if description is not None:
            self.description = description
        if detail is not None:
            self.detail = detail
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if storages is not None:
            self.storages = storages
        if providers is not None:
            self.providers = providers
        if cluster_type is not None:
            self.cluster_type = cluster_type
        if location is not None:
            self.location = location
        if triggers is not None:
            self.triggers = triggers
        if default_staging_storage is not None:
            self.default_staging_storage = default_staging_storage
        if default_principal_storage is not None:
            self.default_principal_storage = default_principal_storage
        if default_backup_storage is not None:
            self.default_backup_storage = default_backup_storage

    @property
    def id(self):
        """Gets the id of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The id of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataIngestionDataStorageUnit.


        :param id: The id of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The name of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataIngestionDataStorageUnit.


        :param name: The name of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id_location(self):
        """Gets the id_location of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The id_location of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: int
        """
        return self._id_location

    @id_location.setter
    def id_location(self, id_location):
        """Sets the id_location of this DataIngestionDataStorageUnit.


        :param id_location: The id_location of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: int
        """

        self._id_location = id_location

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The resource_group_name of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this DataIngestionDataStorageUnit.


        :param resource_group_name: The resource_group_name of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._resource_group_name = resource_group_name

    @property
    def cluster_name(self):
        """Gets the cluster_name of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The cluster_name of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this DataIngestionDataStorageUnit.


        :param cluster_name: The cluster_name of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def id_cluster_type(self):
        """Gets the id_cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The id_cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: DataIngestionClusterTypeEnum
        """
        return self._id_cluster_type

    @id_cluster_type.setter
    def id_cluster_type(self, id_cluster_type):
        """Sets the id_cluster_type of this DataIngestionDataStorageUnit.


        :param id_cluster_type: The id_cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: DataIngestionClusterTypeEnum
        """

        self._id_cluster_type = id_cluster_type

    @property
    def fabric_workspace_id(self):
        """Gets the fabric_workspace_id of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The fabric_workspace_id of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._fabric_workspace_id

    @fabric_workspace_id.setter
    def fabric_workspace_id(self, fabric_workspace_id):
        """Sets the fabric_workspace_id of this DataIngestionDataStorageUnit.


        :param fabric_workspace_id: The fabric_workspace_id of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._fabric_workspace_id = fabric_workspace_id

    @property
    def security_path(self):
        """Gets the security_path of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The security_path of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this DataIngestionDataStorageUnit.


        :param security_path: The security_path of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def icon(self):
        """Gets the icon of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The icon of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DataIngestionDataStorageUnit.


        :param icon: The icon of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def description(self):
        """Gets the description of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The description of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataIngestionDataStorageUnit.


        :param description: The description of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The detail of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DataIngestionDataStorageUnit.


        :param detail: The detail of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def additional_properties(self):
        """Gets the additional_properties of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The additional_properties of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this DataIngestionDataStorageUnit.


        :param additional_properties: The additional_properties of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: str
        """

        self._additional_properties = additional_properties

    @property
    def storages(self):
        """Gets the storages of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The storages of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: list[DataIngestionStorage]
        """
        return self._storages

    @storages.setter
    def storages(self, storages):
        """Sets the storages of this DataIngestionDataStorageUnit.


        :param storages: The storages of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: list[DataIngestionStorage]
        """

        self._storages = storages

    @property
    def providers(self):
        """Gets the providers of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The providers of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: list[DataIngestionProvider]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this DataIngestionDataStorageUnit.


        :param providers: The providers of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: list[DataIngestionProvider]
        """

        self._providers = providers

    @property
    def cluster_type(self):
        """Gets the cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: DataIngestionClusterType
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this DataIngestionDataStorageUnit.


        :param cluster_type: The cluster_type of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: DataIngestionClusterType
        """

        self._cluster_type = cluster_type

    @property
    def location(self):
        """Gets the location of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The location of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: ManagementAzureRegion
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DataIngestionDataStorageUnit.


        :param location: The location of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: ManagementAzureRegion
        """

        self._location = location

    @property
    def triggers(self):
        """Gets the triggers of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The triggers of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: list[DataIngestionTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this DataIngestionDataStorageUnit.


        :param triggers: The triggers of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: list[DataIngestionTrigger]
        """

        self._triggers = triggers

    @property
    def default_staging_storage(self):
        """Gets the default_staging_storage of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The default_staging_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: DataIngestionStorage
        """
        return self._default_staging_storage

    @default_staging_storage.setter
    def default_staging_storage(self, default_staging_storage):
        """Sets the default_staging_storage of this DataIngestionDataStorageUnit.


        :param default_staging_storage: The default_staging_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: DataIngestionStorage
        """

        self._default_staging_storage = default_staging_storage

    @property
    def default_principal_storage(self):
        """Gets the default_principal_storage of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The default_principal_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: DataIngestionStorage
        """
        return self._default_principal_storage

    @default_principal_storage.setter
    def default_principal_storage(self, default_principal_storage):
        """Sets the default_principal_storage of this DataIngestionDataStorageUnit.


        :param default_principal_storage: The default_principal_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: DataIngestionStorage
        """

        self._default_principal_storage = default_principal_storage

    @property
    def default_backup_storage(self):
        """Gets the default_backup_storage of this DataIngestionDataStorageUnit.  # noqa: E501


        :return: The default_backup_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :rtype: DataIngestionStorage
        """
        return self._default_backup_storage

    @default_backup_storage.setter
    def default_backup_storage(self, default_backup_storage):
        """Sets the default_backup_storage of this DataIngestionDataStorageUnit.


        :param default_backup_storage: The default_backup_storage of this DataIngestionDataStorageUnit.  # noqa: E501
        :type: DataIngestionStorage
        """

        self._default_backup_storage = default_backup_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataIngestionDataStorageUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIngestionDataStorageUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
