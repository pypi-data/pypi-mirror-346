# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PIIModelsEntityForPIIDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'language': 'str',
        'assets': 'list[PIIModelsAssetForPIIDto]'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'language': 'language',
        'assets': 'assets'
    }

    def __init__(self, entity_id=None, language=None, assets=None):  # noqa: E501
        """PIIModelsEntityForPIIDto - a model defined in Swagger"""  # noqa: E501
        self._entity_id = None
        self._language = None
        self._assets = None
        self.discriminator = None
        if entity_id is not None:
            self.entity_id = entity_id
        if language is not None:
            self.language = language
        if assets is not None:
            self.assets = assets

    @property
    def entity_id(self):
        """Gets the entity_id of this PIIModelsEntityForPIIDto.  # noqa: E501


        :return: The entity_id of this PIIModelsEntityForPIIDto.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this PIIModelsEntityForPIIDto.


        :param entity_id: The entity_id of this PIIModelsEntityForPIIDto.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def language(self):
        """Gets the language of this PIIModelsEntityForPIIDto.  # noqa: E501


        :return: The language of this PIIModelsEntityForPIIDto.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PIIModelsEntityForPIIDto.


        :param language: The language of this PIIModelsEntityForPIIDto.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def assets(self):
        """Gets the assets of this PIIModelsEntityForPIIDto.  # noqa: E501


        :return: The assets of this PIIModelsEntityForPIIDto.  # noqa: E501
        :rtype: list[PIIModelsAssetForPIIDto]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PIIModelsEntityForPIIDto.


        :param assets: The assets of this PIIModelsEntityForPIIDto.  # noqa: E501
        :type: list[PIIModelsAssetForPIIDto]
        """

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PIIModelsEntityForPIIDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PIIModelsEntityForPIIDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
