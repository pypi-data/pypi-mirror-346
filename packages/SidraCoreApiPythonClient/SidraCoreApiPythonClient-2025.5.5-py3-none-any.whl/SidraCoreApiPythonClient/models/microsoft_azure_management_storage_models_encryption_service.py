# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureManagementStorageModelsEncryptionService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'last_enabled_time': 'datetime',
        'key_type': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'last_enabled_time': 'lastEnabledTime',
        'key_type': 'keyType'
    }

    def __init__(self, enabled=None, last_enabled_time=None, key_type=None):  # noqa: E501
        """MicrosoftAzureManagementStorageModelsEncryptionService - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._last_enabled_time = None
        self._key_type = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if last_enabled_time is not None:
            self.last_enabled_time = last_enabled_time
        if key_type is not None:
            self.key_type = key_type

    @property
    def enabled(self):
        """Gets the enabled of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501


        :return: The enabled of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MicrosoftAzureManagementStorageModelsEncryptionService.


        :param enabled: The enabled of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def last_enabled_time(self):
        """Gets the last_enabled_time of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501


        :return: The last_enabled_time of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :rtype: datetime
        """
        return self._last_enabled_time

    @last_enabled_time.setter
    def last_enabled_time(self, last_enabled_time):
        """Sets the last_enabled_time of this MicrosoftAzureManagementStorageModelsEncryptionService.


        :param last_enabled_time: The last_enabled_time of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :type: datetime
        """

        self._last_enabled_time = last_enabled_time

    @property
    def key_type(self):
        """Gets the key_type of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501


        :return: The key_type of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this MicrosoftAzureManagementStorageModelsEncryptionService.


        :param key_type: The key_type of this MicrosoftAzureManagementStorageModelsEncryptionService.  # noqa: E501
        :type: str
        """

        self._key_type = key_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureManagementStorageModelsEncryptionService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureManagementStorageModelsEncryptionService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
