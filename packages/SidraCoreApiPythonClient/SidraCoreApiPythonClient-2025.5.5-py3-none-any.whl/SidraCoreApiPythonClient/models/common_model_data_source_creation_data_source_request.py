# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonModelDataSourceCreationDataSourceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_source_type': 'str',
        'parameters': 'list[CommonModelDataSourceCreationDataSourceParameterRequest]',
        'id_provider': 'int',
        'data_intake_process_item_id': 'str',
        'data_source_template_item_id': 'str'
    }

    attribute_map = {
        'data_source_type': 'dataSourceType',
        'parameters': 'parameters',
        'id_provider': 'idProvider',
        'data_intake_process_item_id': 'dataIntakeProcessItemId',
        'data_source_template_item_id': 'dataSourceTemplateItemId'
    }

    def __init__(self, data_source_type=None, parameters=None, id_provider=None, data_intake_process_item_id=None, data_source_template_item_id=None):  # noqa: E501
        """CommonModelDataSourceCreationDataSourceRequest - a model defined in Swagger"""  # noqa: E501
        self._data_source_type = None
        self._parameters = None
        self._id_provider = None
        self._data_intake_process_item_id = None
        self._data_source_template_item_id = None
        self.discriminator = None
        if data_source_type is not None:
            self.data_source_type = data_source_type
        if parameters is not None:
            self.parameters = parameters
        if id_provider is not None:
            self.id_provider = id_provider
        if data_intake_process_item_id is not None:
            self.data_intake_process_item_id = data_intake_process_item_id
        if data_source_template_item_id is not None:
            self.data_source_template_item_id = data_source_template_item_id

    @property
    def data_source_type(self):
        """Gets the data_source_type of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501


        :return: The data_source_type of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this CommonModelDataSourceCreationDataSourceRequest.


        :param data_source_type: The data_source_type of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :type: str
        """

        self._data_source_type = data_source_type

    @property
    def parameters(self):
        """Gets the parameters of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501


        :return: The parameters of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :rtype: list[CommonModelDataSourceCreationDataSourceParameterRequest]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CommonModelDataSourceCreationDataSourceRequest.


        :param parameters: The parameters of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :type: list[CommonModelDataSourceCreationDataSourceParameterRequest]
        """

        self._parameters = parameters

    @property
    def id_provider(self):
        """Gets the id_provider of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501


        :return: The id_provider of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this CommonModelDataSourceCreationDataSourceRequest.


        :param id_provider: The id_provider of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def data_intake_process_item_id(self):
        """Gets the data_intake_process_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501


        :return: The data_intake_process_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_intake_process_item_id

    @data_intake_process_item_id.setter
    def data_intake_process_item_id(self, data_intake_process_item_id):
        """Sets the data_intake_process_item_id of this CommonModelDataSourceCreationDataSourceRequest.


        :param data_intake_process_item_id: The data_intake_process_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :type: str
        """

        self._data_intake_process_item_id = data_intake_process_item_id

    @property
    def data_source_template_item_id(self):
        """Gets the data_source_template_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501


        :return: The data_source_template_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_source_template_item_id

    @data_source_template_item_id.setter
    def data_source_template_item_id(self, data_source_template_item_id):
        """Sets the data_source_template_item_id of this CommonModelDataSourceCreationDataSourceRequest.


        :param data_source_template_item_id: The data_source_template_item_id of this CommonModelDataSourceCreationDataSourceRequest.  # noqa: E501
        :type: str
        """

        self._data_source_template_item_id = data_source_template_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonModelDataSourceCreationDataSourceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelDataSourceCreationDataSourceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
