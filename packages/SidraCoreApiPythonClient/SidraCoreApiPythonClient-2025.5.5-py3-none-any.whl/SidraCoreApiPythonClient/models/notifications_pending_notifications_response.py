# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsPendingNotificationsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'count': 'int',
        'from_the_last_x_days': 'int',
        'notifications': 'list[NotificationsNotificationResponseDto]'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'count': 'count',
        'from_the_last_x_days': 'fromTheLastXDays',
        'notifications': 'notifications'
    }

    def __init__(self, total_count=None, count=None, from_the_last_x_days=None, notifications=None):  # noqa: E501
        """NotificationsPendingNotificationsResponse - a model defined in Swagger"""  # noqa: E501
        self._total_count = None
        self._count = None
        self._from_the_last_x_days = None
        self._notifications = None
        self.discriminator = None
        if total_count is not None:
            self.total_count = total_count
        if count is not None:
            self.count = count
        if from_the_last_x_days is not None:
            self.from_the_last_x_days = from_the_last_x_days
        if notifications is not None:
            self.notifications = notifications

    @property
    def total_count(self):
        """Gets the total_count of this NotificationsPendingNotificationsResponse.  # noqa: E501


        :return: The total_count of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this NotificationsPendingNotificationsResponse.


        :param total_count: The total_count of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def count(self):
        """Gets the count of this NotificationsPendingNotificationsResponse.  # noqa: E501


        :return: The count of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NotificationsPendingNotificationsResponse.


        :param count: The count of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def from_the_last_x_days(self):
        """Gets the from_the_last_x_days of this NotificationsPendingNotificationsResponse.  # noqa: E501


        :return: The from_the_last_x_days of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._from_the_last_x_days

    @from_the_last_x_days.setter
    def from_the_last_x_days(self, from_the_last_x_days):
        """Sets the from_the_last_x_days of this NotificationsPendingNotificationsResponse.


        :param from_the_last_x_days: The from_the_last_x_days of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :type: int
        """

        self._from_the_last_x_days = from_the_last_x_days

    @property
    def notifications(self):
        """Gets the notifications of this NotificationsPendingNotificationsResponse.  # noqa: E501


        :return: The notifications of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :rtype: list[NotificationsNotificationResponseDto]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this NotificationsPendingNotificationsResponse.


        :param notifications: The notifications of this NotificationsPendingNotificationsResponse.  # noqa: E501
        :type: list[NotificationsNotificationResponseDto]
        """

        self._notifications = notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsPendingNotificationsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsPendingNotificationsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
