# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class IntegrationHubTopicsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_topics_id_data_storage_unit_get(self, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_get(id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelTopicDescriptionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_get_with_http_info(id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_get_with_http_info(id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_get_with_http_info(self, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_get_with_http_info(id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelTopicDescriptionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIIntegrationHubModelTopicDescriptionDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_permissions_put(self, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_permissions_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_permissions_put(id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_data_storage_unit: (required)
        :param IntegrationHubPermissionRequest body:
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_permissions_put_with_http_info(id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_permissions_put_with_http_info(id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_permissions_put_with_http_info(self, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_permissions_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_permissions_put_with_http_info(id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_data_storage_unit: (required)
        :param IntegrationHubPermissionRequest body:
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_data_storage_unit', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_permissions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_permissions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/permissions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_get(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_get(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelSharedAccessAuthorizationPolicyDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_get_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_get_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelSharedAccessAuthorizationPolicyDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_authpolicies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/authpolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIIntegrationHubModelSharedAccessAuthorizationPolicyDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete_with_http_info(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'policy_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete`")  # noqa: E501
        # verify the required parameter 'policy_key_name' is set
        if ('policy_key_name' not in params or
                params['policy_key_name'] is None):
            raise ValueError("Missing the required parameter `policy_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'policy_key_name' in params:
            path_params['policyKeyName'] = params['policy_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/authpolicies/{policyKeyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get_with_http_info(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'policy_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get`")  # noqa: E501
        # verify the required parameter 'policy_key_name' is set
        if ('policy_key_name' not in params or
                params['policy_key_name'] is None):
            raise ValueError("Missing the required parameter `policy_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'policy_key_name' in params:
            path_params['policyKeyName'] = params['policy_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/authpolicies/{policyKeyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSasTokenDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get_with_http_info(self, topic_key_name, policy_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get_with_http_info(topic_key_name, policy_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str policy_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSasTokenDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'policy_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get`")  # noqa: E501
        # verify the required parameter 'policy_key_name' is set
        if ('policy_key_name' not in params or
                params['policy_key_name'] is None):
            raise ValueError("Missing the required parameter `policy_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_policy_key_name_sas_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'policy_key_name' in params:
            path_params['policyKeyName'] = params['policy_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/authpolicies/{policyKeyName}/sas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSasTokenDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_post(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_post(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param list[AzureMessagingServiceBusAdministrationAccessRights] body:
        :param str policy_name:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_post_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_authpolicies_post_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_authpolicies_post_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_authpolicies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_authpolicies_post_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param list[AzureMessagingServiceBusAdministrationAccessRights] body:
        :param str policy_name:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'body', 'policy_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_authpolicies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_post`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_authpolicies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'policy_name' in params:
            query_params.append(('policyName', params['policy_name']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/authpolicies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSharedAccessAuthorizationPolicyDetailsDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_delete(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_delete(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_delete_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_delete_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_delete_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_delete_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_delete`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_get(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_get(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelTopicDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_get_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_get_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelTopicDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelTopicDescriptionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_put(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_put(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelTopicDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_put_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_put_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_put_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_put_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelTopicDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_put`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelTopicDescriptionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_get(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_get(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelSubscriptionDescriptionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_get_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_get_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_get_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: list[APIIntegrationHubModelSubscriptionDescriptionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIIntegrationHubModelSubscriptionDescriptionDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str subscription_key_name:
        :param str rule_name:
        :param str label_value_for_filter:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str subscription_key_name:
        :param str rule_name:
        :param str label_value_for_filter:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'subscription_key_name', 'rule_name', 'label_value_for_filter', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_labelrule_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'subscription_key_name' in params:
            query_params.append(('subscriptionKeyName', params['subscription_key_name']))  # noqa: E501
        if 'rule_name' in params:
            query_params.append(('ruleName', params['rule_name']))  # noqa: E501
        if 'label_value_for_filter' in params:
            query_params.append(('labelValueForFilter', params['label_value_for_filter']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/subscriptions/labelrule', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSubscriptionDescriptionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_post(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_post(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str subscription_key_name:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_post_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_post_with_http_info(topic_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_post_with_http_info(self, topic_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_post_with_http_info(topic_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str subscription_key_name:
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'id_data_storage_unit', 'subscription_key_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_subscriptions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_post`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'subscription_key_name' in params:
            query_params.append(('subscriptionKeyName', params['subscription_key_name']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSubscriptionDescriptionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete(self, topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete(topic_key_name, subscription_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str subscription_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete_with_http_info(self, topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str subscription_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'subscription_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete`")  # noqa: E501
        # verify the required parameter 'subscription_key_name' is set
        if ('subscription_key_name' not in params or
                params['subscription_key_name'] is None):
            raise ValueError("Missing the required parameter `subscription_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'subscription_key_name' in params:
            path_params['subscriptionKeyName'] = params['subscription_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/subscriptions/{subscriptionKeyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get(self, topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get(topic_key_name, subscription_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str subscription_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs)  # noqa: E501
            return data

    def api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get_with_http_info(self, topic_key_name, subscription_key_name, id_data_storage_unit, **kwargs):  # noqa: E501
        """api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get_with_http_info(topic_key_name, subscription_key_name, id_data_storage_unit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topic_key_name: (required)
        :param str subscription_key_name: (required)
        :param int id_data_storage_unit: (required)
        :param str api_version: The requested API version
        :return: APIIntegrationHubModelSubscriptionDescriptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_key_name', 'subscription_key_name', 'id_data_storage_unit', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_key_name' is set
        if ('topic_key_name' not in params or
                params['topic_key_name'] is None):
            raise ValueError("Missing the required parameter `topic_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get`")  # noqa: E501
        # verify the required parameter 'subscription_key_name' is set
        if ('subscription_key_name' not in params or
                params['subscription_key_name'] is None):
            raise ValueError("Missing the required parameter `subscription_key_name` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get`")  # noqa: E501
        # verify the required parameter 'id_data_storage_unit' is set
        if ('id_data_storage_unit' not in params or
                params['id_data_storage_unit'] is None):
            raise ValueError("Missing the required parameter `id_data_storage_unit` when calling `api_topics_id_data_storage_unit_topic_key_name_subscriptions_subscription_key_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_key_name' in params:
            path_params['topicKeyName'] = params['topic_key_name']  # noqa: E501
        if 'subscription_key_name' in params:
            path_params['subscriptionKeyName'] = params['subscription_key_name']  # noqa: E501
        if 'id_data_storage_unit' in params:
            path_params['idDataStorageUnit'] = params['id_data_storage_unit']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Topics/{idDataStorageUnit}/{topicKeyName}/subscriptions/{subscriptionKeyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIIntegrationHubModelSubscriptionDescriptionDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
