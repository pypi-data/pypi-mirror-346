# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class DataStorageUnitSearchServicesSearchServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_assets_metadata_status_route(self, job_id, **kwargs):  # noqa: E501
        """add_assets_metadata_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_assets_metadata_status_route(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_assets_metadata_status_route_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_assets_metadata_status_route_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def add_assets_metadata_status_route_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """add_assets_metadata_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_assets_metadata_status_route_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_assets_metadata_status_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `add_assets_metadata_status_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/addAssetsMetadata/{jobId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get(self, id_dsu, indexer_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get(id_dsu, indexer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_name: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAzureSearchModelsIndexer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get_with_http_info(id_dsu, indexer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get_with_http_info(id_dsu, indexer_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get_with_http_info(self, id_dsu, indexer_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get_with_http_info(id_dsu, indexer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_name: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAzureSearchModelsIndexer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get`")  # noqa: E501
        # verify the required parameter 'indexer_name' is set
        if ('indexer_name' not in params or
                params['indexer_name'] is None):
            raise ValueError("Missing the required parameter `indexer_name` when calling `api_datastorageunit_id_dsu_search_services_indexer_indexer_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_name' in params:
            path_params['indexerName'] = params['indexer_name']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/indexer/{indexerName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftAzureSearchModelsIndexer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str key:
        :param list[str] selected_fields:
        :param str api_version: The requested API version
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str key:
        :param list[str] selected_fields:
        :param str api_version: The requested API version
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'key', 'selected_fields', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_document_lookup_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'selected_fields' in params:
            query_params.append(('selectedFields', params['selected_fields']))  # noqa: E501
            collection_formats['selectedFields'] = 'multi'  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/indexerPipeline/{indexerPipelineName}/document/lookup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str api_version: The requested API version
        :return: list[MicrosoftAzureSearchModelsField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str api_version: The requested API version
        :return: list[MicrosoftAzureSearchModelsField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_fields_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/indexerPipeline/{indexerPipelineName}/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftAzureSearchModelsField]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param CommonModelAzureSearchSuggestRequestDTO body:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSuggestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param CommonModelAzureSearchSuggestRequestDTO body:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSuggestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_indexer_pipeline_indexer_pipeline_name_suggestions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/indexerPipeline/{indexerPipelineName}/suggestions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonModelAzureSearchSuggestionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_indexers_get(self, id_dsu, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexers_get(id_dsu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str api_version: The requested API version
        :return: list[MicrosoftAzureSearchModelsIndexer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_indexers_get_with_http_info(id_dsu, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_indexers_get_with_http_info(id_dsu, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_indexers_get_with_http_info(self, id_dsu, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_indexers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_indexers_get_with_http_info(id_dsu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str api_version: The requested API version
        :return: list[MicrosoftAzureSearchModelsIndexer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_indexers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_indexers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/indexers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftAzureSearchModelsIndexer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param APIExternalAzureSearchIndexerCleanupModeEnum clean_up_mode:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param APIExternalAzureSearchIndexerCleanupModeEnum clean_up_mode:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'clean_up_mode', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_clean_up_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'clean_up_mode' in params:
            query_params.append(('cleanUpMode', params['clean_up_mode']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/search/indexerPipeline/{indexerPipelineName}/cleanUp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonModelAzureSearchSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post(self, id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post(id_dsu, indexer_pipeline_name, field_to_retrieve, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str field_to_retrieve: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post_with_http_info(self, id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str field_to_retrieve: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'field_to_retrieve', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post`")  # noqa: E501
        # verify the required parameter 'field_to_retrieve' is set
        if ('field_to_retrieve' not in params or
                params['field_to_retrieve'] is None):
            raise ValueError("Missing the required parameter `field_to_retrieve` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_all_distinct_values_for_field_field_to_retrieve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501
        if 'field_to_retrieve' in params:
            path_params['fieldToRetrieve'] = params['field_to_retrieve']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/search/indexerPipeline/{indexerPipelineName}/getAllDistinctValuesForField/{fieldToRetrieve}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post(self, id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post(id_dsu, indexer_pipeline_name, field_to_retrieve, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str field_to_retrieve: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post_with_http_info(self, id_dsu, indexer_pipeline_name, field_to_retrieve, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post_with_http_info(id_dsu, indexer_pipeline_name, field_to_retrieve, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str field_to_retrieve: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'field_to_retrieve', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post`")  # noqa: E501
        # verify the required parameter 'field_to_retrieve' is set
        if ('field_to_retrieve' not in params or
                params['field_to_retrieve'] is None):
            raise ValueError("Missing the required parameter `field_to_retrieve` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_get_values_for_field_field_to_retrieve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501
        if 'field_to_retrieve' in params:
            path_params['fieldToRetrieve'] = params['field_to_retrieve']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/search/indexerPipeline/{indexerPipelineName}/getValuesForField/{fieldToRetrieve}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param CommonModelAzureSearchSearchRequestDTO body:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `api_datastorageunit_id_dsu_search_services_search_indexer_pipeline_indexer_pipeline_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/search/indexerPipeline/{indexerPipelineName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonModelAzureSearchSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_search_services_add_assets_metadata_get(self, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_add_assets_metadata_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_add_assets_metadata_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_search_services_add_assets_metadata_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_search_services_add_assets_metadata_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_datastorageunit_search_services_add_assets_metadata_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_add_assets_metadata_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_add_assets_metadata_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_search_services_add_assets_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/addAssetsMetadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_search_services_indexers_asset_id_post(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_indexers_asset_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_indexers_asset_id_post(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAzureSearchModelsIndexerExecutionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_search_services_indexers_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_search_services_indexers_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_search_services_indexers_asset_id_post_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_indexers_asset_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_indexers_asset_id_post_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAzureSearchModelsIndexerExecutionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_search_services_indexers_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_datastorageunit_search_services_indexers_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/indexers/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftAzureSearchModelsIndexerExecutionInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_search_services_run_asset_id_post(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_run_asset_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_run_asset_id_post(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_search_services_run_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_search_services_run_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_search_services_run_asset_id_post_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_run_asset_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_run_asset_id_post_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_search_services_run_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_datastorageunit_search_services_run_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/run/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datastorageunit_search_services_status_asset_id_get(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_status_asset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_status_asset_id_get(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: list[APIExternalIndexerStatusDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_datastorageunit_search_services_status_asset_id_get_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datastorageunit_search_services_status_asset_id_get_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def api_datastorageunit_search_services_status_asset_id_get_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """api_datastorageunit_search_services_status_asset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_datastorageunit_search_services_status_asset_id_get_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param str api_version: The requested API version
        :return: list[APIExternalIndexerStatusDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datastorageunit_search_services_status_asset_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_datastorageunit_search_services_status_asset_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/status/{assetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIExternalIndexerStatusDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_indexing_pipeline_cleanup_status_route(self, job_id, **kwargs):  # noqa: E501
        """azure_indexing_pipeline_cleanup_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_indexing_pipeline_cleanup_status_route(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_indexing_pipeline_cleanup_status_route_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.azure_indexing_pipeline_cleanup_status_route_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def azure_indexing_pipeline_cleanup_status_route_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """azure_indexing_pipeline_cleanup_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_indexing_pipeline_cleanup_status_route_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_indexing_pipeline_cleanup_status_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `azure_indexing_pipeline_cleanup_status_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/SearchServices/azureIndexingPipelineCleanup/{jobId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_status_route(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """search_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_status_route(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str continuation_token:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_status_route_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.search_status_route_with_http_info(id_dsu, indexer_pipeline_name, **kwargs)  # noqa: E501
            return data

    def search_status_route_with_http_info(self, id_dsu, indexer_pipeline_name, **kwargs):  # noqa: E501
        """search_status_route  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_status_route_with_http_info(id_dsu, indexer_pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_dsu: (required)
        :param str indexer_pipeline_name: (required)
        :param str continuation_token:
        :param str api_version: The requested API version
        :return: CommonModelAzureSearchSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_dsu', 'indexer_pipeline_name', 'continuation_token', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_status_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_dsu' is set
        if ('id_dsu' not in params or
                params['id_dsu'] is None):
            raise ValueError("Missing the required parameter `id_dsu` when calling `search_status_route`")  # noqa: E501
        # verify the required parameter 'indexer_pipeline_name' is set
        if ('indexer_pipeline_name' not in params or
                params['indexer_pipeline_name'] is None):
            raise ValueError("Missing the required parameter `indexer_pipeline_name` when calling `search_status_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_dsu' in params:
            path_params['idDSU'] = params['id_dsu']  # noqa: E501
        if 'indexer_pipeline_name' in params:
            path_params['indexerPipelineName'] = params['indexer_pipeline_name']  # noqa: E501

        query_params = []
        if 'continuation_token' in params:
            query_params.append(('continuationToken', params['continuation_token']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastorageunit/{idDSU}/SearchServices/search/indexerPipeline/{indexerPipelineName}:lentgh(1,128)/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonModelAzureSearchSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
