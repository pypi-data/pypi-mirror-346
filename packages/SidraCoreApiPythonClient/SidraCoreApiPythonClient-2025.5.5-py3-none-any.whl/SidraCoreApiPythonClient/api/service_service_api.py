# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class ServiceServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_service_clusters_get(self, **kwargs):  # noqa: E501
        """api_service_clusters_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_clusters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[CommonModelClusterStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_clusters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_clusters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_clusters_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_clusters_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_clusters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[CommonModelClusterStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_clusters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonModelClusterStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_dailymeasures_measures_get(self, **kwargs):  # noqa: E501
        """api_service_dailymeasures_measures_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_dailymeasures_measures_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CommonModelOtherDatedMeasureName] measures:
        :param datetime start_date:
        :param datetime end_date:
        :param str api_version: The requested API version
        :return: list[CommonModelOtherDatedMeasure]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_dailymeasures_measures_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_dailymeasures_measures_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_dailymeasures_measures_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_dailymeasures_measures_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_dailymeasures_measures_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CommonModelOtherDatedMeasureName] measures:
        :param datetime start_date:
        :param datetime end_date:
        :param str api_version: The requested API version
        :return: list[CommonModelOtherDatedMeasure]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['measures', 'start_date', 'end_date', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_dailymeasures_measures_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'measures' in params:
            query_params.append(('measures', params['measures']))  # noqa: E501
            collection_formats['measures'] = 'multi'  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/dailymeasures/{measures}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonModelOtherDatedMeasure]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_datastorageunits_get(self, **kwargs):  # noqa: E501
        """api_service_datastorageunits_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_datastorageunits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[CommonModelDataStoragUnit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_datastorageunits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_datastorageunits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_datastorageunits_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_datastorageunits_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_datastorageunits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[CommonModelDataStoragUnit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_datastorageunits_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/datastorageunits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonModelDataStoragUnit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_errorscount_offset_id_get(self, offset_id, **kwargs):  # noqa: E501
        """api_service_errorscount_offset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_errorscount_offset_id_get(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param str api_version: The requested API version
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_errorscount_offset_id_get_with_http_info(offset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_service_errorscount_offset_id_get_with_http_info(offset_id, **kwargs)  # noqa: E501
            return data

    def api_service_errorscount_offset_id_get_with_http_info(self, offset_id, **kwargs):  # noqa: E501
        """api_service_errorscount_offset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_errorscount_offset_id_get_with_http_info(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param str api_version: The requested API version
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_errorscount_offset_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset_id' is set
        if ('offset_id' not in params or
                params['offset_id'] is None):
            raise ValueError("Missing the required parameter `offset_id` when calling `api_service_errorscount_offset_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offset_id' in params:
            path_params['offsetId'] = params['offset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/errorscount/{offsetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_lasterrors_get(self, **kwargs):  # noqa: E501
        """api_service_lasterrors_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_lasterrors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number_of_items:
        :param str api_version: The requested API version
        :return: list[CommonModelLogEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_lasterrors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_lasterrors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_lasterrors_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_lasterrors_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_lasterrors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number_of_items:
        :param str api_version: The requested API version
        :return: list[CommonModelLogEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number_of_items', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_lasterrors_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'number_of_items' in params:
            query_params.append(('numberOfItems', params['number_of_items']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/lasterrors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonModelLogEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_lastwarnings_get(self, **kwargs):  # noqa: E501
        """api_service_lastwarnings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_lastwarnings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number_of_items:
        :param str api_version: The requested API version
        :return: CommonModelLogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_lastwarnings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_lastwarnings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_lastwarnings_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_lastwarnings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_lastwarnings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number_of_items:
        :param str api_version: The requested API version
        :return: CommonModelLogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number_of_items', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_lastwarnings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'number_of_items' in params:
            query_params.append(('numberOfItems', params['number_of_items']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/lastwarnings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonModelLogEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_logcount_offset_id_severities_get(self, offset_id, **kwargs):  # noqa: E501
        """api_service_logcount_offset_id_severities_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_logcount_offset_id_severities_get(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param list[str] severities:
        :param str api_version: The requested API version
        :return: dict(str, int)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_logcount_offset_id_severities_get_with_http_info(offset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_service_logcount_offset_id_severities_get_with_http_info(offset_id, **kwargs)  # noqa: E501
            return data

    def api_service_logcount_offset_id_severities_get_with_http_info(self, offset_id, **kwargs):  # noqa: E501
        """api_service_logcount_offset_id_severities_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_logcount_offset_id_severities_get_with_http_info(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param list[str] severities:
        :param str api_version: The requested API version
        :return: dict(str, int)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset_id', 'severities', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_logcount_offset_id_severities_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset_id' is set
        if ('offset_id' not in params or
                params['offset_id'] is None):
            raise ValueError("Missing the required parameter `offset_id` when calling `api_service_logcount_offset_id_severities_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offset_id' in params:
            path_params['offsetId'] = params['offset_id']  # noqa: E501

        query_params = []
        if 'severities' in params:
            query_params.append(('severities', params['severities']))  # noqa: E501
            collection_formats['severities'] = 'multi'  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/logcount/{offsetId}/{severities}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, int)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_measures_measures_get(self, **kwargs):  # noqa: E501
        """api_service_measures_measures_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_measures_measures_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CommonModelOtherMeasureName] measures:
        :param str api_version: The requested API version
        :return: list[CommonModelOtherMeasure]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_measures_measures_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_measures_measures_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_measures_measures_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_measures_measures_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_measures_measures_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CommonModelOtherMeasureName] measures:
        :param str api_version: The requested API version
        :return: list[CommonModelOtherMeasure]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['measures', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_measures_measures_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'measures' in params:
            query_params.append(('measures', params['measures']))  # noqa: E501
            collection_formats['measures'] = 'multi'  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/measures/{measures}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonModelOtherMeasure]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_services_get(self, **kwargs):  # noqa: E501
        """api_service_services_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_services_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[APIExternalLlagarLlagarServiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_services_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_service_services_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_service_services_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_service_services_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_services_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[APIExternalLlagarLlagarServiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_services_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIExternalLlagarLlagarServiceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_service_warningscount_offset_id_get(self, offset_id, **kwargs):  # noqa: E501
        """api_service_warningscount_offset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_warningscount_offset_id_get(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param str api_version: The requested API version
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_service_warningscount_offset_id_get_with_http_info(offset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_service_warningscount_offset_id_get_with_http_info(offset_id, **kwargs)  # noqa: E501
            return data

    def api_service_warningscount_offset_id_get_with_http_info(self, offset_id, **kwargs):  # noqa: E501
        """api_service_warningscount_offset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_service_warningscount_offset_id_get_with_http_info(offset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset_id: (required)
        :param str api_version: The requested API version
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_service_warningscount_offset_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset_id' is set
        if ('offset_id' not in params or
                params['offset_id'] is None):
            raise ValueError("Missing the required parameter `offset_id` when calling `api_service_warningscount_offset_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offset_id' in params:
            path_params['offsetId'] = params['offset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Service/warningscount/{offsetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
