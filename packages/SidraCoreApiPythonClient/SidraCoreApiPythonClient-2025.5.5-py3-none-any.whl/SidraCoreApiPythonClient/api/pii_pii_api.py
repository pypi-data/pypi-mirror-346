# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class PIIPIIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_pii_add_pii_tags_post(self, **kwargs):  # noqa: E501
        """api_pii_add_pii_tags_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pii_add_pii_tags_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pii_add_pii_tags_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pii_add_pii_tags_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pii_add_pii_tags_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_pii_add_pii_tags_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pii_add_pii_tags_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) body:
        :param str api_version: The requested API version
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pii_add_pii_tags_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/PII/AddPIITags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pii_entities_for_pii_detection_by_dip_dip_item_id_get(self, dip_item_id, **kwargs):  # noqa: E501
        """api_pii_entities_for_pii_detection_by_dip_dip_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pii_entities_for_pii_detection_by_dip_dip_item_id_get(dip_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dip_item_id: (required)
        :param datetime _date:
        :param int skip:
        :param int take:
        :param str api_version: The requested API version
        :return: PIIModelsEntitiesForPIIDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pii_entities_for_pii_detection_by_dip_dip_item_id_get_with_http_info(dip_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pii_entities_for_pii_detection_by_dip_dip_item_id_get_with_http_info(dip_item_id, **kwargs)  # noqa: E501
            return data

    def api_pii_entities_for_pii_detection_by_dip_dip_item_id_get_with_http_info(self, dip_item_id, **kwargs):  # noqa: E501
        """api_pii_entities_for_pii_detection_by_dip_dip_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pii_entities_for_pii_detection_by_dip_dip_item_id_get_with_http_info(dip_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dip_item_id: (required)
        :param datetime _date:
        :param int skip:
        :param int take:
        :param str api_version: The requested API version
        :return: PIIModelsEntitiesForPIIDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dip_item_id', '_date', 'skip', 'take', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pii_entities_for_pii_detection_by_dip_dip_item_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dip_item_id' is set
        if ('dip_item_id' not in params or
                params['dip_item_id'] is None):
            raise ValueError("Missing the required parameter `dip_item_id` when calling `api_pii_entities_for_pii_detection_by_dip_dip_item_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dip_item_id' in params:
            path_params['dipItemId'] = params['dip_item_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/PII/entitiesForPIIDetectionByDIP/{dipItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PIIModelsEntitiesForPIIDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_piiis_pii_detection_enabled_by_dip_dip_item_id_get(self, dip_item_id, **kwargs):  # noqa: E501
        """api_piiis_pii_detection_enabled_by_dip_dip_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_piiis_pii_detection_enabled_by_dip_dip_item_id_get(dip_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dip_item_id: (required)
        :param datetime _date:
        :param str api_version: The requested API version
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_piiis_pii_detection_enabled_by_dip_dip_item_id_get_with_http_info(dip_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_piiis_pii_detection_enabled_by_dip_dip_item_id_get_with_http_info(dip_item_id, **kwargs)  # noqa: E501
            return data

    def api_piiis_pii_detection_enabled_by_dip_dip_item_id_get_with_http_info(self, dip_item_id, **kwargs):  # noqa: E501
        """api_piiis_pii_detection_enabled_by_dip_dip_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_piiis_pii_detection_enabled_by_dip_dip_item_id_get_with_http_info(dip_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dip_item_id: (required)
        :param datetime _date:
        :param str api_version: The requested API version
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dip_item_id', '_date', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_piiis_pii_detection_enabled_by_dip_dip_item_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dip_item_id' is set
        if ('dip_item_id' not in params or
                params['dip_item_id'] is None):
            raise ValueError("Missing the required parameter `dip_item_id` when calling `api_piiis_pii_detection_enabled_by_dip_dip_item_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dip_item_id' in params:
            path_params['dipItemId'] = params['dip_item_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/PII/isPIIDetectionEnabledByDIP/{dipItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
