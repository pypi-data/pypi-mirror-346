# coding: utf-8

"""
    Automated Optical Inspection API

    AOI_API   # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: corey.sadler@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from AOI_API.configuration import Configuration


class DbPhrameJSONStore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'ui_config': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ui_config': 'ui_config'
    }

    def __init__(self, id=None, ui_config=None, local_vars_configuration=None):  # noqa: E501
        """DbPhrameJSONStore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._ui_config = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ui_config is not None:
            self.ui_config = ui_config

    @property
    def id(self):
        """Gets the id of this DbPhrameJSONStore.  # noqa: E501


        :return: The id of this DbPhrameJSONStore.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DbPhrameJSONStore.


        :param id: The id of this DbPhrameJSONStore.  # noqa: E501
        :type id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 36):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 36):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/`")  # noqa: E501

        self._id = id

    @property
    def ui_config(self):
        """Gets the ui_config of this DbPhrameJSONStore.  # noqa: E501


        :return: The ui_config of this DbPhrameJSONStore.  # noqa: E501
        :rtype: str
        """
        return self._ui_config

    @ui_config.setter
    def ui_config(self, ui_config):
        """Sets the ui_config of this DbPhrameJSONStore.


        :param ui_config: The ui_config of this DbPhrameJSONStore.  # noqa: E501
        :type ui_config: str
        """

        self._ui_config = ui_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DbPhrameJSONStore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DbPhrameJSONStore):
            return True

        return self.to_dict() != other.to_dict()
