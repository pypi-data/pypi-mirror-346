use fuzzy_date_rs::token::WeekStartDay;
use fuzzy_date_rs::FuzzyDate;

#[test]
fn test_fixed_dates() {
    let expect: Vec<(&str, &str)> = vec![
        ("@1705072948", "2024-01-12 15:22:28 +00:00"),
        ("@1705072948.0", "2024-01-12 15:22:28 +00:00"),
        ("@1705072948.9", "2024-01-12 15:22:28.900 +00:00"),
        ("@1705072948.09", "2024-01-12 15:22:28.090 +00:00"),
        ("@1705072948.090", "2024-01-12 15:22:28.090 +00:00"),
        ("@1705072948.099", "2024-01-12 15:22:28.099 +00:00"),
        ("@1705072948.009", "2024-01-12 15:22:28.009 +00:00"),
        ("@1705072948.544", "2024-01-12 15:22:28.544 +00:00"),
        ("00900101", "0090-01-01 00:00:00 +00:00"),
        ("20230101", "2023-01-01 00:00:00 +00:00"),
        ("20241210", "2024-12-10 00:00:00 +00:00"),
        ("2023-01-01", "2023-01-01 00:00:00 +00:00"),
        ("Feb-01-2023", "2023-02-01 00:00:00 +00:00"),
        ("01-Feb-2023", "2023-02-01 00:00:00 +00:00"),
        ("2023-Feb-01", "2023-02-01 00:00:00 +00:00"),
        ("07.02.2023", "2023-02-07 00:00:00 +00:00"),
        ("7.2.2023", "2023-02-07 00:00:00 +00:00"),
        ("2/7/2023", "2023-02-07 00:00:00 +00:00"),
        ("Dec 7 2023", "2023-12-07 00:00:00 +00:00"),
        ("Dec 7th 2023", "2023-12-07 00:00:00 +00:00"),
        ("Dec. 7th 2023", "2023-12-07 00:00:00 +00:00"),
        ("Dec 7th, 2023", "2023-12-07 00:00:00 +00:00"),
        ("7th of December 2023", "2023-12-07 00:00:00 +00:00"),
        ("7th of Dec, 2023", "2023-12-07 00:00:00 +00:00"),
        ("December 7th 2023", "2023-12-07 00:00:00 +00:00"),
        ("7 Dec 2023", "2023-12-07 00:00:00 +00:00"),
        ("7 Dec. 2023", "2023-12-07 00:00:00 +00:00"),
        ("7 December 2023", "2023-12-07 00:00:00 +00:00"),
        ("7. Dec 2023", "2023-12-07 00:00:00 +00:00"),
        ("7. December 2023", "2023-12-07 00:00:00 +00:00"),
        ("2023-12-07 15:02", "2023-12-07 15:02:00 +00:00"),
        ("2023-12-07 15:02:01", "2023-12-07 15:02:01 +00:00"),
        ("2023-12-07 15:02:01", "2023-12-07 15:02:01 +00:00"),
        ("2023-12-07 15:02:01.000", "2023-12-07 15:02:01 +00:00"),
        ("2023-12-07 15:02:01.001", "2023-12-07 15:02:01.001 +00:00"),
        ("2023-12-07 15:02:01.010", "2023-12-07 15:02:01.010 +00:00"),
        ("2023-12-07 15:02:01.04", "2023-12-07 15:02:01.040 +00:00"),
        ("2023-12-07T15:02:01", "2023-12-07 15:02:01 +00:00"),
        ("2023-12-07T15:02:01.04", "2023-12-07 15:02:01.040 +00:00"),
        ("Wed, July 23 2008", "2008-07-23 00:00:00 +00:00"),
        ("Wed, 23 July 2008", "2008-07-23 00:00:00 +00:00"),
        ("Wed, 23rd July 2008", "2008-07-23 00:00:00 +00:00"),
        ("Wed, 23rd of July 2008", "2008-07-23 00:00:00 +00:00"),
        ("Wed, July 23rd 2008", "2008-07-23 00:00:00 +00:00"),
        ("Thu Dec 07 02:00:00 2023", "2023-12-07 02:00:00 +00:00"),
    ];

    for (from_string, expect_time) in expect {
        let result_time = FuzzyDate::from_now().to_datetime(from_string);
        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());
    }
}

#[test]
fn test_fixed_day_month() {
    assert_convert_from_mon(vec![
        ("Sat, Dec 7", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("Sat, Dec 7th", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("Sat, 7th of Dec", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("Sat, 7 Dec", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("Dec 7", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("December 7th", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("7 Dec", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("7th of Dec", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
        ("7th of December", "2024-01-12T15:22:28+02:00", "2024-12-07 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_fixed_time() {
    let current_time = "2024-01-12T15:22:28+02:00";

    let expect: Vec<(&str, &str)> = vec![
        ("12am", "2024-01-12 00:00:00 +02:00"),
        ("12a.m.", "2024-01-12 00:00:00 +02:00"),
        ("12 am", "2024-01-12 00:00:00 +02:00"),
        ("12 a.m.", "2024-01-12 00:00:00 +02:00"),
        ("12:01 am", "2024-01-12 00:01:00 +02:00"),
        ("12pm", "2024-01-12 12:00:00 +02:00"),
        ("12 pm", "2024-01-12 12:00:00 +02:00"),
        ("12:01 pm", "2024-01-12 12:01:00 +02:00"),
        ("12:01 p.m.", "2024-01-12 12:01:00 +02:00"),
        ("1pm", "2024-01-12 13:00:00 +02:00"),
        ("1p.m.", "2024-01-12 13:00:00 +02:00"),
        ("1 pm", "2024-01-12 13:00:00 +02:00"),
        ("1 p.m.", "2024-01-12 13:00:00 +02:00"),
        ("8pm", "2024-01-12 20:00:00 +02:00"),
        ("8 pm", "2024-01-12 20:00:00 +02:00"),
        ("8:01 pm", "2024-01-12 20:01:00 +02:00"),
        ("00:00", "2024-01-12 00:00:00 +02:00"),
        ("00:00:00", "2024-01-12 00:00:00 +02:00"),
        ("23:59:59", "2024-01-12 23:59:59 +02:00"),
        ("3:00", "2024-01-12 03:00:00 +02:00"),
        ("3:00:01", "2024-01-12 03:00:01 +02:00"),
        ("3:00:01.01", "2024-01-12 03:00:01.010 +02:00"),
    ];

    for (from_string, expect_time) in expect {
        let try_string = from_string;
        let result_time = FuzzyDate::from_rfc3339(current_time).to_datetime(&try_string);
        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());

        let try_string = format!("at {}", from_string);
        let result_time = FuzzyDate::from_rfc3339(current_time).to_datetime(&try_string);
        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());

        let try_string = format!("@ {}", from_string);
        let result_time = FuzzyDate::from_rfc3339(current_time).to_datetime(&try_string);
        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());
    }
}

#[test]
fn test_keywords() {
    assert_convert_from_mon(vec![
        ("now", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("midnight", "2024-01-12T15:22:28+02:00", "2024-01-12 00:00:00 +02:00"),
        ("yesterday", "2024-01-12T15:22:28+02:00", "2024-01-11 00:00:00 +02:00"),
        ("tomorrow", "2024-01-12T15:22:28+02:00", "2024-01-13 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_fixed_week_mon() {
    assert_convert_from_mon(vec![
        // ISO8601
        ("2023W01", "2024-05-12T15:22:28+02:00", "2023-01-02 00:00:00 +02:00"),
        ("2023W13", "2024-05-12T15:22:28+02:00", "2023-03-27 00:00:00 +02:00"),
        ("2023-W13", "2024-05-12T15:22:28+02:00", "2023-03-27 00:00:00 +02:00"),
        ("2023-W52", "2024-05-12T15:22:28+02:00", "2023-12-25 00:00:00 +02:00"),
        ("2020-W53", "2024-05-12T15:22:28+02:00", "2020-12-28 00:00:00 +02:00"),
        // Textual
        ("Week 53", "2020-05-12T15:22:28+02:00", "2020-12-28 00:00:00 +02:00"),
        ("Week 1, 2023", "2024-05-12T15:22:28+02:00", "2023-01-02 00:00:00 +02:00"),
        ("Week 13, 2023", "2024-05-12T15:22:28+02:00", "2023-03-27 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_fixed_week_sun() {
    assert_convert_from_sun(vec![
        // ISO8601
        ("2023W01", "2024-05-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("2023W13", "2024-05-12T15:22:28+02:00", "2023-03-26 00:00:00 +02:00"),
        ("2023-W13", "2024-05-12T15:22:28+02:00", "2023-03-26 00:00:00 +02:00"),
        ("2023-W52", "2024-05-12T15:22:28+02:00", "2023-12-24 00:00:00 +02:00"),
        ("2020-W53", "2024-05-12T15:22:28+02:00", "2020-12-27 00:00:00 +02:00"),
        // Textual
        ("Week 53", "2020-05-12T15:22:28+02:00", "2020-12-27 00:00:00 +02:00"),
        ("Week 1, 2023", "2024-05-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("Week 13, 2023", "2024-05-12T15:22:28+02:00", "2023-03-26 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_month() {
    assert_convert_from_mon(vec![
        ("Jan", "2024-05-12T15:22:28+02:00", "2024-01-12 00:00:00 +02:00"),
        ("February", "2024-12-30T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_month_year() {
    assert_convert_from_mon(vec![
        ("Jan 2023", "2024-05-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("February 2025", "2024-12-30T15:22:28+02:00", "2025-02-01 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_month_ranges() {
    assert_convert_from_mon(vec![
        // First
        ("first day of January", "2024-05-12T15:22:28+02:00", "2024-01-01 00:00:00 +02:00"),
        ("first of month", "2024-02-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first of the month", "2024-02-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first of this month", "2024-02-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first day of this month", "2024-02-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first day of prev month", "2024-03-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first day of last month", "2024-03-12T15:22:28+02:00", "2024-02-01 00:00:00 +02:00"),
        ("first day of next month", "2024-02-12T15:22:28+02:00", "2024-03-01 00:00:00 +02:00"),
        // Last
        ("last day of February", "2024-05-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last of month", "2024-02-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last of the month", "2024-02-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last of this month", "2024-02-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last day of this month", "2024-02-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last day of prev month", "2024-03-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last day of last month", "2024-03-12T15:22:28+02:00", "2024-02-29 00:00:00 +02:00"),
        ("last day of next month", "2023-12-12T15:22:28+02:00", "2024-01-31 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_month_year_ranges() {
    assert_convert_from_mon(vec![
        ("first day of January 2027", "2024-05-12T15:22:28+02:00", "2027-01-01 00:00:00 +02:00"),
        ("last day of February 2025", "2026-05-12T15:22:28+02:00", "2025-02-28 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_wday_ranges() {
    assert_convert_from_mon(vec![
        ("first mon of Feb", "2024-05-12T15:22:28+02:00", "2024-02-05 00:00:00 +02:00"),
        ("first tue of 2025", "2024-05-12T15:22:28+02:00", "2025-01-07 00:00:00 +02:00"),
        ("first wed of Jan 2025", "2026-05-12T15:22:28+02:00", "2025-01-01 00:00:00 +02:00"),
        ("first tue of Jan 2025", "2026-05-12T15:22:28+02:00", "2025-01-07 00:00:00 +02:00"),
        ("last mon of Feb", "2024-05-12T15:22:28+02:00", "2024-02-26 00:00:00 +02:00"),
        ("last fri of 2025", "2024-05-12T15:22:28+02:00", "2025-12-26 00:00:00 +02:00"),
        ("last fri of Jan 2025", "2026-05-12T15:22:28+02:00", "2025-01-31 00:00:00 +02:00"),
        ("last sat of Jan 2025", "2026-05-12T15:22:28+02:00", "2025-01-25 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_year_ranges() {
    assert_convert_from_mon(vec![
        // First
        ("first day of this year", "2024-02-12T15:22:28+02:00", "2024-01-01 00:00:00 +02:00"),
        ("first day of prev year", "2024-03-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("first day of last year", "2024-03-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("first day of next year", "2024-02-12T15:22:28+02:00", "2025-01-01 00:00:00 +02:00"),
        // Last
        ("last day of this year", "2024-02-12T15:22:28+02:00", "2024-12-31 00:00:00 +02:00"),
        ("last day of prev year", "2024-03-12T15:22:28+02:00", "2023-12-31 00:00:00 +02:00"),
        ("last day of last year", "2024-03-12T15:22:28+02:00", "2023-12-31 00:00:00 +02:00"),
        ("last day of next year", "2024-02-12T15:22:28+02:00", "2025-12-31 00:00:00 +02:00"),
        // Specific year
        ("first day of 2025", "2024-02-12T15:22:28+02:00", "2025-01-01 00:00:00 +02:00"),
        ("last day of 2025", "2024-02-12T15:22:28+02:00", "2025-12-31 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_offset_seconds() {
    assert_convert_from_mon(vec![
        ("this second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("past second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("prev second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("last second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("next second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:29 +02:00"),
        ("-1s", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("-1sec", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("-1 second", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:27 +02:00"),
        ("+1s", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:29 +02:00"),
        ("+1sec", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:29 +02:00"),
        ("+60 seconds", "2024-01-12T15:22:28+02:00", "2024-01-12 15:23:28 +02:00"),
        ("1 sec ago", "2024-01-25T15:22:28+02:00", "2024-01-25 15:22:27 +02:00"),
        ("1 seconds ago", "2024-01-25T15:22:28+02:00", "2024-01-25 15:22:27 +02:00"),
        ("past 1 seconds", "2024-01-25T15:22:28+02:00", "2024-01-25 15:22:27 +02:00"),
        ("prev 2 seconds", "2024-01-25T15:22:28+02:00", "2024-01-25 15:22:26 +02:00"),
        ("last 1 seconds", "2024-01-25T15:22:28+02:00", "2024-01-25 15:22:27 +02:00"),
    ]);
}

#[test]
fn test_offset_minutes() {
    assert_convert_from_mon(vec![
        ("this minute", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("past minute", "2024-01-12T15:22:28+02:00", "2024-01-12 15:21:28 +02:00"),
        ("prev minute", "2024-01-12T15:22:28+02:00", "2024-01-12 15:21:28 +02:00"),
        ("last minute", "2024-01-12T15:22:28+02:00", "2024-01-12 15:21:28 +02:00"),
        ("next minute", "2024-01-12T15:22:28+02:00", "2024-01-12 15:23:28 +02:00"),
        ("-1min", "2024-01-12T15:22:28+02:00", "2024-01-12 15:21:28 +02:00"),
        ("-5 minutes", "2024-01-12 15:22:28+02:00", "2024-01-12 15:17:28 +02:00"),
        ("+60min", "2024-01-12T15:22:28+02:00", "2024-01-12 16:22:28 +02:00"),
        ("+60 minutes", "2024-01-12T15:22:28+02:00", "2024-01-12 16:22:28 +02:00"),
        ("1 min ago", "2024-01-12T15:22:28+02:00", "2024-01-12 15:21:28 +02:00"),
        ("5 minutes ago", "2024-01-12 15:22:28+02:00", "2024-01-12 15:17:28 +02:00"),
        ("past 5 minutes", "2024-01-12 15:22:28+02:00", "2024-01-12 15:17:28 +02:00"),
        ("prev 5 minutes", "2024-01-12 15:22:28+02:00", "2024-01-12 15:17:28 +02:00"),
        ("last 5 minutes", "2024-01-12 15:22:28+02:00", "2024-01-12 15:17:28 +02:00"),
    ]);
}

#[test]
fn test_offset_hours() {
    assert_convert_from_mon(vec![
        ("this hour", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("past hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("prev hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("last hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("next hour", "2024-01-12T15:22:28+02:00", "2024-01-12 16:22:28 +02:00"),
        ("-1h", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("-1hr", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("-1 hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("+1h", "2024-01-12T15:22:28+02:00", "2024-01-12 16:22:28 +02:00"),
        ("+1hr", "2024-01-12T15:22:28+02:00", "2024-01-12 16:22:28 +02:00"),
        ("+30 hours", "2024-01-12T15:22:28+02:00", "2024-01-13 21:22:28 +02:00"),
        ("1 hr ago", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("1 hour ago", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("past 1 hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("prev 1 hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
        ("last 1 hour", "2024-01-12T15:22:28+02:00", "2024-01-12 14:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_days() {
    assert_convert_from_mon(vec![
        ("this day", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("past day", "2024-01-12T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("prev day", "2024-01-12T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("last day", "2024-01-12T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("next day", "2024-01-12T15:22:28+02:00", "2024-01-13 15:22:28 +02:00"),
        ("-1d", "2024-01-12T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("-1 day", "2024-01-12T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("+1d", "2024-01-12T15:22:28+02:00", "2024-01-13 15:22:28 +02:00"),
        ("+30 days", "2024-01-12T15:22:28+02:00", "2024-02-11 15:22:28 +02:00"),
        ("2 days ago", "2024-01-12T15:22:28+02:00", "2024-01-10 15:22:28 +02:00"),
        ("past 2 days", "2024-01-12T15:22:28+02:00", "2024-01-10 15:22:28 +02:00"),
        ("prev 2 days", "2024-01-12T15:22:28+02:00", "2024-01-10 15:22:28 +02:00"),
        ("last 2 days", "2024-01-12T15:22:28+02:00", "2024-01-10 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_weekdays() {
    assert_convert_from_mon(vec![
        ("Monday", "2024-05-12T15:22:28+02:00", "2024-05-13 00:00:00 +02:00"),
        ("this MONDAY", "2024-05-12T15:22:28+02:00", "2024-05-06 00:00:00 +02:00"),
        ("this Sunday", "2024-01-19T15:22:28+02:00", "2024-01-21 00:00:00 +02:00"),
        ("prev Sunday", "2024-01-19T15:22:28+02:00", "2024-01-14 00:00:00 +02:00"),
        ("last Mon", "2024-01-19T15:22:28+02:00", "2024-01-15 00:00:00 +02:00"),
        ("next Mon", "2024-01-19T15:22:28+02:00", "2024-01-22 00:00:00 +02:00"),
        ("next Sunday", "2024-01-19T15:22:28+02:00", "2024-01-21 00:00:00 +02:00"),
        // Current weekday is the same as new weekday
        ("this Saturday", "2024-01-20T15:22:28+02:00", "2024-01-20 00:00:00 +02:00"),
        ("prev Saturday", "2024-01-20T15:22:28+02:00", "2024-01-13 00:00:00 +02:00"),
        ("next Saturday", "2024-01-20T15:22:28+02:00", "2024-01-27 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_offset_weeks_exact() {
    assert_convert_from_mon(vec![
        ("-1w", "2024-01-25T15:22:28+02:00", "2024-01-18 15:22:28 +02:00"),
        ("-2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
        ("+1w", "2024-01-14T14:22:28+02:00", "2024-01-21 14:22:28 +02:00"),
        ("+2 weeks", "2024-01-08T15:22:28+02:00", "2024-01-22 15:22:28 +02:00"),
        ("1 week ago", "2024-01-25T15:22:28+02:00", "2024-01-18 15:22:28 +02:00"),
        ("past week", "2024-01-25T15:22:28+02:00", "2024-01-18 15:22:28 +02:00"),
        ("past 2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-11 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_weeks_monday() {
    assert_convert_from_mon(vec![
        ("this week", "2024-01-25T15:22:28+02:00", "2024-01-22 15:22:28 +02:00"),
        ("prev week", "2024-01-25T15:22:28+02:00", "2024-01-15 15:22:28 +02:00"),
        ("last week", "2024-01-25T15:22:28+02:00", "2024-01-15 15:22:28 +02:00"),
        ("next week", "2024-01-13 15:22:28+02:00", "2024-01-15 15:22:28 +02:00"),
        ("prev 2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-08 15:22:28 +02:00"),
        ("last 2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-08 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_weeks_sunday() {
    assert_convert_from_sun(vec![
        ("this week", "2024-01-25T15:22:28+02:00", "2024-01-21 15:22:28 +02:00"),
        ("prev week", "2024-01-25T15:22:28+02:00", "2024-01-14 15:22:28 +02:00"),
        ("last week", "2024-01-25T15:22:28+02:00", "2024-01-14 15:22:28 +02:00"),
        ("next week", "2024-01-13 15:22:28+02:00", "2024-01-14 15:22:28 +02:00"),
        ("prev 2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-07 15:22:28 +02:00"),
        ("last 2 weeks", "2024-01-25T15:22:28+02:00", "2024-01-07 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_month() {
    assert_convert_from_mon(vec![
        ("this April", "2024-01-19T15:22:28+02:00", "2024-04-19 00:00:00 +02:00"),
        ("prev April", "2024-01-19T15:22:28+02:00", "2023-04-19 00:00:00 +02:00"),
        ("last April", "2024-01-19T15:22:28+02:00", "2023-04-19 00:00:00 +02:00"),
        ("next April", "2024-01-19T15:22:28+02:00", "2024-04-19 00:00:00 +02:00"),
        ("next January", "2024-01-19T15:22:28+02:00", "2025-01-19 00:00:00 +02:00"),
        // When current month is the same as new month
        ("this April", "2024-04-15T15:22:28+02:00", "2024-04-15 00:00:00 +02:00"),
        ("prev April", "2024-04-15T15:22:28+02:00", "2023-04-15 00:00:00 +02:00"),
        ("next April", "2024-04-15T15:22:28+02:00", "2025-04-15 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_offset_months() {
    assert_convert_from_mon(vec![
        ("this month", "2024-03-12T15:22:28+02:00", "2024-03-12 15:22:28 +02:00"),
        ("past month", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("prev month", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("last month", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("next month", "2024-12-12T15:22:28+02:00", "2025-01-12 15:22:28 +02:00"),
        ("-1m", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("-1 month", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("+1m", "2024-03-12T15:22:28+02:00", "2024-04-12 15:22:28 +02:00"),
        ("+13 months", "2023-12-12T15:22:28+02:00", "2025-01-12 15:22:28 +02:00"),
        ("1 month ago", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("past 1 months", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("prev 1 months", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        ("last 1 months", "2024-03-12T15:22:28+02:00", "2024-02-12 15:22:28 +02:00"),
        // Different number of days in each month
        ("-1m", "2022-05-31T15:22:28+02:00", "2022-04-30 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_offset_years() {
    assert_convert_from_mon(vec![
        ("this year", "2024-01-12T15:22:28+02:00", "2024-01-12 15:22:28 +02:00"),
        ("past year", "2024-01-12T15:22:28+02:00", "2023-01-12 15:22:28 +02:00"),
        ("prev year", "2024-01-12T15:22:28+02:00", "2023-01-12 15:22:28 +02:00"),
        ("last year", "2024-01-12T15:22:28+02:00", "2023-01-12 15:22:28 +02:00"),
        ("next year", "2024-01-12T15:22:28+02:00", "2025-01-12 15:22:28 +02:00"),
        ("-1y", "2024-01-12T15:22:28+02:00", "2023-01-12 15:22:28 +02:00"),
        ("-1 year", "2024-01-12T15:22:28+02:00", "2023-01-12 15:22:28 +02:00"),
        ("+1y", "2024-01-12T15:22:28+02:00", "2025-01-12 15:22:28 +02:00"),
        ("+10 years", "2024-01-12T15:22:28+02:00", "2034-01-12 15:22:28 +02:00"),
        ("2 years ago", "2024-01-12T15:22:28+02:00", "2022-01-12 15:22:28 +02:00"),
        ("past 2 years", "2024-01-12T15:22:28+02:00", "2022-01-12 15:22:28 +02:00"),
        ("prev 2 years", "2024-01-12T15:22:28+02:00", "2022-01-12 15:22:28 +02:00"),
        ("last 2 years", "2024-01-12T15:22:28+02:00", "2022-01-12 15:22:28 +02:00"),
        // Non-leap years
        ("-1y", "2022-02-01T15:22:28+02:00", "2021-02-01 15:22:28 +02:00"),
        ("-1y", "2022-02-05T15:22:28+02:00", "2021-02-05 15:22:28 +02:00"),
        ("-1y", "2022-02-28T15:22:28+02:00", "2021-02-28 15:22:28 +02:00"),
        // Leap year
        ("-1y", "2024-02-29T15:22:28+02:00", "2023-02-28 15:22:28 +02:00"),
    ]);
}

#[test]
fn test_combinations() {
    assert_convert_from_mon(vec![
        ("@1705072948.544 2pm", "2024-01-12T15:22:28+02:00", "2024-01-12 14:00:00 +00:00"),
        ("2023-12-07 3p.m.", "2024-01-12T15:22:28+02:00", "2023-12-07 15:00:00 +02:00"),
        ("2023-12-07 3 p.m.", "2024-01-12T15:22:28+02:00", "2023-12-07 15:00:00 +02:00"),
        ("2023-12-07 3:00 p.m.", "2024-01-12T15:22:28+02:00", "2023-12-07 15:00:00 +02:00"),
        ("dec 2pm", "2024-01-12T15:22:28+02:00", "2024-12-12 14:00:00 +02:00"),
        ("dec 12.3.2023", "2024-01-12T15:22:28+02:00", "2023-03-12 00:00:00 +02:00"),
        ("dec 2025 2pm", "2024-01-12T15:22:28+02:00", "2025-12-01 14:00:00 +02:00"),
        ("Nov-09-2006 2pm", "2024-01-12T15:22:28+02:00", "2006-11-09 14:00:00 +02:00"),
        ("Nov-09-2006 at 2pm", "2024-01-12T15:22:28+02:00", "2006-11-09 14:00:00 +02:00"),
        ("Nov 2006 2pm", "2024-01-12T15:22:28+02:00", "2006-11-01 14:00:00 +02:00"),
        ("Nov 2006 @ 2pm", "2024-01-12T15:22:28+02:00", "2006-11-01 14:00:00 +02:00"),
        ("20240210 2pm", "2024-01-12T15:22:28+02:00", "2024-02-10 14:00:00 +02:00"),
        ("yesterday 1pm", "2024-01-12T15:22:28+02:00", "2024-01-11 13:00:00 +02:00"),
        ("yesterday 1:00 pm", "2024-01-12T15:22:28+02:00", "2024-01-11 13:00:00 +02:00"),
        ("yesterday midnight", "2024-01-12T15:22:28+02:00", "2024-01-11 00:00:00 +02:00"),
        ("-2d 1h", "2024-05-12T15:22:28+02:00", "2024-05-10 14:22:28 +02:00"),
        ("-2d 1h midnight", "2024-05-12T15:22:28+02:00", "2024-05-10 00:00:00 +02:00"),
        ("first day of Jan last year", "2024-05-12T15:22:28+02:00", "2023-01-01 00:00:00 +02:00"),
        ("last day of Feb last year", "2024-05-12T15:22:28+02:00", "2023-02-28 00:00:00 +02:00"),
        ("2 months 5 days 1 hour ago", "2024-05-12T15:22:28+02:00", "2024-03-07 14:22:28 +02:00"),
        ("Wed, 23 July 2008 12:00:00", "2024-05-12T15:22:28+02:00", "2008-07-23 12:00:00 +02:00"),
    ]);
}

#[test]
fn test_combinations_time_of_day_rules() {
    assert_convert_from_mon(vec![
        // Time of day is processed after date
        ("2:00 pm today", "2024-05-12T15:22:28+02:00", "2024-05-12 14:00:00 +02:00"),
        ("14:00 2024-05-17", "2024-05-12T15:22:28+02:00", "2024-05-17 14:00:00 +02:00"),
        ("14:00:00 2024-05-17", "2024-05-12T15:22:28+02:00", "2024-05-17 14:00:00 +02:00"),
        ("14:00:00 May 17th 2024", "2024-05-12T15:22:28+02:00", "2024-05-17 14:00:00 +02:00"),
        // Time of day is processed after weekday
        ("monday 2pm", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        ("2pm monday", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        ("2:00 pm monday", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        ("14:00 monday", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        ("14:00:00 monday", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        ("14:00:00.00 monday", "2024-05-12T15:22:28+02:00", "2024-05-13 14:00:00 +02:00"),
        // Time of day is processed after month and day
        ("2015 2pm Feb 1", "2024-05-12T15:22:28+02:00", "2015-02-01 14:00:00 +02:00"),
        ("2015 12:00:00 Feb 1", "2024-05-12T15:22:28+02:00", "2015-02-01 12:00:00 +02:00"),
        // Plus/minus movement is processed after time of day
        ("2pm +10 minutes", "2024-05-12T15:22:28+02:00", "2024-05-12 14:10:00 +02:00"),
        // Midnight enforces reset
        ("2pm midnight", "2024-05-12T15:22:28+02:00", "2024-05-12 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_combinations_weekday_rules() {
    assert_convert_from_mon(vec![
        ("sunday", "2024-05-12T15:22:28+02:00", "2024-05-12 00:00:00 +02:00"),
        ("monday", "2024-05-12T15:22:28+02:00", "2024-05-13 00:00:00 +02:00"),
        // Weekday is processed after long unit
        ("monday next week", "2024-05-12T15:22:28+02:00", "2024-05-13 00:00:00 +02:00"),
        ("tuesday next week", "2024-05-12T15:22:28+02:00", "2024-05-14 00:00:00 +02:00"),
        ("monday this week", "2024-05-12T15:22:28+02:00", "2024-05-06 00:00:00 +02:00"),
        ("tuesday last week", "2024-05-12T15:22:28+02:00", "2024-04-30 00:00:00 +02:00"),
        ("tuesday past week", "2024-05-12T15:22:28+02:00", "2024-05-07 00:00:00 +02:00"),
        ("last week monday", "2024-05-12T15:22:28+02:00", "2024-04-29 00:00:00 +02:00"),
        ("this week thursday", "2024-05-12T15:22:28+02:00", "2024-05-09 00:00:00 +02:00"),
        ("next week monday", "2024-05-12T15:22:28+02:00", "2024-05-13 00:00:00 +02:00"),
        ("next week thursday", "2024-05-12T15:22:28+02:00", "2024-05-16 00:00:00 +02:00"),
    ]);
}

#[test]
fn test_combinations_year_rules() {
    assert_convert_from_mon(vec![
        ("2015", "2024-02-12T15:22:28+02:00", "2015-02-12 15:22:28 +02:00"),
        ("2023", "2024-02-29T15:22:28+02:00", "2023-02-28 15:22:28 +02:00"),
        ("2015, Feb 1", "2024-05-12T15:22:28+02:00", "2015-02-01 00:00:00 +02:00"),
        ("2015 today", "2024-05-12T15:22:28+02:00", "2015-05-12 00:00:00 +02:00"),
        ("2015 next year", "2024-05-12T15:22:28+02:00", "2016-05-12 15:22:28 +02:00"),
        ("2015 next year -1 month", "2024-05-12T15:22:28+02:00", "2016-04-12 15:22:28 +02:00"),
        ("next year -1 month 2015", "2024-05-12T15:22:28+02:00", "2015-04-12 15:22:28 +02:00"),
        ("next year 2015", "2024-05-12T15:22:28+02:00", "2015-05-12 15:22:28 +02:00"),
    ]);

    assert_convert_failure(vec![
        // Year can't be used together with patterns that
        // have their own year defined
        "2015 @1705072948",
        "2015 @1705072948.544",
        "2015 00900101",
        "20230101 2015",
        "2015 2023-01-01",
        "2015 7.2.2023",
        "2015 2/7/2023",
        "2015 2023-12-07 15:02",
        "2015 2023-12-07 15:02:01",
        "2015 2023-12-07 15:02:01.000",
        "2015 2023-12-07T15:02:01",
        "2015 2023-12-07T15:02:01.04",
        "2015 Wed, July 23 2008",
        "2015 Wed, 23 July 2008",
        "2015 Thu Dec 07 02:00:00 2023",
        "2015 2015",
    ]);
}

#[test]
fn test_unsupported() {
    assert_convert_failure(vec![
        "",                          // Not parsed
        " ",                         // Nothing to parse
        "2024-12-01 7",              // Unknown part
        "+1day",                     // Not recognized
        "0000-01-12 15:22",          // Year invalid
        "2024-W0",                   // Week invalid
        "2025-W53",                  // Week invalid
        "1982-04-32",                // Date invalid
        "1982-04-01 15:61",          // Time invalid
        "1995-07-01 12:00:00.10000", // Milliseconds invalid
        "1995-07-01 12:00:00.1000",  // Milliseconds invalid
        "1995-07-01 12:00:00.0001",  // Milliseconds invalid
        "1995-07-01 12:00:00.0010",  // Milliseconds invalid
        "1995-07-01 12:00:00.0230",  // Milliseconds invalid
        "2023-12-07t15:02:01",       // Lowercase T not supported
        "2023w01",                   // Lowercase W not supported
        "Feb 29th 2023",             // Day out of range
        "first of year",             // Not supported
        "first of the year",         // Not supported
        "first day of this week",    // Not supported
        "first minute of Jan",       // Not supported
        "7 of Jan",                  // Missing nth supported
        "Tue, 23 July 2008",         // Wrong weekday with date pattern
        "2008 Tue 23 July",          // Wrong weekday with year pattern
        "Tue, 7 Dec",                // Wrong weekday
        "Fri Dec 07 02:00:00 2023",  // Wrong weekday
        "23:61:00",                  // Invalid time of day
        "tuesday 2023-05-01",        // Invalid use of weekday
        "month 7, 2023",             // Invalid unit for syntax
    ])
}

fn assert_convert_failure(expect: Vec<&str>) {
    let current_time = "2024-01-12T15:22:28+02:00";

    for from_string in expect {
        let result_time = FuzzyDate::from_rfc3339(current_time).to_datetime(from_string);
        assert!(result_time.is_none());
    }
}

fn assert_convert_from_mon(expect: Vec<(&str, &str, &str)>) {
    for (from_string, current_time, expect_time) in expect {
        let result_time = FuzzyDate::from_rfc3339(current_time)
            .set_first_weekday(WeekStartDay::Monday)
            .to_datetime(from_string);

        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());
    }
}

fn assert_convert_from_sun(expect: Vec<(&str, &str, &str)>) {
    for (from_string, current_time, expect_time) in expect {
        let result_time = FuzzyDate::from_rfc3339(current_time)
            .set_first_weekday(WeekStartDay::Sunday)
            .to_datetime(from_string);

        assert_eq!(result_time.unwrap().to_string(), expect_time.to_string());
    }
}
