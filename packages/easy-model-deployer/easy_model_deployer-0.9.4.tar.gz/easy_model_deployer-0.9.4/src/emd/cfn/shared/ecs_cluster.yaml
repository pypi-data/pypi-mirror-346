AWSTemplateFormatVersion: '2010-09-09'
Description: Easy Model Deployer ECS Cluster - Ensure all associated models are deleted before removing this stack. Please go to https://github.com/aws-samples/easy-model-deployer for more information.
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID to be used for the ECS cluster
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The public subnets to be used for the ECS cluster
  APIRouterImageURI:
    Type: String
    Description: The URI of OpenAI compatbile API router image. If provided, the router will be deployed.
    Default: "public.ecr.aws/aws-gcr-solutions/dmaa/api-router:latest"
  UseSpot:
    Type: String
    Description: Use Fargate Spot capacity?
    Default: "no"
    AllowedValues: ["yes", "no"]

Conditions:
  DeployAPIRouterCondition: !Not [!Equals [!Ref APIRouterImageURI, ""]]
  UseSpotCondition: !Equals [!Ref UseSpot, "yes"]
  IsChinaRegionCondition: !Or
    - !Equals [!Ref "AWS::Region", "cn-north-1"]
    - !Equals [!Ref "AWS::Region", "cn-northwest-1"]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ServiceConnectDefaults:
        Namespace: emd-service-connect-namespace
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 'EMD-alb-sg'
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            ContentType: 'text/plain'
            MessageBody: 'Not Found'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonECS_FullAccess
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaECSManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:PutClusterCapacityProviders
                  - ecs:DescribeClusters
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - elasticloadbalancing:DescribeRules
                Resource: '*'

  LambdaDeploymentHelper:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import os

          def update_capacity_provider(event, context):
              ecs_client = boto3.client('ecs')
              cluster_name = os.environ['ECS_CLUSTER_NAME']
              capacity_provider_name = event['ResourceProperties']['CapacityProvider']

              def try_update_with_retry():
                  # Simple retry mechanism - try twice with a delay
                  try:
                      return _do_update()
                  except Exception as e:
                      if 'UpdateInProgressException' in str(e):
                          print("Cluster busy, waiting 30 seconds before retry...")
                          import time
                          time.sleep(30)
                          return _do_update()  # Try once more
                      else:
                          raise  # Re-raise if it's not the specific error we're handling

              def _do_update():
                  cluster_info = ecs_client.describe_clusters(clusters=[cluster_name])['clusters'][0]
                  current_capacity_providers = cluster_info.get('capacityProviders', [])

                  if capacity_provider_name not in current_capacity_providers:
                      current_capacity_providers.append(capacity_provider_name)

                  return ecs_client.put_cluster_capacity_providers(
                      cluster=cluster_name,
                      capacityProviders=current_capacity_providers,
                      defaultCapacityProviderStrategy=[
                          {
                              'capacityProvider': capacity_provider_name,
                              'weight': 1,
                              'base': 0
                          }
                      ]
                  )

              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      try_update_with_retry()
                  elif event['RequestType'] == 'Delete':
                      def _do_delete():
                          # Retrieve current capacity providers
                          cluster_info = ecs_client.describe_clusters(clusters=[cluster_name])['clusters'][0]
                          current_capacity_providers = cluster_info.get('capacityProviders', [])

                          # Remove only the specific capacity provider
                          updated_capacity_providers = [
                              cp for cp in current_capacity_providers if cp != capacity_provider_name
                          ]

                          return ecs_client.put_cluster_capacity_providers(
                              cluster=cluster_name,
                              capacityProviders=updated_capacity_providers,
                              defaultCapacityProviderStrategy=[]
                          )

                      # Simple retry for delete operation too
                      try:
                          _do_delete()
                      except Exception as e:
                          if 'UpdateInProgressException' in str(e):
                              print("Cluster busy during delete, waiting 30 seconds before retry...")
                              import time
                              time.sleep(30)
                              _do_delete()  # Try once more
                          else:
                              raise
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

          def get_priority_number(event, context):
              elbv2_client = boto3.client('elbv2')
              listener_arn = os.environ['LISTENER_ARN']
              response_data = {}
              response_status = "SUCCESS"

              try:
                  in_use = sorted(int(r['Priority']) for r in elbv2_client.describe_rules(ListenerArn=listener_arn)['Rules'] if r['Priority'].isdecimal())
                  priority = next((str(i) for i in range(100, 200) if i not in in_use), None)

                  if priority is None:
                      raise Exception("No available priority numbers in the specified range.")

                  response_data = {'Priority': priority}
              except Exception as e:
                  response_status = "FAILED"
                  response_data = {'Error': str(e)}

              # Send response back to CloudFormation
              cfnresponse.send(event, context, response_status, response_data)

          def convert_dns_name(event, context):
              """
              Converts a DNS name to comply with AWS Service Connect naming rules.
              DNS names can only contain lowercase letters and numbers.
              """
              import re

              # Get the input DNS name from the event
              dns_name = event['ResourceProperties'].get('ModelName', '')

              # Step 1: Convert to lowercase
              dns_name = dns_name.lower()

              # Step 2: Replace any character that is not a lowercase letter or number with a hyphen
              dns_name = re.sub(r'[^a-z0-9]', '-', dns_name)

              response_data = {'DnsName': dns_name}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

          def force_api_router_deployment(event, context):
              """
              Forces a new deployment for the APIRouterService.
              This will restart the service with the latest task definition.
              """
              ecs_client = boto3.client('ecs')
              cluster_name = os.environ['ECS_CLUSTER_NAME']
              service_name = "EMD-API-Router"

              try:
                  # Check if the service exists
                  response = ecs_client.describe_services(
                      cluster=cluster_name,
                      services=[service_name]
                  )

                  if not response['services'] or response['services'][0]['status'] != 'ACTIVE':
                      response_data = {'Message': f"Service {service_name} not found or not active in cluster {cluster_name}"}
                  else:
                    # Force a new deployment
                    ecs_client.update_service(
                        cluster=cluster_name,
                        service=service_name,
                        forceNewDeployment=True,
                    )
                    response_data = {'Message': f"Forced new deployment for {service_name}"}

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f"Error forcing deployment: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

          def handler(event, context):
              print(event)
              print(context)
              logical_resource_id = event['LogicalResourceId']
              function_name = ''
              for char in logical_resource_id:
                  if char.isupper():
                      function_name += '_' + char.lower()
                  else:
                      function_name += char
              function_name = function_name.lstrip('_')
              globals()[function_name](event, context)

      Runtime: python3.10
      Timeout: 300
      Environment:
        Variables:
          ECS_CLUSTER_NAME: !Ref ECSCluster
          LISTENER_ARN: !Ref PublicLoadBalancerListener
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /ecs/emd-cluster
      RetentionInDays: 7

  # OpenAI API Compatbile Router Resources (Conditional)
  APIRouterTaskExecutionRole:
    Type: AWS::IAM::Role
    Condition: DeployAPIRouterCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - application-autoscaling.amazonaws.com
                - !If [IsChinaRegionCondition, "application-autoscaling.amazonaws.com.cn", !Ref "AWS::NoValue"]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-task-execution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecs:UpdateService'
                  - 'ecs:DescribeServices'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                Resource: '*'

  APIRouterTaskRole:
    Type: AWS::IAM::Role
    Condition: DeployAPIRouterCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-task-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudformation:ListStacks'
                  - 'cloudformation:DescribeStacks'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sagemaker:InvokeEndpoint'
                  - 'sagemaker:InvokeEndpointWithResponseStream'
                Resource: '*'

  APIRouterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: DeployAPIRouterCondition
    Properties:
      Family: EMD-API-Router
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt APIRouterTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt APIRouterTaskRole.Arn
      ContainerDefinitions:
        - Name: api-router
          Image: !Ref APIRouterImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-router

  APIRouterService:
    Type: AWS::ECS::Service
    Condition: DeployAPIRouterCondition
    Properties:
      ServiceName: EMD-API-Router
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !GetAtt APIRouterSecurityGroup.GroupId
      TaskDefinition: !Ref APIRouterTaskDefinition
      LoadBalancers:
        - ContainerName: api-router
          ContainerPort: 8080
          TargetGroupArn: !Ref APIRouterTargetGroup
      CapacityProviderStrategy:
        - !If
          - UseSpotCondition
          - CapacityProvider: FARGATE_SPOT
            Weight: 1
          - CapacityProvider: FARGATE
            Weight: 1
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: emd-service-connect-namespace

  APIRouterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: DeployAPIRouterCondition
    Properties:
      GroupDescription: Security group for OpenAI compatbile API router
      VpcId: !Ref VPCID

  APIRouterScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: DeployAPIRouterCondition
    Properties:
      PolicyName: cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref APIRouterScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  APIRouterScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: DeployAPIRouterCondition
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join ["/", [service, !Ref ECSCluster, !GetAtt APIRouterService.Name]]
      RoleARN: !GetAtt APIRouterTaskExecutionRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  APIRouterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PublicLoadBalancer
    Condition: DeployAPIRouterCondition
    Properties:
      Name: !Sub ${AWS::StackName}-router-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCID
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"

  APIRouterListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: DeployAPIRouterCondition
    DependsOn: [PublicLoadBalancerListener, APIRouterTargetGroup]
    Properties:
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 10
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APIRouterTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/health", "/ping", "/v1/*"]

  ServiceIngressfromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !GetAtt APIRouterSecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

Outputs:
  ECSCluster:
    Description: The ECS cluster into which to launch resources
    Value: !Ref ECSCluster
  LogGroup:
    Description: The log group
    Value: !Ref LogGroup
  DNSName:
    Description: The DNS name of the public load balancer. To use HTTPS, create an SSL certificate in AWS Certificate Manager and attach it to the load balancer.
    Value: !GetAtt PublicLoadBalancer.DNSName
  PublicLoadBalancerListenerArn:
    Description: The ARN of the public load balancer listener
    Value: !GetAtt PublicLoadBalancerListener.ListenerArn
  PublicLoadBalancerSecurityGroup:
    Description: The security group for the public load balancer
    Value: !Ref PublicLoadBalancerSecurityGroup
  LambdaDeploymentHelperArn:
    Description: The Lambda function for capacity provider association
    Value: !GetAtt LambdaDeploymentHelper.Arn
  APIRouterServiceName:
    Description: The name of the OpenAI compatbile API router ECS Service
    Value: !If [DeployAPIRouterCondition, !Ref APIRouterService, ""]
  APIRouterTaskDefinition:
    Description: The ARN of the OpenAI compatbile API router Task Definition
    Value: !If [DeployAPIRouterCondition, !Ref APIRouterTaskDefinition, ""]
  APIRouterTargetGroupArn:
    Description: The ARN of the OpenAI compatbile API outer Target Group
    Value: !If [DeployAPIRouterCondition, !Ref APIRouterTargetGroup, ""]
  APIRouterSecurityGroup:
    Description: The security group for the OpenAI compatbile API router
    Value: !GetAtt APIRouterSecurityGroup.GroupId
