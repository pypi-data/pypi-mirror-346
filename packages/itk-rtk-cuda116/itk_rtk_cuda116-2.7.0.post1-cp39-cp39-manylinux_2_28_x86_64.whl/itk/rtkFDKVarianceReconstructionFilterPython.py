# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKVarianceReconstructionFilterPython
else:
    import _rtkFDKVarianceReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkCudaImageRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageSourceRTKPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkFFTVarianceRampImageFilterPython
import itk.rtkFFTRampImageFilterPython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.rtkFDKBackProjectionImageFilterPython
import itk.rtkBackProjectionImageFilterPython

def rtkFDKVarianceReconstructionFilterCIF3CIF3F_New():
    return rtkFDKVarianceReconstructionFilterCIF3CIF3F.New()

class rtkFDKVarianceReconstructionFilterCIF3CIF3F(itk.itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterCIF3):
    r"""Proxy of C++ rtkFDKVarianceReconstructionFilterCIF3CIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKVarianceReconstructionFilterCIF3CIF3F_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKVarianceReconstructionFilterCIF3CIF3F_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_SetGeometry(self, _arg)

    def GetVarianceRampFilter(self):
        r"""GetVarianceRampFilter(self) -> rtkFFTVarianceRampImageFilterCIF3CIF3F_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_GetVarianceRampFilter(self)

    def GetProjectionSubsetSize(self):
        r"""GetProjectionSubsetSize(self) -> unsigned int"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_GetProjectionSubsetSize(self)

    def SetProjectionSubsetSize(self, _arg):
        r"""
        SetProjectionSubsetSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_SetProjectionSubsetSize(self, _arg)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkFDKBackProjectionImageFilterCIF3CIF3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_GetBackProjectionFilter(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkFDKBackProjectionImageFilterCIF3CIF3_Pointer const

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_SetBackProjectionFilter(self, _arg)
    __swig_destroy__ = _rtkFDKVarianceReconstructionFilterPython.delete_rtkFDKVarianceReconstructionFilterCIF3CIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKVarianceReconstructionFilterCIF3CIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKVarianceReconstructionFilterCIF3CIF3F

        Create a new object of the class rtkFDKVarianceReconstructionFilterCIF3CIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKVarianceReconstructionFilterCIF3CIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKVarianceReconstructionFilterCIF3CIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKVarianceReconstructionFilterCIF3CIF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKVarianceReconstructionFilterCIF3CIF3F in _rtkFDKVarianceReconstructionFilterPython:
_rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterCIF3CIF3F_swigregister(rtkFDKVarianceReconstructionFilterCIF3CIF3F)

def rtkFDKVarianceReconstructionFilterID3_New():
    return rtkFDKVarianceReconstructionFilterID3.New()

class rtkFDKVarianceReconstructionFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKVarianceReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKVarianceReconstructionFilterID3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKVarianceReconstructionFilterID3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_SetGeometry(self, _arg)

    def GetVarianceRampFilter(self):
        r"""GetVarianceRampFilter(self) -> rtkFFTVarianceRampImageFilterID3ID3D_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_GetVarianceRampFilter(self)

    def GetProjectionSubsetSize(self):
        r"""GetProjectionSubsetSize(self) -> unsigned int"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_GetProjectionSubsetSize(self)

    def SetProjectionSubsetSize(self, _arg):
        r"""
        SetProjectionSubsetSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_SetProjectionSubsetSize(self, _arg)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkFDKBackProjectionImageFilterID3ID3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_GetBackProjectionFilter(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkFDKBackProjectionImageFilterID3ID3_Pointer const

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_SetBackProjectionFilter(self, _arg)
    __swig_destroy__ = _rtkFDKVarianceReconstructionFilterPython.delete_rtkFDKVarianceReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKVarianceReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKVarianceReconstructionFilterID3

        Create a new object of the class rtkFDKVarianceReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKVarianceReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKVarianceReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKVarianceReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKVarianceReconstructionFilterID3 in _rtkFDKVarianceReconstructionFilterPython:
_rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterID3_swigregister(rtkFDKVarianceReconstructionFilterID3)

def rtkFDKVarianceReconstructionFilterIF3_New():
    return rtkFDKVarianceReconstructionFilterIF3.New()

class rtkFDKVarianceReconstructionFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKVarianceReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKVarianceReconstructionFilterIF3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKVarianceReconstructionFilterIF3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_SetGeometry(self, _arg)

    def GetVarianceRampFilter(self):
        r"""GetVarianceRampFilter(self) -> rtkFFTVarianceRampImageFilterIF3IF3D_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_GetVarianceRampFilter(self)

    def GetProjectionSubsetSize(self):
        r"""GetProjectionSubsetSize(self) -> unsigned int"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_GetProjectionSubsetSize(self)

    def SetProjectionSubsetSize(self, _arg):
        r"""
        SetProjectionSubsetSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_SetProjectionSubsetSize(self, _arg)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_GetBackProjectionFilter(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkFDKBackProjectionImageFilterIF3IF3_Pointer const

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_SetBackProjectionFilter(self, _arg)
    __swig_destroy__ = _rtkFDKVarianceReconstructionFilterPython.delete_rtkFDKVarianceReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKVarianceReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKVarianceReconstructionFilterIF3

        Create a new object of the class rtkFDKVarianceReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKVarianceReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKVarianceReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKVarianceReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKVarianceReconstructionFilterIF3 in _rtkFDKVarianceReconstructionFilterPython:
_rtkFDKVarianceReconstructionFilterPython.rtkFDKVarianceReconstructionFilterIF3_swigregister(rtkFDKVarianceReconstructionFilterIF3)

def itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_New():
    return itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New()

class itkCudaImageToImageFilterCIF3CIF3FDKCIF3F(rtkFDKVarianceReconstructionFilterCIF3CIF3F):
    r"""Proxy of C++ itkCudaImageToImageFilterCIF3CIF3FDKCIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_Pointer"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageF3 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageF3 *

        """
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GraftOutput(self, *args)
    __swig_destroy__ = _rtkFDKVarianceReconstructionFilterPython.delete_itkCudaImageToImageFilterCIF3CIF3FDKCIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIF3CIF3FDKCIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIF3CIF3FDKCIF3F

        Create a new object of the class itkCudaImageToImageFilterCIF3CIF3FDKCIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIF3CIF3FDKCIF3F in _rtkFDKVarianceReconstructionFilterPython:
_rtkFDKVarianceReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_swigregister(itkCudaImageToImageFilterCIF3CIF3FDKCIF3F)
class itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F(itkCudaImageToImageFilterCIF3CIF3FDKCIF3F):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkFDKVarianceReconstructionFilterPython.delete_itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKVarianceReconstructionFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_cast(obj)

# Register itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F in _rtkFDKVarianceReconstructionFilterPython:
_rtkFDKVarianceReconstructionFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_swigregister(itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fdk_variance_reconstruction_filter(*args: itkt.ImageLike,  geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FDKVarianceReconstructionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FDKVarianceReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fdk_variance_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FDKVarianceReconstructionFilter
    fdk_variance_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fdk_variance_reconstruction_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_image_to_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaImageToImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaImageToImageFilter
    cuda_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_in_place_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaInPlaceImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaInPlaceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_in_place_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaInPlaceImageFilter
    cuda_in_place_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_in_place_image_filter.__doc__ = filter_object.__doc__



