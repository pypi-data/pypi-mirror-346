import pytest


@pytest.mark.parametrize("data, cidr, expected", [
    ([], "200.200.77.77/32", False),
    ([], "0.0.0.0/0", False),
    (["200.200.77.0/25"], "200.200.77.0/24", False),
    (["1.0.0.0/24"], "1.0.0.0/16", False),
    (["200.200.77.77/32"], "200.200.77.77/32", True),
    (["200.200.77.0/24"], "200.200.77.128/25", True),
    (["200.200.77.0/24", "2.200.77.0/24"], "2.200.77.128/25", True),
    (["2.200.77.0/24", "2.200.77.128/26", "2.200.77.128/29"], "2.200.77.128/25", True),
    (["0.0.0.0/0"], "0.0.0.0/0", True),
    (["66.200.30.64/27", "65.99.53.176/28"], "66.200.30.64/27", True),
    (["209.34.181.65/32", "72.246.136.23/32"], "209.34.181.65/32", True),
    (["151.206.175.38/32", "221.248.188.240/29"], "221.248.188.240/29", True),
    (["76aa:b7c4:07d3:a831:b5b4:8dab:38de:13af/120"], "76aa:b7c4:07d3:a831:b5b4:8dab:38de:13af", True),
    (["76aa:b7c4:07d3:a831:b5b4:8dab:38de:13af/120"], "86aa:b7c4:07d3:a831:b5b4:8dab:38de:13af", False),
])
def testIsContainsCidr(data, cidr, expected):
    import ipset_c
    res = ipset_c.IPSet(data).isContainsCidr(cidr)
    assert res == expected
    assert (cidr in ipset_c.IPSet(data)) == expected


@pytest.mark.parametrize("data, cidr, expected", [
    ([], "200.200.77.77/32", False),
    ([], "0.0.0.0/0", False),
    (["1.0.0.0/24"], "1.0.0.0/16", True),
    (["200.200.77.0/25"], "200.200.77.0/24", True),
    (["209.34.181.65/32", "72.246.136.23/32"], "209.34.181.65/32", True),
    (["151.206.175.38/32", "221.248.188.240/29"], "221.248.188.240/29", True),
    (["0.0.0.0/0"], "0.0.0.0/0", True),
    (["5436:ddc2:3f0b:c15c:504b:86bb:fd28:4567/120"], "5436:ddc2:3f0b:c15c:504b:86bb:fd28::/112", True),
])
def testIsIntersectsCidr(data, cidr, expected):
    import ipset_c
    res = ipset_c.IPSet(data).isIntersectsCidr(cidr)
    assert res == expected


@pytest.mark.parametrize("data, cidrs, expected", [
    (
        ["77.0.193.118/32", "73.20.199.241/19"],
        ["100.65.180.196/28"],
        ["73.20.192.0/19", "77.0.193.118/32", "100.65.180.192/28"]
    ),
    (
        ["77.0.193.118/32", "73.20.199.241/19"],
        ["100.65.180.196/28", "100.65.180.196/28"],
        ["73.20.192.0/19", "77.0.193.118/32", "100.65.180.192/28"]
    ),
    ([], ["0.0.0.0/0"], ["0.0.0.0/0"]),
    (["0.0.0.0/1"], ["128.0.0.0/1"], ["0.0.0.0/0"]),
    (["255.255.255.255/32"], ["255.255.255.254/32"], ["255.255.255.254/31"]),
    (["255.255.255.254/32"], ["255.255.255.255/32"], ["255.255.255.254/31"]),
    (["0.0.0.0/25"], ["0.0.0.0/24"], ["0.0.0.0/24"]),
    (
        ["195.30.57.200/21", "2.140.52.209/20", "142.74.105.190/20"],
        ["117.214.11.113/18"],
        ["2.140.48.0/20", "117.214.0.0/18", "142.74.96.0/20", "195.30.56.0/21"]
    ),
    (["0.0.0.2/32", "0.0.0.5/32"], ["0.0.0.0/24"], ["0.0.0.0/24"]),
    (["0.0.0.0/32", "0.0.0.255/32"], ["0.0.0.0/24"], ["0.0.0.0/24"]),
    (["8.8.0.0/17", "8.24.0.0/17", "8.255.2.0/32"], ["8.0.0.0/8"], ["8.0.0.0/8"]),
    (
        ["76aa:b7c4:07d3:a831:b5b4:8dab:38de:13af/120"],
        ["76aa:b7c4:07d3:a831:b5b4:8dab:38de:13af/128", "::ffff:142.74.96.0/128"],
        ["::ffff:142.74.96.0/128", "76aa:b7c4:7d3:a831:b5b4:8dab:38de:1300/120"]
    ),
])
def testAddCidr(data, cidrs, expected):
    import ipset_c
    obj = ipset_c.IPSet(data)
    for cidr in cidrs:
        obj.addCidr(cidr)
    res = obj.getCidrs()
    assert res == expected


@pytest.mark.parametrize("data, cidrs, expected", [
    (["0.0.0.0/31"], ["0.0.0.1/32"], ["0.0.0.0/32"]),
    (["0.0.0.0/31"], ["0.0.0.0/31"], []),
    (["0.0.0.0/32"], ["0.0.0.0/30"], []),
    (["111.111.111.0/24"], ["0.0.0.0/30"], ["111.111.111.0/24"]),
    (["16.61.157.205/29", "189.79.179.244/18"], ["16.61.157.205/29"], ["189.79.128.0/18"]),
    (["0.0.0.0/30"], ["0.0.0.1/32"], ["0.0.0.0/32", "0.0.0.2/31"]),
    (["0.0.0.0/30"], ["0.0.0.2/32"], ["0.0.0.0/31", "0.0.0.3/32"]),
    (
        ["0.0.0.0/24"],
        ["0.0.0.129/32"],
        [
            "0.0.0.0/25", "0.0.0.128/32", "0.0.0.130/31", "0.0.0.132/30",
            "0.0.0.136/29", "0.0.0.144/28", "0.0.0.160/27", "0.0.0.192/26"
        ]
    ),
    ([], ["5.5.55.0/24"], []),
    (
        ["0.0.0.0/0"],
        ["0.0.0.65/32"],
        [
            "0.0.0.0/26", "0.0.0.64/32", "0.0.0.66/31", "0.0.0.68/30",
            "0.0.0.72/29", "0.0.0.80/28", "0.0.0.96/27", "0.0.0.128/25",
            "0.0.1.0/24", "0.0.2.0/23", "0.0.4.0/22", "0.0.8.0/21",
            "0.0.16.0/20", "0.0.32.0/19", "0.0.64.0/18", "0.0.128.0/17",
            "0.1.0.0/16", "0.2.0.0/15", "0.4.0.0/14", "0.8.0.0/13",
            "0.16.0.0/12", "0.32.0.0/11", "0.64.0.0/10", "0.128.0.0/9",
            "1.0.0.0/8", "2.0.0.0/7", "4.0.0.0/6", "8.0.0.0/5",
            "16.0.0.0/4", "32.0.0.0/3", "64.0.0.0/2", "128.0.0.0/1"
        ]
    ),
    (
        ["0.0.0.0/0"],
        ["255.255.255.255/32"],
        [
            "0.0.0.0/1", "128.0.0.0/2", "192.0.0.0/3", "224.0.0.0/4",
            "240.0.0.0/5", "248.0.0.0/6", "252.0.0.0/7", "254.0.0.0/8",
            "255.0.0.0/9", "255.128.0.0/10", "255.192.0.0/11", "255.224.0.0/12",
            "255.240.0.0/13", "255.248.0.0/14", "255.252.0.0/15", "255.254.0.0/16",
            "255.255.0.0/17", "255.255.128.0/18", "255.255.192.0/19", "255.255.224.0/20",
            "255.255.240.0/21", "255.255.248.0/22", "255.255.252.0/23", "255.255.254.0/24",
            "255.255.255.0/25", "255.255.255.128/26", "255.255.255.192/27", "255.255.255.224/28",
            "255.255.255.240/29", "255.255.255.248/30", "255.255.255.252/31", "255.255.255.254/32"
        ]
    ),
    (["0.0.0.2/32", "0.0.0.5/32"], ["0.0.0.0/24"], []),
    (["0.0.0.2/32", "0.0.0.5/32"], ["5.0.0.0/32"], ["0.0.0.2/32", "0.0.0.5/32"]),
    (
        ["eafb:6bf5:ecb1:b049:dc39:14a2::/96"],
        ["eafb:6bf5:ecb1:b049:dc39:14a2:414b:0571/97", "4afb:6bf5:ecb1:b049:dc39:14a2:414b:0571/97"],
        ["eafb:6bf5:ecb1:b049:dc39:14a2:8000:0/97"]
    ),
    (
        ["0d66:ba9d:53a0:58dd:b9f6:2f6a:6951:a7d0"],
        ["0d66:ba9d:53a0:58dd:b9f6:2f6a::/96"],
        []
    ),
    (
        ["76aa:b7c4::/30"],
        ["76aa:b7c5::/32"],
        ["76aa:b7c4::/32", "76aa:b7c6::/31",]
    ),
])
def testRemoveCidrValid(data, cidrs, expected):
    import ipset_c
    obj = ipset_c.IPSet(data)
    for cidr in cidrs:
        obj.removeCidr(cidr)
    res = obj.getCidrs()
    assert res == expected


@pytest.mark.parametrize("data, cidr", [
    ([], 8),
    ([], ["200.200.77.77/32"]),
    ([], None),
    ([], {}),
])
def testCidrTypeError(data, cidr):
    import ipset_c
    obj = ipset_c.IPSet(data)
    with pytest.raises(TypeError):
        obj.isContainsCidr(cidr)
    with pytest.raises(TypeError):
        cidr in ipset_c.IPSet(data)
    with pytest.raises(TypeError):
        obj.isIntersectsCidr(cidr)
    with pytest.raises(TypeError):
        obj.addCidr(cidr)
    with pytest.raises(TypeError):
        obj.removeCidr(cidr)


@pytest.mark.parametrize("data, cidr", [
    ([], "200.2005.77.77/32"),
    ([], "11111111111111111111111111111111111111111111111111111111111"),
])
def testCidrValueError(data, cidr):
    import ipset_c
    obj = ipset_c.IPSet(data)
    with pytest.raises(ValueError):
        obj.isContainsCidr(cidr)
    with pytest.raises(ValueError):
        cidr in ipset_c.IPSet(data)
    with pytest.raises(ValueError):
        obj.isIntersectsCidr(cidr)
    with pytest.raises(ValueError):
        obj.addCidr(cidr)
    with pytest.raises(ValueError):
        obj.removeCidr(cidr)
