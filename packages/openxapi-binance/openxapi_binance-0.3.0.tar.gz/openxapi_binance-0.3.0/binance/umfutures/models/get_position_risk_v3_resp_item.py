# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetPositionRiskV3RespItem(BaseModel):
    """
    GetPositionRiskV3RespItem
    """ # noqa: E501
    adl: Optional[StrictInt] = None
    ask_notional: Optional[StrictStr] = Field(default=None, alias="askNotional")
    bid_notional: Optional[StrictStr] = Field(default=None, alias="bidNotional")
    break_even_price: Optional[StrictStr] = Field(default=None, alias="breakEvenPrice")
    entry_price: Optional[StrictStr] = Field(default=None, alias="entryPrice")
    initial_margin: Optional[StrictStr] = Field(default=None, alias="initialMargin")
    isolated_margin: Optional[StrictStr] = Field(default=None, alias="isolatedMargin")
    isolated_wallet: Optional[StrictStr] = Field(default=None, alias="isolatedWallet")
    liquidation_price: Optional[StrictStr] = Field(default=None, alias="liquidationPrice")
    maint_margin: Optional[StrictStr] = Field(default=None, alias="maintMargin")
    margin_asset: Optional[StrictStr] = Field(default=None, alias="marginAsset")
    mark_price: Optional[StrictStr] = Field(default=None, alias="markPrice")
    notional: Optional[StrictStr] = None
    open_order_initial_margin: Optional[StrictStr] = Field(default=None, alias="openOrderInitialMargin")
    position_amt: Optional[StrictStr] = Field(default=None, alias="positionAmt")
    position_initial_margin: Optional[StrictStr] = Field(default=None, alias="positionInitialMargin")
    position_side: Optional[StrictStr] = Field(default=None, alias="positionSide")
    symbol: Optional[StrictStr] = None
    un_realized_profit: Optional[StrictStr] = Field(default=None, alias="unRealizedProfit")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["adl", "askNotional", "bidNotional", "breakEvenPrice", "entryPrice", "initialMargin", "isolatedMargin", "isolatedWallet", "liquidationPrice", "maintMargin", "marginAsset", "markPrice", "notional", "openOrderInitialMargin", "positionAmt", "positionInitialMargin", "positionSide", "symbol", "unRealizedProfit", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPositionRiskV3RespItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPositionRiskV3RespItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adl": obj.get("adl"),
            "askNotional": obj.get("askNotional"),
            "bidNotional": obj.get("bidNotional"),
            "breakEvenPrice": obj.get("breakEvenPrice"),
            "entryPrice": obj.get("entryPrice"),
            "initialMargin": obj.get("initialMargin"),
            "isolatedMargin": obj.get("isolatedMargin"),
            "isolatedWallet": obj.get("isolatedWallet"),
            "liquidationPrice": obj.get("liquidationPrice"),
            "maintMargin": obj.get("maintMargin"),
            "marginAsset": obj.get("marginAsset"),
            "markPrice": obj.get("markPrice"),
            "notional": obj.get("notional"),
            "openOrderInitialMargin": obj.get("openOrderInitialMargin"),
            "positionAmt": obj.get("positionAmt"),
            "positionInitialMargin": obj.get("positionInitialMargin"),
            "positionSide": obj.get("positionSide"),
            "symbol": obj.get("symbol"),
            "unRealizedProfit": obj.get("unRealizedProfit"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


