# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(BaseModel):
    """
    UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem
    """ # noqa: E501
    activation_price: Optional[StrictStr] = Field(default='', alias="activationPrice")
    callback_rate: Optional[StrictStr] = Field(default='', alias="callbackRate")
    good_till_date: Optional[StrictInt] = Field(default=None, alias="goodTillDate")
    new_client_order_id: Optional[StrictStr] = Field(default='', alias="newClientOrderId")
    new_order_resp_type: Optional[StrictStr] = Field(default='', alias="newOrderRespType")
    position_side: Optional[StrictStr] = Field(default='', alias="positionSide")
    price: Optional[StrictStr] = ''
    price_match: Optional[StrictStr] = Field(default='', alias="priceMatch")
    price_protect: Optional[StrictStr] = Field(default='', alias="priceProtect")
    quantity: StrictStr
    reduce_only: Optional[StrictStr] = Field(default='', alias="reduceOnly")
    self_trade_prevention_mode: Optional[StrictStr] = Field(default='', alias="selfTradePreventionMode")
    side: StrictStr
    stop_price: Optional[StrictStr] = Field(default='', alias="stopPrice")
    symbol: StrictStr
    time_in_force: Optional[StrictStr] = Field(default='', alias="timeInForce")
    type: StrictStr
    working_type: Optional[StrictStr] = Field(default='', alias="workingType")
    __properties: ClassVar[List[str]] = ["activationPrice", "callbackRate", "goodTillDate", "newClientOrderId", "newOrderRespType", "positionSide", "price", "priceMatch", "priceProtect", "quantity", "reduceOnly", "selfTradePreventionMode", "side", "stopPrice", "symbol", "timeInForce", "type", "workingType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationPrice": obj.get("activationPrice") if obj.get("activationPrice") is not None else '',
            "callbackRate": obj.get("callbackRate") if obj.get("callbackRate") is not None else '',
            "goodTillDate": obj.get("goodTillDate"),
            "newClientOrderId": obj.get("newClientOrderId") if obj.get("newClientOrderId") is not None else '',
            "newOrderRespType": obj.get("newOrderRespType") if obj.get("newOrderRespType") is not None else '',
            "positionSide": obj.get("positionSide") if obj.get("positionSide") is not None else '',
            "price": obj.get("price") if obj.get("price") is not None else '',
            "priceMatch": obj.get("priceMatch") if obj.get("priceMatch") is not None else '',
            "priceProtect": obj.get("priceProtect") if obj.get("priceProtect") is not None else '',
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else '',
            "reduceOnly": obj.get("reduceOnly") if obj.get("reduceOnly") is not None else '',
            "selfTradePreventionMode": obj.get("selfTradePreventionMode") if obj.get("selfTradePreventionMode") is not None else '',
            "side": obj.get("side") if obj.get("side") is not None else '',
            "stopPrice": obj.get("stopPrice") if obj.get("stopPrice") is not None else '',
            "symbol": obj.get("symbol") if obj.get("symbol") is not None else '',
            "timeInForce": obj.get("timeInForce") if obj.get("timeInForce") is not None else '',
            "type": obj.get("type") if obj.get("type") is not None else '',
            "workingType": obj.get("workingType") if obj.get("workingType") is not None else ''
        })
        return _obj


