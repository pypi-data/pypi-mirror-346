# coding: utf-8

"""
    Binance COIN-M Futures API

    OpenAPI specification for Binance exchange - Cmfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.cmfutures.models.cmfutures_symbol_filter import CmfuturesSymbolFilter
from typing import Optional, Set
from typing_extensions import Self

class CmfuturesGetExchangeInfoV1RespSymbolsInner(BaseModel):
    """
    CmfuturesGetExchangeInfoV1RespSymbolsInner
    """ # noqa: E501
    order_type: Optional[List[StrictStr]] = Field(default=None, alias="OrderType")
    base_asset: Optional[StrictStr] = Field(default=None, alias="baseAsset")
    base_asset_precision: Optional[StrictInt] = Field(default=None, alias="baseAssetPrecision")
    contract_size: Optional[StrictInt] = Field(default=None, alias="contractSize")
    contract_status: Optional[StrictStr] = Field(default=None, alias="contractStatus")
    contract_type: Optional[StrictStr] = Field(default=None, alias="contractType")
    delivery_date: Optional[StrictInt] = Field(default=None, alias="deliveryDate")
    equal_qty_precision: Optional[StrictInt] = Field(default=None, alias="equalQtyPrecision")
    filters: Optional[List[CmfuturesSymbolFilter]] = None
    liquidation_fee: Optional[StrictStr] = Field(default=None, alias="liquidationFee")
    maint_margin_percent: Optional[StrictStr] = Field(default=None, alias="maintMarginPercent")
    margin_asset: Optional[StrictStr] = Field(default=None, alias="marginAsset")
    market_take_bound: Optional[StrictStr] = Field(default=None, alias="marketTakeBound")
    onboard_date: Optional[StrictInt] = Field(default=None, alias="onboardDate")
    pair: Optional[StrictStr] = None
    price_precision: Optional[StrictInt] = Field(default=None, alias="pricePrecision")
    quantity_precision: Optional[StrictInt] = Field(default=None, alias="quantityPrecision")
    quote_asset: Optional[StrictStr] = Field(default=None, alias="quoteAsset")
    quote_precision: Optional[StrictInt] = Field(default=None, alias="quotePrecision")
    required_margin_percent: Optional[StrictStr] = Field(default=None, alias="requiredMarginPercent")
    symbol: Optional[StrictStr] = None
    time_in_force: Optional[List[StrictStr]] = Field(default=None, alias="timeInForce")
    trigger_protect: Optional[StrictStr] = Field(default=None, alias="triggerProtect")
    underlying_sub_type: Optional[List[StrictStr]] = Field(default=None, alias="underlyingSubType")
    underlying_type: Optional[StrictStr] = Field(default=None, alias="underlyingType")
    __properties: ClassVar[List[str]] = ["OrderType", "baseAsset", "baseAssetPrecision", "contractSize", "contractStatus", "contractType", "deliveryDate", "equalQtyPrecision", "filters", "liquidationFee", "maintMarginPercent", "marginAsset", "marketTakeBound", "onboardDate", "pair", "pricePrecision", "quantityPrecision", "quoteAsset", "quotePrecision", "requiredMarginPercent", "symbol", "timeInForce", "triggerProtect", "underlyingSubType", "underlyingType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CmfuturesGetExchangeInfoV1RespSymbolsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CmfuturesGetExchangeInfoV1RespSymbolsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "OrderType": obj.get("OrderType"),
            "baseAsset": obj.get("baseAsset"),
            "baseAssetPrecision": obj.get("baseAssetPrecision"),
            "contractSize": obj.get("contractSize"),
            "contractStatus": obj.get("contractStatus"),
            "contractType": obj.get("contractType"),
            "deliveryDate": obj.get("deliveryDate"),
            "equalQtyPrecision": obj.get("equalQtyPrecision"),
            "filters": [CmfuturesSymbolFilter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "liquidationFee": obj.get("liquidationFee"),
            "maintMarginPercent": obj.get("maintMarginPercent"),
            "marginAsset": obj.get("marginAsset"),
            "marketTakeBound": obj.get("marketTakeBound"),
            "onboardDate": obj.get("onboardDate"),
            "pair": obj.get("pair"),
            "pricePrecision": obj.get("pricePrecision"),
            "quantityPrecision": obj.get("quantityPrecision"),
            "quoteAsset": obj.get("quoteAsset"),
            "quotePrecision": obj.get("quotePrecision"),
            "requiredMarginPercent": obj.get("requiredMarginPercent"),
            "symbol": obj.get("symbol"),
            "timeInForce": obj.get("timeInForce"),
            "triggerProtect": obj.get("triggerProtect"),
            "underlyingSubType": obj.get("underlyingSubType"),
            "underlyingType": obj.get("underlyingType")
        })
        return _obj


