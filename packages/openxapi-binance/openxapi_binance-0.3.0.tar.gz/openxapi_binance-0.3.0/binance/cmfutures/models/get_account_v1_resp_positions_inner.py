# coding: utf-8

"""
    Binance COIN-M Futures API

    OpenAPI specification for Binance exchange - Cmfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetAccountV1RespPositionsInner(BaseModel):
    """
    GetAccountV1RespPositionsInner
    """ # noqa: E501
    break_even_price: Optional[StrictStr] = Field(default=None, alias="breakEvenPrice")
    entry_price: Optional[StrictStr] = Field(default=None, alias="entryPrice")
    initial_margin: Optional[StrictStr] = Field(default=None, alias="initialMargin")
    isolated: Optional[StrictBool] = None
    leverage: Optional[StrictStr] = None
    maint_margin: Optional[StrictStr] = Field(default=None, alias="maintMargin")
    max_qty: Optional[StrictStr] = Field(default=None, alias="maxQty")
    open_order_initial_margin: Optional[StrictStr] = Field(default=None, alias="openOrderInitialMargin")
    position_amt: Optional[StrictStr] = Field(default=None, alias="positionAmt")
    position_initial_margin: Optional[StrictStr] = Field(default=None, alias="positionInitialMargin")
    position_side: Optional[StrictStr] = Field(default=None, alias="positionSide")
    symbol: Optional[StrictStr] = None
    unrealized_profit: Optional[StrictStr] = Field(default=None, alias="unrealizedProfit")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["breakEvenPrice", "entryPrice", "initialMargin", "isolated", "leverage", "maintMargin", "maxQty", "openOrderInitialMargin", "positionAmt", "positionInitialMargin", "positionSide", "symbol", "unrealizedProfit", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountV1RespPositionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountV1RespPositionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "breakEvenPrice": obj.get("breakEvenPrice"),
            "entryPrice": obj.get("entryPrice"),
            "initialMargin": obj.get("initialMargin"),
            "isolated": obj.get("isolated"),
            "leverage": obj.get("leverage"),
            "maintMargin": obj.get("maintMargin"),
            "maxQty": obj.get("maxQty"),
            "openOrderInitialMargin": obj.get("openOrderInitialMargin"),
            "positionAmt": obj.get("positionAmt"),
            "positionInitialMargin": obj.get("positionInitialMargin"),
            "positionSide": obj.get("positionSide"),
            "symbol": obj.get("symbol"),
            "unrealizedProfit": obj.get("unrealizedProfit"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


