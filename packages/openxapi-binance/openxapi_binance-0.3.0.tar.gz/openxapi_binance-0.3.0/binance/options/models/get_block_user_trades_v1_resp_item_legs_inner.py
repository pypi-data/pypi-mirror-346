# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetBlockUserTradesV1RespItemLegsInner(BaseModel):
    """
    GetBlockUserTradesV1RespItemLegsInner
    """ # noqa: E501
    commission: Optional[Union[StrictFloat, StrictInt]] = None
    create_time: Optional[StrictInt] = Field(default=None, alias="createTime")
    executed_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="executedAmount")
    executed_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="executedQty")
    fee: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    liquidity: Optional[StrictStr] = None
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    order_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderPrice")
    order_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderQuantity")
    order_side: Optional[StrictStr] = Field(default=None, alias="orderSide")
    order_status: Optional[StrictStr] = Field(default=None, alias="orderStatus")
    order_type: Optional[StrictStr] = Field(default=None, alias="orderType")
    symbol: Optional[StrictStr] = None
    trade_id: Optional[StrictInt] = Field(default=None, alias="tradeId")
    trade_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tradePrice")
    trade_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tradeQty")
    trade_time: Optional[StrictInt] = Field(default=None, alias="tradeTime")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["commission", "createTime", "executedAmount", "executedQty", "fee", "id", "liquidity", "orderId", "orderPrice", "orderQuantity", "orderSide", "orderStatus", "orderType", "symbol", "tradeId", "tradePrice", "tradeQty", "tradeTime", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockUserTradesV1RespItemLegsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockUserTradesV1RespItemLegsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commission": obj.get("commission"),
            "createTime": obj.get("createTime"),
            "executedAmount": obj.get("executedAmount"),
            "executedQty": obj.get("executedQty"),
            "fee": obj.get("fee"),
            "id": obj.get("id"),
            "liquidity": obj.get("liquidity"),
            "orderId": obj.get("orderId"),
            "orderPrice": obj.get("orderPrice"),
            "orderQuantity": obj.get("orderQuantity"),
            "orderSide": obj.get("orderSide"),
            "orderStatus": obj.get("orderStatus"),
            "orderType": obj.get("orderType"),
            "symbol": obj.get("symbol"),
            "tradeId": obj.get("tradeId"),
            "tradePrice": obj.get("tradePrice"),
            "tradeQty": obj.get("tradeQty"),
            "tradeTime": obj.get("tradeTime"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


