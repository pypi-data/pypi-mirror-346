# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OptionsCreateBatchOrdersV1ReqOrdersItem(BaseModel):
    """
    OptionsCreateBatchOrdersV1ReqOrdersItem
    """ # noqa: E501
    client_order_id: Optional[StrictStr] = Field(default='', alias="clientOrderId")
    is_mmp: Optional[StrictBool] = Field(default=None, alias="isMmp")
    new_order_resp_type: Optional[StrictStr] = Field(default='', alias="newOrderRespType")
    post_only: Optional[StrictBool] = Field(default=False, alias="postOnly")
    price: Optional[StrictStr] = ''
    quantity: StrictStr
    reduce_only: Optional[StrictBool] = Field(default=False, alias="reduceOnly")
    side: StrictStr
    symbol: StrictStr
    time_in_force: Optional[StrictStr] = Field(default='', alias="timeInForce")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["clientOrderId", "isMmp", "newOrderRespType", "postOnly", "price", "quantity", "reduceOnly", "side", "symbol", "timeInForce", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptionsCreateBatchOrdersV1ReqOrdersItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptionsCreateBatchOrdersV1ReqOrdersItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientOrderId": obj.get("clientOrderId") if obj.get("clientOrderId") is not None else '',
            "isMmp": obj.get("isMmp"),
            "newOrderRespType": obj.get("newOrderRespType") if obj.get("newOrderRespType") is not None else '',
            "postOnly": obj.get("postOnly") if obj.get("postOnly") is not None else False,
            "price": obj.get("price") if obj.get("price") is not None else '',
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else '',
            "reduceOnly": obj.get("reduceOnly") if obj.get("reduceOnly") is not None else False,
            "side": obj.get("side") if obj.get("side") is not None else '',
            "symbol": obj.get("symbol") if obj.get("symbol") is not None else '',
            "timeInForce": obj.get("timeInForce") if obj.get("timeInForce") is not None else '',
            "type": obj.get("type") if obj.get("type") is not None else ''
        })
        return _obj


