# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetMiningPaymentListV1RespDataAccountProfitsInner(BaseModel):
    """
    GetMiningPaymentListV1RespDataAccountProfitsInner
    """ # noqa: E501
    coin_name: Optional[StrictStr] = Field(default=None, alias="coinName")
    day_hash_rate: Optional[StrictInt] = Field(default=None, alias="dayHashRate")
    hash_transfer: Optional[Dict[str, Any]] = Field(default=None, alias="hashTransfer")
    profit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="profitAmount")
    status: Optional[StrictInt] = None
    time: Optional[StrictInt] = None
    transfer_amount: Optional[Dict[str, Any]] = Field(default=None, alias="transferAmount")
    type: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["coinName", "dayHashRate", "hashTransfer", "profitAmount", "status", "time", "transferAmount", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMiningPaymentListV1RespDataAccountProfitsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if hash_transfer (nullable) is None
        # and model_fields_set contains the field
        if self.hash_transfer is None and "hash_transfer" in self.model_fields_set:
            _dict['hashTransfer'] = None

        # set to None if transfer_amount (nullable) is None
        # and model_fields_set contains the field
        if self.transfer_amount is None and "transfer_amount" in self.model_fields_set:
            _dict['transferAmount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMiningPaymentListV1RespDataAccountProfitsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coinName": obj.get("coinName"),
            "dayHashRate": obj.get("dayHashRate"),
            "hashTransfer": obj.get("hashTransfer"),
            "profitAmount": obj.get("profitAmount"),
            "status": obj.get("status"),
            "time": obj.get("time"),
            "transferAmount": obj.get("transferAmount"),
            "type": obj.get("type")
        })
        return _obj


