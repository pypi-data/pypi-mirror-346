# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateSubAccountFuturesMovePositionV1RespMovePositionOrdersInner(BaseModel):
    """
    CreateSubAccountFuturesMovePositionV1RespMovePositionOrdersInner
    """ # noqa: E501
    from_user_email: Optional[StrictStr] = Field(default=None, alias="fromUserEmail")
    position_side: Optional[StrictStr] = Field(default=None, alias="positionSide")
    price: Optional[StrictStr] = None
    price_type: Optional[StrictStr] = Field(default=None, alias="priceType")
    product_type: Optional[StrictStr] = Field(default=None, alias="productType")
    quantity: Optional[StrictStr] = None
    side: Optional[StrictStr] = None
    success: Optional[StrictBool] = None
    symbol: Optional[StrictStr] = None
    to_user_email: Optional[StrictStr] = Field(default=None, alias="toUserEmail")
    __properties: ClassVar[List[str]] = ["fromUserEmail", "positionSide", "price", "priceType", "productType", "quantity", "side", "success", "symbol", "toUserEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSubAccountFuturesMovePositionV1RespMovePositionOrdersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSubAccountFuturesMovePositionV1RespMovePositionOrdersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fromUserEmail": obj.get("fromUserEmail"),
            "positionSide": obj.get("positionSide"),
            "price": obj.get("price"),
            "priceType": obj.get("priceType"),
            "productType": obj.get("productType"),
            "quantity": obj.get("quantity"),
            "side": obj.get("side"),
            "success": obj.get("success"),
            "symbol": obj.get("symbol"),
            "toUserEmail": obj.get("toUserEmail")
        })
        return _obj


