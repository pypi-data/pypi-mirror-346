# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_account_commission_v3_resp_standard_commission import GetAccountCommissionV3RespStandardCommission
from binance.spot.models.get_account_snapshot_v1_resp_snapshot_vos_inner_data_balances_inner import GetAccountSnapshotV1RespSnapshotVosInnerDataBalancesInner
from typing import Optional, Set
from typing_extensions import Self

class GetAccountV3Resp(BaseModel):
    """
    GetAccountV3Resp
    """ # noqa: E501
    account_type: Optional[StrictStr] = Field(default=None, alias="accountType")
    balances: Optional[List[GetAccountSnapshotV1RespSnapshotVosInnerDataBalancesInner]] = None
    brokered: Optional[StrictBool] = None
    buyer_commission: Optional[StrictInt] = Field(default=None, alias="buyerCommission")
    can_deposit: Optional[StrictBool] = Field(default=None, alias="canDeposit")
    can_trade: Optional[StrictBool] = Field(default=None, alias="canTrade")
    can_withdraw: Optional[StrictBool] = Field(default=None, alias="canWithdraw")
    commission_rates: Optional[GetAccountCommissionV3RespStandardCommission] = Field(default=None, alias="commissionRates")
    maker_commission: Optional[StrictInt] = Field(default=None, alias="makerCommission")
    permissions: Optional[List[StrictStr]] = None
    prevent_sor: Optional[StrictBool] = Field(default=None, alias="preventSor")
    require_self_trade_prevention: Optional[StrictBool] = Field(default=None, alias="requireSelfTradePrevention")
    seller_commission: Optional[StrictInt] = Field(default=None, alias="sellerCommission")
    taker_commission: Optional[StrictInt] = Field(default=None, alias="takerCommission")
    uid: Optional[StrictInt] = None
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["accountType", "balances", "brokered", "buyerCommission", "canDeposit", "canTrade", "canWithdraw", "commissionRates", "makerCommission", "permissions", "preventSor", "requireSelfTradePrevention", "sellerCommission", "takerCommission", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountV3Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item_balances in self.balances:
                if _item_balances:
                    _items.append(_item_balances.to_dict())
            _dict['balances'] = _items
        # override the default output from pydantic by calling `to_dict()` of commission_rates
        if self.commission_rates:
            _dict['commissionRates'] = self.commission_rates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountV3Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountType": obj.get("accountType"),
            "balances": [GetAccountSnapshotV1RespSnapshotVosInnerDataBalancesInner.from_dict(_item) for _item in obj["balances"]] if obj.get("balances") is not None else None,
            "brokered": obj.get("brokered"),
            "buyerCommission": obj.get("buyerCommission"),
            "canDeposit": obj.get("canDeposit"),
            "canTrade": obj.get("canTrade"),
            "canWithdraw": obj.get("canWithdraw"),
            "commissionRates": GetAccountCommissionV3RespStandardCommission.from_dict(obj["commissionRates"]) if obj.get("commissionRates") is not None else None,
            "makerCommission": obj.get("makerCommission"),
            "permissions": obj.get("permissions"),
            "preventSor": obj.get("preventSor"),
            "requireSelfTradePrevention": obj.get("requireSelfTradePrevention"),
            "sellerCommission": obj.get("sellerCommission"),
            "takerCommission": obj.get("takerCommission"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


