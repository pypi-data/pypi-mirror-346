# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetAccountApiRestrictionsV1Resp(BaseModel):
    """
    GetAccountApiRestrictionsV1Resp
    """ # noqa: E501
    create_time: Optional[StrictInt] = Field(default=None, alias="createTime")
    enable_fix_api_trade: Optional[StrictBool] = Field(default=None, alias="enableFixApiTrade")
    enable_fix_read_only: Optional[StrictBool] = Field(default=None, alias="enableFixReadOnly")
    enable_futures: Optional[StrictBool] = Field(default=None, alias="enableFutures")
    enable_internal_transfer: Optional[StrictBool] = Field(default=None, alias="enableInternalTransfer")
    enable_margin: Optional[StrictBool] = Field(default=None, alias="enableMargin")
    enable_portfolio_margin_trading: Optional[StrictBool] = Field(default=None, alias="enablePortfolioMarginTrading")
    enable_reading: Optional[StrictBool] = Field(default=None, alias="enableReading")
    enable_spot_and_margin_trading: Optional[StrictBool] = Field(default=None, alias="enableSpotAndMarginTrading")
    enable_vanilla_options: Optional[StrictBool] = Field(default=None, alias="enableVanillaOptions")
    enable_withdrawals: Optional[StrictBool] = Field(default=None, alias="enableWithdrawals")
    ip_restrict: Optional[StrictBool] = Field(default=None, alias="ipRestrict")
    permits_universal_transfer: Optional[StrictBool] = Field(default=None, alias="permitsUniversalTransfer")
    __properties: ClassVar[List[str]] = ["createTime", "enableFixApiTrade", "enableFixReadOnly", "enableFutures", "enableInternalTransfer", "enableMargin", "enablePortfolioMarginTrading", "enableReading", "enableSpotAndMarginTrading", "enableVanillaOptions", "enableWithdrawals", "ipRestrict", "permitsUniversalTransfer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountApiRestrictionsV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountApiRestrictionsV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "enableFixApiTrade": obj.get("enableFixApiTrade"),
            "enableFixReadOnly": obj.get("enableFixReadOnly"),
            "enableFutures": obj.get("enableFutures"),
            "enableInternalTransfer": obj.get("enableInternalTransfer"),
            "enableMargin": obj.get("enableMargin"),
            "enablePortfolioMarginTrading": obj.get("enablePortfolioMarginTrading"),
            "enableReading": obj.get("enableReading"),
            "enableSpotAndMarginTrading": obj.get("enableSpotAndMarginTrading"),
            "enableVanillaOptions": obj.get("enableVanillaOptions"),
            "enableWithdrawals": obj.get("enableWithdrawals"),
            "ipRestrict": obj.get("ipRestrict"),
            "permitsUniversalTransfer": obj.get("permitsUniversalTransfer")
        })
        return _obj


