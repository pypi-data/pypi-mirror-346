# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetSimpleEarnLockedHistoryRedemptionRecordV1RespRowsInner(BaseModel):
    """
    GetSimpleEarnLockedHistoryRedemptionRecordV1RespRowsInner
    """ # noqa: E501
    amount: Optional[StrictStr] = None
    asset: Optional[StrictStr] = None
    deliver_date: Optional[StrictStr] = Field(default=None, alias="deliverDate")
    est_extra_reward_amt: Optional[StrictStr] = Field(default=None, alias="estExtraRewardAmt")
    extra_reward_asset: Optional[StrictStr] = Field(default=None, alias="extraRewardAsset")
    is_complete: Optional[StrictBool] = Field(default=None, alias="isComplete")
    lock_period: Optional[StrictStr] = Field(default=None, alias="lockPeriod")
    loss_amount: Optional[StrictStr] = Field(default=None, alias="lossAmount")
    original_amount: Optional[StrictStr] = Field(default=None, alias="originalAmount")
    position_id: Optional[StrictInt] = Field(default=None, alias="positionId")
    redeem_id: Optional[StrictInt] = Field(default=None, alias="redeemId")
    reward_amt: Optional[StrictStr] = Field(default=None, alias="rewardAmt")
    reward_asset: Optional[StrictStr] = Field(default=None, alias="rewardAsset")
    status: Optional[StrictStr] = None
    time: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["amount", "asset", "deliverDate", "estExtraRewardAmt", "extraRewardAsset", "isComplete", "lockPeriod", "lossAmount", "originalAmount", "positionId", "redeemId", "rewardAmt", "rewardAsset", "status", "time", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSimpleEarnLockedHistoryRedemptionRecordV1RespRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSimpleEarnLockedHistoryRedemptionRecordV1RespRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "asset": obj.get("asset"),
            "deliverDate": obj.get("deliverDate"),
            "estExtraRewardAmt": obj.get("estExtraRewardAmt"),
            "extraRewardAsset": obj.get("extraRewardAsset"),
            "isComplete": obj.get("isComplete"),
            "lockPeriod": obj.get("lockPeriod"),
            "lossAmount": obj.get("lossAmount"),
            "originalAmount": obj.get("originalAmount"),
            "positionId": obj.get("positionId"),
            "redeemId": obj.get("redeemId"),
            "rewardAmt": obj.get("rewardAmt"),
            "rewardAsset": obj.get("rewardAsset"),
            "status": obj.get("status"),
            "time": obj.get("time"),
            "type": obj.get("type")
        })
        return _obj


