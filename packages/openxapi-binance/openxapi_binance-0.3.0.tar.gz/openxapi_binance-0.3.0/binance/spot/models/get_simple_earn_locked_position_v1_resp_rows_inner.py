# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetSimpleEarnLockedPositionV1RespRowsInner(BaseModel):
    """
    GetSimpleEarnLockedPositionV1RespRowsInner
    """ # noqa: E501
    apy: Optional[StrictStr] = Field(default=None, alias="APY")
    accrual_days: Optional[StrictStr] = Field(default=None, alias="accrualDays")
    amount: Optional[StrictStr] = None
    asset: Optional[StrictStr] = None
    auto_subscribe: Optional[StrictBool] = Field(default=None, alias="autoSubscribe")
    boost_apr: Optional[StrictStr] = Field(default=None, alias="boostApr")
    boost_reward_asset: Optional[StrictStr] = Field(default=None, alias="boostRewardAsset")
    can_fast_redemption: Optional[StrictBool] = Field(default=None, alias="canFastRedemption")
    can_re_stake: Optional[StrictBool] = Field(default=None, alias="canReStake")
    can_redeem_early: Optional[StrictBool] = Field(default=None, alias="canRedeemEarly")
    deliver_date: Optional[StrictStr] = Field(default=None, alias="deliverDate")
    duration: Optional[StrictStr] = None
    est_extra_reward_amt: Optional[StrictStr] = Field(default=None, alias="estExtraRewardAmt")
    extra_reward_apr: Optional[StrictStr] = Field(default=None, alias="extraRewardAPR")
    extra_reward_asset: Optional[StrictStr] = Field(default=None, alias="extraRewardAsset")
    next_pay: Optional[StrictStr] = Field(default=None, alias="nextPay")
    next_pay_date: Optional[StrictStr] = Field(default=None, alias="nextPayDate")
    parent_position_id: Optional[StrictInt] = Field(default=None, alias="parentPositionId")
    partial_amt_deliver_date: Optional[StrictStr] = Field(default=None, alias="partialAmtDeliverDate")
    pay_period: Optional[StrictStr] = Field(default=None, alias="payPeriod")
    position_id: Optional[StrictInt] = Field(default=None, alias="positionId")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    purchase_time: Optional[StrictStr] = Field(default=None, alias="purchaseTime")
    redeem_amount_early: Optional[StrictStr] = Field(default=None, alias="redeemAmountEarly")
    redeem_period: Optional[StrictStr] = Field(default=None, alias="redeemPeriod")
    redeem_to: Optional[StrictStr] = Field(default=None, alias="redeemTo")
    redeeming_amt: Optional[StrictStr] = Field(default=None, alias="redeemingAmt")
    reward_amt: Optional[StrictStr] = Field(default=None, alias="rewardAmt")
    reward_asset: Optional[StrictStr] = Field(default=None, alias="rewardAsset")
    rewards_end_date: Optional[StrictStr] = Field(default=None, alias="rewardsEndDate")
    status: Optional[StrictStr] = None
    total_boost_reward_amt: Optional[StrictStr] = Field(default=None, alias="totalBoostRewardAmt")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["APY", "accrualDays", "amount", "asset", "autoSubscribe", "boostApr", "boostRewardAsset", "canFastRedemption", "canReStake", "canRedeemEarly", "deliverDate", "duration", "estExtraRewardAmt", "extraRewardAPR", "extraRewardAsset", "nextPay", "nextPayDate", "parentPositionId", "partialAmtDeliverDate", "payPeriod", "positionId", "projectId", "purchaseTime", "redeemAmountEarly", "redeemPeriod", "redeemTo", "redeemingAmt", "rewardAmt", "rewardAsset", "rewardsEndDate", "status", "totalBoostRewardAmt", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSimpleEarnLockedPositionV1RespRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSimpleEarnLockedPositionV1RespRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "APY": obj.get("APY"),
            "accrualDays": obj.get("accrualDays"),
            "amount": obj.get("amount"),
            "asset": obj.get("asset"),
            "autoSubscribe": obj.get("autoSubscribe"),
            "boostApr": obj.get("boostApr"),
            "boostRewardAsset": obj.get("boostRewardAsset"),
            "canFastRedemption": obj.get("canFastRedemption"),
            "canReStake": obj.get("canReStake"),
            "canRedeemEarly": obj.get("canRedeemEarly"),
            "deliverDate": obj.get("deliverDate"),
            "duration": obj.get("duration"),
            "estExtraRewardAmt": obj.get("estExtraRewardAmt"),
            "extraRewardAPR": obj.get("extraRewardAPR"),
            "extraRewardAsset": obj.get("extraRewardAsset"),
            "nextPay": obj.get("nextPay"),
            "nextPayDate": obj.get("nextPayDate"),
            "parentPositionId": obj.get("parentPositionId"),
            "partialAmtDeliverDate": obj.get("partialAmtDeliverDate"),
            "payPeriod": obj.get("payPeriod"),
            "positionId": obj.get("positionId"),
            "projectId": obj.get("projectId"),
            "purchaseTime": obj.get("purchaseTime"),
            "redeemAmountEarly": obj.get("redeemAmountEarly"),
            "redeemPeriod": obj.get("redeemPeriod"),
            "redeemTo": obj.get("redeemTo"),
            "redeemingAmt": obj.get("redeemingAmt"),
            "rewardAmt": obj.get("rewardAmt"),
            "rewardAsset": obj.get("rewardAsset"),
            "rewardsEndDate": obj.get("rewardsEndDate"),
            "status": obj.get("status"),
            "totalBoostRewardAmt": obj.get("totalBoostRewardAmt"),
            "type": obj.get("type")
        })
        return _obj


