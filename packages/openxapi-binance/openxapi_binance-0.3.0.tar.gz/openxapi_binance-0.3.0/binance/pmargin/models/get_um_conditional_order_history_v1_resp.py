# coding: utf-8

"""
    Binance Portfolio Margin API

    OpenAPI specification for Binance exchange - Pmargin API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetUmConditionalOrderHistoryV1Resp(BaseModel):
    """
    GetUmConditionalOrderHistoryV1Resp
    """ # noqa: E501
    activate_price: Optional[StrictStr] = Field(default=None, alias="activatePrice")
    book_time: Optional[StrictInt] = Field(default=None, alias="bookTime")
    good_till_date: Optional[StrictInt] = Field(default=None, alias="goodTillDate")
    new_client_strategy_id: Optional[StrictStr] = Field(default=None, alias="newClientStrategyId")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId")
    orig_qty: Optional[StrictStr] = Field(default=None, alias="origQty")
    position_side: Optional[StrictStr] = Field(default=None, alias="positionSide")
    price: Optional[StrictStr] = None
    price_protect: Optional[StrictBool] = Field(default=None, alias="priceProtect")
    price_rate: Optional[StrictStr] = Field(default=None, alias="priceRate")
    reduce_only: Optional[StrictBool] = Field(default=None, alias="reduceOnly")
    self_trade_prevention_mode: Optional[StrictStr] = Field(default=None, alias="selfTradePreventionMode")
    side: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    stop_price: Optional[StrictStr] = Field(default=None, alias="stopPrice")
    strategy_id: Optional[StrictInt] = Field(default=None, alias="strategyId")
    strategy_status: Optional[StrictStr] = Field(default=None, alias="strategyStatus")
    strategy_type: Optional[StrictStr] = Field(default=None, alias="strategyType")
    symbol: Optional[StrictStr] = None
    time_in_force: Optional[StrictStr] = Field(default=None, alias="timeInForce")
    trigger_time: Optional[StrictInt] = Field(default=None, alias="triggerTime")
    type: Optional[StrictStr] = None
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    working_type: Optional[StrictStr] = Field(default=None, alias="workingType")
    __properties: ClassVar[List[str]] = ["activatePrice", "bookTime", "goodTillDate", "newClientStrategyId", "orderId", "origQty", "positionSide", "price", "priceProtect", "priceRate", "reduceOnly", "selfTradePreventionMode", "side", "status", "stopPrice", "strategyId", "strategyStatus", "strategyType", "symbol", "timeInForce", "triggerTime", "type", "updateTime", "workingType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUmConditionalOrderHistoryV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUmConditionalOrderHistoryV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activatePrice": obj.get("activatePrice"),
            "bookTime": obj.get("bookTime"),
            "goodTillDate": obj.get("goodTillDate"),
            "newClientStrategyId": obj.get("newClientStrategyId"),
            "orderId": obj.get("orderId"),
            "origQty": obj.get("origQty"),
            "positionSide": obj.get("positionSide"),
            "price": obj.get("price"),
            "priceProtect": obj.get("priceProtect"),
            "priceRate": obj.get("priceRate"),
            "reduceOnly": obj.get("reduceOnly"),
            "selfTradePreventionMode": obj.get("selfTradePreventionMode"),
            "side": obj.get("side"),
            "status": obj.get("status"),
            "stopPrice": obj.get("stopPrice"),
            "strategyId": obj.get("strategyId"),
            "strategyStatus": obj.get("strategyStatus"),
            "strategyType": obj.get("strategyType"),
            "symbol": obj.get("symbol"),
            "timeInForce": obj.get("timeInForce"),
            "triggerTime": obj.get("triggerTime"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "workingType": obj.get("workingType")
        })
        return _obj


