# coding: utf-8

"""
    Binance COIN-M Futures API

    OpenAPI specification for Binance exchange - Cmfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CmfuturesSymbolFilter(BaseModel):
    """
    CmfuturesSymbolFilter
    """ # noqa: E501
    filter_type: Optional[StrictStr] = Field(default=None, alias="filterType")
    limit: Optional[StrictInt] = None
    max_price: Optional[StrictStr] = Field(default=None, alias="maxPrice")
    max_qty: Optional[StrictStr] = Field(default=None, alias="maxQty")
    min_price: Optional[StrictStr] = Field(default=None, alias="minPrice")
    min_qty: Optional[StrictStr] = Field(default=None, alias="minQty")
    multiplier_decimal: Optional[StrictInt] = Field(default=None, alias="multiplierDecimal")
    multiplier_down: Optional[StrictStr] = Field(default=None, alias="multiplierDown")
    multiplier_up: Optional[StrictStr] = Field(default=None, alias="multiplierUp")
    step_size: Optional[StrictStr] = Field(default=None, alias="stepSize")
    tick_size: Optional[StrictStr] = Field(default=None, alias="tickSize")
    __properties: ClassVar[List[str]] = ["filterType", "limit", "maxPrice", "maxQty", "minPrice", "minQty", "multiplierDecimal", "multiplierDown", "multiplierUp", "stepSize", "tickSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CmfuturesSymbolFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CmfuturesSymbolFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterType": obj.get("filterType"),
            "limit": obj.get("limit"),
            "maxPrice": obj.get("maxPrice"),
            "maxQty": obj.get("maxQty"),
            "minPrice": obj.get("minPrice"),
            "minQty": obj.get("minQty"),
            "multiplierDecimal": obj.get("multiplierDecimal"),
            "multiplierDown": obj.get("multiplierDown"),
            "multiplierUp": obj.get("multiplierUp"),
            "stepSize": obj.get("stepSize"),
            "tickSize": obj.get("tickSize")
        })
        return _obj


