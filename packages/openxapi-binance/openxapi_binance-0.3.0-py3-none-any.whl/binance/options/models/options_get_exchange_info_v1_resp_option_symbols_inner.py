# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.options.models.options_symbol_filter import OptionsSymbolFilter
from typing import Optional, Set
from typing_extensions import Self

class OptionsGetExchangeInfoV1RespOptionSymbolsInner(BaseModel):
    """
    OptionsGetExchangeInfoV1RespOptionSymbolsInner
    """ # noqa: E501
    expiry_date: Optional[StrictInt] = Field(default=None, alias="expiryDate")
    filters: Optional[List[OptionsSymbolFilter]] = None
    initial_margin: Optional[StrictStr] = Field(default=None, alias="initialMargin")
    maintenance_margin: Optional[StrictStr] = Field(default=None, alias="maintenanceMargin")
    maker_fee_rate: Optional[StrictStr] = Field(default=None, alias="makerFeeRate")
    max_qty: Optional[StrictStr] = Field(default=None, alias="maxQty")
    min_initial_margin: Optional[StrictStr] = Field(default=None, alias="minInitialMargin")
    min_maintenance_margin: Optional[StrictStr] = Field(default=None, alias="minMaintenanceMargin")
    min_qty: Optional[StrictStr] = Field(default=None, alias="minQty")
    price_scale: Optional[StrictInt] = Field(default=None, alias="priceScale")
    quantity_scale: Optional[StrictInt] = Field(default=None, alias="quantityScale")
    quote_asset: Optional[StrictStr] = Field(default=None, alias="quoteAsset")
    side: Optional[StrictStr] = None
    strike_price: Optional[StrictStr] = Field(default=None, alias="strikePrice")
    symbol: Optional[StrictStr] = None
    taker_fee_rate: Optional[StrictStr] = Field(default=None, alias="takerFeeRate")
    underlying: Optional[StrictStr] = None
    unit: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["expiryDate", "filters", "initialMargin", "maintenanceMargin", "makerFeeRate", "maxQty", "minInitialMargin", "minMaintenanceMargin", "minQty", "priceScale", "quantityScale", "quoteAsset", "side", "strikePrice", "symbol", "takerFeeRate", "underlying", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptionsGetExchangeInfoV1RespOptionSymbolsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptionsGetExchangeInfoV1RespOptionSymbolsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expiryDate": obj.get("expiryDate"),
            "filters": [OptionsSymbolFilter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "initialMargin": obj.get("initialMargin"),
            "maintenanceMargin": obj.get("maintenanceMargin"),
            "makerFeeRate": obj.get("makerFeeRate"),
            "maxQty": obj.get("maxQty"),
            "minInitialMargin": obj.get("minInitialMargin"),
            "minMaintenanceMargin": obj.get("minMaintenanceMargin"),
            "minQty": obj.get("minQty"),
            "priceScale": obj.get("priceScale"),
            "quantityScale": obj.get("quantityScale"),
            "quoteAsset": obj.get("quoteAsset"),
            "side": obj.get("side"),
            "strikePrice": obj.get("strikePrice"),
            "symbol": obj.get("symbol"),
            "takerFeeRate": obj.get("takerFeeRate"),
            "underlying": obj.get("underlying"),
            "unit": obj.get("unit")
        })
        return _obj


