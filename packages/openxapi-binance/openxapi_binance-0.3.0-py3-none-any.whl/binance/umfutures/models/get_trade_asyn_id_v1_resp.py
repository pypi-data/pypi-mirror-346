# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetTradeAsynIdV1Resp(BaseModel):
    """
    GetTradeAsynIdV1Resp
    """ # noqa: E501
    download_id: Optional[StrictStr] = Field(default=None, alias="downloadId")
    expiration_timestamp: Optional[StrictInt] = Field(default=None, alias="expirationTimestamp")
    is_expired: Optional[Dict[str, Any]] = Field(default=None, alias="isExpired")
    notified: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["downloadId", "expirationTimestamp", "isExpired", "notified", "status", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTradeAsynIdV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_expired (nullable) is None
        # and model_fields_set contains the field
        if self.is_expired is None and "is_expired" in self.model_fields_set:
            _dict['isExpired'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTradeAsynIdV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadId": obj.get("downloadId"),
            "expirationTimestamp": obj.get("expirationTimestamp"),
            "isExpired": obj.get("isExpired"),
            "notified": obj.get("notified"),
            "status": obj.get("status"),
            "url": obj.get("url")
        })
        return _obj


