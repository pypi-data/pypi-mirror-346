# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetMiningHashTransferProfitDetailsV1RespDataProfitTransferDetailsInner(BaseModel):
    """
    GetMiningHashTransferProfitDetailsV1RespDataProfitTransferDetailsInner
    """ # noqa: E501
    algo_name: Optional[StrictStr] = Field(default=None, alias="algoName")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    coin_name: Optional[StrictStr] = Field(default=None, alias="coinName")
    day: Optional[StrictInt] = None
    hash_rate: Optional[StrictInt] = Field(default=None, alias="hashRate")
    pool_username: Optional[StrictStr] = Field(default=None, alias="poolUsername")
    to_pool_username: Optional[StrictStr] = Field(default=None, alias="toPoolUsername")
    __properties: ClassVar[List[str]] = ["algoName", "amount", "coinName", "day", "hashRate", "poolUsername", "toPoolUsername"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMiningHashTransferProfitDetailsV1RespDataProfitTransferDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMiningHashTransferProfitDetailsV1RespDataProfitTransferDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algoName": obj.get("algoName"),
            "amount": obj.get("amount"),
            "coinName": obj.get("coinName"),
            "day": obj.get("day"),
            "hashRate": obj.get("hashRate"),
            "poolUsername": obj.get("poolUsername"),
            "toPoolUsername": obj.get("toPoolUsername")
        })
        return _obj


