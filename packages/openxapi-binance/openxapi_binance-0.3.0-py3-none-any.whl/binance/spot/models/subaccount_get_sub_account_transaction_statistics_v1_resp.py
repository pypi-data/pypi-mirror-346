# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.subaccount_get_sub_account_transaction_statistics_v1_resp_trade_info_vos_inner import SubaccountGetSubAccountTransactionStatisticsV1RespTradeInfoVosInner
from typing import Optional, Set
from typing_extensions import Self

class SubaccountGetSubAccountTransactionStatisticsV1Resp(BaseModel):
    """
    SubaccountGetSubAccountTransactionStatisticsV1Resp
    """ # noqa: E501
    recent30_btc_futures_total: Optional[StrictStr] = Field(default=None, alias="recent30BtcFuturesTotal")
    recent30_btc_margin_total: Optional[StrictStr] = Field(default=None, alias="recent30BtcMarginTotal")
    recent30_btc_total: Optional[StrictStr] = Field(default=None, alias="recent30BtcTotal")
    recent30_busd_futures_total: Optional[StrictStr] = Field(default=None, alias="recent30BusdFuturesTotal")
    recent30_busd_margin_total: Optional[StrictStr] = Field(default=None, alias="recent30BusdMarginTotal")
    recent30_busd_total: Optional[StrictStr] = Field(default=None, alias="recent30BusdTotal")
    trade_info_vos: Optional[List[SubaccountGetSubAccountTransactionStatisticsV1RespTradeInfoVosInner]] = Field(default=None, alias="tradeInfoVos")
    __properties: ClassVar[List[str]] = ["recent30BtcFuturesTotal", "recent30BtcMarginTotal", "recent30BtcTotal", "recent30BusdFuturesTotal", "recent30BusdMarginTotal", "recent30BusdTotal", "tradeInfoVos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubaccountGetSubAccountTransactionStatisticsV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in trade_info_vos (list)
        _items = []
        if self.trade_info_vos:
            for _item_trade_info_vos in self.trade_info_vos:
                if _item_trade_info_vos:
                    _items.append(_item_trade_info_vos.to_dict())
            _dict['tradeInfoVos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubaccountGetSubAccountTransactionStatisticsV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recent30BtcFuturesTotal": obj.get("recent30BtcFuturesTotal"),
            "recent30BtcMarginTotal": obj.get("recent30BtcMarginTotal"),
            "recent30BtcTotal": obj.get("recent30BtcTotal"),
            "recent30BusdFuturesTotal": obj.get("recent30BusdFuturesTotal"),
            "recent30BusdMarginTotal": obj.get("recent30BusdMarginTotal"),
            "recent30BusdTotal": obj.get("recent30BusdTotal"),
            "tradeInfoVos": [SubaccountGetSubAccountTransactionStatisticsV1RespTradeInfoVosInner.from_dict(_item) for _item in obj["tradeInfoVos"]] if obj.get("tradeInfoVos") is not None else None
        })
        return _obj


