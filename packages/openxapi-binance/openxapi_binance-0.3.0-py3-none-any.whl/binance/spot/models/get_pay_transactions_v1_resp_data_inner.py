# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_pay_transactions_v1_resp_data_inner_funds_detail_inner import GetPayTransactionsV1RespDataInnerFundsDetailInner
from binance.spot.models.get_pay_transactions_v1_resp_data_inner_payer_info import GetPayTransactionsV1RespDataInnerPayerInfo
from binance.spot.models.get_pay_transactions_v1_resp_data_inner_receiver_info import GetPayTransactionsV1RespDataInnerReceiverInfo
from typing import Optional, Set
from typing_extensions import Self

class GetPayTransactionsV1RespDataInner(BaseModel):
    """
    GetPayTransactionsV1RespDataInner
    """ # noqa: E501
    amount: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    funds_detail: Optional[List[GetPayTransactionsV1RespDataInnerFundsDetailInner]] = Field(default=None, alias="fundsDetail")
    order_type: Optional[StrictStr] = Field(default=None, alias="orderType")
    payer_info: Optional[GetPayTransactionsV1RespDataInnerPayerInfo] = Field(default=None, alias="payerInfo")
    receiver_info: Optional[GetPayTransactionsV1RespDataInnerReceiverInfo] = Field(default=None, alias="receiverInfo")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    transaction_time: Optional[StrictInt] = Field(default=None, alias="transactionTime")
    wallet_type: Optional[StrictInt] = Field(default=None, alias="walletType")
    wallet_types: Optional[List[StrictInt]] = Field(default=None, alias="walletTypes")
    __properties: ClassVar[List[str]] = ["amount", "currency", "fundsDetail", "orderType", "payerInfo", "receiverInfo", "transactionId", "transactionTime", "walletType", "walletTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPayTransactionsV1RespDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in funds_detail (list)
        _items = []
        if self.funds_detail:
            for _item_funds_detail in self.funds_detail:
                if _item_funds_detail:
                    _items.append(_item_funds_detail.to_dict())
            _dict['fundsDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of payer_info
        if self.payer_info:
            _dict['payerInfo'] = self.payer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_info
        if self.receiver_info:
            _dict['receiverInfo'] = self.receiver_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPayTransactionsV1RespDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "fundsDetail": [GetPayTransactionsV1RespDataInnerFundsDetailInner.from_dict(_item) for _item in obj["fundsDetail"]] if obj.get("fundsDetail") is not None else None,
            "orderType": obj.get("orderType"),
            "payerInfo": GetPayTransactionsV1RespDataInnerPayerInfo.from_dict(obj["payerInfo"]) if obj.get("payerInfo") is not None else None,
            "receiverInfo": GetPayTransactionsV1RespDataInnerReceiverInfo.from_dict(obj["receiverInfo"]) if obj.get("receiverInfo") is not None else None,
            "transactionId": obj.get("transactionId"),
            "transactionTime": obj.get("transactionTime"),
            "walletType": obj.get("walletType"),
            "walletTypes": obj.get("walletTypes")
        })
        return _obj


