# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_simple_earn_flexible_list_v1_resp_rows_inner_tier_annual_percentage_rate import GetSimpleEarnFlexibleListV1RespRowsInnerTierAnnualPercentageRate
from typing import Optional, Set
from typing_extensions import Self

class GetSimpleEarnFlexibleListV1RespRowsInner(BaseModel):
    """
    GetSimpleEarnFlexibleListV1RespRowsInner
    """ # noqa: E501
    air_drop_percentage_rate: Optional[StrictStr] = Field(default=None, alias="airDropPercentageRate")
    asset: Optional[StrictStr] = None
    can_purchase: Optional[StrictBool] = Field(default=None, alias="canPurchase")
    can_redeem: Optional[StrictBool] = Field(default=None, alias="canRedeem")
    hot: Optional[StrictBool] = None
    is_sold_out: Optional[StrictBool] = Field(default=None, alias="isSoldOut")
    latest_annual_percentage_rate: Optional[StrictStr] = Field(default=None, alias="latestAnnualPercentageRate")
    min_purchase_amount: Optional[StrictStr] = Field(default=None, alias="minPurchaseAmount")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    status: Optional[StrictStr] = None
    subscription_start_time: Optional[StrictStr] = Field(default=None, alias="subscriptionStartTime")
    tier_annual_percentage_rate: Optional[GetSimpleEarnFlexibleListV1RespRowsInnerTierAnnualPercentageRate] = Field(default=None, alias="tierAnnualPercentageRate")
    __properties: ClassVar[List[str]] = ["airDropPercentageRate", "asset", "canPurchase", "canRedeem", "hot", "isSoldOut", "latestAnnualPercentageRate", "minPurchaseAmount", "productId", "status", "subscriptionStartTime", "tierAnnualPercentageRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSimpleEarnFlexibleListV1RespRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tier_annual_percentage_rate
        if self.tier_annual_percentage_rate:
            _dict['tierAnnualPercentageRate'] = self.tier_annual_percentage_rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSimpleEarnFlexibleListV1RespRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airDropPercentageRate": obj.get("airDropPercentageRate"),
            "asset": obj.get("asset"),
            "canPurchase": obj.get("canPurchase"),
            "canRedeem": obj.get("canRedeem"),
            "hot": obj.get("hot"),
            "isSoldOut": obj.get("isSoldOut"),
            "latestAnnualPercentageRate": obj.get("latestAnnualPercentageRate"),
            "minPurchaseAmount": obj.get("minPurchaseAmount"),
            "productId": obj.get("productId"),
            "status": obj.get("status"),
            "subscriptionStartTime": obj.get("subscriptionStartTime"),
            "tierAnnualPercentageRate": GetSimpleEarnFlexibleListV1RespRowsInnerTierAnnualPercentageRate.from_dict(obj["tierAnnualPercentageRate"]) if obj.get("tierAnnualPercentageRate") is not None else None
        })
        return _obj


