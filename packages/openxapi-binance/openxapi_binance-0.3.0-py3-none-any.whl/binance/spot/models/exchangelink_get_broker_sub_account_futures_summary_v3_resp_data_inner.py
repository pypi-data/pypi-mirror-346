# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExchangelinkGetBrokerSubAccountFuturesSummaryV3RespDataInner(BaseModel):
    """
    ExchangelinkGetBrokerSubAccountFuturesSummaryV3RespDataInner
    """ # noqa: E501
    asset: Optional[StrictStr] = None
    futures_enable: Optional[StrictBool] = Field(default=None, alias="futuresEnable")
    sub_account_id: Optional[StrictStr] = Field(default=None, alias="subAccountId")
    total_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalInitialMargin")
    total_maintenance_margin: Optional[StrictStr] = Field(default=None, alias="totalMaintenanceMargin")
    total_margin_balance: Optional[StrictStr] = Field(default=None, alias="totalMarginBalance")
    total_margin_balance_of_usdt: Optional[StrictStr] = Field(default=None, alias="totalMarginBalanceOfUsdt")
    total_open_order_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalOpenOrderInitialMargin")
    total_position_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalPositionInitialMargin")
    total_unrealized_profit: Optional[StrictStr] = Field(default=None, alias="totalUnrealizedProfit")
    total_unrealized_profit_of_usdt: Optional[StrictStr] = Field(default=None, alias="totalUnrealizedProfitOfUsdt")
    total_wallet_balance: Optional[StrictStr] = Field(default=None, alias="totalWalletBalance")
    total_wallet_balance_of_usdt: Optional[StrictStr] = Field(default=None, alias="totalWalletBalanceOfUsdt")
    __properties: ClassVar[List[str]] = ["asset", "futuresEnable", "subAccountId", "totalInitialMargin", "totalMaintenanceMargin", "totalMarginBalance", "totalMarginBalanceOfUsdt", "totalOpenOrderInitialMargin", "totalPositionInitialMargin", "totalUnrealizedProfit", "totalUnrealizedProfitOfUsdt", "totalWalletBalance", "totalWalletBalanceOfUsdt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangelinkGetBrokerSubAccountFuturesSummaryV3RespDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangelinkGetBrokerSubAccountFuturesSummaryV3RespDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "futuresEnable": obj.get("futuresEnable"),
            "subAccountId": obj.get("subAccountId"),
            "totalInitialMargin": obj.get("totalInitialMargin"),
            "totalMaintenanceMargin": obj.get("totalMaintenanceMargin"),
            "totalMarginBalance": obj.get("totalMarginBalance"),
            "totalMarginBalanceOfUsdt": obj.get("totalMarginBalanceOfUsdt"),
            "totalOpenOrderInitialMargin": obj.get("totalOpenOrderInitialMargin"),
            "totalPositionInitialMargin": obj.get("totalPositionInitialMargin"),
            "totalUnrealizedProfit": obj.get("totalUnrealizedProfit"),
            "totalUnrealizedProfitOfUsdt": obj.get("totalUnrealizedProfitOfUsdt"),
            "totalWalletBalance": obj.get("totalWalletBalance"),
            "totalWalletBalanceOfUsdt": obj.get("totalWalletBalanceOfUsdt")
        })
        return _obj


