# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetLoanVipOngoingOrdersV1RespRowsInner(BaseModel):
    """
    GetLoanVipOngoingOrdersV1RespRowsInner
    """ # noqa: E501
    collateral_account_id: Optional[StrictStr] = Field(default=None, alias="collateralAccountId")
    collateral_coin: Optional[StrictStr] = Field(default=None, alias="collateralCoin")
    current_ltv: Optional[StrictStr] = Field(default=None, alias="currentLTV")
    expiration_time: Optional[StrictInt] = Field(default=None, alias="expirationTime")
    loan_coin: Optional[StrictStr] = Field(default=None, alias="loanCoin")
    loan_date: Optional[StrictStr] = Field(default=None, alias="loanDate")
    loan_term: Optional[StrictStr] = Field(default=None, alias="loanTerm")
    locked_collateral_value: Optional[StrictStr] = Field(default=None, alias="lockedCollateralValue")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId")
    residual_interest: Optional[StrictStr] = Field(default=None, alias="residualInterest")
    total_collateral_value_after_haircut: Optional[StrictStr] = Field(default=None, alias="totalCollateralValueAfterHaircut")
    total_debt: Optional[StrictStr] = Field(default=None, alias="totalDebt")
    __properties: ClassVar[List[str]] = ["collateralAccountId", "collateralCoin", "currentLTV", "expirationTime", "loanCoin", "loanDate", "loanTerm", "lockedCollateralValue", "orderId", "residualInterest", "totalCollateralValueAfterHaircut", "totalDebt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanVipOngoingOrdersV1RespRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanVipOngoingOrdersV1RespRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collateralAccountId": obj.get("collateralAccountId"),
            "collateralCoin": obj.get("collateralCoin"),
            "currentLTV": obj.get("currentLTV"),
            "expirationTime": obj.get("expirationTime"),
            "loanCoin": obj.get("loanCoin"),
            "loanDate": obj.get("loanDate"),
            "loanTerm": obj.get("loanTerm"),
            "lockedCollateralValue": obj.get("lockedCollateralValue"),
            "orderId": obj.get("orderId"),
            "residualInterest": obj.get("residualInterest"),
            "totalCollateralValueAfterHaircut": obj.get("totalCollateralValueAfterHaircut"),
            "totalDebt": obj.get("totalDebt")
        })
        return _obj


