# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_account_commission_v3_resp_discount import GetAccountCommissionV3RespDiscount
from binance.spot.models.get_account_commission_v3_resp_standard_commission import GetAccountCommissionV3RespStandardCommission
from typing import Optional, Set
from typing_extensions import Self

class GetAccountCommissionV3Resp(BaseModel):
    """
    GetAccountCommissionV3Resp
    """ # noqa: E501
    discount: Optional[GetAccountCommissionV3RespDiscount] = None
    standard_commission: Optional[GetAccountCommissionV3RespStandardCommission] = Field(default=None, alias="standardCommission")
    symbol: Optional[StrictStr] = None
    tax_commission: Optional[GetAccountCommissionV3RespStandardCommission] = Field(default=None, alias="taxCommission")
    __properties: ClassVar[List[str]] = ["discount", "standardCommission", "symbol", "taxCommission"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountCommissionV3Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_commission
        if self.standard_commission:
            _dict['standardCommission'] = self.standard_commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_commission
        if self.tax_commission:
            _dict['taxCommission'] = self.tax_commission.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountCommissionV3Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discount": GetAccountCommissionV3RespDiscount.from_dict(obj["discount"]) if obj.get("discount") is not None else None,
            "standardCommission": GetAccountCommissionV3RespStandardCommission.from_dict(obj["standardCommission"]) if obj.get("standardCommission") is not None else None,
            "symbol": obj.get("symbol"),
            "taxCommission": GetAccountCommissionV3RespStandardCommission.from_dict(obj["taxCommission"]) if obj.get("taxCommission") is not None else None
        })
        return _obj


