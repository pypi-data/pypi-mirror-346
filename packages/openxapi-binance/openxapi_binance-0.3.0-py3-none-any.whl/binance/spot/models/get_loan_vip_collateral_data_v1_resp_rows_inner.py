# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetLoanVipCollateralDataV1RespRowsInner(BaseModel):
    """
    GetLoanVipCollateralDataV1RespRowsInner
    """ # noqa: E501
    var_1st_collateral_range: Optional[StrictStr] = Field(default=None, alias="_1stCollateralRange")
    var_1st_collateral_ratio: Optional[StrictStr] = Field(default=None, alias="_1stCollateralRatio")
    var_2nd_collateral_range: Optional[StrictStr] = Field(default=None, alias="_2ndCollateralRange")
    var_2nd_collateral_ratio: Optional[StrictStr] = Field(default=None, alias="_2ndCollateralRatio")
    var_3rd_collateral_range: Optional[StrictStr] = Field(default=None, alias="_3rdCollateralRange")
    var_3rd_collateral_ratio: Optional[StrictStr] = Field(default=None, alias="_3rdCollateralRatio")
    var_4th_collateral_range: Optional[StrictStr] = Field(default=None, alias="_4thCollateralRange")
    var_4th_collateral_ratio: Optional[StrictStr] = Field(default=None, alias="_4thCollateralRatio")
    collateral_coin: Optional[StrictStr] = Field(default=None, alias="collateralCoin")
    __properties: ClassVar[List[str]] = ["_1stCollateralRange", "_1stCollateralRatio", "_2ndCollateralRange", "_2ndCollateralRatio", "_3rdCollateralRange", "_3rdCollateralRatio", "_4thCollateralRange", "_4thCollateralRatio", "collateralCoin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanVipCollateralDataV1RespRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanVipCollateralDataV1RespRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_1stCollateralRange": obj.get("_1stCollateralRange"),
            "_1stCollateralRatio": obj.get("_1stCollateralRatio"),
            "_2ndCollateralRange": obj.get("_2ndCollateralRange"),
            "_2ndCollateralRatio": obj.get("_2ndCollateralRatio"),
            "_3rdCollateralRange": obj.get("_3rdCollateralRange"),
            "_3rdCollateralRatio": obj.get("_3rdCollateralRatio"),
            "_4thCollateralRange": obj.get("_4thCollateralRange"),
            "_4thCollateralRatio": obj.get("_4thCollateralRatio"),
            "collateralCoin": obj.get("collateralCoin")
        })
        return _obj


