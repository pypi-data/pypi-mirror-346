# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_sub_account_futures_account_v1_resp_assets_inner import GetSubAccountFuturesAccountV1RespAssetsInner
from typing import Optional, Set
from typing_extensions import Self

class GetSubAccountFuturesAccountV1Resp(BaseModel):
    """
    GetSubAccountFuturesAccountV1Resp
    """ # noqa: E501
    asset: Optional[StrictStr] = None
    assets: Optional[List[GetSubAccountFuturesAccountV1RespAssetsInner]] = None
    can_deposit: Optional[StrictBool] = Field(default=None, alias="canDeposit")
    can_trade: Optional[StrictBool] = Field(default=None, alias="canTrade")
    can_withdraw: Optional[StrictBool] = Field(default=None, alias="canWithdraw")
    email: Optional[StrictStr] = None
    fee_tier: Optional[StrictInt] = Field(default=None, alias="feeTier")
    max_withdraw_amount: Optional[StrictStr] = Field(default=None, alias="maxWithdrawAmount")
    total_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalInitialMargin")
    total_maintenance_margin: Optional[StrictStr] = Field(default=None, alias="totalMaintenanceMargin")
    total_margin_balance: Optional[StrictStr] = Field(default=None, alias="totalMarginBalance")
    total_open_order_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalOpenOrderInitialMargin")
    total_position_initial_margin: Optional[StrictStr] = Field(default=None, alias="totalPositionInitialMargin")
    total_unrealized_profit: Optional[StrictStr] = Field(default=None, alias="totalUnrealizedProfit")
    total_wallet_balance: Optional[StrictStr] = Field(default=None, alias="totalWalletBalance")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["asset", "assets", "canDeposit", "canTrade", "canWithdraw", "email", "feeTier", "maxWithdrawAmount", "totalInitialMargin", "totalMaintenanceMargin", "totalMarginBalance", "totalOpenOrderInitialMargin", "totalPositionInitialMargin", "totalUnrealizedProfit", "totalWalletBalance", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSubAccountFuturesAccountV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item_assets in self.assets:
                if _item_assets:
                    _items.append(_item_assets.to_dict())
            _dict['assets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSubAccountFuturesAccountV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "assets": [GetSubAccountFuturesAccountV1RespAssetsInner.from_dict(_item) for _item in obj["assets"]] if obj.get("assets") is not None else None,
            "canDeposit": obj.get("canDeposit"),
            "canTrade": obj.get("canTrade"),
            "canWithdraw": obj.get("canWithdraw"),
            "email": obj.get("email"),
            "feeTier": obj.get("feeTier"),
            "maxWithdrawAmount": obj.get("maxWithdrawAmount"),
            "totalInitialMargin": obj.get("totalInitialMargin"),
            "totalMaintenanceMargin": obj.get("totalMaintenanceMargin"),
            "totalMarginBalance": obj.get("totalMarginBalance"),
            "totalOpenOrderInitialMargin": obj.get("totalOpenOrderInitialMargin"),
            "totalPositionInitialMargin": obj.get("totalPositionInitialMargin"),
            "totalUnrealizedProfit": obj.get("totalUnrealizedProfit"),
            "totalWalletBalance": obj.get("totalWalletBalance"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


