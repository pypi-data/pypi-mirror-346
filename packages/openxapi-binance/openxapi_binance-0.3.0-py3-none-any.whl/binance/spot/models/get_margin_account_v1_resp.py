# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance.spot.models.get_managed_subaccount_margin_asset_v1_resp_user_assets_inner import GetManagedSubaccountMarginAssetV1RespUserAssetsInner
from typing import Optional, Set
from typing_extensions import Self

class GetMarginAccountV1Resp(BaseModel):
    """
    GetMarginAccountV1Resp
    """ # noqa: E501
    total_collateral_value_in_usdt: Optional[StrictStr] = Field(default=None, alias="TotalCollateralValueInUSDT")
    account_type: Optional[StrictStr] = Field(default=None, alias="accountType")
    borrow_enabled: Optional[StrictBool] = Field(default=None, alias="borrowEnabled")
    collateral_margin_level: Optional[StrictStr] = Field(default=None, alias="collateralMarginLevel")
    created: Optional[StrictBool] = None
    margin_level: Optional[StrictStr] = Field(default=None, alias="marginLevel")
    total_asset_of_btc: Optional[StrictStr] = Field(default=None, alias="totalAssetOfBtc")
    total_liability_of_btc: Optional[StrictStr] = Field(default=None, alias="totalLiabilityOfBtc")
    total_net_asset_of_btc: Optional[StrictStr] = Field(default=None, alias="totalNetAssetOfBtc")
    total_open_order_loss_in_usdt: Optional[StrictStr] = Field(default=None, alias="totalOpenOrderLossInUSDT")
    trade_enabled: Optional[StrictBool] = Field(default=None, alias="tradeEnabled")
    transfer_in_enabled: Optional[StrictBool] = Field(default=None, alias="transferInEnabled")
    transfer_out_enabled: Optional[StrictBool] = Field(default=None, alias="transferOutEnabled")
    user_assets: Optional[List[GetManagedSubaccountMarginAssetV1RespUserAssetsInner]] = Field(default=None, alias="userAssets")
    __properties: ClassVar[List[str]] = ["TotalCollateralValueInUSDT", "accountType", "borrowEnabled", "collateralMarginLevel", "created", "marginLevel", "totalAssetOfBtc", "totalLiabilityOfBtc", "totalNetAssetOfBtc", "totalOpenOrderLossInUSDT", "tradeEnabled", "transferInEnabled", "transferOutEnabled", "userAssets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMarginAccountV1Resp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_assets (list)
        _items = []
        if self.user_assets:
            for _item_user_assets in self.user_assets:
                if _item_user_assets:
                    _items.append(_item_user_assets.to_dict())
            _dict['userAssets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMarginAccountV1Resp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TotalCollateralValueInUSDT": obj.get("TotalCollateralValueInUSDT"),
            "accountType": obj.get("accountType"),
            "borrowEnabled": obj.get("borrowEnabled"),
            "collateralMarginLevel": obj.get("collateralMarginLevel"),
            "created": obj.get("created"),
            "marginLevel": obj.get("marginLevel"),
            "totalAssetOfBtc": obj.get("totalAssetOfBtc"),
            "totalLiabilityOfBtc": obj.get("totalLiabilityOfBtc"),
            "totalNetAssetOfBtc": obj.get("totalNetAssetOfBtc"),
            "totalOpenOrderLossInUSDT": obj.get("totalOpenOrderLossInUSDT"),
            "tradeEnabled": obj.get("tradeEnabled"),
            "transferInEnabled": obj.get("transferInEnabled"),
            "transferOutEnabled": obj.get("transferOutEnabled"),
            "userAssets": [GetManagedSubaccountMarginAssetV1RespUserAssetsInner.from_dict(_item) for _item in obj["userAssets"]] if obj.get("userAssets") is not None else None
        })
        return _obj


