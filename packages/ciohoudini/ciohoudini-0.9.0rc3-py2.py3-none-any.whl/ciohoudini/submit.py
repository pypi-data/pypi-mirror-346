"""Handle button presses to submit and test jobs.

preview: Open a window displaying the structure of the submission and
the JSON objects that will be sent to Conductor.

submit: Send jobs to Conductor
"""
import os
import traceback
import json

import hou

from ciohoudini import payload
from contextlib import contextmanager
from ciocore import conductor_submit
from ciohoudini.submission_dialog import SubmissionDialog



SUCCESS_CODES = [201, 204]

CIODIR = os.environ.get("CIODIR")

@contextmanager
def saved_scene(node=None):
    """Do stuff in the context of a saved scene.
    
    If scene is modified, or always-autosave is on, or user wants to embed HDAs, then save the scene.
    Otherwise there's no need to save. 
    Always yield a fiulename.
    """
    current_scene_name = hou.hipFile.name()
    always_use_autosave = node and node.parm("use_autosave").eval()
    modified = hou.hipFile.hasUnsavedChanges()
    should_embed_hdas = node and node.parm("embed_hdas").eval()
    orig_embed_hdas_val =_get_save_op_defs()

    try:
        fn = None 
        
        if modified or always_use_autosave or should_embed_hdas:
            if should_embed_hdas:
                _set_save_op_defs(True)
            fn = node.parm("autosave_scene").eval()
            hou.hipFile.save(file_name=fn, save_to_recent_files=False)
        else:
            fn = hou.hipFile.path()
            # findFile will raise if the current file was deleted or something
            hou.findFile(fn)
        yield fn
    finally:
        _set_save_op_defs(orig_embed_hdas_val)
        hou.hipFile.setName(current_scene_name)


def _get_save_op_defs():
    """GETTER: embed_hdas is a global setting and only available through hscript AFAICT."""
    otconfig =  hou.hscript("otconfig")
    result = next(f for f in otconfig[0].split("\n") if f.startswith("Save Operator Definitions"))
    result = result.split(":")[1].strip()
    return True if result == "true" else False

def _set_save_op_defs(state):
    """SETTER: embed_hdas."""
    val = 1 if state else 0
    hou.hscript("otconfig -s {}".format(val))

def invoke_submission_dialog(*nodes, **kwargs):
    """
    Execute the modal submission dialog given nodes.
    """

    submission_dialog = SubmissionDialog(nodes)


    hou.session.conductor_validation = submission_dialog
    # result = submission_dialog.exec_()
    submission_dialog.show()  # Use show() for non-modal dialog
    
# If there is more than one node, don't provide any nodes to the save function, thereby ignoring autosave.
def run(node):
    """Submit the given node."""
    
    result = []
    if not node:
        return result
    with saved_scene(node) as fn:
        if not fn:
            return result

        # Now we know all nodes are valid and the scene has been saved 
        return submit_one(node)


def get_submission_payload(node):
    """Get the submission payload for the given node."""
    kwargs = {}
    kwargs["do_asset_scan"] = True
    kwargs["task_limit"] = -1
    submission_payload = payload.resolve_payload(node, **kwargs)
    return submission_payload

def submit_one(node):
    #try:
    response_list = []
    payloads = get_submission_payload(node)
    job_count = len(payloads)

    if job_count == 0:
        print("There are no jobs to submit")
        return

    for payload in payloads:
        try:
            remote_job = conductor_submit.Submit(payload)
            response, response_code = remote_job.main()
        except:
            response = traceback.format_exc()
            response_code = 500
        #response_dict = {"response": response, "response_code": response_code, "node": node}
        # responses.append(response_dict)
        print("response: ", response)
        if response and response not in response_list:
            response_list.append(response)

    return response_list



SCRIPT_TEMPLATE = '''
""" Conductor Submission Script, auto-generated by the Conductor-for-Houdini submitter. 

NOTE: No validations were carried out during the creation of this script. Conductor cannot be held
responsible for problems or unwanted costs incurred as a result of settings in this script. 

You are advised to always use scout frames, and to keep an eye on the Conductor Dashboard once you
submit this job.

USAGE:
To run this script, enter: `python "{0}"` in a terminal or cmd prompt.
You'll need the ciocore Python package. 
You can install it with pip, (preferably in a virtualenv) `pip install ciocore`. 
Alternatively, add the location of the ciocore package that comes with this submitter to your PYTHONPATH environment variable: `PYTHONPATH="{2}"`.
"""



import sys
import json
from ciocore import conductor_submit

SUBMISSION = """\n
{1}
"""\n

data = json.loads(SUBMISSION)

submission = conductor_submit.Submit(data)
response, response_code = submission.main()
print(response_code)
print(json.dumps(response))

'''

def export_script(node, **kwargs):
    payload = get_submission_payload(node)

    destination = hou.ui.selectFile(
        title="Script path to export",
        start_directory = os.path.join(hou.getenv("HIP"), "scripts"),
        file_type=hou.fileType.Any,
        multiple_select=False,
        default_value=os.path.basename("submission.py"),
        chooser_mode=hou.fileChooserMode.Write,
    )
    if not destination:
        print("No script file selected")
        return

    with open(destination, "w") as f:
        content = SCRIPT_TEMPLATE.format(destination, json.dumps(payload, indent=2), CIODIR)
        f.write(content)



    details = """
To run this script, enter: `python "{0}"` in a terminal or cmd prompt.
You'll need the ciocore Python package. 
You can install it with pip, (preferably in a virtualenv) `pip install ciocore`. 
Alternatively, add the location of the ciocore package that comes with this submitter to your PYTHONPATH environment variable: 
`PYTHONPATH="{1}"`.
""".format(destination, CIODIR)


    # Notify
    hou.ui.displayMessage(
        title="Export Script Success",
        text="Python script exported to '{}'".format(destination),
        details_label="Show instructions",
        details=details,
        severity=hou.severityType.Message,
    )
