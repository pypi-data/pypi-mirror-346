# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .cost_function import CostFunction
from .parameter_constraint import ParameterConstraint
from .unformalizable_statement import UnformalizableStatement
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class StatementDictionary(UniversalBaseModel):
    """
    A dictionary of statements by type.
    """

    cost_functions: typing.Optional[typing.List[CostFunction]] = None
    parameter_constraints: typing.Optional[typing.List[ParameterConstraint]] = None
    unformalizable_statements: typing.Optional[typing.List[UnformalizableStatement]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
