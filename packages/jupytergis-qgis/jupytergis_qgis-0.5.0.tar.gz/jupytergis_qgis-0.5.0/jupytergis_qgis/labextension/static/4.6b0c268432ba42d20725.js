"use strict";(self.webpackChunk_jupytergis_jupytergis_qgis=self.webpackChunk_jupytergis_jupytergis_qgis||[]).push([[4],{4:(e,t,o)=>{o.r(t),o.d(t,{default:()=>S});var r,n=o(903),i=o(558),a=o(551),s=o(764),l=o(999),d=o(266),c=o(208),g=o(256),y=o(653),m=o(152),p=o(905);class u{constructor(e){this.collaborative=void 0===document.querySelectorAll("[data-jupyter-lite-root]")[0],this._disposed=!1,this._annotationModel=e.annotationModel}get name(){throw"Not implemented"}get contentType(){throw"Not implemented"}get fileFormat(){return"base64"}get isDisposed(){return this._disposed}dispose(){this._disposed=!0}preferredLanguage(e){return""}createNew(e){return new i.JupyterGISModel({sharedModel:e.sharedModel,languagePreference:e.languagePreference,annotationModel:this._annotationModel,settingRegistry:this._settingRegistry})}}class h extends u{get name(){return"jupytergis-qgzmodel"}get contentType(){return"QGZ"}}class G extends u{get name(){return"jupytergis-qgsmodel"}get contentType(){return"QGS"}}!function(e){e.exportQgis="jupytergis:export"}(r||(r={}));const S=[{id:"@jupytergis/jupytergis-qgis:qgisplugin",requires:[i.IJupyterGISDocTracker,a.IThemeManager,n.ICollaborativeDrive,i.IJGISExternalCommandRegistryToken,l.ConsolePanel.IContentFactory,s.IEditorServices,c.IRenderMimeRegistry,l.IConsoleTracker,i.IAnnotationToken,y.ISettingRegistry],optional:[a.ICommandPalette],autoStart:!0,activate:async(e,t,o,n,s,l,c,y,u,S,I,f)=>{const w=await(0,m.requestAPI)("jupytergis_qgis/backend-check",{method:"POST",body:JSON.stringify({})}),{installed:Q}=w,T=()=>(Q||(0,a.showErrorMessage)("QGIS is not installed","QGIS is required to open QGIS files"),Q),x=new p.JupyterGISDocumentWidgetFactory({name:"JupyterGIS QGS Factory",modelName:"jupytergis-qgsmodel",fileTypes:["QGS"],defaultFor:["QGS"],tracker:t,commands:e.commands,externalCommandRegistry:s,backendCheck:T,manager:e.serviceManager,contentFactory:l,rendermime:y,mimeTypeService:c.mimeTypeService,consoleTracker:u}),j=new p.JupyterGISDocumentWidgetFactory({name:"JupyterGIS QGZ Factory",modelName:"jupytergis-qgzmodel",fileTypes:["QGZ"],defaultFor:["QGZ"],tracker:t,commands:e.commands,externalCommandRegistry:s,backendCheck:T,manager:e.serviceManager,contentFactory:l,rendermime:y,mimeTypeService:c.mimeTypeService,consoleTracker:u});e.docRegistry.addWidgetFactory(x),e.docRegistry.addWidgetFactory(j),e.docRegistry.addModelFactory(new G({annotationModel:S,settingRegistry:I})),e.docRegistry.addModelFactory(new h({annotationModel:S,settingRegistry:I})),e.docRegistry.addFileType({name:"QGS",displayName:"QGS",mimeTypes:["application/octet-stream"],extensions:[".qgs",".QGS"],fileFormat:"base64",contentType:"QGS",icon:m.logoMiniIcon}),e.docRegistry.addFileType({name:"QGZ",displayName:"QGZ",mimeTypes:["application/octet-stream"],extensions:[".qgz",".QGZ"],fileFormat:"base64",contentType:"QGZ",icon:m.logoMiniIconQGZ});const v=()=>new i.JupyterGISDoc;n.sharedModelFactory.registerDocumentFactory("QGS",v),n.sharedModelFactory.registerDocumentFactory("QGZ",v);const M=(r,n)=>{n.title.icon=m.logoMiniIconQGZ,n.context.pathChanged.connect((()=>{t.save(n)})),o.themeChanged.connect(((e,t)=>n.model.themeChanged.emit(t))),t.add(n),e.shell.activateById("jupytergis::leftControlPanel"),e.shell.activateById("jupytergis::rightControlPanel")};x.widgetCreated.connect(M),j.widgetCreated.connect(M),Q&&(e.commands.addCommand(r.exportQgis,{label:"Export To QGZ",isEnabled:()=>!!t.currentWidget&&t.currentWidget.model.sharedModel.editable,execute:async e=>{var o,r;const i=".jGIS",s=".qgz",l=null===(o=t.currentWidget)||void 0===o?void 0:o.model.sharedModel;if(!l)return;const c=t.currentWidget.model.filePath;let y=null!==(r=e.filepath)&&void 0!==r?r:null;if(y||(y=(await a.InputDialog.getText({label:"File name",placeholder:d.PathExt.basename(c,i),title:"Export the project to QGZ file"})).value),null===y)return;y?y.endsWith(s)||(y=`${y}${s}`):y=`${d.PathExt.basename(c,i)}${s}`;let p=d.PathExt.dirname(c);p.includes(":")&&(p=p.split(":")[1]);const u=d.PathExt.join(p,y),h={layers:l.layers,sources:l.sources,layerTree:l.layerTree.slice().reverse(),options:l.options};let G=!0;if(await n.get(u,{content:!1}).catch((()=>{G=!1})),G&&!(await(0,a.showDialog)({title:"Export the project to QGZ file",body:`The file ${y} already exists.\nDo you want to overwrite it ?`})).button.accept)return;const S=await(0,m.requestAPI)("jupytergis_qgis/export",{method:"POST",body:JSON.stringify({path:u,virtual_file:h})});if(S.exported){if(S.logs.warnings.length){const e=document.createElement("pre");e.textContent=`${y} has been exported with warnings\n  - ${S.logs.warnings.join("\n  - ")}`;const t=new g.Widget({node:e});await(0,a.showDialog)({title:"Export the project to QGZ file",body:t,buttons:[a.Dialog.okButton()]})}}else(0,a.showErrorMessage)("Export the project to QGZ file",S.logs.errors.length?S.logs.errors.join("\n"):"Unknown error")}}),f&&f.addItem({command:r.exportQgis,category:"JupyterGIS"})),console.log("@jupytergis/jupytergis-qgis:qgisplugin is activated!")}}]}}]);