[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "polars-features"
version = "0.1.0" # Starting with a new version for the new project
description = "Time-series machine learning at scale." # Keep the description for now
readme = "README.md"
authors = [
  "Derek Snow <d.snow@sov.ai>",
]
maintainers = [
  "Derek Snow <d.snow@sov.ai>",
]
classifiers = [
  "Development Status :: 4 - Beta", # Keep classifiers for now
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
    { include = "functime" }, # Include the functime package
]

[tool.poetry.dependencies]
python = ">=3.10" # Update Python requirement to match project.requires-python
cloudpickle = "*"
flaml = ">=2.0.2"
holidays = "*"
numpy = "*"
polars = ">=0.20.8"
scikit-learn = ">=1.2.2"
scipy = "==1.14.1"
tqdm = "*"
maturin = "<2,>=1.3.2" # Add maturin as a dependency since it's used for the Rust part

[tool.poetry.extras]
plot = [
  "kaleido",
  "pandas",
  "plotly",
]
cat = [
  "catboost",
]
lgb = [
  "lightgbm",
]
xgb = [
  "pyarrow",
  "xgboost",
]
ann = [
  "pyarrow",
  "pylance",
]
tree = [
  "cat",
  "lgb",
  "xgb",
]
llm = [
  "openai",
  "pandas",
  "tenacity",
  "tiktoken",
]
all = [
  "ann",
  "tree",
  "plot",
]
dev = [
  "doc",
  "test",
  "pre-commit",
]
doc = [
  "jupyterlab",
  "mkdocs",
  "mkdocs-jupyter",
  "mkdocs-material",
  "mkdocstrings-python",
]
test = [
  "all",
  "pytest-cov",
  "pytest-benchmark",
]
benchmark = [
  "test",
  "aeon",
  "joblib",
  "mlforecast",
  "pandas",
  "pyarrow",
  "pytest",
  "pytest-memray",
  "pytest-timeout",
  "statsmodels",
  "tsfresh",
]

[tool.maturin]
module-name = "functime._functime_rust"
features = ["pyo3/extension-module"]
exclude = ["docs/**, data/**", "tests/**", ".pre-commit-config.yaml"]

[tool.ruff]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "UP", # pyupgrade
  "YTT", # flake8-2020
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "B905", # `zip()` without an explicit `strict=` parameter
  "B018", # Found useless expression.
  "F821", # Undefined name
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["I002"]
"docs/**" = ["I002"]
"**.ipynb" = ["E402"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "-m not benchmark and not slow",
  "--benchmark-disable",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "benchmark: marks tests as part of benchmarking",
  "multivariate: marks multivariate forecast test",
]
xfail_strict = true

[tool.pyright]
exclude = [
  ".venv"
]
venvPath = "."
venv = ".venv"
