# Generated by ariadne-codegen
# Source: ./_concatened.gql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType, Upload
from .credential_create import CredentialCreate
from .credential_delete import CredentialDelete
from .credential_update import CredentialUpdate
from .credentials_list import CredentialsList
from .instance_create import InstanceCreate
from .instance_delete import InstanceDelete
from .instance_disable import InstanceDisable
from .instance_enable import InstanceEnable
from .instance_get import InstanceGet
from .instance_reload import InstanceReload
from .instance_secret_get import InstanceSecretGet
from .instance_start import InstanceStart
from .instance_stop import InstanceStop
from .instance_upgrade import InstanceUpgrade
from .instances_list import InstancesList
from .login import Login
from .login_target import LoginTarget
from .logout import Logout
from .mandate_create import MandateCreate
from .mandate_revoke import MandateRevoke
from .mapping_get import MappingGet
from .mapping_update import MappingUpdate
from .password_change import PasswordChange
from .password_reset import PasswordReset
from .persistent_token_create import PersistentTokenCreate
from .persistent_token_delete import PersistentTokenDelete
from .persistent_token_exist import PersistentTokenExist
from .person_update import PersonUpdate
from .profiles_list import ProfilesList
from .saas import Saas
from .saas_find import SaasFind
from .saas_price import SaasPrice
from .saas_secret_get import SaasSecretGet
from .saas_transaction_create import SaasTransactionCreate
from .saas_transaction_delete import SaasTransactionDelete
from .saas_transaction_find import SaasTransactionFind
from .saas_transaction_get import SaasTransactionGet
from .saas_transaction_list import SaasTransactionList
from .saas_transaction_update import SaasTransactionUpdate
from .self import Self
from .service_details import ServiceDetails
from .signup import Signup
from .token_auth import TokenAuth
from .token_ws import TokenWs
from .topologies import Topologies
from .topology import Topology
from .topology_create import TopologyCreate
from .topology_delete import TopologyDelete
from .topology_import import TopologyImport
from .topology_update import TopologyUpdate
from .topology_version_for_instance_get import TopologyVersionForInstanceGet
from .topology_version_get import TopologyVersionGet
from .user_activity import UserActivity
from .workspace_min import WorkspaceMin


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def credential_create(
        self,
        email: str,
        disabled: Union[Optional[bool], UnsetType] = UNSET,
        profile: Union[Optional[str], UnsetType] = UNSET,
        read_only: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CredentialCreate:
        query = gql(
            """
            mutation credentialCreate($email: String!, $disabled: Boolean, $profile: String, $readOnly: Boolean) {
              credentialCreate(
                email: $email
                disabled: $disabled
                profile: $profile
                readOnly: $readOnly
              ) {
                ...CredentialFields
              }
            }

            fragment CredentialFields on Credential {
              cid
              disabled
              email
              owner
              profile
              readOnly
            }
            """
        )
        variables: Dict[str, object] = {
            "email": email,
            "disabled": disabled,
            "profile": profile,
            "readOnly": read_only,
        }
        response = await self.execute(
            query=query,
            operation_name="credentialCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CredentialCreate.model_validate(data)

    async def credential_delete(self, email: str, **kwargs: Any) -> CredentialDelete:
        query = gql(
            """
            mutation credentialDelete($email: String!) {
              credentialDelete(email: $email)
            }
            """
        )
        variables: Dict[str, object] = {"email": email}
        response = await self.execute(
            query=query,
            operation_name="credentialDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CredentialDelete.model_validate(data)

    async def credential_update(
        self,
        email: str,
        disabled: Union[Optional[bool], UnsetType] = UNSET,
        profile: Union[Optional[str], UnsetType] = UNSET,
        read_only: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CredentialUpdate:
        query = gql(
            """
            mutation credentialUpdate($email: String!, $disabled: Boolean, $profile: String, $readOnly: Boolean) {
              credentialUpdate(
                email: $email
                disabled: $disabled
                profile: $profile
                readOnly: $readOnly
              ) {
                ...CredentialFields
              }
            }

            fragment CredentialFields on Credential {
              cid
              disabled
              email
              owner
              profile
              readOnly
            }
            """
        )
        variables: Dict[str, object] = {
            "email": email,
            "disabled": disabled,
            "profile": profile,
            "readOnly": read_only,
        }
        response = await self.execute(
            query=query,
            operation_name="credentialUpdate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CredentialUpdate.model_validate(data)

    async def credentials_list(self, **kwargs: Any) -> CredentialsList:
        query = gql(
            """
            query credentialsList {
              credentialsList {
                ...CredentialFields
              }
            }

            fragment CredentialFields on Credential {
              cid
              disabled
              email
              owner
              profile
              readOnly
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="credentialsList", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CredentialsList.model_validate(data)

    async def profiles_list(self, **kwargs: Any) -> ProfilesList:
        query = gql(
            """
            query profilesList {
              profilesList
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="profilesList", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ProfilesList.model_validate(data)

    async def user_activity(self, **kwargs: Any) -> UserActivity:
        query = gql(
            """
            query userActivity {
              userActivity {
                dn
                name
                wsAct {
                  id
                  lastCon
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="userActivity", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UserActivity.model_validate(data)

    async def mandate_create(
        self,
        payer_name: str,
        payer_email: str,
        revoke: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> MandateCreate:
        query = gql(
            """
            mutation mandateCreate($payerName: String!, $payerEmail: String!, $revoke: Boolean) {
              mandateCreate(payerName: $payerName, payerEmail: $payerEmail, revoke: $revoke)
            }
            """
        )
        variables: Dict[str, object] = {
            "payerName": payer_name,
            "payerEmail": payer_email,
            "revoke": revoke,
        }
        response = await self.execute(
            query=query, operation_name="mandateCreate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MandateCreate.model_validate(data)

    async def mandate_revoke(self, **kwargs: Any) -> MandateRevoke:
        query = gql(
            """
            mutation mandateRevoke {
              mandateRevoke
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="mandateRevoke", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MandateRevoke.model_validate(data)

    async def person_update(
        self,
        address: str,
        city: str,
        country: str,
        full_name: str,
        is_company: bool,
        zip: str,
        **kwargs: Any
    ) -> PersonUpdate:
        query = gql(
            """
            mutation personUpdate($address: String!, $city: String!, $country: String!, $fullName: String!, $isCompany: Boolean!, $zip: String!) {
              personUpdate(
                address: $address
                city: $city
                country: $country
                fullName: $fullName
                isCompany: $isCompany
                zip: $zip
              ) {
                ...Person
              }
            }

            fragment Person on Person {
              address
              city
              isCompany
              country
              mandateStatus
              name
              zip
            }
            """
        )
        variables: Dict[str, object] = {
            "address": address,
            "city": city,
            "country": country,
            "fullName": full_name,
            "isCompany": is_company,
            "zip": zip,
        }
        response = await self.execute(
            query=query, operation_name="personUpdate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PersonUpdate.model_validate(data)

    async def self(self, **kwargs: Any) -> Self:
        query = gql(
            """
            query self {
              self {
                cid
                email
                disabled
                readOnly
                persons {
                  list {
                    ...Person
                  }
                }
              }
            }

            fragment Person on Person {
              address
              city
              isCompany
              country
              mandateStatus
              name
              zip
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="self", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Self.model_validate(data)

    async def instance_create(
        self,
        cid: str,
        model_name: str,
        domain_dn: str,
        mapping_id: str,
        inputs: Union[Optional[Any], UnsetType] = UNSET,
        model_ns: Union[Optional[str], UnsetType] = UNSET,
        version: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InstanceCreate:
        query = gql(
            """
            mutation instanceCreate($cid: String!, $inputs: JSON, $modelName: String!, $modelNs: String, $domainDn: String!, $mappingId: String!, $version: String) {
              instanceCreate(
                cid: $cid
                version: $version
                inputs: $inputs
                modelName: $modelName
                modelNs: $modelNs
                domainDn: $domainDn
                mappingId: $mappingId
              ) {
                ...InstanceDetails
              }
            }

            fragment InstanceDetails on Instance {
              cid
              contextLoaded
              dependsLoaded
              deleted
              deleting
              disabled
              domainDn
              ephemeral
              inputs
              isReadOnly
              ...NodeList
              mappingId
              nextRelease
              outputs
              owner
              piid
              pmid
              secrets
              status
              stop
              stopped
              topology
              topoNs
              uuid
              version
            }

            fragment NodeGet on Node {
              attributes
              cid
              contextLoaded
              deleted
              disabled
              dst
              errors
              initial
              properties
              status
              stopped
              type
              uuid
            }

            fragment NodeList on Instance {
              list {
                ...NodeGet
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cid": cid,
            "inputs": inputs,
            "modelName": model_name,
            "modelNs": model_ns,
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "version": version,
        }
        response = await self.execute(
            query=query, operation_name="instanceCreate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceCreate.model_validate(data)

    async def instance_delete(
        self,
        instance_id: str,
        domain_dn: str,
        mapping_id: str,
        force: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InstanceDelete:
        query = gql(
            """
            mutation instanceDelete($instanceId: String!, $domainDn: String!, $mappingId: String!, $force: Boolean) {
              instanceDelete(
                domainDn: $domainDn
                instanceId: $instanceId
                mappingId: $mappingId
                force: $force
              ) {
                errors
                inProgress
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "instanceId": instance_id,
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "force": force,
        }
        response = await self.execute(
            query=query, operation_name="instanceDelete", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceDelete.model_validate(data)

    async def instance_disable(
        self, domain_dn: str, mapping_id: str, instance_id: str, **kwargs: Any
    ) -> InstanceDisable:
        query = gql(
            """
            mutation instanceDisable($domainDn: String!, $mappingId: String!, $instanceId: String!) {
              instanceDisable(
                domainDn: $domainDn
                mappingId: $mappingId
                instanceId: $instanceId
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "instanceId": instance_id,
        }
        response = await self.execute(
            query=query, operation_name="instanceDisable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceDisable.model_validate(data)

    async def instance_enable(
        self, domain_dn: str, mapping_id: str, instance_id: str, **kwargs: Any
    ) -> InstanceEnable:
        query = gql(
            """
            mutation instanceEnable($domainDn: String!, $mappingId: String!, $instanceId: String!) {
              instanceEnable(
                domainDn: $domainDn
                mappingId: $mappingId
                instanceId: $instanceId
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "instanceId": instance_id,
        }
        response = await self.execute(
            query=query, operation_name="instanceEnable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceEnable.model_validate(data)

    async def instance_reload(
        self, instance_id: str, domain_dn: str, mapping_id: str, **kwargs: Any
    ) -> InstanceReload:
        query = gql(
            """
            mutation instanceReload($instanceId: String!, $domainDn: String!, $mappingId: String!) {
              instanceReload(
                domainDn: $domainDn
                instanceId: $instanceId
                mappingId: $mappingId
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "instanceId": instance_id,
            "domainDn": domain_dn,
            "mappingId": mapping_id,
        }
        response = await self.execute(
            query=query, operation_name="instanceReload", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceReload.model_validate(data)

    async def instance_upgrade(
        self,
        domain_dn: str,
        mapping_id: str,
        instance_id: str,
        inputs: Union[Optional[Any], UnsetType] = UNSET,
        version: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InstanceUpgrade:
        query = gql(
            """
            mutation instanceUpgrade($domainDn: String!, $mappingId: String!, $instanceId: String!, $inputs: JSON, $version: String) {
              instanceUpgrade(
                domainDn: $domainDn
                mappingId: $mappingId
                instanceId: $instanceId
                inputs: $inputs
                version: $version
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "instanceId": instance_id,
            "inputs": inputs,
            "version": version,
        }
        response = await self.execute(
            query=query, operation_name="instanceUpgrade", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceUpgrade.model_validate(data)

    async def instance_start(
        self, domain_dn: str, mapping_id: str, instance_id: str, **kwargs: Any
    ) -> InstanceStart:
        query = gql(
            """
            mutation instanceStart($domainDn: String!, $mappingId: String!, $instanceId: String!) {
              instanceStart(
                domainDn: $domainDn
                mappingId: $mappingId
                instanceId: $instanceId
              ) {
                errors
                inProgress
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "instanceId": instance_id,
        }
        response = await self.execute(
            query=query, operation_name="instanceStart", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceStart.model_validate(data)

    async def instance_stop(
        self, domain_dn: str, mapping_id: str, instance_id: str, **kwargs: Any
    ) -> InstanceStop:
        query = gql(
            """
            mutation instanceStop($domainDn: String!, $mappingId: String!, $instanceId: String!) {
              instanceStop(
                domainDn: $domainDn
                mappingId: $mappingId
                instanceId: $instanceId
              ) {
                errors
                inProgress
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "instanceId": instance_id,
        }
        response = await self.execute(
            query=query, operation_name="instanceStop", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceStop.model_validate(data)

    async def mapping_update(
        self,
        domain_dn: str,
        mapping_id: str,
        is_provider: Union[Optional[bool], UnsetType] = UNSET,
        is_consumer: Union[Optional[bool], UnsetType] = UNSET,
        is_saas: Union[Optional[bool], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> MappingUpdate:
        query = gql(
            """
            mutation mappingUpdate($domainDn: String!, $mappingId: String!, $isProvider: Boolean, $isConsumer: Boolean, $isSaas: Boolean, $name: String) {
              mappingUpdate(
                domainDn: $domainDn
                mappingId: $mappingId
                isConsumer: $isConsumer
                isProvider: $isProvider
                isSaas: $isSaas
                name: $name
              ) {
                cid
                isConsumer
                isProvider
                isSaas
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "isProvider": is_provider,
            "isConsumer": is_consumer,
            "isSaas": is_saas,
            "name": name,
        }
        response = await self.execute(
            query=query, operation_name="mappingUpdate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MappingUpdate.model_validate(data)

    async def instances_list(
        self, domain_dn: str, mapping_id: str, **kwargs: Any
    ) -> InstancesList:
        query = gql(
            """
            query InstancesList($domainDn: String!, $mappingId: String!) {
              instancesList(domainDn: $domainDn, mappingId: $mappingId) {
                ...InstanceDetails
              }
            }

            fragment InstanceDetails on Instance {
              cid
              contextLoaded
              dependsLoaded
              deleted
              deleting
              disabled
              domainDn
              ephemeral
              inputs
              isReadOnly
              ...NodeList
              mappingId
              nextRelease
              outputs
              owner
              piid
              pmid
              secrets
              status
              stop
              stopped
              topology
              topoNs
              uuid
              version
            }

            fragment NodeGet on Node {
              attributes
              cid
              contextLoaded
              deleted
              disabled
              dst
              errors
              initial
              properties
              status
              stopped
              type
              uuid
            }

            fragment NodeList on Instance {
              list {
                ...NodeGet
              }
            }
            """
        )
        variables: Dict[str, object] = {"domainDn": domain_dn, "mappingId": mapping_id}
        response = await self.execute(
            query=query, operation_name="InstancesList", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstancesList.model_validate(data)

    async def instance_get(
        self, instance_id: str, domain_dn: str, mapping_id: str, **kwargs: Any
    ) -> InstanceGet:
        query = gql(
            """
            query InstanceGet($instanceId: String!, $domainDn: String!, $mappingId: String!) {
              instanceGet(instanceId: $instanceId, domainDn: $domainDn, mappingId: $mappingId) {
                ...InstanceDetails
              }
            }

            fragment InstanceDetails on Instance {
              cid
              contextLoaded
              dependsLoaded
              deleted
              deleting
              disabled
              domainDn
              ephemeral
              inputs
              isReadOnly
              ...NodeList
              mappingId
              nextRelease
              outputs
              owner
              piid
              pmid
              secrets
              status
              stop
              stopped
              topology
              topoNs
              uuid
              version
            }

            fragment NodeGet on Node {
              attributes
              cid
              contextLoaded
              deleted
              disabled
              dst
              errors
              initial
              properties
              status
              stopped
              type
              uuid
            }

            fragment NodeList on Instance {
              list {
                ...NodeGet
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "instanceId": instance_id,
            "domainDn": domain_dn,
            "mappingId": mapping_id,
        }
        response = await self.execute(
            query=query, operation_name="InstanceGet", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InstanceGet.model_validate(data)

    async def instance_secret_get(
        self, fqdn: str, instance_id: str, password: str, secret: str, **kwargs: Any
    ) -> InstanceSecretGet:
        query = gql(
            """
            query InstanceSecretGet($fqdn: String!, $instanceId: String!, $password: String!, $secret: String!) {
              instanceSecretGet(
                fqdn: $fqdn
                instanceId: $instanceId
                password: $password
                secret: $secret
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "fqdn": fqdn,
            "instanceId": instance_id,
            "password": password,
            "secret": secret,
        }
        response = await self.execute(
            query=query,
            operation_name="InstanceSecretGet",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InstanceSecretGet.model_validate(data)

    async def mapping_get(
        self, domain_dn: str, mapping_id: str, **kwargs: Any
    ) -> MappingGet:
        query = gql(
            """
            query MappingGet($domainDn: String!, $mappingId: String!) {
              mappingGet(domainDn: $domainDn, mappingId: $mappingId) {
                ...WsMappingDetails
              }
            }

            fragment InstanceDetails on Instance {
              cid
              contextLoaded
              dependsLoaded
              deleted
              deleting
              disabled
              domainDn
              ephemeral
              inputs
              isReadOnly
              ...NodeList
              mappingId
              nextRelease
              outputs
              owner
              piid
              pmid
              secrets
              status
              stop
              stopped
              topology
              topoNs
              uuid
              version
            }

            fragment InstancesList on Instances {
              list {
                ...InstanceDetails
              }
            }

            fragment NodeGet on Node {
              attributes
              cid
              contextLoaded
              deleted
              disabled
              dst
              errors
              initial
              properties
              status
              stopped
              type
              uuid
            }

            fragment NodeList on Instance {
              list {
                ...NodeGet
              }
            }

            fragment ResourceDetails on Resource {
              cid
              disabled
              inputs
              outputs
              status
              topology
              version
            }

            fragment WsMappingDetails on WsMapping {
              ...WsMappingInfo
              instances {
                ...InstancesList
              }
              resources {
                ...ResourceDetails
              }
            }

            fragment WsMappingInfo on WsMapping {
              cid
              fqdn
              infos {
                directAccess
              }
              isConsumer
              isProvider
              isSaas
              ready
            }
            """
        )
        variables: Dict[str, object] = {"domainDn": domain_dn, "mappingId": mapping_id}
        response = await self.execute(
            query=query, operation_name="MappingGet", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MappingGet.model_validate(data)

    async def service_details(
        self, domain_dn: str, mapping_id: str, cid: str, version: str, **kwargs: Any
    ) -> ServiceDetails:
        query = gql(
            """
            query ServiceDetails($domainDn: String!, $mappingId: String!, $cid: String!, $version: String!) {
              mappingGet(domainDn: $domainDn, mappingId: $mappingId) {
                cid
                serviceDetails(cid: $cid, version: $version) {
                  capabilities
                  cid
                  inputs
                  outputs
                  version
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "domainDn": domain_dn,
            "mappingId": mapping_id,
            "cid": cid,
            "version": version,
        }
        response = await self.execute(
            query=query, operation_name="ServiceDetails", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ServiceDetails.model_validate(data)

    async def topology_create(
        self,
        name: str,
        published: Union[Optional[bool], UnsetType] = UNSET,
        version: Union[Optional[str], UnsetType] = UNSET,
        csar_uri: Union[Optional[Upload], UnsetType] = UNSET,
        template: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyCreate:
        query = gql(
            """
            mutation TopologyCreate($name: String!, $published: Boolean, $version: String, $csarUri: Upload, $template: String) {
              topologyCreate(
                name: $name
                published: $published
                version: $version
                csarUri: $csarUri
                template: $template
              ) {
                ...TopologyFields
              }
            }

            fragment TopologyFields on Topology {
              cid
              dev
              instancesCount
              list
              namespace
              published
              stable
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "published": published,
            "version": version,
            "csarUri": csar_uri,
            "template": template,
        }
        response = await self.execute(
            query=query, operation_name="TopologyCreate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TopologyCreate.model_validate(data)

    async def topology_delete(
        self,
        cid: str,
        namespace: str,
        version: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyDelete:
        query = gql(
            """
            mutation TopologyDelete($cid: String!, $namespace: String!, $version: String) {
              topologyDelete(cid: $cid, namespace: $namespace, version: $version)
            }
            """
        )
        variables: Dict[str, object] = {
            "cid": cid,
            "namespace": namespace,
            "version": version,
        }
        response = await self.execute(
            query=query, operation_name="TopologyDelete", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TopologyDelete.model_validate(data)

    async def topology_import(
        self,
        url: str,
        namespace: Union[Optional[str], UnsetType] = UNSET,
        repo_name: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyImport:
        query = gql(
            """
            mutation TopologyImport($url: String!, $namespace: String, $repoName: String) {
              topologyImport(url: $url, namespace: $namespace, repoName: $repoName)
            }
            """
        )
        variables: Dict[str, object] = {
            "url": url,
            "namespace": namespace,
            "repoName": repo_name,
        }
        response = await self.execute(
            query=query, operation_name="TopologyImport", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TopologyImport.model_validate(data)

    async def topology_update(
        self,
        cid: str,
        published: bool,
        saas: bool,
        namespace: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyUpdate:
        query = gql(
            """
            mutation TopologyUpdate($cid: String!, $namespace: String, $published: Boolean!, $saas: Boolean!) {
              topologyUpdate(
                cid: $cid
                namespace: $namespace
                published: $published
                saas: $saas
              ) {
                ...TopologyFields
              }
            }

            fragment TopologyFields on Topology {
              cid
              dev
              instancesCount
              list
              namespace
              published
              stable
            }
            """
        )
        variables: Dict[str, object] = {
            "cid": cid,
            "namespace": namespace,
            "published": published,
            "saas": saas,
        }
        response = await self.execute(
            query=query, operation_name="TopologyUpdate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TopologyUpdate.model_validate(data)

    async def topologies(self, **kwargs: Any) -> Topologies:
        query = gql(
            """
            query topologies {
              workspace {
                topologies {
                  ...TopologiesDetails
                }
              }
            }

            fragment TopologiesDetails on Topologies {
              namespaces {
                cid
                list {
                  ...TopologyFields
                }
              }
            }

            fragment TopologyFields on Topology {
              cid
              dev
              instancesCount
              list
              namespace
              published
              stable
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="topologies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Topologies.model_validate(data)

    async def topology(self, cid: str, namespace: str, **kwargs: Any) -> Topology:
        query = gql(
            """
            query topology($cid: String!, $namespace: String!) {
              workspace {
                topologies {
                  find(cid: $cid, namespace: $namespace) {
                    ...TopologyFields
                  }
                }
              }
            }

            fragment TopologyFields on Topology {
              cid
              dev
              instancesCount
              list
              namespace
              published
              stable
            }
            """
        )
        variables: Dict[str, object] = {"cid": cid, "namespace": namespace}
        response = await self.execute(
            query=query, operation_name="topology", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Topology.model_validate(data)

    async def topology_version_for_instance_get(
        self,
        cid: str,
        version: str,
        namespace: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyVersionForInstanceGet:
        query = gql(
            """
            query TopologyVersionForInstanceGet($cid: String!, $namespace: String, $version: String!) {
              topologyVersionGet(cid: $cid, namespace: $namespace, version: $version) {
                inputsReadOnly
                inputsIntrospect
                ...TopologyVersionFields
              }
            }

            fragment NodeTopoMetaFields on NodeTopoMeta {
              cid
              dependsOn
              dependsOnSubLevel
              minDependsOn
              requiredBy
              requiredBySubLevel
              select
              substitute
            }

            fragment TopologyVersionFields on TopologyVersion {
              cid
              name
              nodesTopoMeta {
                ...NodeTopoMetaFields
              }
              template
            }
            """
        )
        variables: Dict[str, object] = {
            "cid": cid,
            "namespace": namespace,
            "version": version,
        }
        response = await self.execute(
            query=query,
            operation_name="TopologyVersionForInstanceGet",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return TopologyVersionForInstanceGet.model_validate(data)

    async def topology_version_get(
        self,
        cid: str,
        namespace: Union[Optional[str], UnsetType] = UNSET,
        version: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TopologyVersionGet:
        query = gql(
            """
            query TopologyVersionGet($cid: String!, $namespace: String, $version: String) {
              topologyVersionGet(cid: $cid, namespace: $namespace, version: $version) {
                ...TopologyVersionFields
              }
            }

            fragment NodeTopoMetaFields on NodeTopoMeta {
              cid
              dependsOn
              dependsOnSubLevel
              minDependsOn
              requiredBy
              requiredBySubLevel
              select
              substitute
            }

            fragment TopologyVersionFields on TopologyVersion {
              cid
              name
              nodesTopoMeta {
                ...NodeTopoMetaFields
              }
              template
            }
            """
        )
        variables: Dict[str, object] = {
            "cid": cid,
            "namespace": namespace,
            "version": version,
        }
        response = await self.execute(
            query=query,
            operation_name="TopologyVersionGet",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return TopologyVersionGet.model_validate(data)

    async def logout(self, **kwargs: Any) -> Logout:
        query = gql(
            """
            mutation logout {
              logout {
                msg
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="logout", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Logout.model_validate(data)

    async def login(self, email: str, password: str, **kwargs: Any) -> Login:
        query = gql(
            """
            mutation login($email: String!, $password: String!) {
              login(email: $email, password: $password) {
                ...MeFields
              }
            }

            fragment MeFields on UserContext {
              email
              domainDn
              exp
              flag
              profile
              readOnly
              wsCid
            }
            """
        )
        variables: Dict[str, object] = {"email": email, "password": password}
        response = await self.execute(
            query=query, operation_name="login", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Login.model_validate(data)

    async def login_target(self, email: str, **kwargs: Any) -> LoginTarget:
        query = gql(
            """
            mutation loginTarget($email: String!) {
              loginTarget(email: $email) {
                domainDn
                wsCid
              }
            }
            """
        )
        variables: Dict[str, object] = {"email": email}
        response = await self.execute(
            query=query, operation_name="loginTarget", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return LoginTarget.model_validate(data)

    async def persistent_token_create(
        self, replace: Union[Optional[bool], UnsetType] = UNSET, **kwargs: Any
    ) -> PersistentTokenCreate:
        query = gql(
            """
            mutation persistentTokenCreate($replace: Boolean) {
              persistentTokenCreate(replace: $replace)
            }
            """
        )
        variables: Dict[str, object] = {"replace": replace}
        response = await self.execute(
            query=query,
            operation_name="persistentTokenCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PersistentTokenCreate.model_validate(data)

    async def persistent_token_delete(self, **kwargs: Any) -> PersistentTokenDelete:
        query = gql(
            """
            mutation persistentTokenDelete {
              persistentTokenDelete
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="persistentTokenDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PersistentTokenDelete.model_validate(data)

    async def persistent_token_exist(self, **kwargs: Any) -> PersistentTokenExist:
        query = gql(
            """
            query persistentTokenExist {
              persistentTokenExist
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="persistentTokenExist",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PersistentTokenExist.model_validate(data)

    async def signup(self, email: str, **kwargs: Any) -> Signup:
        query = gql(
            """
            mutation signup($email: String!) {
              signup(email: $email) {
                msg
              }
            }
            """
        )
        variables: Dict[str, object] = {"email": email}
        response = await self.execute(
            query=query, operation_name="signup", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Signup.model_validate(data)

    async def token_auth(self, **kwargs: Any) -> TokenAuth:
        query = gql(
            """
            mutation tokenAuth {
              tokenAuth {
                ...MeFields
              }
            }

            fragment MeFields on UserContext {
              email
              domainDn
              exp
              flag
              profile
              readOnly
              wsCid
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="tokenAuth", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TokenAuth.model_validate(data)

    async def token_ws(
        self,
        domain_dn: Union[Optional[str], UnsetType] = UNSET,
        ws_cid: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TokenWs:
        query = gql(
            """
            mutation tokenWs($domainDn: String, $wsCid: String) {
              tokenWs(domainDn: $domainDn, wsCid: $wsCid) {
                ...MeFields
              }
            }

            fragment MeFields on UserContext {
              email
              domainDn
              exp
              flag
              profile
              readOnly
              wsCid
            }
            """
        )
        variables: Dict[str, object] = {"domainDn": domain_dn, "wsCid": ws_cid}
        response = await self.execute(
            query=query, operation_name="tokenWs", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TokenWs.model_validate(data)

    async def password_reset(
        self,
        email: str,
        key: Union[Optional[str], UnsetType] = UNSET,
        password: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PasswordReset:
        query = gql(
            """
            mutation passwordReset($email: String!, $key: String, $password: String) {
              passwordReset(email: $email, key: $key, password: $password) {
                msg
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "email": email,
            "key": key,
            "password": password,
        }
        response = await self.execute(
            query=query, operation_name="passwordReset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PasswordReset.model_validate(data)

    async def password_change(
        self, current_password: str, new_password: str, **kwargs: Any
    ) -> PasswordChange:
        query = gql(
            """
            mutation passwordChange($currentPassword: String!, $newPassword: String!) {
              passwordChange(currentPassword: $currentPassword, newPassword: $newPassword) {
                msg
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "currentPassword": current_password,
            "newPassword": new_password,
        }
        response = await self.execute(
            query=query, operation_name="passwordChange", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PasswordChange.model_validate(data)

    async def saas_transaction_create(
        self,
        name: str,
        model: str,
        price: float,
        target: str,
        time_unit: str,
        inputs: Union[Optional[Any], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SaasTransactionCreate:
        query = gql(
            """
            mutation saasTransactionCreate($name: String!, $model: String!, $inputs: JSON, $price: Float!, $target: String!, $timeUnit: String!) {
              saasTransactionCreate(
                name: $name
                model: $model
                inputs: $inputs
                price: $price
                target: $target
                timeUnit: $timeUnit
              ) {
                ...Transaction
              }
            }

            fragment Transaction on Transaction {
              cid
              inputs
              isSaas
              model
              name
              fqdn
              ref
              timeEnd
              timeStart
              version
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "model": model,
            "inputs": inputs,
            "price": price,
            "target": target,
            "timeUnit": time_unit,
        }
        response = await self.execute(
            query=query,
            operation_name="saasTransactionCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionCreate.model_validate(data)

    async def saas_transaction_delete(
        self, name: str, target: str, **kwargs: Any
    ) -> SaasTransactionDelete:
        query = gql(
            """
            mutation saasTransactionDelete($name: String!, $target: String!) {
              saasTransactionDelete(name: $name, target: $target) {
                errors
                inProgress
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "target": target}
        response = await self.execute(
            query=query,
            operation_name="saasTransactionDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionDelete.model_validate(data)

    async def saas_transaction_update(
        self,
        name: str,
        price: float,
        target: str,
        time_unit: str,
        inputs: Union[Optional[Any], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SaasTransactionUpdate:
        query = gql(
            """
            mutation saasTransactionUpdate($name: String!, $inputs: JSON, $price: Float!, $target: String!, $timeUnit: String!) {
              saasTransactionUpdate(
                name: $name
                inputs: $inputs
                price: $price
                target: $target
                timeUnit: $timeUnit
              ) {
                ...Transaction
              }
            }

            fragment Transaction on Transaction {
              cid
              inputs
              isSaas
              model
              name
              fqdn
              ref
              timeEnd
              timeStart
              version
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "inputs": inputs,
            "price": price,
            "target": target,
            "timeUnit": time_unit,
        }
        response = await self.execute(
            query=query,
            operation_name="saasTransactionUpdate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionUpdate.model_validate(data)

    async def saas(self, **kwargs: Any) -> Saas:
        query = gql(
            """
            query saas {
              saas {
                fqdn
                name
                services {
                  cid
                  dev
                  list {
                    ...ServiceDetailsFragment
                  }
                  stable
                }
              }
            }

            fragment ServiceDetailsFragment on NodeServiceDetails {
              capabilities
              cid
              ephemeral
              inputs
              outputs
              price {
                perHour
                perMonth
              }
              substitutionFilterProperties
              version
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="saas", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Saas.model_validate(data)

    async def saas_find(self, model: str, target: str, **kwargs: Any) -> SaasFind:
        query = gql(
            """
            query saasFind($model: String!, $target: String!) {
              saasFind(model: $model, target: $target) {
                cid
                dev
                list {
                  ...ServiceDetailsFragment
                }
                stable
              }
            }

            fragment ServiceDetailsFragment on NodeServiceDetails {
              capabilities
              cid
              ephemeral
              inputs
              outputs
              price {
                perHour
                perMonth
              }
              substitutionFilterProperties
              version
            }
            """
        )
        variables: Dict[str, object] = {"model": model, "target": target}
        response = await self.execute(
            query=query, operation_name="saasFind", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SaasFind.model_validate(data)

    async def saas_price(
        self,
        model: str,
        target: str,
        time_unit: str,
        inputs: Union[Optional[Any], UnsetType] = UNSET,
        version: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SaasPrice:
        query = gql(
            """
            query saasPrice($inputs: JSON, $model: String!, $target: String!, $timeUnit: String!, $version: String) {
              saasPrice(
                inputs: $inputs
                model: $model
                target: $target
                timeUnit: $timeUnit
                version: $version
              )
            }
            """
        )
        variables: Dict[str, object] = {
            "inputs": inputs,
            "model": model,
            "target": target,
            "timeUnit": time_unit,
            "version": version,
        }
        response = await self.execute(
            query=query, operation_name="saasPrice", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SaasPrice.model_validate(data)

    async def saas_secret_get(
        self, name: str, password: str, secret: str, **kwargs: Any
    ) -> SaasSecretGet:
        query = gql(
            """
            query saasSecretGet($name: String!, $password: String!, $secret: String!) {
              saasSecretGet(name: $name, password: $password, secret: $secret)
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "password": password,
            "secret": secret,
        }
        response = await self.execute(
            query=query, operation_name="saasSecretGet", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SaasSecretGet.model_validate(data)

    async def saas_transaction_list(self, **kwargs: Any) -> SaasTransactionList:
        query = gql(
            """
            query saasTransactionList {
              saasTransactionList {
                ...Transaction
              }
            }

            fragment Transaction on Transaction {
              cid
              inputs
              isSaas
              model
              name
              fqdn
              ref
              timeEnd
              timeStart
              version
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="saasTransactionList",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionList.model_validate(data)

    async def saas_transaction_find(
        self,
        name: str,
        details: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SaasTransactionFind:
        query = gql(
            """
            query saasTransactionFind($name: String!, $details: Boolean) {
              saasTransactionFind(name: $name, details: $details) {
                ...TransactionDetails
              }
            }

            fragment Transaction on Transaction {
              cid
              inputs
              isSaas
              model
              name
              fqdn
              ref
              timeEnd
              timeStart
              version
            }

            fragment TransactionDetails on Transaction {
              infos {
                errors
                secrets
                status
                outputs
              }
              ...Transaction
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "details": details}
        response = await self.execute(
            query=query,
            operation_name="saasTransactionFind",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionFind.model_validate(data)

    async def saas_transaction_get(
        self,
        name: str,
        details: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SaasTransactionGet:
        query = gql(
            """
            query saasTransactionGet($name: String!, $details: Boolean) {
              saasTransactionGet(name: $name, details: $details) {
                ...TransactionDetails
              }
            }

            fragment Transaction on Transaction {
              cid
              inputs
              isSaas
              model
              name
              fqdn
              ref
              timeEnd
              timeStart
              version
            }

            fragment TransactionDetails on Transaction {
              infos {
                errors
                secrets
                status
                outputs
              }
              ...Transaction
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "details": details}
        response = await self.execute(
            query=query,
            operation_name="saasTransactionGet",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SaasTransactionGet.model_validate(data)

    async def workspace_min(self, **kwargs: Any) -> WorkspaceMin:
        query = gql(
            """
            query workspaceMin {
              workspace {
                attributesAvailable {
                  type
                  value
                }
                catalog {
                  ...Catalog
                }
                cid
                mappings {
                  ...MappingsList
                }
                metas {
                  allowExtAuth
                  allowIntAuth
                  authDn
                  authLocal
                  dn
                  dnUuid
                  domainName
                  fqdn
                  providerDn
                  providerName
                  subDomain
                }
                services {
                  ...ServicesList
                }
                topologies {
                  ...TopologiesDetails
                }
              }
            }

            fragment Catalog on Catalog {
              nodesDetails {
                ...NodeDetails
              }
            }

            fragment MappingsList on Mappings {
              list {
                cid
                name
                wsList {
                  ...WsMappingInfo
                  servicesAvailable {
                    cid
                    list {
                      capabilities
                      cid
                      version
                    }
                    dev
                    stable
                  }
                }
              }
            }

            fragment NodeDetails on NodeDetails {
              attributes {
                cid
                type
              }
              cid
              properties {
                cid
                entrySchema {
                  type
                }
                required
                type
              }
              services
            }

            fragment ServicesList on ServicesAgent {
              list {
                cid
              }
            }

            fragment TopologiesDetails on Topologies {
              namespaces {
                cid
                list {
                  ...TopologyFields
                }
              }
            }

            fragment TopologyFields on Topology {
              cid
              dev
              instancesCount
              list
              namespace
              published
              stable
            }

            fragment WsMappingInfo on WsMapping {
              cid
              fqdn
              infos {
                directAccess
              }
              isConsumer
              isProvider
              isSaas
              ready
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="workspaceMin", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return WorkspaceMin.model_validate(data)
