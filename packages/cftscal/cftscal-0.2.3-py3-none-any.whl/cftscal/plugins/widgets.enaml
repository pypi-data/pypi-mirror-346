import shutil

from palettable.tableau import Tableau_20
import pyqtgraph as pg

from atom.api import Atom, Bool, Dict, Float, List, Tuple, Typed, Value
import enaml
with enaml.imports():
    from psi.data.plots_manifest import PGCanvas

from enaml.colors import Color
from enaml.core.api import DynamicTemplate, Looper
from enaml.layout.api import (
    align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout, TabLayout
)
from enaml.stdlib.fields import FloatField, RegexField
from enaml.stdlib.message_box import question
from enaml.qt import QtCore
from enaml.widgets.api import (
    Action, ActionGroup, Container, Label, Field, Form, MainWindow, Menu, MenuBar,
    ObjectCombo, PopupView, PushButton, DockArea, DockItem,
)
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn

from psi.data.plots import make_color
from cftscal.objects import (
    CFTSInEarCalibration, CFTSInputAmplifierCalibration,
    CFTSMicrophoneCalibration, CFTSStarshipCalibration, CFTSSpeakerCalibration,
)


enamldef AddItem(PopupView): popup:

    attr combo
    window_type = 'popup'
    arrow_size = 20
    arrow_edge = 'top'
    alias label: label.text
    alias regex: field.regex

    Container:
        constraints = [
            vbox(
                hbox(label, field),
                hbox(spacer(0), pb_ok, pb_cancel, spacing=0)
            ),
            align('v_center', label, field),
            align('v_center', pb_ok, pb_cancel),
            align('width', pb_ok, pb_cancel),
        ]

        Label: label:
            pass
        RegexField: field:
            regex = f'^[\w\d-]+$'
        PushButton: pb_ok:
            text = 'OK'
            enabled << bool(field.text)
            clicked ::
                items = combo.items[:]
                items.append(field.text)
                combo.items = items
                combo.selected = field.text
                popup.close()

        PushButton: pb_cancel:
            text = 'Cancel'
            clicked ::
                popup.close()


class BasePlotManager(Atom):

    legend = Typed(pg.LegendItem)
    component = Typed(pg.GraphicsLayout)
    vb = Typed(pg.ViewBox)
    color_cycle = Value()
    plots = Dict()

    def _default_color_cycle(self):
        return iter(Tableau_20.colors)

    def _default_legend(self):
        legend = pg.LegendItem()
        legend.setParentItem(self.vb)
        return legend

    def _default_vb(self):
        vb = pg.ViewBox()
        vb.setBackgroundColor('w')
        return vb

    def _default_component(self):
        component = pg.GraphicsLayout()
        component.setSpacing(10)
        y_axis = self.make_y_axis()
        x_axis = self.make_x_axis()
        component.addItem(y_axis, 0, 0)
        component.addItem(x_axis, 1, 1)

        y_axis.linkToView(self.vb)
        x_axis.linkToView(self.vb)
        component.addItem(self.vb, 0, 1)

        return component

    def _default_plots(self):
        return {}

    def make_y_axis(self):
        y_axis = pg.AxisItem('left')
        y_axis.setLabel('Sensitivity (dB re 1Vrms)')
        y_axis.setGrid(64)
        return y_axis

    def make_x_axis(self):
        x_axis = pg.AxisItem('bottom')
        x_axis.setGrid(64)
        x_axis.setLabel('Frequency', units='Hz')
        x_axis.setLogMode(True)
        return x_axis

    def get_plot_id(self, calibration):
        return calibration

    def create_empty_plots(self):
        color, plot = self.create_plot()
        return color, [plot]

    def get_plots(self, plot_id):
        if plot_id not in self.plots:
            color, plots = self.create_empty_plots()
            # Convert to Enaml color for highlight in object tree 
            color = Color(color.red(), color.green(), color.blue(), color.alpha())
            self.plots[plot_id] = color, plots
            self.legend.addItem(plots[0], str(plot_id))
            for plot in plots:
                self.vb.addItem(plot)
        return self.plots[plot_id]

    def plot(self, calibration):
        return self._update(calibration, remove=False)

    def remove(self, calibration):
        plot_id = self.get_plot_id(calibration)
        if plot_id not in self.plots:
            return
        return self._update(calibration, remove=True)

    def remove_plots(self, plot_id):
        _, plots = self.plots.pop(plot_id)
        self.legend.removeItem(plots[0])
        for plot in plots:
            self.vb.removeItem(plot)

    def create_plot(self, color=None, width=2, line='solid'):
        if color is None:
            try:
                color = make_color(next(self.color_cycle))
            except StopIteration:
                # We have exhausted the color cycle. Just start over again at
                # the beginning.
                self.color_cycle = self._default_color_cycle()
                color = make_color(next(self.color_cycle))

        linestyle = getattr(QtCore.Qt.PenStyle, f'{line.capitalize()}Line')
        pen = pg.mkPen(color, width=width, style=linestyle)
        return color, pg.PlotCurveItem(pen=pen)


################################################################################
# Organize list of calibrated objects and calibrations for each object
################################################################################
class MultiPlotManager(Atom):
    '''
    Allow multiple plot managers to receive notifications
    '''
    managers = Tuple()

    def __init__(self, *managers):
        super().__init__(managers=managers)

    def plot(self, calibration):
        results = []
        for manager in self.managers:
            result = manager.plot(calibration)
            results.append(result)
        return results[0]

    def remove(self, calibration):
        results = []
        for manager in self.managers:
            result = manager.remove(calibration)
            results.append(result)
        return results[0]


class ObjectNode(Atom):
    selected = Bool(False)
    item = Value()
    manager = Value()
    color = Value(None)

    def _observe_selected(self, event):
        if self.selected:
            self.color = self.manager.plot(self.item)
        else:
            self.manager.remove(self.item)
            self.color = None


class ObjectGroup(Atom):
    selected = Bool(False)
    skip_autoselect = Bool(False)
    subitems = List(ObjectNode)
    item = Value()
    manager = Value()
    color = Value(None)

    def __init__(self, item, manager):
        self.item = item
        self.manager = manager
        self.update_subitems()

    def update_subitems(self):
        objects = sorted(self.item.list_calibrations(), reverse=True)
        self.subitems = [ObjectNode(item=obj, manager=self.manager) for obj in objects]

    def _observe_subitems(self, event):
        for i in self.subitems:
            i.observe('selected', self._check_selected)
            i.observe('color', self._check_color)

    def _check_selected(self, event):
        for i in self.subitems:
            if i.selected:
                self.skip_autoselect = True
                self.selected = True
                self.skip_autoselect = False
                return
        self.selected = False

    def _check_color(self, event):
        for i in self.subitems:
            if i.color is not None:
                self.color = i.color
                break
        else:
            self.color = None

    def _observe_selected(self, event):
        if self.selected:
            if not self.skip_autoselect:
                self.subitems[0].selected = True
        else:
            for i in self.subitems:
                i.selected = False


class ObjectCollection(Atom):
    groups = List(ObjectGroup)
    manager = Value()
    plot_manager = Value()

    def __init__(self, manager, plot_manager):
        self.manager = manager
        self.plot_manager = plot_manager
        self.update_groups()

    def update_groups(self):
        objects = sorted(self.manager.list_objects())
        self.groups = [ObjectGroup(obj, self.plot_manager) for obj in objects]


template CalibratedObjectTemplate(item, MemberType: CFTSMicrophoneCalibration):
    TreeViewColumn:
        text << f'{item.sens:.2f} mV/Pa'
    TreeViewColumn:
        text << f'{item.sens_db:.2f} dB(mV/Pa)'
    TreeViewColumn:
        text << item.pistonphone


template CalibratedObjectTemplate(item, MemberType: CFTSInEarCalibration):
    TreeViewColumn:
        text << item.ear


template CalibratedObjectTemplate(item, MemberType: CFTSStarshipCalibration):
    TreeViewColumn:
        text << item.microphone
    TreeViewColumn:
        text << item.coupler
    TreeViewColumn:
        text << item.stimulus


template CalibratedObjectTemplate(item, MemberType: CFTSSpeakerCalibration):
    TreeViewColumn:
        text << item.microphone
    TreeViewColumn:
        text << item.method


template CalibratedObjectTemplate(item, MemberType: CFTSInputAmplifierCalibration):
    TreeViewColumn:
        text << f'{item.measured_gain:.0f}'


template CalibratedObjectTemplate(item, MemberType):
    pass


enamldef CalibratedObjects(Container):
    alias headers: tree.horizontal_headers
    attr collection

    TreeView: tree:
        horizontal_headers << ['Name']
        resize_mode = 'resize_to_contents'
        horizontal_stretch = True
        items << collection.groups
        Looper:
            iterable << parent.items
            TreeViewItem: tree_group:
                attr group << loop_item
                text << loop_item.item.name
                items << loop_item.subitems
                checkable = True
                checked := loop_item.selected
                background << loop_item.color
                Looper:
                    iterable << parent.items
                    TreeViewItem: tree_node:
                        checkable = True
                        checked := loop_item.selected
                        text << str(loop_item.item.datetime)
                        background << loop_item.color
                        Menu:
                            Action:
                                text = 'Set as reference'
                            Action:
                                separator = True
                            Action:
                                text = 'Delete'
                                triggered ::
                                    name = f'{loop_item.item.datetime} from {loop_item.item.name}'
                                    q = f'Are you sure you want to delete {name}?'
                                    button = question(tree_node, '', q)
                                    if button.text == 'Yes':
                                        shutil.rmtree(loop_item.item.filename)
                                        collection.update_groups()
                        DynamicTemplate:
                            base = CalibratedObjectTemplate
                            args = (loop_item.item, type(loop_item.item))
