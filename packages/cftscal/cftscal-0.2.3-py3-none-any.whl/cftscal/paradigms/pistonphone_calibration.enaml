import logging
log = logging.getLogger(__name__)

import os

import numpy as np

from enaml.core.api import Conditional
from enaml.widgets.api import DockItem, Label, Form
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psiaudio import util
from psiaudio.calibration import FlatCalibration

from psi.context.api import ContextGroup, ContextRow, EnumParameter, Parameter, Result
from psi.controller.api import (Blocked, ControllerManifest, ExperimentAction,
                                get_hw_ai_choices)
from psi.data.plots import (TimeContainer, ChannelPlot, ViewBox, FFTContainer,
                            FFTChannelPlot)

from psi.data.sinks.api import BinaryStore, TextStore

from enaml.application import deferred_call

import pyqtgraph as pg


def calculate_sens(event):
    data = event.workbench.get_plugin('psi.data')
    context = event.workbench.get_plugin('psi.context')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    dock_item = ui.window.find('result')

    frequency = context.get_value('reference_frequency')
    level = context.get_value('reference_level')
    pa = util.dbtopa(level)

    source = data.find_sink('hw_ai').get_source('hw_ai')
    waveform = source[0]
    fs = source.fs

    rms_overall = util.rms(waveform, detrend=True)
    rms_nom = util.tone_power_conv(waveform, fs, frequency, 'flattop')

    frequencies = util.psd_freq(waveform, fs)
    psd_hanning = util.psd_df(waveform, fs, 'hann')
    psd_flattop = util.psd_df(waveform, fs, 'flattop')

    freq_lb, freq_ub = frequency*0.9, frequency*1.1
    mask = (frequencies >= freq_lb) & (frequencies < freq_ub)

    peak_freq = frequencies[mask][np.argmax(psd_hanning[mask])]
    rms_peak = util.tone_power_conv(waveform, fs, peak_freq, 'flattop')
    mic_sens_overall = rms_overall/pa*1e3
    mic_sens_peak = rms_peak/pa*1e3
    mic_sens_nom = rms_nom/pa*1e3

    results = {
        'peak frequency (Hz)': peak_freq,
        'rms overall (V)': rms_overall,
        'rms nominal (V)': rms_nom,
        'rms peak (V)': rms_peak,
        'mic sens overall (mV/Pa)': mic_sens_overall,
        'mic sens nominal (mV/Pa)': mic_sens_nom,
        'mic sens peak (mV/Pa)': mic_sens_peak,
    }

    deferred_call(setattr, dock_item, 'results', results)

    core = event.workbench.get_plugin('enaml.workbench.core')
    command = 'pistonphone_data.save_mapping'
    parameters = {'name': 'microphone_sensitivity',
                  'mapping': results}
    core.invoke_command(command, parameters)

    summary = {
        'frequency': frequencies,
        'psd_hanning': psd_hanning.values,
        'psd_flattop': psd_flattop.values,
    }

    def plot_data(data=data, summary=summary):
        vb = data.find_viewbox('signal_fft_view_vb')
        x = np.log10(summary['frequency'])
        y = util.db(summary['psd_hanning'])

        item = pg.PlotCurveItem(pen='k')
        item.setData(x, y)
        vb.add_plot(item)
        vb.parent.legend.addItem(item, 'hann window')

        y = util.db(summary['psd_flattop'])
        item = pg.PlotCurveItem(pen='r')
        item.setData(x, y)
        vb.add_plot(item)
        vb.parent.legend.addItem(item, 'flattop window')

    deferred_call(plot_data)


def initialize_settings(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    if (level := os.environ.get('CFTS_PISTONPHONE_LEVEL', None)):
        item = context.get_item('reference_level')
        item.set_value(level)
        item.editable = False

    if (freq := os.environ.get('CFTS_PISTONPHONE_FREQUENCY', None)):
        item = context.get_item('reference_frequency')
        item.set_value(freq)
        item.editable = False


def configure_hardware(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    input_channel = controller.get_input('hw_ai').channel
    sample_duration = context.get_value('sample_duration')
    input_channel.calibration = FlatCalibration.unity()
    input_channel.samples = round(sample_duration * input_channel.fs)

    controller.register_action(
        '{}_end'.format(input_channel.engine.name),
        'psi.controller.stop'
    )


enamldef PistonphoneCalibrationManifest(ControllerManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'hw_ai'
            continuous_inputs = ['hw_ai']

        TextStore:
            name = 'pistonphone_data'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Blocked: hw_ai:
            duration = 0.1
            name = 'hw_ai'
            source_name = 'cal_microphone'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Input'

            Parameter:
                name = 'sample_duration'
                label = 'Sample duration (sec.)'
                compact_label = 'samp. dur.'
                dtype = 'float64'
                default = 2
                scope = 'experiment'

            ContextRow:
                fmt = ['Reference', ref_freq, 'Hz @', ref_level, 'dB SPL']

                Parameter: ref_freq:
                    name = 'reference_frequency'
                    dtype = 'float64'
                    default = 1e3
                    scope = 'experiment'

                Parameter: ref_level:
                    name = 'reference_level'
                    dtype = 'float64'
                    default = 114
                    scope = 'experiment'

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.calculate_sens'
            handler = calculate_sens

        Command:
            id = manifest.id + '.initialize_settings'
            handler = initialize_settings

        Command:
            id = manifest.id + '.configure_hardware'
            handler = configure_hardware

    Extension: actions:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.initialize_settings'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': None}

        ExperimentAction:
            event = 'experiment_end'
            command = 'psi.controller.calculate_sens'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 9

    Extension:
        id = 'result_view'
        point = 'psi.experiment.workspace'
        DockItem: di:
            name = 'result'
            title = 'Result'
            attr results = {}
            Conditional:
                condition << bool(results)
                Form:
                    Label:
                        text = 'Peak frequency (Hz)'
                    Label:
                        text << '{:.4f}'.format(results.get('peak frequency (Hz)', ''))

                    Label:
                        text = 'Overall RMS (V)'
                    Label:
                        text << '{:.4f}'.format(results.get('rms overall (V)', ''))

                    Label:
                        text = 'RMS at nominal frequency (V)'
                    Label:
                        text << '{:.4f}'.format(results.get('rms nominal (V)', ''))

                    Label:
                        text = 'RMS at peak frequency (V)'
                    Label:
                        text << '{:.4f}'.format(results.get('rms peak (V)', ''))

                    Label:
                        text = 'Mic. sens. (mV/Pa)'
                    Label:
                        text << '{:.4f}'.format(results.get('mic sens peak (mV/Pa)', ''))
