import numpy as np

import pyqtgraph as pg

from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (
    Container, DockArea, DockItem, Field, Label, ObjectCombo, PushButton
)

from psi.data.plots_manifest import PGCanvas

from cftscal.objects import input_amplifier_manager
from cftscal.plugins.widgets import (
    AddItem, CalibratedObjects, BasePlotManager, ObjectCollection,
)


class InputAmplifierPlotManager(BasePlotManager):

    def make_x_axis(self):
        x_axis = pg.AxisItem('bottom')
        x_axis.setGrid(0.1)
        x_axis.setLabel('Time', units='sec')
        return x_axis

    def _update(self, calibration, remove=False):
        plot_id = self.get_plot_id(calibration)
        if remove:
            self.remove_plots(plot_id)
            return None

        color, plots = self.get_plots(plot_id)
        fh = calibration.load_recording()
        waveform = fh.cal_signal
        plots[0].setData(waveform.index.values, waveform['amplitude'].values)
        return color


enamldef InputAmplifierView(Container):

    attr settings

    DockArea: area:
        layout = AreaLayout(
            HSplitLayout(
                VSplitLayout(
                    'settings',
                    'amp_list',
                    sizes=[25, 200],
                ),
                'amp_gain_plot',
                sizes=[150, 900],
            ),
        )
        DockItem:
            name = 'settings'
            title = 'Settings'
            closable = False
            stretch = 0

            Container:
                layout_constraints => ():
                    widgets = self.visible_widgets()
                    first = []
                    for w in widgets:
                        first.append(w.children[0])

                    constraints = [
                        vbox(*widgets),
                        align('right', *first),
                    ]
                    return constraints

                Looper:
                    iterable << settings.input_amplifiers

                    Container:
                        share_layout = True
                        padding = 0
                        constraints = [
                            vbox(
                                hbox(
                                    amp_label,
                                    hbox(amp_select, amp_add, amp_gain, spacing=0),
                                    amp_gain_x_label,
                                    amp_gain_mult,
                                    amp_gain_label,
                                    spacer(0),
                                    amp_cal_start,
                                    spacing=5,
                                ),
                                hbox(amp_freq_lb, amp_freq_lb_label,
                                     amp_freq_ub, amp_freq_ub_label,
                                     amp_filt_60Hz,
                                     spacer(0)),
                            ),
                            align('v_center', amp_label, amp_select, amp_add,
                                  amp_gain, amp_gain_x_label, amp_gain_mult,
                                  amp_gain_label, amp_cal_start),
                            align('v_center', amp_freq_lb, amp_freq_lb_label,
                                  amp_freq_ub, amp_freq_ub_label, amp_filt_60Hz),
                            align('left', amp_select, amp_freq_lb),
                            amp_add.width == 25,
                        ]

                        attr amplifier = loop_item

                        Label: amp_label:
                            text = 'Input Amplifier'

                        ObjectCombo: amp_select:
                            items = sorted(amplifier.available_input_amplifiers)
                            selected := amplifier.name

                        PushButton: amp_add:
                            text = '+'
                            clicked ::
                                popup = AddItem(self, combo=amp_select, label='Input Amplifier')
                                popup.show()

                        Label: amp_gain_x_label:
                            text = 'x'

                        Label: amp_gain_label:
                            text = 'gain'

                        ObjectCombo: amp_gain:
                            items = [5, 10, 20, 50, 100, 200]
                            selected := amplifier.gain

                        ObjectCombo: amp_gain_mult:
                            items = [10, 1000]
                            selected := amplifier.gain_mult

                        Label: amp_freq_lb_label:
                            text = 'Hz to'

                        ObjectCombo: amp_freq_lb:
                            items = [0, 0.1, 0.3, 1, 3, 10, 30, 100, 300]
                            selected := amplifier.freq_lb

                        Label: amp_freq_ub_label:
                            text = 'kHz with 60 Hz filter on'

                        ObjectCombo: amp_freq_ub:
                            items = [0.03, 0.1, 0.3, 1, 3, 10]
                            selected ::
                                amplifier.freq_ub = selected * 1e3
                            selected << amplifier.freq_ub * 1e-3

                        ObjectCombo: amp_filt_60Hz:
                            items = ['input', 'output']
                            selected := amplifier.filt_60Hz

                        PushButton: amp_cal_start:
                            text = 'Calibrate'
                            enabled << bool(amplifier.name)
                            clicked ::
                                settings.run_amp_cal(amplifier)
                                amp_tree.collection.update_groups()

        DockItem:
            name = 'amp_gain_plot'
            title = 'Input Amplifier Sensitivity'
            closable = False
            stretch = 10

            Container:
                PGCanvas: input_amplifier_plot:
                    attr manager = InputAmplifierPlotManager()
                    component << manager.component

        DockItem:
            name = 'amp_list'
            title = 'Input Amplifier Calibrations'
            closable = False
            stretch = 0

            CalibratedObjects: amp_tree:
                headers = ['Name', 'Meas. Gain']
                collection = ObjectCollection(
                    input_amplifier_manager, input_amplifier_plot.manager
                )
