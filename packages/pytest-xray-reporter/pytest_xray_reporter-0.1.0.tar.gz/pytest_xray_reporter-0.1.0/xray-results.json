{
  "tests": [
    {
      "testKey": "tests/test_plugin.py::test_success",
      "start": "2025-05-07T16:22:17.832339+00:00",
      "evidence": [
        {
          "data": "",
          "filename": "test.log",
          "contentType": "text/plain"
        }
      ],
      "steps": [],
      "defects": [],
      "customFields": {
        "tests": "1",
        "pytest-xray-reporter": "1",
        "": "1"
      },
      "finish": "2025-05-07T16:22:17.832622+00:00",
      "status": "PASSED",
      "comment": "",
      "duration": 0.018607
    },
    {
      "testKey": "tests/test_plugin.py::test_failure",
      "start": "2025-05-07T16:22:17.832786+00:00",
      "evidence": [
        {
          "data": "ZGVmIHRlc3RfZmFpbHVyZSgpOgogICAgICAgICIiIkEgdGVzdCB0aGF0IHNob3VsZCBmYWlsLiIiIgo+ICAgICAgIGFzc2VydCBGYWxzZSwgIlRoaXMgdGVzdCBpcyBleHBlY3RlZCB0byBmYWlsIgpFICAgICAgIEFzc2VydGlvbkVycm9yOiBUaGlzIHRlc3QgaXMgZXhwZWN0ZWQgdG8gZmFpbApFICAgICAgIGFzc2VydCBGYWxzZQoKdGVzdHMvdGVzdF9wbHVnaW4ucHk6MTU6IEFzc2VydGlvbkVycm9y",
          "filename": "stacktrace.txt",
          "contentType": "text/plain"
        },
        {
          "data": "",
          "filename": "test.log",
          "contentType": "text/plain"
        }
      ],
      "steps": [],
      "defects": [],
      "customFields": {
        "tests": "1",
        "pytest-xray-reporter": "1",
        "": "1"
      },
      "finish": "2025-05-07T16:22:17.840875+00:00",
      "status": "FAILED",
      "comment": "def test_failure():\n        \"\"\"A test that should fail.\"\"\"\n>       assert False, \"This test is expected to fail\"\nE       AssertionError: This test is expected to fail\nE       assert False\n\ntests/test_plugin.py:15: AssertionError",
      "duration": 0.02686
    },
    {
      "testKey": "tests/test_plugin.py::test_skipped",
      "start": "2025-05-07T16:22:17.841134+00:00",
      "evidence": [
        {
          "data": "KCcvVXNlcnMvam9uYXRoYW4ua2l0dGVsbC9weXRlc3QteHJheS1yZXBvcnRlci90ZXN0cy90ZXN0X3BsdWdpbi5weScsIDE4LCAnU2tpcHBlZDogVGhpcyB0ZXN0IGlzIHNraXBwZWQnKQ==",
          "filename": "stacktrace.txt",
          "contentType": "text/plain"
        },
        {
          "data": "",
          "filename": "test.log",
          "contentType": "text/plain"
        }
      ],
      "steps": [],
      "defects": [],
      "customFields": {
        "skip": "1",
        "pytestmark": "1",
        "tests": "1",
        "pytest-xray-reporter": "1",
        "": "1"
      },
      "finish": "2025-05-07T16:22:17.841287+00:00",
      "status": "SKIPPED",
      "comment": "('/Users/jonathan.kittell/pytest-xray-reporter/tests/test_plugin.py', 18, 'Skipped: This test is skipped')",
      "duration": 0.027272
    },
    {
      "testKey": "tests/test_plugin.py::test_with_output",
      "start": "2025-05-07T16:22:17.841421+00:00",
      "evidence": [
        {
          "data": "VGhpcyBpcyBzdGRvdXQK",
          "filename": "stdout.txt",
          "contentType": "text/plain"
        },
        {
          "data": "VGhpcyBpcyBzdGRlcnIK",
          "filename": "stderr.txt",
          "contentType": "text/plain"
        },
        {
          "data": "",
          "filename": "test.log",
          "contentType": "text/plain"
        }
      ],
      "steps": [],
      "defects": [],
      "customFields": {
        "tests": "1",
        "pytest-xray-reporter": "1",
        "": "1"
      },
      "finish": "2025-05-07T16:22:17.841785+00:00",
      "status": "PASSED",
      "comment": "",
      "duration": 0.02777
    },
    {
      "testKey": "tests/test_plugin.py::test_plugin_output",
      "start": "2025-05-07T16:22:17.841932+00:00",
      "evidence": [
        {
          "data": "",
          "filename": "stdout.txt",
          "contentType": "text/plain"
        },
        {
          "data": "dG1wX3BhdGggPSBQb3NpeFBhdGgoJy9wcml2YXRlL3Zhci9mb2xkZXJzL3dkL255ZnhnX3p4NHZzMW5samcxZ2p5aDNfcjAwMDBncS9UL3B5dGVzdC1vZi1qb25hdGhhbi5raXR0ZWxsL3B5dGVzdC0xMzQvdGVzdF9wbHVnaW5fb3V0cHV0MCcpCgogICAgZGVmIHRlc3RfcGx1Z2luX291dHB1dCh0bXBfcGF0aCk6CiAgICAgICAgIiIiVmVyaWZ5IHRoZSBwbHVnaW4gZ2VuZXJhdGVzIGNvcnJlY3QgWHJheSBKU09OIG91dHB1dC4iIiIKICAgICAgICBvdXRwdXRfZmlsZSA9IHRtcF9wYXRoIC8gInhyYXktcmVzdWx0cy5qc29uIgogICAgCiAgICAgICAgIyBSdW4gcHl0ZXN0IHdpdGggb3VyIHBsdWdpbgogICAgICAgIHJlc3VsdCA9IHB5dGVzdC5tYWluKFsKICAgICAgICAgICAgIi12IiwKICAgICAgICAgICAgIi0teHJheS1vdXRwdXQiLCBzdHIob3V0cHV0X2ZpbGUpLAogICAgICAgICAgICBfX2ZpbGVfXyAgIyBQbHVnaW4gaXMgbG9hZGVkIGF1dG9tYXRpY2FsbHkKICAgICAgICBdKQogICAgCiAgICAgICAgIyBSZWFkIGFuZCB2ZXJpZnkgdGhlIG91dHB1dAogICAgICAgIHdpdGggb3BlbihvdXRwdXRfZmlsZSkgYXMgZjoKICAgICAgICAgICAgcmVzdWx0cyA9IGpzb24ubG9hZChmKQogICAgCiAgICAgICAgIyBDaGVjayBzdW1tYXJ5CiAgICAgICAgc3VtbWFyeSA9IHJlc3VsdHNbImluZm8iXVsic3VtbWFyeSJdCj4gICAgICAgYXNzZXJ0IHN1bW1hcnlbInRvdGFsIl0gPT0gNCAgIyBUb3RhbCBudW1iZXIgb2YgdGVzdHMKRSAgICAgICBhc3NlcnQgNSA9PSA0Cgp0ZXN0cy90ZXN0X3BsdWdpbi5weTo0ODogQXNzZXJ0aW9uRXJyb3I=",
          "filename": "stacktrace.txt",
          "contentType": "text/plain"
        },
        {
          "data": "",
          "filename": "test.log",
          "contentType": "text/plain"
        }
      ],
      "steps": [],
      "defects": [],
      "customFields": {
        "tests": "1",
        "pytest-xray-reporter": "1",
        "": "1"
      },
      "finish": "2025-05-07T16:22:19.000336+00:00",
      "status": "FAILED",
      "comment": "tmp_path = PosixPath('/private/var/folders/wd/nyfxg_zx4vs1nljg1gjyh3_r0000gq/T/pytest-of-jonathan.kittell/pytest-134/test_plugin_output0')\n\n    def test_plugin_output(tmp_path):\n        \"\"\"Verify the plugin generates correct Xray JSON output.\"\"\"\n        output_file = tmp_path / \"xray-results.json\"\n    \n        # Run pytest with our plugin\n        result = pytest.main([\n            \"-v\",\n            \"--xray-output\", str(output_file),\n            __file__  # Plugin is loaded automatically\n        ])\n    \n        # Read and verify the output\n        with open(output_file) as f:\n            results = json.load(f)\n    \n        # Check summary\n        summary = results[\"info\"][\"summary\"]\n>       assert summary[\"total\"] == 4  # Total number of tests\nE       assert 5 == 4\n\ntests/test_plugin.py:48: AssertionError",
      "duration": 1.186321
    }
  ],
  "info": {
    "summary": {
      "total": 5,
      "passed": 2,
      "failed": 2,
      "errors": 0,
      "skipped": 1,
      "duration": 1.28683
    },
    "testEnvironments": [
      "Darwin",
      "24.4.0",
      "3.13.1"
    ],
    "project": null,
    "testPlanKey": null,
    "testExecutionKey": null
  }
}