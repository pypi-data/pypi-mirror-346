{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Harmony to OME-Zarr",
      "category": "Conversion",
      "modality": "HCS",
      "tags": [
        "Opera",
        "Operetta",
        "Perkin Elmer"
      ],
      "executable_non_parallel": "tasks/harmony_to_ome_zarr.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "OmeroNgffChannel": {
            "description": "Pydantic model for an Omero channel based on OME-NFGG v0.4",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength"
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              },
              "window": {
                "allOf": [
                  {
                    "$ref": "#/$defs/OmeroNgffWindow"
                  }
                ],
                "title": "Window",
                "description": "Optional `Window` object to set the display settings"
              },
              "color": {
                "title": "Color",
                "type": "string",
                "description": "Optional HEX color string of the channel (e.g. 00FFFF)"
              },
              "active": {
                "default": true,
                "title": "Active",
                "type": "boolean",
                "description": "Boolean indicating whether to enable the channel"
              }
            },
            "required": [
              "wavelength_id"
            ],
            "title": "OmeroNgffChannel",
            "type": "object"
          },
          "OmeroNgffWindow": {
            "description": "Pydantic model for an Omero channel window based on OME-NGFF v0.4.",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer",
                "description": "Minimum intensity, defaults to 0"
              },
              "max": {
                "title": "Max",
                "type": "integer",
                "description": "Maximum intensity depending on bit-depth (e.g. 65535 for 16-bit image)"
              },
              "start": {
                "title": "Start",
                "type": "integer",
                "description": "Lower bound intensity for visualization"
              },
              "end": {
                "title": "End",
                "type": "integer",
                "description": "Upper bound intensity for visualization"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "title": "OmeroNgffWindow",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of zarr urls to be processed (not used by converter task)"
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "Path to the new OME-ZARR output directory where the zarr plates should be saved. The zarr plates are extracted from the image paths"
          },
          "img_paths": {
            "items": {
              "type": "string"
            },
            "title": "Img Paths",
            "type": "array",
            "description": "Paths to the input directories with the image files"
          },
          "omero_channels": {
            "items": {
              "$ref": "#/$defs/OmeroNgffChannel"
            },
            "title": "Omero Channels",
            "type": "array",
            "description": "List of Omero channels"
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite any existing OME-ZARR directory"
          },
          "coarsening_xy": {
            "default": 2,
            "title": "Coarsening Xy",
            "type": "integer",
            "description": "Coarsening factor in XY to use for downsampling when building the pyramids"
          },
          "compute": {
            "default": true,
            "title": "Compute",
            "type": "boolean",
            "description": "Wether to compute a numpy array from the dask array while saving the image to the zarr fileset (compute = TRUE is faster given that images fit into memory)"
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "img_paths",
          "omero_channels"
        ],
        "type": "object",
        "title": "HarmonyToOmeZarr"
      },
      "docs_info": "## harmony_to_ome_zarr\nConvert TIFFs which were exported from Harmony (Operetta/Opera, Perkin-Elmer) to OME-ZARR\n",
      "docs_link": "https://leukemia-kispi.github.io/operetta-compose/"
    },
    {
      "name": "Stardist segmentation",
      "category": "Segmentation",
      "executable_parallel": "tasks/stardist_segmentation.py",
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000,
        "needs_gpu": true
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`. Can only be specified if label is not set."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel. Can only be specified if wavelength_id is not set."
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path to an OME-ZARR Image"
          },
          "channel": {
            "$ref": "#/$defs/ChannelInputModel",
            "title": "Channel",
            "description": "Channel for segmentation; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`) but not both"
          },
          "roi_table": {
            "default": "FOV_ROI_table",
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table"
          },
          "stardist_model": {
            "default": "2D_versatile_fluo",
            "title": "Stardist Model",
            "type": "string",
            "description": "Name of the Stardist model (\"2D_versatile_fluo\", \"2D_versatile_he\", \"2D_demo\", \"3D_demo\")"
          },
          "label_name": {
            "default": "nuclei",
            "title": "Label Name",
            "type": "string",
            "description": "Name of the labels folder"
          },
          "prob_thresh": {
            "title": "Prob Thresh",
            "type": "number",
            "description": "prob_thresh: Only consider objects with predicted object probability above this threshold"
          },
          "nms_thresh": {
            "title": "Nms Thresh",
            "type": "number",
            "description": "Perform non-maximum suppression (NMS) that considers two objects to be the same when their area/surface overlap exceeds this threshold"
          },
          "scale": {
            "default": 1,
            "title": "Scale",
            "type": "integer",
            "description": "Scale the input image internally by a factor and rescale the output accordingly."
          },
          "level": {
            "default": 0,
            "title": "Level",
            "type": "integer",
            "description": "Resolution level (0 = full resolution)"
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite any existing OME-ZARR segmentations"
          }
        },
        "required": [
          "zarr_url",
          "channel"
        ],
        "type": "object",
        "title": "StardistSegmentation"
      },
      "docs_info": "## stardist_segmentation\nSegment cells with Stardist\n",
      "docs_link": "https://leukemia-kispi.github.io/operetta-compose/"
    },
    {
      "name": "Regionprops measurement",
      "category": "Measurement",
      "tags": [
        "regionprops",
        "intensity",
        "morphology"
      ],
      "executable_parallel": "tasks/regionprops_measurement.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path to an OME-ZARR Image"
          },
          "table_name": {
            "default": "regionprops",
            "title": "Table Name",
            "type": "string",
            "description": "Folder name of the measured regionprobs features"
          },
          "label_name": {
            "default": "nuclei",
            "title": "Label Name",
            "type": "string",
            "description": "Name of the labels to use for feature measurements"
          },
          "level": {
            "default": 0,
            "title": "Level",
            "type": "integer",
            "description": "Resolution level (0 = full resolution)"
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite any existing OME-ZARR feature table"
          }
        },
        "required": [
          "zarr_url"
        ],
        "type": "object",
        "title": "RegionpropsMeasurement"
      },
      "docs_info": "## regionprops_measurement\nTake measurements using regionprobs and write the features to the OME-ZARR\n",
      "docs_link": "https://leukemia-kispi.github.io/operetta-compose/"
    },
    {
      "name": "Feature classification",
      "tags": [
        "napari feature classifier",
        "object classification"
      ],
      "executable_parallel": "tasks/feature_classification.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path to an OME-ZARR Image"
          },
          "classifier_path": {
            "title": "Classifier Path",
            "type": "string",
            "description": "Path to the pickled scikit-learn classifier"
          },
          "table_name": {
            "default": "regionprops",
            "title": "Table Name",
            "type": "string",
            "description": "Folder name of the measured regionprobs features"
          },
          "classifier_name": {
            "title": "Classifier Name",
            "type": "string",
            "description": "Name of the classification results to be written to the feature table. It will default to the name of the classifier + \"_prediction\" when left unset."
          }
        },
        "required": [
          "zarr_url",
          "classifier_path"
        ],
        "type": "object",
        "title": "FeatureClassification"
      },
      "docs_info": "## feature_classification\nClassify cells using the [napari-feature-classifier](https://github.com/fractal-napari-plugins-collection/napari-feature-classifier) and write them to the OME-ZARR\n",
      "docs_link": "https://leukemia-kispi.github.io/operetta-compose/"
    },
    {
      "name": "Condition registration",
      "modality": "HCS",
      "tags": [
        "metadata",
        "well conditions",
        "perturbation",
        "treatment"
      ],
      "executable_parallel": "tasks/condition_registration.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path to an OME-ZARR Image"
          },
          "layout_path": {
            "title": "Layout Path",
            "type": "string",
            "description": "Path to a drug layout file (.csv) with at least the columns: row, col"
          },
          "condition_name": {
            "default": "condition",
            "title": "Condition Name",
            "type": "string",
            "description": "Name of the condition table"
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite any existing OME-ZARR condition table"
          }
        },
        "required": [
          "zarr_url",
          "layout_path"
        ],
        "type": "object",
        "title": "ConditionRegistration"
      },
      "docs_info": "## condition_registration\nRegister the experimental (drug layout) in the OME-ZARR.\nThe table should contain at least the columns `row` and `col` identifying the well.\nIt can have an arbitrary number of additional metadata columns (e.g. drug, concentration, medium, sample).\nDrug combinations can be specified by two entries pointing to the same `row` / `col`\n",
      "docs_link": "https://leukemia-kispi.github.io/operetta-compose/"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Fabio Steffen"
}
