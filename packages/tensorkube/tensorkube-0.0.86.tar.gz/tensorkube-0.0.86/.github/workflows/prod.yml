name: Publish tensorkube to PyPI

on:
  push:
    branches : [ release ]

jobs:
  build:
    name: Build distribution 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Build source and wheel distributions
      run: |
        python -m pip install --upgrade build
        python -m build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs:
      - build
    runs-on: ubuntu-latest

    environment:
      name: prod
      url: https://pypi.org/p/tensorkube

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  upload-templates-to-s3:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install package
        run: pip install .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::711387128419:role/github_user
          aws-region: us-east-1

      - name: Get version
        id: get_version
        run: |
          echo "templates_version=$(python -c 'from tensorkube.constants import get_templates_version; print(get_templates_version())')" >> $GITHUB_OUTPUT

      - name: Upload YAML files to S3
        run: |
          # Define YAML files here (relative to repo root)
          FILES=("src/tensorkube/configurations/cloudformation/environment.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/bootstrap.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/cloudwatch.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/cluster-oidc.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/codebuild_lambda_automation.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/eksctl-cluster-addon-vpc-cni-role.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/eksctl-cluster-addons.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/eksctl-cluster-nodegroup.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/eksctl-cluster-podidentityrole-iamrole.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/eksctl_base_cluster.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/empty_stack.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/job_queue_cloud_resources.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/karpenter_cloudformation.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/lambda-aws-access.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/lambda-eks-access.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/nydus-resources.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/pod-identity-association.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/s3_access.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/teardown_actions_stack.yaml" \
          "src/tensorkube/configurations/cloudformation/configure/update_awsauth_configmap_and_helmfile_apply.yaml" \
          )

          # Retrieve the version from the previous step
          VERSION="${{ steps.get_version.outputs.templates_version }}"

          # Loop over each file and upload to S3 with prefix 'VERSION/'
          for file in "${FILES[@]}"; do
            filename=$(basename "$file")
            echo "Uploading $file to s3://tensorkube-cfn-templates-bwgkphrtz5pdbv/${VERSION}/${filename}"
            aws s3 cp "$file" "s3://tensorkube-cfn-templates-bwgkphrtz5pdbv/${VERSION}/${filename}"
          done

  update_aws_image_on_ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::711387128419:role/github_user
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q0m5o9l2


      - name: Install package
        run: pip install .

      - name: Set Docker image name and tag
        id: set_vars
        run: |
          echo "TAG=$(python -c 'from tensorkube.constants import AWS_ACCESS_LAMBDA_FUNCTION_IMAGE_VERSION; print(AWS_ACCESS_LAMBDA_FUNCTION_IMAGE_VERSION)')" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        env:
          TAG: ${{ steps.set_vars.outputs.TAG }}
        with:
          context: ./src/tensorkube/configurations/cloudformation/configure/aws_access_lambda_files
          file: ./src/tensorkube/configurations/cloudformation/configure/aws_access_lambda_files/Dockerfile
          push: true
          tags: |
            public.ecr.aws/q0m5o9l2/tensorfuse/tensorkube-aws-access-lambda:${{ env.TAG }}


  update_cluster_image_on_ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::711387128419:role/github_user
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q0m5o9l2


      - name: Install package
        run: pip install .

      - name: Set Docker image name and tag
        id: set_vars
        run: |
          echo "TAG=$(python -c 'from tensorkube.constants import EKS_ACCESS_LAMBDA_FUNCTION_IMAGE_VERSION; print(EKS_ACCESS_LAMBDA_FUNCTION_IMAGE_VERSION)')" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        env:
          TAG: ${{ steps.set_vars.outputs.TAG }}
        with:
          context: ./src/tensorkube/configurations/cloudformation/configure/cluster_access_lambda_files
          file: ./src/tensorkube/configurations/cloudformation/configure/cluster_access_lambda_files/Dockerfile
          push: true
          tags: |
            public.ecr.aws/q0m5o9l2/tensorfuse/tensorkube-cluster-access-lambda:${{ env.TAG }}
