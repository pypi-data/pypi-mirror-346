class Interval:
    def __init__(self, start: int, end: int) -> None: ...

    @property
    def start(self) -> int: ...

    @property
    def end(self) -> int: ...

    def len(self) -> int: ...

    def contains(self, pos: int) -> bool: ...

    def intersects(self, other: IntoInterval) -> bool: ...

    def touches(self, other: IntoInterval) -> bool: ...

    def extend(self, left: int = 0, right: int = 0) -> Interval: ...

    def extended(self, left: int = 0, right: int = 0) -> Interval: ...

    def intersection(self, other: IntoInterval) -> Interval | None: ...

    def union(self, other: IntoInterval) -> Interval | None: ...

    @staticmethod
    def merge(segments: list[IntoInterval] | tuple[IntoInterval, ...]) -> list[Interval]: ...

    @staticmethod
    def merge_within(segments: list[IntoInterval] | tuple[IntoInterval, ...], distance: int) -> list[Interval]: ...

    @staticmethod
    def subtract(source: list[IntoInterval], exclude: list[IntoInterval]) -> list[Interval]: ...

    @staticmethod
    def overlap(left: list[IntoInterval], right: list[IntoInterval]) -> list[Interval]: ...

    @staticmethod
    def overlaps(source: list[IntoInterval], query: list[IntoInterval]) -> list[bool]: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __hash__(self) -> int: ...

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: object) -> bool: ...

    def __le__(self, other: object) -> bool: ...

    def __gt__(self, other: object) -> bool: ...

    def __ge__(self, other: object) -> bool: ...


IntoInterval = Interval | tuple[int, int]
