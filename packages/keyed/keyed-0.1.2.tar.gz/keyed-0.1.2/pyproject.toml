[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "keyed"
description = "A reactive animation library."
version = "0.1.2"
readme = "README.md"
license = {file="LICENSE"}
authors = [
    {name = "Doug Mercer", email = "dougmerceryt@gmail.com"}
]
requires-python = ">=3.11,<3.13"  # taichi is most restrictive
dependencies = [
    "av",
    "pillow",
    "pycairo",
    "pydantic",
    "pygments",
    "rich",
    "scipy",
    "shapely",
    "signified",
    "tqdm",
    "typer",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["keyed", "animation", "reactive"]


[project.optional-dependencies]
lint = [
    "ruff",
    "pyright",
]
test = [
    "hypothesis",
    "pytest",
    "pytest-cov",
    "syrupy",
]
docs = [
    "beautifulsoup4",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-material-extensions",
]
previewer = [
    "pyside6",
    "watchdog",
]
gpu-compositor = [
    "taichi",
]
all = ["keyed[lint,test,docs,previewer,gpu-compositor]"]

[tool.setuptools.package-data]
keyed = ["py.typed"]

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=xml --junitxml=junit/test-results.xml --durations=10"
filterwarnings = ["ignore::DeprecationWarning"]
testpaths = ["tests", "src"]
markers = {snapshot = "marks tests as snapshot (deselect with '-m \"not snapshot\"')"}

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "pass"
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "docs",
    "envs",
    "htmlcov",
    "results",
    "significant.egg-info",
    "junk",
    ".hypothesis",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["keyed_*", "helpers"]

[project.scripts]
keyed = "keyed.cli:main"
