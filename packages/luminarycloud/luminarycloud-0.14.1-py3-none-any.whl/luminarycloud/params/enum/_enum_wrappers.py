# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from enum import IntEnum as _IntEnum

from luminarycloud._proto.client import simulation_pb2 as _clientpb


class UnitSystem(_IntEnum):
    """
    Collection of units used for all quantities.

    Attributes
    ----------
    UNIT_SYSTEM_CUSTOM
        Customize the units used for the main types of quantities.
    UNIT_SYSTEM_SI
        International System of Units (SI).
    UNIT_SYSTEM_US
        US Customary Units.


    Examples
    --------
    >>> from luminarycloud.params.enum import UnitSystem
    >>> UnitSystem.UNIT_SYSTEM_CUSTOM
    >>> UnitSystem.UNIT_SYSTEM_SI
    >>> UnitSystem.UNIT_SYSTEM_US
    """

    UNIT_SYSTEM_CUSTOM = _clientpb.UNIT_SYSTEM_CUSTOM
    UNIT_SYSTEM_SI = _clientpb.UNIT_SYSTEM_SI
    UNIT_SYSTEM_US = _clientpb.UNIT_SYSTEM_US


class TemperatureUnit(_IntEnum):
    """
    Unit used for temperature.

    Attributes
    ----------
    UNIT_KELVIN
        Kelvin scale.
    UNIT_CELSIUS
        Degree Celsius.
    UNIT_RANKINE
        Degree Rankine.
    UNIT_FAHRENHEIT
        Degree Fahrenheit.


    Examples
    --------
    >>> from luminarycloud.params.enum import TemperatureUnit
    >>> TemperatureUnit.UNIT_KELVIN
    >>> TemperatureUnit.UNIT_CELSIUS
    >>> TemperatureUnit.UNIT_RANKINE
    >>> TemperatureUnit.UNIT_FAHRENHEIT
    """

    UNIT_KELVIN = _clientpb.UNIT_KELVIN
    UNIT_CELSIUS = _clientpb.UNIT_CELSIUS
    UNIT_RANKINE = _clientpb.UNIT_RANKINE
    UNIT_FAHRENHEIT = _clientpb.UNIT_FAHRENHEIT


class MassUnit(_IntEnum):
    """
    Unit used for mass.

    Attributes
    ----------
    UNIT_KILOGRAM
        Kilogram.
    UNIT_GRAM
        Gram.
    UNIT_POUND
        Pound.


    Examples
    --------
    >>> from luminarycloud.params.enum import MassUnit
    >>> MassUnit.UNIT_KILOGRAM
    >>> MassUnit.UNIT_GRAM
    >>> MassUnit.UNIT_POUND
    """

    UNIT_KILOGRAM = _clientpb.UNIT_KILOGRAM
    UNIT_GRAM = _clientpb.UNIT_GRAM
    UNIT_POUND = _clientpb.UNIT_POUND


class LengthUnit(_IntEnum):
    """
    Unit used for length.

    Attributes
    ----------
    UNIT_METER
        Meter.
    UNIT_MILLIMETER
        Millimeter.
    UNIT_FOOT
        Foot.
    UNIT_INCH
        Inch.


    Examples
    --------
    >>> from luminarycloud.params.enum import LengthUnit
    >>> LengthUnit.UNIT_METER
    >>> LengthUnit.UNIT_MILLIMETER
    >>> LengthUnit.UNIT_FOOT
    >>> LengthUnit.UNIT_INCH
    """

    UNIT_METER = _clientpb.UNIT_METER
    UNIT_MILLIMETER = _clientpb.UNIT_MILLIMETER
    UNIT_FOOT = _clientpb.UNIT_FOOT
    UNIT_INCH = _clientpb.UNIT_INCH


class AngleUnit(_IntEnum):
    """
    Unit used for angles.

    Attributes
    ----------
    UNIT_DEGREE
        Degree.
    UNIT_RADIAN
        Radian.


    Examples
    --------
    >>> from luminarycloud.params.enum import AngleUnit
    >>> AngleUnit.UNIT_DEGREE
    >>> AngleUnit.UNIT_RADIAN
    """

    UNIT_DEGREE = _clientpb.UNIT_DEGREE
    UNIT_RADIAN = _clientpb.UNIT_RADIAN


class TimeUnit(_IntEnum):
    """
    Unit used for time.

    Attributes
    ----------
    UNIT_SECOND
        Second.


    Examples
    --------
    >>> from luminarycloud.params.enum import TimeUnit
    >>> TimeUnit.UNIT_SECOND
    """

    UNIT_SECOND = _clientpb.UNIT_SECOND


class VelocityUnit(_IntEnum):
    """
    Unit used for velocity.

    Attributes
    ----------
    UNIT_METER_PER_SECOND
        Meters per second.
    UNIT_KM_PER_HOUR
        Kilometers per hour.
    UNIT_FEET_PER_SECOND
        Feet per second.
    UNIT_MILES_PER_HOUR
        Miles per hour.


    Examples
    --------
    >>> from luminarycloud.params.enum import VelocityUnit
    >>> VelocityUnit.UNIT_METER_PER_SECOND
    >>> VelocityUnit.UNIT_KM_PER_HOUR
    >>> VelocityUnit.UNIT_FEET_PER_SECOND
    >>> VelocityUnit.UNIT_MILES_PER_HOUR
    """

    UNIT_METER_PER_SECOND = _clientpb.UNIT_METER_PER_SECOND
    UNIT_KM_PER_HOUR = _clientpb.UNIT_KM_PER_HOUR
    UNIT_FEET_PER_SECOND = _clientpb.UNIT_FEET_PER_SECOND
    UNIT_MILES_PER_HOUR = _clientpb.UNIT_MILES_PER_HOUR


class AngularVelocityUnit(_IntEnum):
    """
    Unit used for angular velocity.

    Attributes
    ----------
    UNIT_RADIAN_PER_SECOND
        Radian per second.
    UNIT_RPM
        Revolutions per minute.


    Examples
    --------
    >>> from luminarycloud.params.enum import AngularVelocityUnit
    >>> AngularVelocityUnit.UNIT_RADIAN_PER_SECOND
    >>> AngularVelocityUnit.UNIT_RPM
    """

    UNIT_RADIAN_PER_SECOND = _clientpb.UNIT_RADIAN_PER_SECOND
    UNIT_RPM = _clientpb.UNIT_RPM


class ForceUnit(_IntEnum):
    """
    Unit used for force.

    Attributes
    ----------
    UNIT_NEWTON
        Newton.
    UNIT_POUND_FORCE
        Pound-force.


    Examples
    --------
    >>> from luminarycloud.params.enum import ForceUnit
    >>> ForceUnit.UNIT_NEWTON
    >>> ForceUnit.UNIT_POUND_FORCE
    """

    UNIT_NEWTON = _clientpb.UNIT_NEWTON
    UNIT_POUND_FORCE = _clientpb.UNIT_POUND_FORCE


class MomentUnit(_IntEnum):
    """
    Unit used for moment.

    Attributes
    ----------
    UNIT_NEWTON_METER
        Newton-meter.
    UNIT_POUND_FOOT
        Pound-foot.


    Examples
    --------
    >>> from luminarycloud.params.enum import MomentUnit
    >>> MomentUnit.UNIT_NEWTON_METER
    >>> MomentUnit.UNIT_POUND_FOOT
    """

    UNIT_NEWTON_METER = _clientpb.UNIT_NEWTON_METER
    UNIT_POUND_FOOT = _clientpb.UNIT_POUND_FOOT


class PressureUnit(_IntEnum):
    """
    Unit used for pressure.

    Attributes
    ----------
    UNIT_PASCAL
        Pascal.
    UNIT_BAR
        Bar.
    UNIT_PSI
        Pound per square inch.


    Examples
    --------
    >>> from luminarycloud.params.enum import PressureUnit
    >>> PressureUnit.UNIT_PASCAL
    >>> PressureUnit.UNIT_BAR
    >>> PressureUnit.UNIT_PSI
    """

    UNIT_PASCAL = _clientpb.UNIT_PASCAL
    UNIT_BAR = _clientpb.UNIT_BAR
    UNIT_PSI = _clientpb.UNIT_PSI


class EnergyUnit(_IntEnum):
    """
    Unit used for energy.

    Attributes
    ----------
    UNIT_JOULE
        Joule.
    UNIT_BTU
        British thermal unit.


    Examples
    --------
    >>> from luminarycloud.params.enum import EnergyUnit
    >>> EnergyUnit.UNIT_JOULE
    >>> EnergyUnit.UNIT_BTU
    """

    UNIT_JOULE = _clientpb.UNIT_JOULE
    UNIT_BTU = _clientpb.UNIT_BTU


class PowerUnit(_IntEnum):
    """
    Unit used for power.

    Attributes
    ----------
    UNIT_WATT
        Watt.
    UNIT_HORSEPOWER
        Horsepower.


    Examples
    --------
    >>> from luminarycloud.params.enum import PowerUnit
    >>> PowerUnit.UNIT_WATT
    >>> PowerUnit.UNIT_HORSEPOWER
    """

    UNIT_WATT = _clientpb.UNIT_WATT
    UNIT_HORSEPOWER = _clientpb.UNIT_HORSEPOWER


class VolumeUnit(_IntEnum):
    """
    Unit used for volume.

    Attributes
    ----------
    UNIT_CUBIC_METER
        Cubic meter.
    UNIT_LITER
        Liter.
    UNIT_GALLON
        US gallon.
    UNIT_CUBIC_INCH
        Cubic inch.
    UNIT_CUBIC_FOOT
        Cubic foot.


    Examples
    --------
    >>> from luminarycloud.params.enum import VolumeUnit
    >>> VolumeUnit.UNIT_CUBIC_METER
    >>> VolumeUnit.UNIT_LITER
    >>> VolumeUnit.UNIT_GALLON
    >>> VolumeUnit.UNIT_CUBIC_INCH
    >>> VolumeUnit.UNIT_CUBIC_FOOT
    """

    UNIT_CUBIC_METER = _clientpb.UNIT_CUBIC_METER
    UNIT_LITER = _clientpb.UNIT_LITER
    UNIT_GALLON = _clientpb.UNIT_GALLON
    UNIT_CUBIC_INCH = _clientpb.UNIT_CUBIC_INCH
    UNIT_CUBIC_FOOT = _clientpb.UNIT_CUBIC_FOOT


class VolumetricFlowUnit(_IntEnum):
    """
    Unit used for volumetric flow.

    Attributes
    ----------
    UNIT_CUBIC_METER_PER_SECOND
        Cubic meter per second.
    UNIT_CFM
        Cubic feet per minute.


    Examples
    --------
    >>> from luminarycloud.params.enum import VolumetricFlowUnit
    >>> VolumetricFlowUnit.UNIT_CUBIC_METER_PER_SECOND
    >>> VolumetricFlowUnit.UNIT_CFM
    """

    UNIT_CUBIC_METER_PER_SECOND = _clientpb.UNIT_CUBIC_METER_PER_SECOND
    UNIT_CFM = _clientpb.UNIT_CFM


class ViscosityUnit(_IntEnum):
    """
    Unit used for dynamic viscosity.

    Attributes
    ----------
    UNIT_PASCAL_SECOND
        Pascal-second.
    UNIT_CENTIPOISE
        Centipoise.
    UNIT_POUND_SECOND_PER_SQUARE_FOOT
        Pound-seconds per square foot.


    Examples
    --------
    >>> from luminarycloud.params.enum import ViscosityUnit
    >>> ViscosityUnit.UNIT_PASCAL_SECOND
    >>> ViscosityUnit.UNIT_CENTIPOISE
    >>> ViscosityUnit.UNIT_POUND_SECOND_PER_SQUARE_FOOT
    """

    UNIT_PASCAL_SECOND = _clientpb.UNIT_PASCAL_SECOND
    UNIT_CENTIPOISE = _clientpb.UNIT_CENTIPOISE
    UNIT_POUND_SECOND_PER_SQUARE_FOOT = _clientpb.UNIT_POUND_SECOND_PER_SQUARE_FOOT


class ConductivityUnit(_IntEnum):
    """
    Unit used for thermal conductivity.

    Attributes
    ----------
    UNIT_WATT_PER_METER_KELVIN
        Watt per meter-Kelvin.
    UNIT_BTU_PER_HOUR_FOOT_FAHRENHEIT
        BTU per hour-foot-Fahrenheit.


    Examples
    --------
    >>> from luminarycloud.params.enum import ConductivityUnit
    >>> ConductivityUnit.UNIT_WATT_PER_METER_KELVIN
    >>> ConductivityUnit.UNIT_BTU_PER_HOUR_FOOT_FAHRENHEIT
    """

    UNIT_WATT_PER_METER_KELVIN = _clientpb.UNIT_WATT_PER_METER_KELVIN
    UNIT_BTU_PER_HOUR_FOOT_FAHRENHEIT = _clientpb.UNIT_BTU_PER_HOUR_FOOT_FAHRENHEIT


class MolecularWeightUnit(_IntEnum):
    """
    Unit used for molecular weight.

    Attributes
    ----------
    UNIT_GRAM_PER_MOLE
        Grams per mole.
    UNIT_POUND_PER_POUND_MOLE
        Pounds per pound-mole.


    Examples
    --------
    >>> from luminarycloud.params.enum import MolecularWeightUnit
    >>> MolecularWeightUnit.UNIT_GRAM_PER_MOLE
    >>> MolecularWeightUnit.UNIT_POUND_PER_POUND_MOLE
    """

    UNIT_GRAM_PER_MOLE = _clientpb.UNIT_GRAM_PER_MOLE
    UNIT_POUND_PER_POUND_MOLE = _clientpb.UNIT_POUND_PER_POUND_MOLE


class DensityRelationship(_IntEnum):
    """
    Relationship for computing the density of the fluid.

    Attributes
    ----------
    IDEAL_GAS
        Compute density using the ideal gas law.
    CONSTANT_DENSITY
        Constant density fluid (heat transfer is not simulated).
    CONSTANT_DENSITY_ENERGY
        Constant density fluid with energy equation.


    Examples
    --------
    >>> from luminarycloud.params.enum import DensityRelationship
    >>> DensityRelationship.IDEAL_GAS
    >>> DensityRelationship.CONSTANT_DENSITY
    >>> DensityRelationship.CONSTANT_DENSITY_ENERGY
    """

    IDEAL_GAS = _clientpb.IDEAL_GAS
    CONSTANT_DENSITY = _clientpb.CONSTANT_DENSITY
    CONSTANT_DENSITY_ENERGY = _clientpb.CONSTANT_DENSITY_ENERGY


class LaminarThermalConductivity(_IntEnum):
    """
    Model for the laminar thermal conductivity of a fluid.

    Attributes
    ----------
    LAMINAR_CONSTANT_THERMAL_PRANDTL
        Laminar thermal conductivity as function of local specific heat, laminar viscosity, and the specified laminar Prandtl number.
    LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY
        Constant laminar thermal conductivity or tabulated values vs temperature.
    TEMPERATURE_DEPENDENT_THERMAL_CONDUCTIVITY
        Tabulated thermal conductivity values vs temperature.


    Examples
    --------
    >>> from luminarycloud.params.enum import LaminarThermalConductivity
    >>> LaminarThermalConductivity.LAMINAR_CONSTANT_THERMAL_PRANDTL
    >>> LaminarThermalConductivity.LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY
    >>> LaminarThermalConductivity.TEMPERATURE_DEPENDENT_THERMAL_CONDUCTIVITY
    """

    LAMINAR_CONSTANT_THERMAL_PRANDTL = _clientpb.LAMINAR_CONSTANT_THERMAL_PRANDTL
    LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY = _clientpb.LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY
    TEMPERATURE_DEPENDENT_THERMAL_CONDUCTIVITY = (
        _clientpb.TEMPERATURE_DEPENDENT_THERMAL_CONDUCTIVITY
    )


class BoussinesqApproximation(_IntEnum):
    """
    Introduce a body force due to thermal expansion without modifying the material density.

    Attributes
    ----------
    BOUSSINESQ_OFF
        Disable Boussinesq approximation.
    BOUSSINESQ_ON
        Enable Boussinesq approximation.


    Examples
    --------
    >>> from luminarycloud.params.enum import BoussinesqApproximation
    >>> BoussinesqApproximation.BOUSSINESQ_OFF
    >>> BoussinesqApproximation.BOUSSINESQ_ON
    """

    BOUSSINESQ_OFF = _clientpb.BOUSSINESQ_OFF
    BOUSSINESQ_ON = _clientpb.BOUSSINESQ_ON


class MaterialFluidPreset(_IntEnum):
    """
    Select a predefined set of material properties or allow a custom set of properties.

    Attributes
    ----------
    UNSET_MATERIAL_FLUID_PRESET
        Fluid material preset is not set.
    STANDARD_AIR
        Standard air material properties
    WATER_NTP
        Properties of water at 1 atmosphere and 20° Celsius
    CUSTOM_MATERIAL_FLUID
        A custom set of material properties.


    Examples
    --------
    >>> from luminarycloud.params.enum import MaterialFluidPreset
    >>> MaterialFluidPreset.UNSET_MATERIAL_FLUID_PRESET
    >>> MaterialFluidPreset.STANDARD_AIR
    >>> MaterialFluidPreset.WATER_NTP
    >>> MaterialFluidPreset.CUSTOM_MATERIAL_FLUID
    """

    UNSET_MATERIAL_FLUID_PRESET = _clientpb.UNSET_MATERIAL_FLUID_PRESET
    STANDARD_AIR = _clientpb.STANDARD_AIR
    WATER_NTP = _clientpb.WATER_NTP
    CUSTOM_MATERIAL_FLUID = _clientpb.CUSTOM_MATERIAL_FLUID


class LaminarViscosityModelNewtonian(_IntEnum):
    """
    Models available for the dynamic viscosity of the fluid.

    Attributes
    ----------
    SUTHERLAND
        Dynamic viscosity as a function of local temperature using Sutherland's Law.
    LAMINAR_CONSTANT_VISCOSITY
        Constant dynamic viscosity or tabulated values vs temperature.
    TEMPERATURE_DEPENDENT_LAMINAR_VISCOSITY
        Tabulated dynamic viscosity values vs temperature.


    Examples
    --------
    >>> from luminarycloud.params.enum import LaminarViscosityModelNewtonian
    >>> LaminarViscosityModelNewtonian.SUTHERLAND
    >>> LaminarViscosityModelNewtonian.LAMINAR_CONSTANT_VISCOSITY
    >>> LaminarViscosityModelNewtonian.TEMPERATURE_DEPENDENT_LAMINAR_VISCOSITY
    """

    SUTHERLAND = _clientpb.SUTHERLAND
    LAMINAR_CONSTANT_VISCOSITY = _clientpb.LAMINAR_CONSTANT_VISCOSITY
    TEMPERATURE_DEPENDENT_LAMINAR_VISCOSITY = _clientpb.TEMPERATURE_DEPENDENT_LAMINAR_VISCOSITY


class MaterialSolidPreset(_IntEnum):
    """
    Select a predefined set of material properties or allow a custom set of properties.

    Attributes
    ----------
    ALUMINUM
        Properties of pure aluminum.
    COPPER
        Properties of pure copper.
    IRON
        Properties of pure iron.
    NICKEL
        Properties of pure nickel.
    TITANIUM
        Properties of pure titanium.
    CUSTOM_MATERIAL_SOLID
        A custom set of material properties.


    Examples
    --------
    >>> from luminarycloud.params.enum import MaterialSolidPreset
    >>> MaterialSolidPreset.ALUMINUM
    >>> MaterialSolidPreset.COPPER
    >>> MaterialSolidPreset.IRON
    >>> MaterialSolidPreset.NICKEL
    >>> MaterialSolidPreset.TITANIUM
    >>> MaterialSolidPreset.CUSTOM_MATERIAL_SOLID
    """

    ALUMINUM = _clientpb.ALUMINUM
    COPPER = _clientpb.COPPER
    IRON = _clientpb.IRON
    NICKEL = _clientpb.NICKEL
    TITANIUM = _clientpb.TITANIUM
    CUSTOM_MATERIAL_SOLID = _clientpb.CUSTOM_MATERIAL_SOLID


class FloatType(_IntEnum):
    """
    Type of equations solved for the physics.

    Attributes
    ----------
    DOUBLE
        Solve the normal set of governing equations.
    ADT1D
        First order, scalar tangent.
    ADA1D
        Solve the discrete adjoint equations to obtain geometric
                        sensitivities with respect to an output of interest.


    Examples
    --------
    >>> from luminarycloud.params.enum import FloatType
    >>> FloatType.DOUBLE
    >>> FloatType.ADT1D
    >>> FloatType.ADA1D
    """

    DOUBLE = _clientpb.DOUBLE
    ADT1D = _clientpb.ADT1D
    ADA1D = _clientpb.ADA1D


class Gravity(_IntEnum):
    """
    Apply an acceleration due to gravity or other body force.

    Attributes
    ----------
    GRAVITY_OFF
        Disable gravity or other body force.
    GRAVITY_ON
        Enable gravity or other body force.


    Examples
    --------
    >>> from luminarycloud.params.enum import Gravity
    >>> Gravity.GRAVITY_OFF
    >>> Gravity.GRAVITY_ON
    """

    GRAVITY_OFF = _clientpb.GRAVITY_OFF
    GRAVITY_ON = _clientpb.GRAVITY_ON


class FlowBehavior(_IntEnum):
    """
    Importance of physical time for the current simulation.

    Attributes
    ----------
    STEADY
        Solve for a steady-state solution of the governing equations.
    TRANSIENT
        Solve for a time-accurate solution of the governing equations.


    Examples
    --------
    >>> from luminarycloud.params.enum import FlowBehavior
    >>> FlowBehavior.STEADY
    >>> FlowBehavior.TRANSIENT
    """

    STEADY = _clientpb.STEADY
    TRANSIENT = _clientpb.TRANSIENT


class TimeMarching(_IntEnum):
    """
    Scheme for time-accurate integration.

    Attributes
    ----------
    TIME_IMPLICIT
        Implicit scheme (dual time stepping) for time-accurate integration.
    TIME_EXPLICIT
        Explicit scheme for time-accurate integration.


    Examples
    --------
    >>> from luminarycloud.params.enum import TimeMarching
    >>> TimeMarching.TIME_IMPLICIT
    >>> TimeMarching.TIME_EXPLICIT
    """

    TIME_IMPLICIT = _clientpb.TIME_IMPLICIT
    TIME_EXPLICIT = _clientpb.TIME_EXPLICIT


class TimeImplicitOrder(_IntEnum):
    """
    Temporal order of accuracy of the dual time stepping scheme for time-accurate integration.

    Attributes
    ----------
    TIME_SECOND
        Second-order backward Euler integration.
    TIME_FIRST
        First-order backward Euler integration.


    Examples
    --------
    >>> from luminarycloud.params.enum import TimeImplicitOrder
    >>> TimeImplicitOrder.TIME_SECOND
    >>> TimeImplicitOrder.TIME_FIRST
    """

    TIME_SECOND = _clientpb.TIME_SECOND
    TIME_FIRST = _clientpb.TIME_FIRST


class PhysicalTimeStepMethod(_IntEnum):
    """
    Method for obtaining the physical time step in a time-accurate simulation.

    Attributes
    ----------
    FIXED_TIME_STEP
        Apply a fixed physical time step.


    Examples
    --------
    >>> from luminarycloud.params.enum import PhysicalTimeStepMethod
    >>> PhysicalTimeStepMethod.FIXED_TIME_STEP
    """

    FIXED_TIME_STEP = _clientpb.FIXED_TIME_STEP


class TimeStepRamp(_IntEnum):
    """
    Use a larger time step value during the initial transients of a simulation and then ramp
                linearly towards the target value, to accelerate statistical convergence. Only applicable to
                transient problems with time implicit integration (dual time stepping).

    Attributes
    ----------
    TIME_STEP_RAMP_OFF
        Disable physical time step ramping.
    TIME_STEP_RAMP_ON
        Enable physical time step ramping.


    Examples
    --------
    >>> from luminarycloud.params.enum import TimeStepRamp
    >>> TimeStepRamp.TIME_STEP_RAMP_OFF
    >>> TimeStepRamp.TIME_STEP_RAMP_ON
    """

    TIME_STEP_RAMP_OFF = _clientpb.TIME_STEP_RAMP_OFF
    TIME_STEP_RAMP_ON = _clientpb.TIME_STEP_RAMP_ON


class ComputeStatistics(_IntEnum):
    """
    Compute time-averaged values of flow variables (e.g. Velocity).

    Attributes
    ----------
    COMPUTE_STATISTICS_OFF
        Disable computation of transient statistics.
    COMPUTE_STATISTICS_ON
        Enable computation of transient statistics.


    Examples
    --------
    >>> from luminarycloud.params.enum import ComputeStatistics
    >>> ComputeStatistics.COMPUTE_STATISTICS_OFF
    >>> ComputeStatistics.COMPUTE_STATISTICS_ON
    """

    COMPUTE_STATISTICS_OFF = _clientpb.COMPUTE_STATISTICS_OFF
    COMPUTE_STATISTICS_ON = _clientpb.COMPUTE_STATISTICS_ON


class MotionType(_IntEnum):
    """
    Type of the Motion.

    Attributes
    ----------
    NO_MOTION
        No relative motion.
    CONSTANT_TRANSLATION_MOTION
        Motion is defined by specifying an initial translation and constant translational velocity.
    CONSTANT_ANGULAR_MOTION
        Motion is defined by specifying an initial rotation and constant angular velocity.
    CONSTANT_VELOCITY_MOTION
        Motion is defined by specifying constant translational and angular velocities.


    Examples
    --------
    >>> from luminarycloud.params.enum import MotionType
    >>> MotionType.NO_MOTION
    >>> MotionType.CONSTANT_TRANSLATION_MOTION
    >>> MotionType.CONSTANT_ANGULAR_MOTION
    >>> MotionType.CONSTANT_VELOCITY_MOTION
    """

    NO_MOTION = _clientpb.NO_MOTION
    CONSTANT_TRANSLATION_MOTION = _clientpb.CONSTANT_TRANSLATION_MOTION
    CONSTANT_ANGULAR_MOTION = _clientpb.CONSTANT_ANGULAR_MOTION
    CONSTANT_VELOCITY_MOTION = _clientpb.CONSTANT_VELOCITY_MOTION


class MotionFormulation(_IntEnum):
    """
    Formulation used to model motion of volumes in transient simulations.

    Attributes
    ----------
    AUTOMATIC_MOTION_FORMULATION
        The mesh position is updated each time step.
    MRF_MOTION_FORMULATION
        The equations are solved in a moving reference frame without
                        moving the mesh. This choice affects the child frames of this frame.


    Examples
    --------
    >>> from luminarycloud.params.enum import MotionFormulation
    >>> MotionFormulation.AUTOMATIC_MOTION_FORMULATION
    >>> MotionFormulation.MRF_MOTION_FORMULATION
    """

    AUTOMATIC_MOTION_FORMULATION = _clientpb.AUTOMATIC_MOTION_FORMULATION
    MRF_MOTION_FORMULATION = _clientpb.MRF_MOTION_FORMULATION


class MotionSpecification(_IntEnum):
    """
    Choice between repositioning volumes at simulation start, or specifying motion velocities

    Attributes
    ----------
    MOTION_SPECIFICATION_REPOSITION
        The mesh is repositioned at simulation start time using the initial displacement or rotation
    MOTION_SPECIFICATION_NORMAL
        Specify both initial translation or rotation and angular or translational velocities


    Examples
    --------
    >>> from luminarycloud.params.enum import MotionSpecification
    >>> MotionSpecification.MOTION_SPECIFICATION_REPOSITION
    >>> MotionSpecification.MOTION_SPECIFICATION_NORMAL
    """

    MOTION_SPECIFICATION_REPOSITION = _clientpb.MOTION_SPECIFICATION_REPOSITION
    MOTION_SPECIFICATION_NORMAL = _clientpb.MOTION_SPECIFICATION_NORMAL


class TransformType(_IntEnum):
    """
    Type of the Transformation.

    Attributes
    ----------
    NO_TRANSFORM
        No Transform
    ROTATIONAL_TRANSFORM
        Rotational Transformation
    TRANSLATIONAL_TRANSFORM
        Translational Transformation


    Examples
    --------
    >>> from luminarycloud.params.enum import TransformType
    >>> TransformType.NO_TRANSFORM
    >>> TransformType.ROTATIONAL_TRANSFORM
    >>> TransformType.TRANSLATIONAL_TRANSFORM
    """

    NO_TRANSFORM = _clientpb.NO_TRANSFORM
    ROTATIONAL_TRANSFORM = _clientpb.ROTATIONAL_TRANSFORM
    TRANSLATIONAL_TRANSFORM = _clientpb.TRANSLATIONAL_TRANSFORM


class ParticleGroupType(_IntEnum):
    """
    Defines the behavior of the particles.

    Attributes
    ----------
    ACTUATOR_DISK
        Applies a uniform force at all locations on the disk
    ACTUATOR_LINE
        Applies thrust, azimuthal, and radial forces via a table of user-specified coefficients
    SOURCE_POINTS
        Injects material into the solver at particle locations
    PROBE_POINTS
        Reports solver variables at probe locations.


    Examples
    --------
    >>> from luminarycloud.params.enum import ParticleGroupType
    >>> ParticleGroupType.ACTUATOR_DISK
    >>> ParticleGroupType.ACTUATOR_LINE
    >>> ParticleGroupType.SOURCE_POINTS
    >>> ParticleGroupType.PROBE_POINTS
    """

    ACTUATOR_DISK = _clientpb.ACTUATOR_DISK
    ACTUATOR_LINE = _clientpb.ACTUATOR_LINE
    SOURCE_POINTS = _clientpb.SOURCE_POINTS
    PROBE_POINTS = _clientpb.PROBE_POINTS


class ActuatorDiskOrientationSelection(_IntEnum):
    """
    Specify orientation via normal vector, or a series of x-, y-, z-rotational transformations

    Attributes
    ----------
    ACTUATOR_DISK_SPECIFY_ROTATION_ANGLES
        Specify rotation about x-, y-, and z- axes
    ACTUATOR_DISK_SPECIFY_NORMAL_VECTOR
        Specify the normal direction to the plane of the actuator disk.


    Examples
    --------
    >>> from luminarycloud.params.enum import ActuatorDiskOrientationSelection
    >>> ActuatorDiskOrientationSelection.ACTUATOR_DISK_SPECIFY_ROTATION_ANGLES
    >>> ActuatorDiskOrientationSelection.ACTUATOR_DISK_SPECIFY_NORMAL_VECTOR
    """

    ACTUATOR_DISK_SPECIFY_ROTATION_ANGLES = _clientpb.ACTUATOR_DISK_SPECIFY_ROTATION_ANGLES
    ACTUATOR_DISK_SPECIFY_NORMAL_VECTOR = _clientpb.ACTUATOR_DISK_SPECIFY_NORMAL_VECTOR


class DebugOutput(_IntEnum):
    """
    Output debug fields in solution files.

    Attributes
    ----------
    SOLN_DEBUG_OUTPUT_OFF
        Disable debug output.
    SOLN_DEBUG_OUTPUT_ON
        Enable debug output.


    Examples
    --------
    >>> from luminarycloud.params.enum import DebugOutput
    >>> DebugOutput.SOLN_DEBUG_OUTPUT_OFF
    >>> DebugOutput.SOLN_DEBUG_OUTPUT_ON
    """

    SOLN_DEBUG_OUTPUT_OFF = _clientpb.SOLN_DEBUG_OUTPUT_OFF
    SOLN_DEBUG_OUTPUT_ON = _clientpb.SOLN_DEBUG_OUTPUT_ON


class DebugOutputInteriorSurfaceData(_IntEnum):
    """
    Copy the interior volume data into the surface data.

    Attributes
    ----------
    SOLN_DEBUG_OUTPUT_INT_SURF_DATA_OFF
        Disable debug output.
    SOLN_DEBUG_OUTPUT_INT_SURF_DATA_ON
        Enable debug output.


    Examples
    --------
    >>> from luminarycloud.params.enum import DebugOutputInteriorSurfaceData
    >>> DebugOutputInteriorSurfaceData.SOLN_DEBUG_OUTPUT_INT_SURF_DATA_OFF
    >>> DebugOutputInteriorSurfaceData.SOLN_DEBUG_OUTPUT_INT_SURF_DATA_ON
    """

    SOLN_DEBUG_OUTPUT_INT_SURF_DATA_OFF = _clientpb.SOLN_DEBUG_OUTPUT_INT_SURF_DATA_OFF
    SOLN_DEBUG_OUTPUT_INT_SURF_DATA_ON = _clientpb.SOLN_DEBUG_OUTPUT_INT_SURF_DATA_ON


class MeshingMethod(_IntEnum):
    """
    The method to generate the computational mesh.

    Attributes
    ----------
    MESH_METHOD_MANUAL
        Using user inputs to guide single, manual mesh generation.
    MESH_METHOD_AUTO
        Using solution-based adaptive mesh refinement.


    Examples
    --------
    >>> from luminarycloud.params.enum import MeshingMethod
    >>> MeshingMethod.MESH_METHOD_MANUAL
    >>> MeshingMethod.MESH_METHOD_AUTO
    """

    MESH_METHOD_MANUAL = _clientpb.MESH_METHOD_MANUAL
    MESH_METHOD_AUTO = _clientpb.MESH_METHOD_AUTO


class AllTet(_IntEnum):
    """
    Automatically inserts high aspect ratio mesh elements in the
                 boundary layer and ignores all adaptation boundary layer settings

    Attributes
    ----------
    ALL_TET_UNSET

    ALL_TET_OFF

    ALL_TET_ON



    Examples
    --------
    >>> from luminarycloud.params.enum import AllTet
    >>> AllTet.ALL_TET_UNSET
    >>> AllTet.ALL_TET_OFF
    >>> AllTet.ALL_TET_ON
    """

    ALL_TET_UNSET = _clientpb.ALL_TET_UNSET
    ALL_TET_OFF = _clientpb.ALL_TET_OFF
    ALL_TET_ON = _clientpb.ALL_TET_ON


class RelaxationMethod(_IntEnum):
    """
    Relaxation scheme for steady-state simulations or time implicit transient simulations.

    Attributes
    ----------
    IMPLICIT
        Apply an implicit relaxation scheme.
    EXPLICIT
        Apply an explicit relaxation scheme.


    Examples
    --------
    >>> from luminarycloud.params.enum import RelaxationMethod
    >>> RelaxationMethod.IMPLICIT
    >>> RelaxationMethod.EXPLICIT
    """

    IMPLICIT = _clientpb.IMPLICIT
    EXPLICIT = _clientpb.EXPLICIT


class ImplicitMethod(_IntEnum):
    """
    Scheme for implicit relaxation of the governing equations.

    Attributes
    ----------
    BACKWARD_EULER
        First-order backward Euler scheme.


    Examples
    --------
    >>> from luminarycloud.params.enum import ImplicitMethod
    >>> ImplicitMethod.BACKWARD_EULER
    """

    BACKWARD_EULER = _clientpb.BACKWARD_EULER


class LinearSolverType(_IntEnum):
    """
    Type of linear solver used for implicit relaxation.

    Attributes
    ----------
    GS
        Gauss-Seidel iterative method.
    GS_AMGX
        Gauss-Seidel iterative method.
    AMG_KRYLOV_AMGX
        AMG + Krylov iterative method.
    AMG_AMGX
        AMG iterative method.


    Examples
    --------
    >>> from luminarycloud.params.enum import LinearSolverType
    >>> LinearSolverType.GS
    >>> LinearSolverType.GS_AMGX
    >>> LinearSolverType.AMG_KRYLOV_AMGX
    >>> LinearSolverType.AMG_AMGX
    """

    GS = _clientpb.GS
    GS_AMGX = _clientpb.GS_AMGX
    AMG_KRYLOV_AMGX = _clientpb.AMG_KRYLOV_AMGX
    AMG_AMGX = _clientpb.AMG_AMGX


class LinsolAmgCycleType(_IntEnum):
    """
    AMG cycle type

    Attributes
    ----------
    LINSOL_AMG_CYCLE_TYPE_V
        V cycle
    LINSOL_AMG_CYCLE_TYPE_W
        W cycle
    LINSOL_AMG_CYCLE_TYPE_F
        F cycle


    Examples
    --------
    >>> from luminarycloud.params.enum import LinsolAmgCycleType
    >>> LinsolAmgCycleType.LINSOL_AMG_CYCLE_TYPE_V
    >>> LinsolAmgCycleType.LINSOL_AMG_CYCLE_TYPE_W
    >>> LinsolAmgCycleType.LINSOL_AMG_CYCLE_TYPE_F
    """

    LINSOL_AMG_CYCLE_TYPE_V = _clientpb.LINSOL_AMG_CYCLE_TYPE_V
    LINSOL_AMG_CYCLE_TYPE_W = _clientpb.LINSOL_AMG_CYCLE_TYPE_W
    LINSOL_AMG_CYCLE_TYPE_F = _clientpb.LINSOL_AMG_CYCLE_TYPE_F


class LinsolAmgSmoother(_IntEnum):
    """
    AMG cycle smoother

    Attributes
    ----------
    LINSOL_AMG_SMOOTHER_JACOBI
        Jacobi
    LINSOL_AMG_SMOOTHER_GS
        Gauss-Seidel
    LINSOL_AMG_SMOOTHER_SYM_GS
        Symmetric Gauss-Seidel


    Examples
    --------
    >>> from luminarycloud.params.enum import LinsolAmgSmoother
    >>> LinsolAmgSmoother.LINSOL_AMG_SMOOTHER_JACOBI
    >>> LinsolAmgSmoother.LINSOL_AMG_SMOOTHER_GS
    >>> LinsolAmgSmoother.LINSOL_AMG_SMOOTHER_SYM_GS
    """

    LINSOL_AMG_SMOOTHER_JACOBI = _clientpb.LINSOL_AMG_SMOOTHER_JACOBI
    LINSOL_AMG_SMOOTHER_GS = _clientpb.LINSOL_AMG_SMOOTHER_GS
    LINSOL_AMG_SMOOTHER_SYM_GS = _clientpb.LINSOL_AMG_SMOOTHER_SYM_GS


class ExplicitMethod(_IntEnum):
    """
    Scheme for explicit relaxation or explicit time-accurate integration of the governing equations.

    Attributes
    ----------
    RK_4
        Classical Runge-Kutta fourth-order scheme.
    TVD_RK_3
        Total Variation Diminishing Runge-Kutta third-order scheme.
    FORWARD_EULER
        First-order forward Euler scheme.


    Examples
    --------
    >>> from luminarycloud.params.enum import ExplicitMethod
    >>> ExplicitMethod.RK_4
    >>> ExplicitMethod.TVD_RK_3
    >>> ExplicitMethod.FORWARD_EULER
    """

    RK_4 = _clientpb.RK_4
    TVD_RK_3 = _clientpb.TVD_RK_3
    FORWARD_EULER = _clientpb.FORWARD_EULER


class SolutionControlsHeatPreset(_IntEnum):
    """
    Select suggested control settings or allow a custom choice. In general, assume a trade-off between speed and robustness (i.e. the ability to converge).

    Attributes
    ----------
    UNSET_SOLUTION_CONTROLS_HEAT_PRESET
        Solution controls preset is not set.
    DEFAULT_SOLUTION_CONTROLS_HEAT
        Conservative performance settings that emphasize robustness (ability to converge).
    INTERMEDIATE_SOLUTION_CONTROLS_HEAT
        Reasonable compromise between speed and robustness.
    AGGRESSIVE_SOLUTION_CONTROLS_HEAT
        Aggressive settings further biased towards speed.
    CUSTOM_SOLUTION_CONTROLS_HEAT
        Custom solution controls.


    Examples
    --------
    >>> from luminarycloud.params.enum import SolutionControlsHeatPreset
    >>> SolutionControlsHeatPreset.UNSET_SOLUTION_CONTROLS_HEAT_PRESET
    >>> SolutionControlsHeatPreset.DEFAULT_SOLUTION_CONTROLS_HEAT
    >>> SolutionControlsHeatPreset.INTERMEDIATE_SOLUTION_CONTROLS_HEAT
    >>> SolutionControlsHeatPreset.AGGRESSIVE_SOLUTION_CONTROLS_HEAT
    >>> SolutionControlsHeatPreset.CUSTOM_SOLUTION_CONTROLS_HEAT
    """

    UNSET_SOLUTION_CONTROLS_HEAT_PRESET = _clientpb.UNSET_SOLUTION_CONTROLS_HEAT_PRESET
    DEFAULT_SOLUTION_CONTROLS_HEAT = _clientpb.DEFAULT_SOLUTION_CONTROLS_HEAT
    INTERMEDIATE_SOLUTION_CONTROLS_HEAT = _clientpb.INTERMEDIATE_SOLUTION_CONTROLS_HEAT
    AGGRESSIVE_SOLUTION_CONTROLS_HEAT = _clientpb.AGGRESSIVE_SOLUTION_CONTROLS_HEAT
    CUSTOM_SOLUTION_CONTROLS_HEAT = _clientpb.CUSTOM_SOLUTION_CONTROLS_HEAT


class AdjointSolutionMethod(_IntEnum):
    """
    The method used to solve the discrete adjoint equations.

    Attributes
    ----------
    ADJOINT_METHOD_GMRES
        Use the GMRES linear solver to solve the equations.
    ADJOINT_METHOD_RICHARDSON
        Use a preconditioned Richardson iteration to solve the equations.
    ADJOINT_METHOD_ALGORITHMIC
        Use a fully consistent algorithmic differentiation approach.


    Examples
    --------
    >>> from luminarycloud.params.enum import AdjointSolutionMethod
    >>> AdjointSolutionMethod.ADJOINT_METHOD_GMRES
    >>> AdjointSolutionMethod.ADJOINT_METHOD_RICHARDSON
    >>> AdjointSolutionMethod.ADJOINT_METHOD_ALGORITHMIC
    """

    ADJOINT_METHOD_GMRES = _clientpb.ADJOINT_METHOD_GMRES
    ADJOINT_METHOD_RICHARDSON = _clientpb.ADJOINT_METHOD_RICHARDSON
    ADJOINT_METHOD_ALGORITHMIC = _clientpb.ADJOINT_METHOD_ALGORITHMIC


class GradientMethod(_IntEnum):
    """
    Method for computing the spatial gradients of fluid variables.

    Attributes
    ----------
    HLSQ
        Standard hybrid least squares method with custom weighting.
    WEIGHTED_LEAST_SQUARES
        Least squares method with inverse distance weighting.
    GREEN_GAUSS
        Green-Gauss method.
    LC_HLSQ
        Luminary Cloud's custom hybrid least squares method.
    NODAL_GRADIENT
        Gradients computed using nodal values interpolated from the
                        cell-centered solution.


    Examples
    --------
    >>> from luminarycloud.params.enum import GradientMethod
    >>> GradientMethod.HLSQ
    >>> GradientMethod.WEIGHTED_LEAST_SQUARES
    >>> GradientMethod.GREEN_GAUSS
    >>> GradientMethod.LC_HLSQ
    >>> GradientMethod.NODAL_GRADIENT
    """

    HLSQ = _clientpb.HLSQ
    WEIGHTED_LEAST_SQUARES = _clientpb.WEIGHTED_LEAST_SQUARES
    GREEN_GAUSS = _clientpb.GREEN_GAUSS
    LC_HLSQ = _clientpb.LC_HLSQ
    NODAL_GRADIENT = _clientpb.NODAL_GRADIENT


class GeometryFixes(_IntEnum):
    """
    Strategies to cope with problematic mesh regions (e.g. high skewness angles).

    Attributes
    ----------
    GEOMETRY_FIXES_ON
        Enable geometry fixes.
    GEOMETRY_FIXES_OFF
        Disable geometry fixes.


    Examples
    --------
    >>> from luminarycloud.params.enum import GeometryFixes
    >>> GeometryFixes.GEOMETRY_FIXES_ON
    >>> GeometryFixes.GEOMETRY_FIXES_OFF
    """

    GEOMETRY_FIXES_ON = _clientpb.GEOMETRY_FIXES_ON
    GEOMETRY_FIXES_OFF = _clientpb.GEOMETRY_FIXES_OFF


class SpatialDiscretizationHeatPreset(_IntEnum):
    """
    Select suggested control settings or allow a custom choice. In general, assume a trade-off between accuracy and robustness (i.e. the ability to converge).

    Attributes
    ----------
    UNSET_SPATIAL_DISCRETIZATION_HEAT_PRESET
        Spatial discretization preset is not set.
    DEFAULT_SPATIAL_DISCRETIZATION_HEAT
        Default settings, good compromise between accuracy and robustness (ability to converge).
    CONSERVATIVE_SPATIAL_DISCRETIZATION_HEAT
        Settings biased towards robustness over maximum accuracy (relative to default).
    HIGH_ACCURACY_SPATIAL_DISCRETIZATION_HEAT
        Settings that emphasize accuracy (relative to default).
    CUSTOM_SPATIAL_DISCRETIZATION_HEAT
        Custom discretization settings.


    Examples
    --------
    >>> from luminarycloud.params.enum import SpatialDiscretizationHeatPreset
    >>> SpatialDiscretizationHeatPreset.UNSET_SPATIAL_DISCRETIZATION_HEAT_PRESET
    >>> SpatialDiscretizationHeatPreset.DEFAULT_SPATIAL_DISCRETIZATION_HEAT
    >>> SpatialDiscretizationHeatPreset.CONSERVATIVE_SPATIAL_DISCRETIZATION_HEAT
    >>> SpatialDiscretizationHeatPreset.HIGH_ACCURACY_SPATIAL_DISCRETIZATION_HEAT
    >>> SpatialDiscretizationHeatPreset.CUSTOM_SPATIAL_DISCRETIZATION_HEAT
    """

    UNSET_SPATIAL_DISCRETIZATION_HEAT_PRESET = _clientpb.UNSET_SPATIAL_DISCRETIZATION_HEAT_PRESET
    DEFAULT_SPATIAL_DISCRETIZATION_HEAT = _clientpb.DEFAULT_SPATIAL_DISCRETIZATION_HEAT
    CONSERVATIVE_SPATIAL_DISCRETIZATION_HEAT = _clientpb.CONSERVATIVE_SPATIAL_DISCRETIZATION_HEAT
    HIGH_ACCURACY_SPATIAL_DISCRETIZATION_HEAT = _clientpb.HIGH_ACCURACY_SPATIAL_DISCRETIZATION_HEAT
    CUSTOM_SPATIAL_DISCRETIZATION_HEAT = _clientpb.CUSTOM_SPATIAL_DISCRETIZATION_HEAT


class ProfileType(_IntEnum):
    """
    Types of boundary condition profile.

    Attributes
    ----------
    CARTESIAN_X
        1D profile in X direction.
    CARTESIAN_Y
        1D profile in Y direction.
    CARTESIAN_Z
        1D profile in Z direction.
    RADIAL_X
        1D radial profile normal to the X direction.
    RADIAL_Y
        1D radial profile normal to the Y direction.
    RADIAL_Z
        1D radial profile normal to the Z direction.
    TIME
        Time varying profile.


    Examples
    --------
    >>> from luminarycloud.params.enum import ProfileType
    >>> ProfileType.CARTESIAN_X
    >>> ProfileType.CARTESIAN_Y
    >>> ProfileType.CARTESIAN_Z
    >>> ProfileType.RADIAL_X
    >>> ProfileType.RADIAL_Y
    >>> ProfileType.RADIAL_Z
    >>> ProfileType.TIME
    """

    CARTESIAN_X = _clientpb.CARTESIAN_X
    CARTESIAN_Y = _clientpb.CARTESIAN_Y
    CARTESIAN_Z = _clientpb.CARTESIAN_Z
    RADIAL_X = _clientpb.RADIAL_X
    RADIAL_Y = _clientpb.RADIAL_Y
    RADIAL_Z = _clientpb.RADIAL_Z
    TIME = _clientpb.TIME


class HeatPhysicalBoundary(_IntEnum):
    """


    Attributes
    ----------
    HEAT_BC_ISOTHERMAL
        Fixed temperature.
    HEAT_BC_HEAT_FLUX
        Heat flux.
    HEAT_BC_INTEGRATED_HEAT_FLUX
        Integrated heat flux.
    HEAT_BC_SYMMETRY
        Symmetry.
    HEAT_BC_CONVECTION
        Convective heat transfer.


    Examples
    --------
    >>> from luminarycloud.params.enum import HeatPhysicalBoundary
    >>> HeatPhysicalBoundary.HEAT_BC_ISOTHERMAL
    >>> HeatPhysicalBoundary.HEAT_BC_HEAT_FLUX
    >>> HeatPhysicalBoundary.HEAT_BC_INTEGRATED_HEAT_FLUX
    >>> HeatPhysicalBoundary.HEAT_BC_SYMMETRY
    >>> HeatPhysicalBoundary.HEAT_BC_CONVECTION
    """

    HEAT_BC_ISOTHERMAL = _clientpb.HEAT_BC_ISOTHERMAL
    HEAT_BC_HEAT_FLUX = _clientpb.HEAT_BC_HEAT_FLUX
    HEAT_BC_INTEGRATED_HEAT_FLUX = _clientpb.HEAT_BC_INTEGRATED_HEAT_FLUX
    HEAT_BC_SYMMETRY = _clientpb.HEAT_BC_SYMMETRY
    HEAT_BC_CONVECTION = _clientpb.HEAT_BC_CONVECTION


class InitializationType(_IntEnum):
    """
    Type of initial condition for the field variables.

    Attributes
    ----------
    UNIFORM_VALUES
        Apply a uniform initial condition for all fields in space.
    FARFIELD_VALUES
        Initialize all fields uniformly in space using the values at the far-field boundary.
    INITIALIZATION_POTENTIAL_FLOW
        Initialize the velocity from an irrotational incompressible potential flow solution.
    VERIFICATION_SOLUTION
        Apply an initial condition corresponding to a predefined problem.
    EXISTING_SOLUTION
        Apply the starting values from an existing solution for the same mesh.


    Examples
    --------
    >>> from luminarycloud.params.enum import InitializationType
    >>> InitializationType.UNIFORM_VALUES
    >>> InitializationType.FARFIELD_VALUES
    >>> InitializationType.INITIALIZATION_POTENTIAL_FLOW
    >>> InitializationType.VERIFICATION_SOLUTION
    >>> InitializationType.EXISTING_SOLUTION
    """

    UNIFORM_VALUES = _clientpb.UNIFORM_VALUES
    FARFIELD_VALUES = _clientpb.FARFIELD_VALUES
    INITIALIZATION_POTENTIAL_FLOW = _clientpb.INITIALIZATION_POTENTIAL_FLOW
    VERIFICATION_SOLUTION = _clientpb.VERIFICATION_SOLUTION
    EXISTING_SOLUTION = _clientpb.EXISTING_SOLUTION


class HeatSourceType(_IntEnum):
    """
    Heat source specification.

    Attributes
    ----------
    HEAT_SOURCE_TYPE_POWER
        Specify heat source power in Watts.
    HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME
        Specify heat source power in Watts per unit volume.


    Examples
    --------
    >>> from luminarycloud.params.enum import HeatSourceType
    >>> HeatSourceType.HEAT_SOURCE_TYPE_POWER
    >>> HeatSourceType.HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME
    """

    HEAT_SOURCE_TYPE_POWER = _clientpb.HEAT_SOURCE_TYPE_POWER
    HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME = _clientpb.HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME


class InterfaceType(_IntEnum):
    """
    Type of interface treatment

    Attributes
    ----------
    GENERAL_INTERFACE
        Automatic treatment based on geometry and settings (general
                        interface, or frozen rotor, or sliding interface).
    MIXING_PLANE_INTERFACE
        Imposes a pitchwise average of the variables on either side of the interface.


    Examples
    --------
    >>> from luminarycloud.params.enum import InterfaceType
    >>> InterfaceType.GENERAL_INTERFACE
    >>> InterfaceType.MIXING_PLANE_INTERFACE
    """

    GENERAL_INTERFACE = _clientpb.GENERAL_INTERFACE
    MIXING_PLANE_INTERFACE = _clientpb.MIXING_PLANE_INTERFACE


class PeriodicBcType(_IntEnum):
    """


    Attributes
    ----------
    TRANSLATIONAL

    ROTATIONAL



    Examples
    --------
    >>> from luminarycloud.params.enum import PeriodicBcType
    >>> PeriodicBcType.TRANSLATIONAL
    >>> PeriodicBcType.ROTATIONAL
    """

    TRANSLATIONAL = _clientpb.TRANSLATIONAL
    ROTATIONAL = _clientpb.ROTATIONAL


class FluidType(_IntEnum):
    """
    Fluid types available for use with the solver.

    Attributes
    ----------
    SINGLE_PHASE
        Standard single phase fluid
    CAVITATING_FLUID
        Single phase approximation for cavitation with a cavitation model
    VOF_FLUID
        VOF multiphase model for simulating flows with multiple fluids and immiscible interfaces.


    Examples
    --------
    >>> from luminarycloud.params.enum import FluidType
    >>> FluidType.SINGLE_PHASE
    >>> FluidType.CAVITATING_FLUID
    >>> FluidType.VOF_FLUID
    """

    SINGLE_PHASE = _clientpb.SINGLE_PHASE
    CAVITATING_FLUID = _clientpb.CAVITATING_FLUID
    VOF_FLUID = _clientpb.VOF_FLUID


class ViscousModel(_IntEnum):
    """
    Set the viscous model for the fluid solver.

    Attributes
    ----------
    RANS
        Reynolds-averaged Navier-Stokes.
    DES
        Detached Eddy Simulation.
    LES
        Large Eddy Simulation.
    LAMINAR
        Laminar flow governed by the Navier-Stokes equations.
    INVISCID
        Inviscid flow governed by the Euler equations.


    Examples
    --------
    >>> from luminarycloud.params.enum import ViscousModel
    >>> ViscousModel.RANS
    >>> ViscousModel.DES
    >>> ViscousModel.LES
    >>> ViscousModel.LAMINAR
    >>> ViscousModel.INVISCID
    """

    RANS = _clientpb.RANS
    DES = _clientpb.DES
    LES = _clientpb.LES
    LAMINAR = _clientpb.LAMINAR
    INVISCID = _clientpb.INVISCID


class DesFormulation(_IntEnum):
    """
    Select a Detached Eddy Simulation (DES) formulation.

    Attributes
    ----------
    DDES_VTM
        Use the DDES formulation with the shear-layer-adapted LES length-scale.
    DDES_VTM_SIGMA
        DDES with shear-layer-adapted LES length-scale and Sigma LES model.
    IDDES
        Use the Improved Delayed Detached Eddy Simulation (DDES) formulation.
    DDES
        Use the delayed Detached Eddy Simulation (DDES) formulation.
    DES97
        Use the original Detached Eddy Simulation (DES) formulation.
    ZDES
        Use the Zonal Detached Eddy Simulation (ZDES) formulation.


    Examples
    --------
    >>> from luminarycloud.params.enum import DesFormulation
    >>> DesFormulation.DDES_VTM
    >>> DesFormulation.DDES_VTM_SIGMA
    >>> DesFormulation.IDDES
    >>> DesFormulation.DDES
    >>> DesFormulation.DES97
    >>> DesFormulation.ZDES
    """

    DDES_VTM = _clientpb.DDES_VTM
    DDES_VTM_SIGMA = _clientpb.DDES_VTM_SIGMA
    IDDES = _clientpb.IDDES
    DDES = _clientpb.DDES
    DES97 = _clientpb.DES97
    ZDES = _clientpb.ZDES


class RansRegion(_IntEnum):
    """
    Select a region where RANS behavior should be enforced.

    Attributes
    ----------
    INSIDE
        Force RANS behavior inside a prescribed bounding box.
    OUTSIDE
        Force RANS behavior outside a prescribed bounding box.


    Examples
    --------
    >>> from luminarycloud.params.enum import RansRegion
    >>> RansRegion.INSIDE
    >>> RansRegion.OUTSIDE
    """

    INSIDE = _clientpb.INSIDE
    OUTSIDE = _clientpb.OUTSIDE


class SubGridScaleModel(_IntEnum):
    """
    Sub-grid scale models available for Large Eddy Simulation (LES).

    Attributes
    ----------
    NONE
        No sub-grid scale model.
    SMAGORINSKY
        Smagorinsky eddy viscosity model.
    VREMAN
        Vreman eddy viscosity model.
    WALE
        Wall adapting local eddy (WALE) viscosity model.
    SIGMA
        Sigma eddy viscosity model.
    AMD
        AMD eddy viscosity model.


    Examples
    --------
    >>> from luminarycloud.params.enum import SubGridScaleModel
    >>> SubGridScaleModel.NONE
    >>> SubGridScaleModel.SMAGORINSKY
    >>> SubGridScaleModel.VREMAN
    >>> SubGridScaleModel.WALE
    >>> SubGridScaleModel.SIGMA
    >>> SubGridScaleModel.AMD
    """

    NONE = _clientpb.NONE
    SMAGORINSKY = _clientpb.SMAGORINSKY
    VREMAN = _clientpb.VREMAN
    WALE = _clientpb.WALE
    SIGMA = _clientpb.SIGMA
    AMD = _clientpb.AMD


class TransitionModel(_IntEnum):
    """
    Laminar-turbulent transition models available for Reynolds-averaged Navier-Stokes (RANS).

    Attributes
    ----------
    NO_TRANSITION
        No transition modelling, the flow is fully turbulent.
    GAMMA_2015
        One-equation local correlation-based, γ-2015,
                        transition model (simplified γ-Re<sub>θ<sub>t</sub></sub>).
    GAMMA_RE_THETA_2009
        Two-equation local correlation-based, γ-Re<sub>θ<sub>t</sub></sub>-2009,
                        transition model.
    AFT_2019
        Two-equation amplification factor transport, AFT-2019,
                        transition model.


    Examples
    --------
    >>> from luminarycloud.params.enum import TransitionModel
    >>> TransitionModel.NO_TRANSITION
    >>> TransitionModel.GAMMA_2015
    >>> TransitionModel.GAMMA_RE_THETA_2009
    >>> TransitionModel.AFT_2019
    """

    NO_TRANSITION = _clientpb.NO_TRANSITION
    GAMMA_2015 = _clientpb.GAMMA_2015
    GAMMA_RE_THETA_2009 = _clientpb.GAMMA_RE_THETA_2009
    AFT_2019 = _clientpb.AFT_2019


class TransitionModelCrossFlow(_IntEnum):
    """
    Crossflow instability treatment for transition model.

    Attributes
    ----------
    TRANSITION_MODEL_CROSS_FLOW_OFF
        Crossflow instability is not considered in transition modelling.
    TRANSITION_MODEL_CROSS_FLOW_ON
        Crossflow treatment is active in transition modelling.


    Examples
    --------
    >>> from luminarycloud.params.enum import TransitionModelCrossFlow
    >>> TransitionModelCrossFlow.TRANSITION_MODEL_CROSS_FLOW_OFF
    >>> TransitionModelCrossFlow.TRANSITION_MODEL_CROSS_FLOW_ON
    """

    TRANSITION_MODEL_CROSS_FLOW_OFF = _clientpb.TRANSITION_MODEL_CROSS_FLOW_OFF
    TRANSITION_MODEL_CROSS_FLOW_ON = _clientpb.TRANSITION_MODEL_CROSS_FLOW_ON


class TurbulenceModel(_IntEnum):
    """
    Turbulence models available for Reynolds-averaged Navier-Stokes (RANS) or Detached Eddy Simulation (DES).

    Attributes
    ----------
    SPALART_ALLMARAS
        'Standard' Spalart-Allmaras one-equation turbulence model.
    KOMEGA_SST
        SST 2003m model.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulenceModel
    >>> TurbulenceModel.SPALART_ALLMARAS
    >>> TurbulenceModel.KOMEGA_SST
    """

    SPALART_ALLMARAS = _clientpb.SPALART_ALLMARAS
    KOMEGA_SST = _clientpb.KOMEGA_SST


class QcrSa(_IntEnum):
    """
    Modification of the traditional linear Boussinesq relation for the Spalart-Allmaras turbulence model via the quadratic constitutive relation (QCR).

    Attributes
    ----------
    QCR_OFF
        A QCR modification is not applied.
    QCR2000
        The 2000 version of the QCR modification is applied (QCR2000).


    Examples
    --------
    >>> from luminarycloud.params.enum import QcrSa
    >>> QcrSa.QCR_OFF
    >>> QcrSa.QCR2000
    """

    QCR_OFF = _clientpb.QCR_OFF
    QCR2000 = _clientpb.QCR2000


class RotationCorrectionSa(_IntEnum):
    """
    Apply a rotation correction to the Spalart-Allmaras turbulence model.

    Attributes
    ----------
    ROTATION_CORRECTION_OFF
        A rotation correction is not applied to the Spalart-Allmaras turbulence model.
    ROTATION_CORRECTION_ON
        The SA-R form of the rotation correction is applied to the Spalart-Allmaras turbulence model.


    Examples
    --------
    >>> from luminarycloud.params.enum import RotationCorrectionSa
    >>> RotationCorrectionSa.ROTATION_CORRECTION_OFF
    >>> RotationCorrectionSa.ROTATION_CORRECTION_ON
    """

    ROTATION_CORRECTION_OFF = _clientpb.ROTATION_CORRECTION_OFF
    ROTATION_CORRECTION_ON = _clientpb.ROTATION_CORRECTION_ON


class TurbulenceModelConstants(_IntEnum):
    """
    Apply default constants for the RANS turbulence model or choose to customize.

    Attributes
    ----------
    DEFAULT_TURB_CONSTANTS
        Use default turbulence model constants.
    CUSTOM_TURB_CONSTANTS
        Enter custom turbulence model constants.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulenceModelConstants
    >>> TurbulenceModelConstants.DEFAULT_TURB_CONSTANTS
    >>> TurbulenceModelConstants.CUSTOM_TURB_CONSTANTS
    """

    DEFAULT_TURB_CONSTANTS = _clientpb.DEFAULT_TURB_CONSTANTS
    CUSTOM_TURB_CONSTANTS = _clientpb.CUSTOM_TURB_CONSTANTS


class QcrSst(_IntEnum):
    """
    Modification of the traditional linear Boussinesq relation for the SST turbulence model via the quadratic constitutive relation (QCR).

    Attributes
    ----------
    SST_QCR_OFF
        A QCR modification is not applied.
    SST_QCR2000
        The 2000 version of the QCR modification is applied (QCR2000).


    Examples
    --------
    >>> from luminarycloud.params.enum import QcrSst
    >>> QcrSst.SST_QCR_OFF
    >>> QcrSst.SST_QCR2000
    """

    SST_QCR_OFF = _clientpb.SST_QCR_OFF
    SST_QCR2000 = _clientpb.SST_QCR2000


class PseudoTimeStepMethod(_IntEnum):
    """
    Method for obtaining the pseudo time step in a steady-state simulation or for the inner iterations of the dual time stepping method.

    Attributes
    ----------
    CFL_BASED
        Compute a pseudo time step from a Courant-Friedrichs-Lewy (CFL) number.
    FIXED_PSEUDO_TIME_STEP
        Apply a fixed pseudo time step.


    Examples
    --------
    >>> from luminarycloud.params.enum import PseudoTimeStepMethod
    >>> PseudoTimeStepMethod.CFL_BASED
    >>> PseudoTimeStepMethod.FIXED_PSEUDO_TIME_STEP
    """

    CFL_BASED = _clientpb.CFL_BASED
    FIXED_PSEUDO_TIME_STEP = _clientpb.FIXED_PSEUDO_TIME_STEP


class LocalTimeStepping(_IntEnum):
    """
    Compute local time steps in each control volume to accelerate convergence
                of steady-state simulations or the inner iterations of time-accurate simulations
                with dual time stepping.

    Attributes
    ----------
    LOCAL_TIME_STEPPING_ON
        Enable local time stepping.
    LOCAL_TIME_STEPPING_OFF
        Disable local time stepping.


    Examples
    --------
    >>> from luminarycloud.params.enum import LocalTimeStepping
    >>> LocalTimeStepping.LOCAL_TIME_STEPPING_ON
    >>> LocalTimeStepping.LOCAL_TIME_STEPPING_OFF
    """

    LOCAL_TIME_STEPPING_ON = _clientpb.LOCAL_TIME_STEPPING_ON
    LOCAL_TIME_STEPPING_OFF = _clientpb.LOCAL_TIME_STEPPING_OFF


class JacobianUpdateMethod(_IntEnum):
    """
    Method for determining how often to

    Attributes
    ----------
    EXPLICIT_INTERVAL_AND_WARMUP
        Compute the jacobian every iteration for 'Jacobian Warmup Threshold' iterations, then compute every 'Jacobian Update Interval' iterations


    Examples
    --------
    >>> from luminarycloud.params.enum import JacobianUpdateMethod
    >>> JacobianUpdateMethod.EXPLICIT_INTERVAL_AND_WARMUP
    """

    EXPLICIT_INTERVAL_AND_WARMUP = _clientpb.EXPLICIT_INTERVAL_AND_WARMUP


class RobustStartup(_IntEnum):
    """
    Applies a robust startup process during the initial transients of a simulation. Applicable to steady problems only.

    Attributes
    ----------
    ROBUST_STARTUP_ON
        Enable robust startup mode.
    ROBUST_STARTUP_OFF
        Disable robust startup mode.


    Examples
    --------
    >>> from luminarycloud.params.enum import RobustStartup
    >>> RobustStartup.ROBUST_STARTUP_ON
    >>> RobustStartup.ROBUST_STARTUP_OFF
    """

    ROBUST_STARTUP_ON = _clientpb.ROBUST_STARTUP_ON
    ROBUST_STARTUP_OFF = _clientpb.ROBUST_STARTUP_OFF


class SolutionControlsFluidPreset(_IntEnum):
    """
    Select suggested control settings or allow a custom choice. In general, assume a trade-off between speed and robustness (i.e. the ability to converge).

    Attributes
    ----------
    UNSET_SOLUTION_CONTROLS_FLUID_PRESET
        Solution controls preset is not set.
    DEFAULT_SOLUTION_CONTROLS_FLUID
        Conservative performance settings that emphasize robustness (ability to converge).
    INTERMEDIATE_SOLUTION_CONTROLS_FLUID
        Reasonable compromise between speed and robustness, up to 2 times faster than the default settings.
    AGGRESSIVE_SOLUTION_CONTROLS_FLUID
        Aggressive settings further biased towards speed, up to 3 times faster than the default settings (these may not be suitable for all problems).
    CUSTOM_SOLUTION_CONTROLS_FLUID
        Custom solution controls.


    Examples
    --------
    >>> from luminarycloud.params.enum import SolutionControlsFluidPreset
    >>> SolutionControlsFluidPreset.UNSET_SOLUTION_CONTROLS_FLUID_PRESET
    >>> SolutionControlsFluidPreset.DEFAULT_SOLUTION_CONTROLS_FLUID
    >>> SolutionControlsFluidPreset.INTERMEDIATE_SOLUTION_CONTROLS_FLUID
    >>> SolutionControlsFluidPreset.AGGRESSIVE_SOLUTION_CONTROLS_FLUID
    >>> SolutionControlsFluidPreset.CUSTOM_SOLUTION_CONTROLS_FLUID
    """

    UNSET_SOLUTION_CONTROLS_FLUID_PRESET = _clientpb.UNSET_SOLUTION_CONTROLS_FLUID_PRESET
    DEFAULT_SOLUTION_CONTROLS_FLUID = _clientpb.DEFAULT_SOLUTION_CONTROLS_FLUID
    INTERMEDIATE_SOLUTION_CONTROLS_FLUID = _clientpb.INTERMEDIATE_SOLUTION_CONTROLS_FLUID
    AGGRESSIVE_SOLUTION_CONTROLS_FLUID = _clientpb.AGGRESSIVE_SOLUTION_CONTROLS_FLUID
    CUSTOM_SOLUTION_CONTROLS_FLUID = _clientpb.CUSTOM_SOLUTION_CONTROLS_FLUID


class ConvectiveSchemesDensityBased(_IntEnum):
    """
    Type of scheme for discretizing the convective terms of the fluid equations.

    Attributes
    ----------
    ROE
        Flux Difference Splitting scheme.
    LD2
        Low-Dissipation Low-Dispersion (LD2) scheme.
    EC2
        Entropy-Stable discretization.
    RHIE_CHOW
        Rhie-Chow method.


    Examples
    --------
    >>> from luminarycloud.params.enum import ConvectiveSchemesDensityBased
    >>> ConvectiveSchemesDensityBased.ROE
    >>> ConvectiveSchemesDensityBased.LD2
    >>> ConvectiveSchemesDensityBased.EC2
    >>> ConvectiveSchemesDensityBased.RHIE_CHOW
    """

    ROE = _clientpb.ROE
    LD2 = _clientpb.LD2
    EC2 = _clientpb.EC2
    RHIE_CHOW = _clientpb.RHIE_CHOW


class Preconditioning(_IntEnum):
    """
    Apply low-speed preconditioning to obtain Mach number-independent solutions for ideal gases.

    Attributes
    ----------
    PRECONDITIONING_ON
        Enable low-speed preconditioning.
    PRECONDITIONING_OFF
        Disable low-speed preconditioning.


    Examples
    --------
    >>> from luminarycloud.params.enum import Preconditioning
    >>> Preconditioning.PRECONDITIONING_ON
    >>> Preconditioning.PRECONDITIONING_OFF
    """

    PRECONDITIONING_ON = _clientpb.PRECONDITIONING_ON
    PRECONDITIONING_OFF = _clientpb.PRECONDITIONING_OFF


class ArtificialViscosityModel(_IntEnum):
    """
    Artificial viscosity for shock and interface capturing.

    Attributes
    ----------
    NO_MODEL
        No artificial viscosity model.
    LAD
        Localized artificial diffusivity (LAD) model.


    Examples
    --------
    >>> from luminarycloud.params.enum import ArtificialViscosityModel
    >>> ArtificialViscosityModel.NO_MODEL
    >>> ArtificialViscosityModel.LAD
    """

    NO_MODEL = _clientpb.NO_MODEL
    LAD = _clientpb.LAD


class SkewSymmetricFormulation(_IntEnum):
    """
    Choice among skew-symmetric formulations.

    Attributes
    ----------
    CHANDRASEKHAR_EC2
        Praveen Chandrasekhar's EC2 formulation.
    CHANDRASEKHAR_EC1
        Praveen Chandrasekhar's EC1 formulation.
    KUYA
        Kuya et al's formulation.


    Examples
    --------
    >>> from luminarycloud.params.enum import SkewSymmetricFormulation
    >>> SkewSymmetricFormulation.CHANDRASEKHAR_EC2
    >>> SkewSymmetricFormulation.CHANDRASEKHAR_EC1
    >>> SkewSymmetricFormulation.KUYA
    """

    CHANDRASEKHAR_EC2 = _clientpb.CHANDRASEKHAR_EC2
    CHANDRASEKHAR_EC1 = _clientpb.CHANDRASEKHAR_EC1
    KUYA = _clientpb.KUYA


class UpwindSchemeOrder(_IntEnum):
    """
    Spatial order of accuracy of the convective scheme used for the fluid equations.

    Attributes
    ----------
    SECOND
        Second-order accuracy.
    FIRST
        First-order accuracy.


    Examples
    --------
    >>> from luminarycloud.params.enum import UpwindSchemeOrder
    >>> UpwindSchemeOrder.SECOND
    >>> UpwindSchemeOrder.FIRST
    """

    SECOND = _clientpb.SECOND
    FIRST = _clientpb.FIRST


class RobustDissipation(_IntEnum):
    """
    Use a form of dissipation that improves robustness but that may reduce accuracy.

    Attributes
    ----------
    ROBUST_DISS_OFF
        Disable robust dissipation.
    ROBUST_DISS_ON
        Enable robust dissipation.


    Examples
    --------
    >>> from luminarycloud.params.enum import RobustDissipation
    >>> RobustDissipation.ROBUST_DISS_OFF
    >>> RobustDissipation.ROBUST_DISS_ON
    """

    ROBUST_DISS_OFF = _clientpb.ROBUST_DISS_OFF
    ROBUST_DISS_ON = _clientpb.ROBUST_DISS_ON


class Limiter(_IntEnum):
    """
    Apply a slope limiter for second-order upwind schemes. This tends to increase
                robustness at the expense of solution time and higher dissipation in regions of the
                flow with sharp gradients. For this reason, it may be helpful to increase gradient
                blending parameters when using limiters.

    Attributes
    ----------
    NO_LIMITER
        Do not apply a slope limiter.
    INVARIANT_VENKATAKRISHNAN_CV
        Apply cell-based limiting with the limiter function of Venkatakrishnan.
    VAN_ALBADA_FACE
        Apply face-based limiting with the limiter function of Van Albada.
                        This limiter is more conservative than Venkatakrishnan-Wang.
    VENKATAKRISHNAN_CV
        This option was deprecated in favor of an implementation of the
                        same method that guarantees coordinate-system invariance.


    Examples
    --------
    >>> from luminarycloud.params.enum import Limiter
    >>> Limiter.NO_LIMITER
    >>> Limiter.INVARIANT_VENKATAKRISHNAN_CV
    >>> Limiter.VAN_ALBADA_FACE
    >>> Limiter.VENKATAKRISHNAN_CV
    """

    NO_LIMITER = _clientpb.NO_LIMITER
    INVARIANT_VENKATAKRISHNAN_CV = _clientpb.INVARIANT_VENKATAKRISHNAN_CV
    VAN_ALBADA_FACE = _clientpb.VAN_ALBADA_FACE
    VENKATAKRISHNAN_CV = _clientpb.VENKATAKRISHNAN_CV


class SpatialDiscretizationFluidPreset(_IntEnum):
    """
    Select suggested control settings or allow a custom choice. In general, assume a trade-off between accuracy and robustness (i.e. the ability to converge).

    Attributes
    ----------
    UNSET_SPATIAL_DISCRETIZATION_FLUID_PRESET
        Spatial discretization preset is not set.
    DEFAULT_SPATIAL_DISCRETIZATION_FLUID
        Default settings, good compromise between accuracy and robustness (ability to converge).
    CONSERVATIVE_SPATIAL_DISCRETIZATION_FLUID
        Settings biased towards robustness over maximum accuracy (relative to default).
    HIGH_ACCURACY_SPATIAL_DISCRETIZATION_FLUID
        Settings that emphasize accuracy (relative to default).
    CUSTOM_SPATIAL_DISCRETIZATION_FLUID
        Custom discretization settings.


    Examples
    --------
    >>> from luminarycloud.params.enum import SpatialDiscretizationFluidPreset
    >>> SpatialDiscretizationFluidPreset.UNSET_SPATIAL_DISCRETIZATION_FLUID_PRESET
    >>> SpatialDiscretizationFluidPreset.DEFAULT_SPATIAL_DISCRETIZATION_FLUID
    >>> SpatialDiscretizationFluidPreset.CONSERVATIVE_SPATIAL_DISCRETIZATION_FLUID
    >>> SpatialDiscretizationFluidPreset.HIGH_ACCURACY_SPATIAL_DISCRETIZATION_FLUID
    >>> SpatialDiscretizationFluidPreset.CUSTOM_SPATIAL_DISCRETIZATION_FLUID
    """

    UNSET_SPATIAL_DISCRETIZATION_FLUID_PRESET = _clientpb.UNSET_SPATIAL_DISCRETIZATION_FLUID_PRESET
    DEFAULT_SPATIAL_DISCRETIZATION_FLUID = _clientpb.DEFAULT_SPATIAL_DISCRETIZATION_FLUID
    CONSERVATIVE_SPATIAL_DISCRETIZATION_FLUID = _clientpb.CONSERVATIVE_SPATIAL_DISCRETIZATION_FLUID
    HIGH_ACCURACY_SPATIAL_DISCRETIZATION_FLUID = (
        _clientpb.HIGH_ACCURACY_SPATIAL_DISCRETIZATION_FLUID
    )
    CUSTOM_SPATIAL_DISCRETIZATION_FLUID = _clientpb.CUSTOM_SPATIAL_DISCRETIZATION_FLUID


class PhysicalBoundary(_IntEnum):
    """


    Attributes
    ----------
    WALL
        Solid wall boundary condition.
    INLET
        Inlet boundary condition.
    OUTLET
        Outlet boundary condition.
    SYMMETRY
        Symmetry boundary condition.
    FARFIELD
        Far-field boundary condition.
    OVERSET
        Overset boundary condition.


    Examples
    --------
    >>> from luminarycloud.params.enum import PhysicalBoundary
    >>> PhysicalBoundary.WALL
    >>> PhysicalBoundary.INLET
    >>> PhysicalBoundary.OUTLET
    >>> PhysicalBoundary.SYMMETRY
    >>> PhysicalBoundary.FARFIELD
    >>> PhysicalBoundary.OVERSET
    """

    WALL = _clientpb.WALL
    INLET = _clientpb.INLET
    OUTLET = _clientpb.OUTLET
    SYMMETRY = _clientpb.SYMMETRY
    FARFIELD = _clientpb.FARFIELD
    OVERSET = _clientpb.OVERSET


class WallMomentum(_IntEnum):
    """
    Condition applied to the momentum equations at a solid wall boundary.

    Attributes
    ----------
    NO_SLIP
        Apply a no-slip condition at the wall surface.
    SLIP
        Apply a slip (flow tangency) condition at the wall surface.
    WALL_MODEL
        Apply a wall model at the wall surface.


    Examples
    --------
    >>> from luminarycloud.params.enum import WallMomentum
    >>> WallMomentum.NO_SLIP
    >>> WallMomentum.SLIP
    >>> WallMomentum.WALL_MODEL
    """

    NO_SLIP = _clientpb.NO_SLIP
    SLIP = _clientpb.SLIP
    WALL_MODEL = _clientpb.WALL_MODEL


class WallEnergy(_IntEnum):
    """
    Condition applied to the energy equation at a solid wall boundary.

    Attributes
    ----------
    FIXED_HEAT_FLUX
        Apply a fixed heat flux at the wall surface.
    FIXED_TEMPERATURE
        Apply a fixed temperature at the wall surface.


    Examples
    --------
    >>> from luminarycloud.params.enum import WallEnergy
    >>> WallEnergy.FIXED_HEAT_FLUX
    >>> WallEnergy.FIXED_TEMPERATURE
    """

    FIXED_HEAT_FLUX = _clientpb.FIXED_HEAT_FLUX
    FIXED_TEMPERATURE = _clientpb.FIXED_TEMPERATURE


class InletEnergy(_IntEnum):
    """
    Method of defining the inlet energy conditions.

    Attributes
    ----------
    TOTAL_TEMPERATURE_INLET
        Specify total temperature.


    Examples
    --------
    >>> from luminarycloud.params.enum import InletEnergy
    >>> InletEnergy.TOTAL_TEMPERATURE_INLET
    """

    TOTAL_TEMPERATURE_INLET = _clientpb.TOTAL_TEMPERATURE_INLET


class TurbulenceSpecificationSpalartAllmaras(_IntEnum):
    """
    Condition applied to the Spalart-Allmaras turbulence equation at the boundary.

    Attributes
    ----------
    TURBULENT_VISCOSITY_RATIO_SA
        Apply a ratio of turbulent viscosity to laminar viscosity at the boundary.
    TURBULENT_VISCOSITY_SA
        Set the turbulent viscosity at the boundary.
    BC_SA_VARIABLE
        Set the Spalart-Allmaras variable value at the boundary condition.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulenceSpecificationSpalartAllmaras
    >>> TurbulenceSpecificationSpalartAllmaras.TURBULENT_VISCOSITY_RATIO_SA
    >>> TurbulenceSpecificationSpalartAllmaras.TURBULENT_VISCOSITY_SA
    >>> TurbulenceSpecificationSpalartAllmaras.BC_SA_VARIABLE
    """

    TURBULENT_VISCOSITY_RATIO_SA = _clientpb.TURBULENT_VISCOSITY_RATIO_SA
    TURBULENT_VISCOSITY_SA = _clientpb.TURBULENT_VISCOSITY_SA
    BC_SA_VARIABLE = _clientpb.BC_SA_VARIABLE


class TurbulenceSpecificationKomega(_IntEnum):
    """
    Condition applied to the k-ω turbulence variables at the boundary.

    Attributes
    ----------
    BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        Apply a uniform ratio of turbulent viscosity to laminar viscosity and turbulence intensity at the boundary.
    BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        Set a uniform turbulent viscosity and turbulence intensity in the domain.
    BC_KOMEGA_VARIABLES
        Set the k-ω variables at the boundary condition.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulenceSpecificationKomega
    >>> TurbulenceSpecificationKomega.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
    >>> TurbulenceSpecificationKomega.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
    >>> TurbulenceSpecificationKomega.BC_KOMEGA_VARIABLES
    """

    BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA = (
        _clientpb.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
    )
    BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA = (
        _clientpb.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
    )
    BC_KOMEGA_VARIABLES = _clientpb.BC_KOMEGA_VARIABLES


class InletMomentum(_IntEnum):
    """
    Method of defining the inlet momentum conditions.

    Attributes
    ----------
    TOTAL_PRESSURE_INLET
        Specify total pressure.
    MASS_FLOW_INLET
        Specify mass flow rate.
    VELOCITY_INLET
        Specify the velocity magnitude.
    VELOCITY_COMPONENTS_INLET
        Specify the components of the velocity vector.
    MACH_INLET
        Specify the inlet Mach number and static conditions. Note that for subsonic flow the static pressure is not used.
    FAN_CURVE_INLET
        Specify the relation between the fan pressure rise and the volume flow rate.


    Examples
    --------
    >>> from luminarycloud.params.enum import InletMomentum
    >>> InletMomentum.TOTAL_PRESSURE_INLET
    >>> InletMomentum.MASS_FLOW_INLET
    >>> InletMomentum.VELOCITY_INLET
    >>> InletMomentum.VELOCITY_COMPONENTS_INLET
    >>> InletMomentum.MACH_INLET
    >>> InletMomentum.FAN_CURVE_INLET
    """

    TOTAL_PRESSURE_INLET = _clientpb.TOTAL_PRESSURE_INLET
    MASS_FLOW_INLET = _clientpb.MASS_FLOW_INLET
    VELOCITY_INLET = _clientpb.VELOCITY_INLET
    VELOCITY_COMPONENTS_INLET = _clientpb.VELOCITY_COMPONENTS_INLET
    MACH_INLET = _clientpb.MACH_INLET
    FAN_CURVE_INLET = _clientpb.FAN_CURVE_INLET


class DirectionSpecification(_IntEnum):
    """
    Method of defining the flow direction at the inlet.

    Attributes
    ----------
    NORMAL_TO_BOUNDARY
        Impose a flow direction normal to the inlet boundary toward the interior of the domain.
    DIRECTION_VECTOR
        Specify a vector for the inlet flow direction.


    Examples
    --------
    >>> from luminarycloud.params.enum import DirectionSpecification
    >>> DirectionSpecification.NORMAL_TO_BOUNDARY
    >>> DirectionSpecification.DIRECTION_VECTOR
    """

    NORMAL_TO_BOUNDARY = _clientpb.NORMAL_TO_BOUNDARY
    DIRECTION_VECTOR = _clientpb.DIRECTION_VECTOR


class OutletStrategy(_IntEnum):
    """
    Outlet strategy.

    Attributes
    ----------
    OUTLET_PRESSURE
        Specify an outlet static pressure.
    OUTLET_TARGET_MASS_FLOW_RATE
        Specify a target mass flow rate. Warning: this strategy will not work if
                        the flow becomes choked or if it is fixed by any other flow constraint (e.g. a velocity inlet).
    OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE
        Specify a target mass flow rate corrected for given reference temperature and pressure
                        (&#856;m<sub>corr</sub> = &#856;m <sup>&radic; T<sub>0</sub></sup> &frasl; <sub>&radic;T<sub>ref</sub></sub>
                        <sup>P<sub>ref</sub></sup> &frasl; <sub>P<sub>0</sub></sub>).
    FAN_CURVE_OUTLET
        Specify the relation between the fan pressure rise and the volume flow rate.


    Examples
    --------
    >>> from luminarycloud.params.enum import OutletStrategy
    >>> OutletStrategy.OUTLET_PRESSURE
    >>> OutletStrategy.OUTLET_TARGET_MASS_FLOW_RATE
    >>> OutletStrategy.OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE
    >>> OutletStrategy.FAN_CURVE_OUTLET
    """

    OUTLET_PRESSURE = _clientpb.OUTLET_PRESSURE
    OUTLET_TARGET_MASS_FLOW_RATE = _clientpb.OUTLET_TARGET_MASS_FLOW_RATE
    OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE = _clientpb.OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE
    FAN_CURVE_OUTLET = _clientpb.FAN_CURVE_OUTLET


class OutletPressureConstraint(_IntEnum):
    """
    Mode of imposing pressure at the outlet.

    Attributes
    ----------
    OUTLET_LOCAL_CONSTRAINT
        Pressure values are imposed locally at each mesh face,
                        thereby imposing a fixed pressure profile (e.g. uniform).
    OUTLET_AVERAGE_CONSTRAINT
        The area-averaged pressure is imposed while local values can deviate.
                        This allows a pressure profile to develop naturally, but can be less numerically
                        stable than the Local constraint mode.


    Examples
    --------
    >>> from luminarycloud.params.enum import OutletPressureConstraint
    >>> OutletPressureConstraint.OUTLET_LOCAL_CONSTRAINT
    >>> OutletPressureConstraint.OUTLET_AVERAGE_CONSTRAINT
    """

    OUTLET_LOCAL_CONSTRAINT = _clientpb.OUTLET_LOCAL_CONSTRAINT
    OUTLET_AVERAGE_CONSTRAINT = _clientpb.OUTLET_AVERAGE_CONSTRAINT


class FarfieldMomentum(_IntEnum):
    """
    Method of defining the farfield momentum conditions.

    Attributes
    ----------
    FARFIELD_MACH_NUMBER
        Specify the freestream Mach number.
    FARFIELD_VELOCITY_MAGNITUDE
        Specify the freestream velocity magnitude.


    Examples
    --------
    >>> from luminarycloud.params.enum import FarfieldMomentum
    >>> FarfieldMomentum.FARFIELD_MACH_NUMBER
    >>> FarfieldMomentum.FARFIELD_VELOCITY_MAGNITUDE
    """

    FARFIELD_MACH_NUMBER = _clientpb.FARFIELD_MACH_NUMBER
    FARFIELD_VELOCITY_MAGNITUDE = _clientpb.FARFIELD_VELOCITY_MAGNITUDE


class FarFieldFlowDirectionSpecification(_IntEnum):
    """
    Method of defining the flow direction at the far-field.

    Attributes
    ----------
    FARFIELD_DIRECTION
        Specify a vector for the far-field flow direction.
    FARFIELD_ANGLES
        Specify body axes, angle of attack, and angle of sideslip to define the far-field flow direction.


    Examples
    --------
    >>> from luminarycloud.params.enum import FarFieldFlowDirectionSpecification
    >>> FarFieldFlowDirectionSpecification.FARFIELD_DIRECTION
    >>> FarFieldFlowDirectionSpecification.FARFIELD_ANGLES
    """

    FARFIELD_DIRECTION = _clientpb.FARFIELD_DIRECTION
    FARFIELD_ANGLES = _clientpb.FARFIELD_ANGLES


class TurbulentVariableInitializationTypeSa(_IntEnum):
    """
    Type of initial condition for the turbulent variables.

    Attributes
    ----------
    INIT_TURBULENT_VISCOSITY_RATIO_SA
        Apply a uniform ratio of turbulent viscosity to laminar viscosity in the domain.
    INIT_TURBULENT_VISCOSITY_SA
        Set a uniform turbulent viscosity in the domain.
    INIT_SA_VARIABLE
        Uniform initial condition for the Spalart-Allmaras turbulence variable.
    INIT_FARFIELD_VALUES_SA
        Uniform initial condition for the Spalart-Allmaras turbulence variable from the far-field boundary.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulentVariableInitializationTypeSa
    >>> TurbulentVariableInitializationTypeSa.INIT_TURBULENT_VISCOSITY_RATIO_SA
    >>> TurbulentVariableInitializationTypeSa.INIT_TURBULENT_VISCOSITY_SA
    >>> TurbulentVariableInitializationTypeSa.INIT_SA_VARIABLE
    >>> TurbulentVariableInitializationTypeSa.INIT_FARFIELD_VALUES_SA
    """

    INIT_TURBULENT_VISCOSITY_RATIO_SA = _clientpb.INIT_TURBULENT_VISCOSITY_RATIO_SA
    INIT_TURBULENT_VISCOSITY_SA = _clientpb.INIT_TURBULENT_VISCOSITY_SA
    INIT_SA_VARIABLE = _clientpb.INIT_SA_VARIABLE
    INIT_FARFIELD_VALUES_SA = _clientpb.INIT_FARFIELD_VALUES_SA


class TurbulentVariableInitializationTypeKomega(_IntEnum):
    """
    Type of initial condition for the turbulent variables.

    Attributes
    ----------
    INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        Apply a uniform ratio of turbulent viscosity to laminar viscosity and turbulence intensity in the domain.
    INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        Set a uniform turbulent viscosity and turbulence intensity in the domain.
    INIT_KOMEGA_VARIABLES
        Uniform initial conditions.
    INIT_FARFIELD_VALUES_KOMEGA
        Uniform initial condition from the far-field boundary.


    Examples
    --------
    >>> from luminarycloud.params.enum import TurbulentVariableInitializationTypeKomega
    >>> TurbulentVariableInitializationTypeKomega.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
    >>> TurbulentVariableInitializationTypeKomega.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
    >>> TurbulentVariableInitializationTypeKomega.INIT_KOMEGA_VARIABLES
    >>> TurbulentVariableInitializationTypeKomega.INIT_FARFIELD_VALUES_KOMEGA
    """

    INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA = (
        _clientpb.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
    )
    INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA = (
        _clientpb.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
    )
    INIT_KOMEGA_VARIABLES = _clientpb.INIT_KOMEGA_VARIABLES
    INIT_FARFIELD_VALUES_KOMEGA = _clientpb.INIT_FARFIELD_VALUES_KOMEGA


class PotentialFlowPressureInitialization(_IntEnum):
    """
    Pressure initialization options when using potential flow initialization.

    Attributes
    ----------
    INITIALIZATION_POTENTIAL_FLOW_PRESSURE_OFF
        Do not initialize the pressure using the potential flow method
    INITIALIZATION_POTENTIAL_FLOW_PRESSURE_ON
        Initialize the pressure using Bernouilli's equation.


    Examples
    --------
    >>> from luminarycloud.params.enum import PotentialFlowPressureInitialization
    >>> PotentialFlowPressureInitialization.INITIALIZATION_POTENTIAL_FLOW_PRESSURE_OFF
    >>> PotentialFlowPressureInitialization.INITIALIZATION_POTENTIAL_FLOW_PRESSURE_ON
    """

    INITIALIZATION_POTENTIAL_FLOW_PRESSURE_OFF = (
        _clientpb.INITIALIZATION_POTENTIAL_FLOW_PRESSURE_OFF
    )
    INITIALIZATION_POTENTIAL_FLOW_PRESSURE_ON = _clientpb.INITIALIZATION_POTENTIAL_FLOW_PRESSURE_ON


class VerificationSolutions(_IntEnum):
    """
    Predefined verification problems built into the solver.

    Attributes
    ----------
    TAYLOR_GREEN_VORTEX
        Taylor-Green vortex problem.
    NS_MMS
        Method of manufactured solutions (MMS) for the Navier-Stokes equations.
    EULER_MMS
        Method of manufactured solutions (MMS) for the Euler equations.
    SHOCK_TUBE
        Shock tube problem.
    NORMAL_SHOCK
        Normal shock problem.
    SHOCK_VORTEX
        Shock vortex problem.
    SHU_OSHER
        Shu Osher problem.
    DISTURBANCE_WAVE
        Disturbance wave problem.
    INVISCID_VORTEX
        Invisvid vortex transport by uniform flow.
    INS_2D_LATTICE
        2D planar lattice flow for incompressible NS.
    CHECK_FLUX_SYMMETRY
        Run a debug check on the left/right symmetry of fluxes.


    Examples
    --------
    >>> from luminarycloud.params.enum import VerificationSolutions
    >>> VerificationSolutions.TAYLOR_GREEN_VORTEX
    >>> VerificationSolutions.NS_MMS
    >>> VerificationSolutions.EULER_MMS
    >>> VerificationSolutions.SHOCK_TUBE
    >>> VerificationSolutions.NORMAL_SHOCK
    >>> VerificationSolutions.SHOCK_VORTEX
    >>> VerificationSolutions.SHU_OSHER
    >>> VerificationSolutions.DISTURBANCE_WAVE
    >>> VerificationSolutions.INVISCID_VORTEX
    >>> VerificationSolutions.INS_2D_LATTICE
    >>> VerificationSolutions.CHECK_FLUX_SYMMETRY
    """

    TAYLOR_GREEN_VORTEX = _clientpb.TAYLOR_GREEN_VORTEX
    NS_MMS = _clientpb.NS_MMS
    EULER_MMS = _clientpb.EULER_MMS
    SHOCK_TUBE = _clientpb.SHOCK_TUBE
    NORMAL_SHOCK = _clientpb.NORMAL_SHOCK
    SHOCK_VORTEX = _clientpb.SHOCK_VORTEX
    SHU_OSHER = _clientpb.SHU_OSHER
    DISTURBANCE_WAVE = _clientpb.DISTURBANCE_WAVE
    INVISCID_VORTEX = _clientpb.INVISCID_VORTEX
    INS_2D_LATTICE = _clientpb.INS_2D_LATTICE
    CHECK_FLUX_SYMMETRY = _clientpb.CHECK_FLUX_SYMMETRY


class PhysicalBehaviorModel(_IntEnum):
    """
    Defines the physical behavior type.

    Attributes
    ----------
    ACTUATOR_DISK_MODEL
        Behavior inputs associated with actuator disks
    ACTUATOR_LINE_MODEL
        Behavior inputs associated with actuator lines
    SOURCE_POINTS_MODEL
        Behavior inputs associated with source points


    Examples
    --------
    >>> from luminarycloud.params.enum import PhysicalBehaviorModel
    >>> PhysicalBehaviorModel.ACTUATOR_DISK_MODEL
    >>> PhysicalBehaviorModel.ACTUATOR_LINE_MODEL
    >>> PhysicalBehaviorModel.SOURCE_POINTS_MODEL
    """

    ACTUATOR_DISK_MODEL = _clientpb.ACTUATOR_DISK_MODEL
    ACTUATOR_LINE_MODEL = _clientpb.ACTUATOR_LINE_MODEL
    SOURCE_POINTS_MODEL = _clientpb.SOURCE_POINTS_MODEL


class ActuatorDiskModel(_IntEnum):
    """
    Defines the physics behavior of the actuator disk.

    Attributes
    ----------
    ACTUATOR_DISK_UNIFORM_THRUST
        Applies a uniform force at all locations on the disk
    ACTUATOR_DISK_RADIAL_DISTRIBUTION
        Thrust, torque, and radial force profiles
    ACTUATOR_DISK_BLADE_ELEMENT
        Uses tables of airfoil aerodynamic data to model the effect of rotors and propellers
    FAN_CURVE_INTERNAL
        Specify the relation between the fan pressure rise and the volume flow rate.


    Examples
    --------
    >>> from luminarycloud.params.enum import ActuatorDiskModel
    >>> ActuatorDiskModel.ACTUATOR_DISK_UNIFORM_THRUST
    >>> ActuatorDiskModel.ACTUATOR_DISK_RADIAL_DISTRIBUTION
    >>> ActuatorDiskModel.ACTUATOR_DISK_BLADE_ELEMENT
    >>> ActuatorDiskModel.FAN_CURVE_INTERNAL
    """

    ACTUATOR_DISK_UNIFORM_THRUST = _clientpb.ACTUATOR_DISK_UNIFORM_THRUST
    ACTUATOR_DISK_RADIAL_DISTRIBUTION = _clientpb.ACTUATOR_DISK_RADIAL_DISTRIBUTION
    ACTUATOR_DISK_BLADE_ELEMENT = _clientpb.ACTUATOR_DISK_BLADE_ELEMENT
    FAN_CURVE_INTERNAL = _clientpb.FAN_CURVE_INTERNAL


class ActuatorDiskBemStrategy(_IntEnum):
    """
    Defines how the power of the propeller is specified in the blade element model

    Attributes
    ----------
    BEM_ROTATION_RATE
        Prescribes a rotation rate for the fictitious blades.
    BEM_TARGET_THRUST
        The rotation rate specified initially is adjusted to achieve a prescribed target thrust. The final rotation rate is available as a surface output


    Examples
    --------
    >>> from luminarycloud.params.enum import ActuatorDiskBemStrategy
    >>> ActuatorDiskBemStrategy.BEM_ROTATION_RATE
    >>> ActuatorDiskBemStrategy.BEM_TARGET_THRUST
    """

    BEM_ROTATION_RATE = _clientpb.BEM_ROTATION_RATE
    BEM_TARGET_THRUST = _clientpb.BEM_TARGET_THRUST


class ActuatorLineModel(_IntEnum):
    """
    Defines the physics behavior of the actuator line.

    Attributes
    ----------
    ACTUATOR_LINE_BLADE_ELEMENT
        Uses tables of airfoil aerodynamic data to model the effect of rotors and propellers


    Examples
    --------
    >>> from luminarycloud.params.enum import ActuatorLineModel
    >>> ActuatorLineModel.ACTUATOR_LINE_BLADE_ELEMENT
    """

    ACTUATOR_LINE_BLADE_ELEMENT = _clientpb.ACTUATOR_LINE_BLADE_ELEMENT


class ParticleSourceModel(_IntEnum):
    """
    Defines the behavior of the general source particles.

    Attributes
    ----------
    GENERAL_MASS_SOURCE
        Injects material into the solver at particle locations
    GENERAL_ACCELERATION_SOURCE
        Applies an acceleration at particle locations


    Examples
    --------
    >>> from luminarycloud.params.enum import ParticleSourceModel
    >>> ParticleSourceModel.GENERAL_MASS_SOURCE
    >>> ParticleSourceModel.GENERAL_ACCELERATION_SOURCE
    """

    GENERAL_MASS_SOURCE = _clientpb.GENERAL_MASS_SOURCE
    GENERAL_ACCELERATION_SOURCE = _clientpb.GENERAL_ACCELERATION_SOURCE


class CavitationModel(_IntEnum):
    """
    Cavitation models available for simulating flow with cavitation.

    Attributes
    ----------
    SAUER_SCHNERR
        Sauer-Schnerr one equation cavitation model.


    Examples
    --------
    >>> from luminarycloud.params.enum import CavitationModel
    >>> CavitationModel.SAUER_SCHNERR
    """

    SAUER_SCHNERR = _clientpb.SAUER_SCHNERR


class PorousModelType(_IntEnum):
    """
    Type of porous model.

    Attributes
    ----------
    DARCY_FORCHHEIMER
        Darcy Forchheimer model.


    Examples
    --------
    >>> from luminarycloud.params.enum import PorousModelType
    >>> PorousModelType.DARCY_FORCHHEIMER
    """

    DARCY_FORCHHEIMER = _clientpb.DARCY_FORCHHEIMER


class MpCouplingLinSolCoupling(_IntEnum):
    """
    Turns on the use of enhanced coupling between the physics, which provides greater robustness at the cost of simulation speed.

    Attributes
    ----------
    MP_COUPLING_LIN_SOL_COUPLING_ON
        Enable enhanced coupling.
    MP_COUPLING_LIN_SOL_COUPLING_OFF
        Disable enhanced coupling.


    Examples
    --------
    >>> from luminarycloud.params.enum import MpCouplingLinSolCoupling
    >>> MpCouplingLinSolCoupling.MP_COUPLING_LIN_SOL_COUPLING_ON
    >>> MpCouplingLinSolCoupling.MP_COUPLING_LIN_SOL_COUPLING_OFF
    """

    MP_COUPLING_LIN_SOL_COUPLING_ON = _clientpb.MP_COUPLING_LIN_SOL_COUPLING_ON
    MP_COUPLING_LIN_SOL_COUPLING_OFF = _clientpb.MP_COUPLING_LIN_SOL_COUPLING_OFF
