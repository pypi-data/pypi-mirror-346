# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABC, ABCMeta, abstractmethod
from dataclasses import dataclass, field
from typing import Any, Optional, TypeVar, Generic, Type
from uuid import uuid4

from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum


Self = TypeVar("Self")


def create_unique_id() -> str:
    return str(uuid4())


T = TypeVar("T")


class ParamGroupWrapper(Generic[T], metaclass=ABCMeta):
    """Base class for all parameter group wrappers."""

    @abstractmethod
    def _to_proto(self) -> T:
        pass

    @abstractmethod
    def _from_proto(self, proto: T) -> None:
        pass

    @classmethod
    def from_proto(cls: Type[Self], proto: T) -> Self:
        _wrapper = cls()
        _wrapper._from_proto(proto)  # type: ignore
        return _wrapper


class CodeRepr:
    def to_code(self) -> str:
        def to_string(val: Any) -> str:
            if "<enum " in str(type(val)):
                str_val = val.__repr__()
                return str_val.split(": ")[0][1:]
            try:
                return val.to_code()
            except:
                return str(val)

        def generate(field: str, val: Any) -> str:
            str_val = to_string(val)
            code = ""
            if "proto." in str(type(val)):
                code += f".{field} = {type(val).__name__}()\n"
                for line in str_val.split("\n"):
                    if line:
                        mod_line = line.replace(":", " =")
                        code += f".{field}.{mod_line}\n"
            elif str_val.endswith("\n"):
                for line in str_val.split("\n"):
                    if line.startswith("new_") or line.startswith("#"):
                        code += f"{line}\n"
                    elif line.startswith(".new_"):
                        code += f"{line[1:]}\n"
                    elif line:
                        code += f".{field}{line}\n"
            elif isinstance(val, str):
                code += f'.{field} = "{str_val}"\n'
            else:
                code += f".{field} = {str_val}\n"
            return code

        if "luminarycloud" in str(type(self)):
            path = (
                str(type(self)).split("'")[1].replace("luminarycloud.params.simulation", "params")
            )
            names = path.split(".")
            if names[-2].endswith("_"):
                path = path.replace(names[-2] + ".", "")
            code = f" = {path}()\n"
        else:
            code = f" = {type(self).__name__}()\n"

        for field, val in vars(self).items():
            if isinstance(val, dict):
                code += f".{field} = {{}}\n"
                for key, value in val.items():
                    code += f"# Create a new {type(value).__name__} instance and insert it.\n"
                    code += generate(f"new_{field}", value)
                    code += f'.{field}["{key}"] = new_{field}\n'
            elif isinstance(val, list):
                if len(val) > 0 and to_string(val[0]).endswith("\n"):
                    code += f".{field} = []\n"
                    for value in val:
                        code += f"# Create a new {type(value).__name__} instance and append it.\n"
                        code += generate(f"new_{field}", value)
                        code += f".{field}.append(new_{field})\n"
                else:
                    code += f".{field} = {to_string(val)}\n"
            else:
                code += generate(field, val)
        return code
