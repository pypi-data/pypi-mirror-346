import abc
from ._async_endpoint import TogglAsyncCachedEndpoint as TogglAsyncCachedEndpoint
from abc import ABC, abstractmethod
from collections.abc import Awaitable, Callable as Callable, Iterable
from datetime import timedelta
from os import PathLike
from pathlib import Path
from toggl_api._exceptions import MissingParentError as MissingParentError
from toggl_api.meta._enums import RequestMethod as RequestMethod
from toggl_api.models import TogglClass as TogglClass
from typing import Any, Generic, TypeVar

T = TypeVar('T', bound=TogglClass)

class TogglAsyncCache(ABC, Generic[T], metaclass=abc.ABCMeta):
    def __init__(self, path: Path | PathLike[str], expire_after: timedelta | int | None = None, parent: TogglAsyncCachedEndpoint[T] | None = None) -> None: ...
    @abstractmethod
    async def load(self) -> Iterable[T]: ...
    async def save(self, entry: list[T] | T, method: RequestMethod) -> None: ...
    @abstractmethod
    async def find(self, pk: int) -> T | None: ...
    @abstractmethod
    async def add(self, *entries: T) -> None: ...
    @abstractmethod
    async def update(self, *entries: T) -> None: ...
    @abstractmethod
    async def delete(self, *entries: T) -> None: ...
    def find_method(self, method: RequestMethod) -> Callable[[Any], Awaitable[Any]] | None: ...
    @property
    @abstractmethod
    def cache_path(self) -> Path: ...
    @property
    def expire_after(self) -> timedelta | None: ...
    @expire_after.setter
    def expire_after(self, value: timedelta | None = None) -> None: ...
    @property
    def parent(self) -> TogglAsyncCachedEndpoint[T]: ...
    @parent.setter
    def parent(self, value: TogglAsyncCachedEndpoint[T] | None) -> None: ...
    @property
    def model(self) -> type[T]: ...
