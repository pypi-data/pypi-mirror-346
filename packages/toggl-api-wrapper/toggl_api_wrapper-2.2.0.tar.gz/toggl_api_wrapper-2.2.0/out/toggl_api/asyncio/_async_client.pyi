from ._async_endpoint import TogglAsyncCachedEndpoint as TogglAsyncCachedEndpoint
from ._async_sqlite_cache import AsyncSqliteCache as AsyncSqliteCache
from _typeshed import Incomplete
from httpx import AsyncClient as AsyncClient, BasicAuth as BasicAuth
from sqlalchemy.engine import ScalarResult as ScalarResult
from sqlalchemy.sql.expression import ColumnElement as ColumnElement
from toggl_api import ClientBody as ClientBody, NamingError as NamingError, TogglClient as TogglClient, TogglWorkspace as TogglWorkspace
from toggl_api.meta import RequestMethod as RequestMethod

log: Incomplete

class AsyncClientEndpoint(TogglAsyncCachedEndpoint[TogglClient]):
    MODEL = TogglClient
    workspace_id: Incomplete
    def __init__(self, workspace_id: int | TogglWorkspace, auth: BasicAuth, cache: AsyncSqliteCache[TogglClient] | None = None, *, client: AsyncClient | None = None, timeout: int = 10, re_raise: bool = False, retries: int = 3) -> None: ...
    async def add(self, body: ClientBody) -> TogglClient: ...
    async def get(self, client_id: int | TogglClient, *, refresh: bool = False) -> TogglClient | None: ...
    async def edit(self, client: TogglClient | int, body: ClientBody) -> TogglClient: ...
    async def delete(self, client: TogglClient | int) -> None: ...
    async def collect(self, body: ClientBody | None = None, *, refresh: bool = False) -> list[TogglClient]: ...
    @property
    def endpoint(self) -> str: ...
