from ._async_endpoint import TogglAsyncCachedEndpoint as TogglAsyncCachedEndpoint
from ._async_sqlite_cache import AsyncSqliteCache as AsyncSqliteCache
from _typeshed import Incomplete
from datetime import date, datetime
from httpx import AsyncClient as AsyncClient, BasicAuth as BasicAuth, Response as Response
from sqlalchemy.engine import ScalarResult as ScalarResult
from sqlalchemy.sql.expression import ColumnElement as ColumnElement
from toggl_api import TogglTracker as TogglTracker, TogglWorkspace as TogglWorkspace, TrackerBody as TrackerBody
from toggl_api._exceptions import DateTimeError as DateTimeError, NamingError as NamingError
from toggl_api._tracker import BulkEditParameter as BulkEditParameter, Edits as Edits
from toggl_api.meta import RequestMethod as RequestMethod
from toggl_api.utility import format_iso as format_iso, get_timestamp as get_timestamp
from typing import Final

log: Incomplete

class AsyncTrackerEndpoint(TogglAsyncCachedEndpoint[TogglTracker]):
    MODEL = TogglTracker
    TRACKER_ALREADY_STOPPED: Final[int]
    TRACKER_NOT_RUNNING: Final[int]
    workspace_id: Incomplete
    def __init__(self, workspace_id: int | TogglWorkspace, auth: BasicAuth, cache: AsyncSqliteCache[TogglTracker] | None = None, *, client: AsyncClient | None = None, timeout: int = 10, re_raise: bool = False, retries: int = 3) -> None: ...
    async def current(self, *, refresh: bool = True) -> TogglTracker | None: ...
    async def collect(self, since: int | datetime | None = None, before: date | None = None, start_date: date | None = None, end_date: date | None = None, *, refresh: bool = False) -> list[TogglTracker]: ...
    async def get(self, tracker_id: int | TogglTracker, *, refresh: bool = False) -> TogglTracker | None: ...
    async def edit(self, tracker: TogglTracker | int, body: TrackerBody, *, meta: bool = False) -> TogglTracker: ...
    async def bulk_edit(self, *trackers: int | TogglTracker, body: TrackerBody) -> Edits: ...
    async def delete(self, tracker: TogglTracker | int) -> None: ...
    async def stop(self, tracker: TogglTracker | int) -> TogglTracker | None: ...
    async def add(self, body: TrackerBody) -> TogglTracker: ...
    @property
    def endpoint(self) -> str: ...
