import abc
from ._async_endpoint import TogglAsyncEndpoint as TogglAsyncEndpoint
from _typeshed import Incomplete
from abc import abstractmethod
from datetime import date
from httpx import AsyncClient as AsyncClient, BasicAuth as BasicAuth, Response as Response, URL
from toggl_api import TogglProject as TogglProject, TogglWorkspace as TogglWorkspace
from toggl_api.meta import RequestMethod as RequestMethod
from toggl_api.reports import PaginatedResult as PaginatedResult, PaginationOptions as PaginationOptions, ReportBody as ReportBody, ReportFormats as ReportFormats
from toggl_api.utility import format_iso as format_iso
from typing import Any, ClassVar, Literal

class AsyncReportEndpoint(TogglAsyncEndpoint[Any], metaclass=abc.ABCMeta):
    BASE_ENDPOINT: ClassVar[URL]
    workspace_id: Incomplete
    def __init__(self, workspace_id: TogglWorkspace | int, auth: BasicAuth, *, client: AsyncClient | None = None, timeout: int = 10, re_raise: bool = False, retries: int = 3) -> None: ...
    @abstractmethod
    async def search_time_entries(self, body: ReportBody, *args: Any, **kwargs: Any) -> Any: ...
    @abstractmethod
    async def export_report(self, body: ReportBody, *args: Any, **kwargs: Any) -> Any: ...

class AsyncSummaryReportEndpoint(AsyncReportEndpoint):
    async def project_summary(self, project: TogglProject | int, start_date: date | str, end_date: date | str) -> dict[str, int]: ...
    async def project_summaries(self, start_date: date | str, end_date: date | str) -> list[dict[str, int]]: ...
    async def search_time_entries(self, body: ReportBody) -> list[dict[str, int]]: ...
    async def export_report(self, body: ReportBody, extension: ReportFormats, *, collapse: bool = False) -> bytes: ...
    @property
    def endpoint(self) -> str: ...

class AsyncDetailedReportEndpoint(AsyncReportEndpoint):
    async def search_time_entries(self, body: ReportBody, pagination: PaginationOptions | None = None, *, hide_amounts: bool = False) -> PaginatedResult[list[dict[str, Any]]]: ...
    async def export_report(self, body: ReportBody, extension: ReportFormats, pagination: PaginationOptions | None = None, *, hide_amounts: bool = False) -> PaginatedResult[bytes]: ...
    async def totals_report(self, body: ReportBody, *, granularity: Literal['day', 'week', 'month'] = 'day', with_graph: bool = False) -> dict[str, int]: ...
    @property
    def endpoint(self) -> str: ...

class AsyncWeeklyReportEndpoint(AsyncReportEndpoint):
    async def search_time_entries(self, body: ReportBody) -> list[dict[str, Any]]: ...
    async def export_report(self, body: ReportBody, extension: ReportFormats) -> bytes: ...
    @property
    def endpoint(self) -> str: ...
