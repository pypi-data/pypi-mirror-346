from ._base_cache import Comparison as Comparison, TogglCache as TogglCache, TogglQuery as TogglQuery
from _typeshed import Incomplete
from datetime import timedelta
from os import PathLike
from pathlib import Path
from sqlalchemy.engine import Engine as Engine
from sqlalchemy.orm import Query as Query
from sqlalchemy.sql.expression import ColumnElement as ColumnElement
from toggl_api.meta import TogglCachedEndpoint as TogglCachedEndpoint
from toggl_api.models import TogglClass as TogglClass
from toggl_api.models._schema import register_tables as register_tables
from typing import Any, TypeVar

T = TypeVar('T', bound=TogglClass)

class SqliteCache(TogglCache[T]):
    database: Incomplete
    metadata: Incomplete
    session: Incomplete
    def __init__(self, path: Path | PathLike[str], expire_after: timedelta | int | None = None, parent: TogglCachedEndpoint[T] | None = None, *, engine: Engine | None = None) -> None: ...
    def commit(self) -> None: ...
    def load(self) -> Query[T]: ...
    def add(self, *entries: T) -> None: ...
    def update(self, *entries: T) -> None: ...
    def delete(self, *entries: T) -> None: ...
    def find(self, query: T | dict[str, Any]) -> T | None: ...
    def query(self, *query: TogglQuery[Any], distinct: bool = False) -> Query[T]: ...
    @property
    def cache_path(self) -> Path: ...
    def __del__(self) -> None: ...
