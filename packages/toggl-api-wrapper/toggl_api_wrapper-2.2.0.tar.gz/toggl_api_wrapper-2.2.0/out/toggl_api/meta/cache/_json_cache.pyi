import json
from ._base_cache import Comparison as Comparison, TogglCache as TogglCache, TogglQuery as TogglQuery
from _typeshed import Incomplete
from collections.abc import Iterable
from dataclasses import dataclass, field
from datetime import timedelta
from os import PathLike
from pathlib import Path
from toggl_api.__about__ import __version__ as __version__
from toggl_api.meta import RequestMethod as RequestMethod, TogglCachedEndpoint as TogglCachedEndpoint
from toggl_api.models import TogglClass as TogglClass, TogglClient as TogglClient, TogglProject as TogglProject, TogglTag as TogglTag, TogglTracker as TogglTracker, TogglWorkspace as TogglWorkspace, as_dict_custom as as_dict_custom
from toggl_api.utility import parse_iso as parse_iso
from typing import Any, Final, Generic, TypeVar

log: Incomplete
T = TypeVar('T', bound=TogglClass)

@dataclass
class JSONSession(Generic[T]):
    max_length: int = field(default=10000)
    version: str = field(init=False, default=__version__)
    data: list[T] = field(default_factory=list)
    modified: int = field(init=False, default=0)
    def refresh(self, path: Path) -> bool: ...
    def commit(self, path: Path) -> None: ...
    def load(self, path: Path) -> None: ...
    def process_data(self, data: list[T]) -> list[T]: ...

class JSONCache(TogglCache[T]):
    session: JSONSession[T]
    def __init__(self, path: Path | PathLike[str], expire_after: timedelta | int | None = None, parent: TogglCachedEndpoint[T] | None = None, *, max_length: int = 10000) -> None: ...
    def commit(self) -> None: ...
    def save(self, update: Iterable[T] | T, method: RequestMethod) -> None: ...
    def load(self) -> list[T]: ...
    def find(self, entry: T | dict[str, int], **_kwargs: Any) -> T | None: ...
    def add(self, *entries: T) -> None: ...
    def update(self, *entries: T) -> None: ...
    def delete(self, *entries: T) -> None: ...
    def query(self, *query: TogglQuery[Any], distinct: bool = False) -> list[T]: ...
    @property
    def cache_path(self) -> Path: ...
    @property
    def parent(self) -> TogglCachedEndpoint[T]: ...
    @parent.setter
    def parent(self, parent: TogglCachedEndpoint[T] | None) -> None: ...

class CustomEncoder(json.encoder.JSONEncoder):
    def default(self, obj: Any) -> Any: ...

class CustomDecoder(json.decoder.JSONDecoder):
    MATCH_DICT: Final[dict[str, type[TogglClass]]]
    def decode(self, obj: Any) -> Any: ...
