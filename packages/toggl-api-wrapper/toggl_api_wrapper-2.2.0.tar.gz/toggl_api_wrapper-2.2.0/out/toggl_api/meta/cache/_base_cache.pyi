import abc
import enum
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Iterable, Sequence
from dataclasses import dataclass, field
from datetime import timedelta
from os import PathLike
from pathlib import Path
from toggl_api._exceptions import MissingParentError as MissingParentError
from toggl_api.meta import TogglCachedEndpoint as TogglCachedEndpoint
from toggl_api.meta._enums import RequestMethod as RequestMethod
from toggl_api.models import TogglClass as TogglClass
from typing import Any, Generic, Protocol, TypeVar

class Comparison(enum.Enum):
    EQUAL = ...
    LESS_THEN = ...
    LESS_THEN_OR_EQUAL = ...
    GREATER_THEN = ...
    GREATER_THEN_OR_EQUAL = ...
T = TypeVar('T')
log: Incomplete

@dataclass
class TogglQuery(Generic[T]):
    key: str = field()
    value: T | Sequence[T] = field()
    comparison: Comparison = field(default=Comparison.EQUAL)
    def __post_init__(self) -> None: ...

class CacheCallable(Protocol, Generic[_T_contra]):
    def __call__(self, *entries: _T_contra) -> None: ...
TC = TypeVar('TC', bound=TogglClass)

class TogglCache(ABC, Generic[TC], metaclass=abc.ABCMeta):
    def __init__(self, path: Path | PathLike[str], expire_after: timedelta | int | None = None, parent: TogglCachedEndpoint[TC] | None = None) -> None: ...
    @abstractmethod
    def commit(self) -> None: ...
    @abstractmethod
    def load(self) -> Iterable[TC]: ...
    def save(self, entry: Iterable[TC] | TC, method: RequestMethod) -> None: ...
    @abstractmethod
    def find(self, entry: TC | dict[str, Any]) -> TC | None: ...
    @abstractmethod
    def add(self, *entries: TC) -> None: ...
    @abstractmethod
    def update(self, *entries: TC) -> None: ...
    @abstractmethod
    def delete(self, *entries: TC) -> None: ...
    @abstractmethod
    def query(self, *query: TogglQuery[Any], distinct: bool = False) -> Iterable[TC]: ...
    def find_method(self, method: RequestMethod) -> CacheCallable[TC]: ...
    @property
    @abstractmethod
    def cache_path(self) -> Path: ...
    @property
    def expire_after(self) -> timedelta | None: ...
    @expire_after.setter
    def expire_after(self, value: timedelta | None = None) -> None: ...
    @property
    def parent(self) -> TogglCachedEndpoint[TC]: ...
    @parent.setter
    def parent(self, value: TogglCachedEndpoint[TC] | None) -> None: ...
    @property
    def model(self) -> type[TC]: ...
