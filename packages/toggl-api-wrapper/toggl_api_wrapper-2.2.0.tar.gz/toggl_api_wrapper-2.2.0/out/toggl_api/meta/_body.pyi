import abc
from abc import abstractmethod
from collections.abc import Iterator, Mapping
from dataclasses import dataclass
from typing import Any

@dataclass
class BaseBody(Mapping[str, Any], metaclass=abc.ABCMeta):
    @abstractmethod
    def format(self, endpoint: str, **body: Any) -> dict[str, Any]: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __delitem__(self, key: str) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __len__(self) -> int: ...
