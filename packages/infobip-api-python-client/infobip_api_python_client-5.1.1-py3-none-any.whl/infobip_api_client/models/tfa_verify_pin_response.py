# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class TfaVerifyPinResponse(BaseModel):
    """
    TfaVerifyPinResponse
    """  # noqa: E501

    attempts_remaining: Optional[StrictInt] = Field(
        default=None,
        description="Number of remaining PIN attempts.",
        alias="attemptsRemaining",
    )
    msisdn: Optional[StrictStr] = Field(
        default=None,
        description="Phone number (`MSISDN`) to which the 2FA message was sent.",
    )
    pin_error: Optional[StrictStr] = Field(
        default=None,
        description="Indicates whether an error has occurred during PIN verification.",
        alias="pinError",
    )
    pin_id: Optional[StrictStr] = Field(
        default=None, description="Sent PIN code ID.", alias="pinId"
    )
    verified: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the phone number (`MSISDN`) was successfully verified.",
    )
    __properties: ClassVar[List[str]] = [
        "attemptsRemaining",
        "msisdn",
        "pinError",
        "pinId",
        "verified",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TfaVerifyPinResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TfaVerifyPinResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "attemptsRemaining": obj.get("attemptsRemaining"),
                "msisdn": obj.get("msisdn"),
                "pinError": obj.get("pinError"),
                "pinId": obj.get("pinId"),
                "verified": obj.get("verified"),
            }
        )
        return _obj
