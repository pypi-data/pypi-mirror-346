# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class CallsIvrData(BaseModel):
    """
    Fields representing details about IVR, if outbound IVR is being used. If the call was not IVR, the field will be null.
    """  # noqa: E501

    scenario_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that uniquely identifies the IVR scenario.",
        alias="scenarioId",
    )
    scenario_name: Optional[StrictStr] = Field(
        default=None, description="Name of IVR scenario.", alias="scenarioName"
    )
    collected_dtmfs: Optional[StrictStr] = Field(
        default=None,
        description="JSON object showing the result of every CollectAction in IVR scenario in the form of key/value pairs, where the key is CollectAction variable and pair is collected DTMF.",
        alias="collectedDtmfs",
    )
    collected_mapped_dtmfs: Optional[StrictStr] = Field(
        default=None,
        description="JSON object showing the result of every CollectAction in IVR scenario with the mapped, meaningful, values you defined in CollectAction `mappedValues` option.",
        alias="collectedMappedDtmfs",
    )
    spoken_input: Optional[StrictStr] = Field(
        default=None,
        description="JSON object showing the result of every CaptureSpeech action with full text spoken by the user.",
        alias="spokenInput",
    )
    matched_spoken_input: Optional[StrictStr] = Field(
        default=None,
        description="JSON object showing the result of every CaptureSpeech action with only the key phrases that matched user spoken input.",
        alias="matchedSpokenInput",
    )
    __properties: ClassVar[List[str]] = [
        "scenarioId",
        "scenarioName",
        "collectedDtmfs",
        "collectedMappedDtmfs",
        "spokenInput",
        "matchedSpokenInput",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallsIvrData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallsIvrData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "scenarioId": obj.get("scenarioId"),
                "scenarioName": obj.get("scenarioName"),
                "collectedDtmfs": obj.get("collectedDtmfs"),
                "collectedMappedDtmfs": obj.get("collectedMappedDtmfs"),
                "spokenInput": obj.get("spokenInput"),
                "matchedSpokenInput": obj.get("matchedSpokenInput"),
            }
        )
        return _obj
