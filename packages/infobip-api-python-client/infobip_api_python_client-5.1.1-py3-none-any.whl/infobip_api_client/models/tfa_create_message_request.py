# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from infobip_api_client.models.tfa_language import TfaLanguage
from infobip_api_client.models.tfa_pin_type import TfaPinType
from infobip_api_client.models.tfa_regional_options import TfaRegionalOptions
from typing import Optional, Set
from typing_extensions import Self


class TfaCreateMessageRequest(BaseModel):
    """
    TfaCreateMessageRequest
    """  # noqa: E501

    language: Optional[TfaLanguage] = None
    message_text: StrictStr = Field(
        description="Content of the message being sent which contains at minimum one placeholder for a PIN code (`{{pin}}`). Placeholder format is `{{placeholderName}}`.",
        alias="messageText",
    )
    pin_length: Optional[StrictInt] = Field(
        default=None, description="PIN code length.", alias="pinLength"
    )
    pin_type: TfaPinType = Field(alias="pinType")
    regional: Optional[TfaRegionalOptions] = None
    repeat_dtmf: Optional[StrictStr] = Field(
        default=None,
        description="If the PIN is sent as a voice message, the DTMF code allows the recipient to replay the message.",
        alias="repeatDTMF",
    )
    sender_id: Optional[StrictStr] = Field(
        default=None,
        description="The name that will appear as the sender of the 2FA message (Example: CompanyName).",
        alias="senderId",
    )
    speech_rate: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The speed of narration for messages sent as voice. Supported range is from `0.5` to `2`.",
        alias="speechRate",
    )
    voice_name: Optional[StrictStr] = Field(
        default=None,
        description="Defines the voice that will be used for the chosen language (example: Joanna). For each supported language, we may offer different voices (learn more [here](https://www.infobip.com/docs/voice-and-video/reference#text-to-speech-languages)). You can use this [method](https://www.infobip.com/docs/api/channels/voice/voice-message/get-voices) to retrieve all voices for the given language. If not defined, it will default to the standard voice for the selected language (if available). If the standard voice is not available, the request will fail. To avoid that, you can choose one of the neural voices (charges will apply).",
        alias="voiceName",
    )
    __properties: ClassVar[List[str]] = [
        "language",
        "messageText",
        "pinLength",
        "pinType",
        "regional",
        "repeatDTMF",
        "senderId",
        "speechRate",
        "voiceName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TfaCreateMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of regional
        if self.regional:
            _dict["regional"] = self.regional.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TfaCreateMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "language": obj.get("language"),
                "messageText": obj.get("messageText"),
                "pinLength": obj.get("pinLength"),
                "pinType": obj.get("pinType"),
                "regional": TfaRegionalOptions.from_dict(obj["regional"])
                if obj.get("regional") is not None
                else None,
                "repeatDTMF": obj.get("repeatDTMF"),
                "senderId": obj.get("senderId"),
                "speechRate": obj.get("speechRate"),
                "voiceName": obj.get("voiceName"),
            }
        )
        return _obj
