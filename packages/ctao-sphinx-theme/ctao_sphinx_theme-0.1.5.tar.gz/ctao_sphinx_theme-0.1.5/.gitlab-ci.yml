workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "pipeline"

stages:
  - static-checks
  - test
  - deploy

static:
  stage: static-checks
  image: "python:3.12"

  before_script:
    - apt update && apt install -y --no-install-recommends git
    - python --version
    - pip install pre-commit

  script:
    - pre-commit run --all-files


build-docs:
  stage: test
  image: "python:3.12"

  before_script:
    - python --version
    - pip install .
    - python -m ctao_sphinx_theme

  script:
    - make -C docs html

  artifacts:
    paths:
      - docs/build/html

build-docs-with-branding:
  stage: test
  image: "python:3.12"

  before_script:
    - python --version
    - pip install .

  script:
    - sed -i -e 's|# "branding"|"branding"|' docs/conf.py
    - make -C docs html
    - grep ctao_acada.png docs/build/html/index.html


pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "pipeline"
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE != "pipeline"
  image: "python:3.12"
  needs:
    - job: build-docs
      artifacts: true
  before_script:
    - pip install git+https://gitlab.cta-observatory.org/cta-computing/common/gitlab-multi-version-sphinx/
  script:
    - gitlab_multi_version_sphinx -v
    - find public -maxdepth 1
  artifacts:
    paths:
      - public
  environment: production

# we use the sphinx theme as test case for gitlab-multi-version-sphinx
# merge requests there trigger the build here to check that it works
# it is the same as above but installs the MR commit of the tool and
# does not deploy to pages
test-multi-version-sphinx:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  image: "python:3.12"
  needs:
    - job: build-docs
      artifacts: true
  before_script:
    - echo ${MULTI_VERSION_REF}
    - pip install git+https://gitlab.cta-observatory.org/cta-computing/common/gitlab-multi-version-sphinx@${MULTI_VERSION_REF}
  script:
    - gitlab_multi_version_sphinx -v
    - find public -maxdepth 1
    - cat public/_redirects
    - cat public/versions.json
    - ls public/latest/index.html

pypi:
  image: "python:3.12"
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install -U twine build
    - python -m build
    - twine upload dist/*
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: "__token__"
