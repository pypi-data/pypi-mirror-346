[project]
name = "diffusion-prompt-embedder"
version = "0.1.0"
description = "A Python library for parsing and processing prompts with support for embedding and tokenization"
readme = "README.md"
authors = [{ name = "Jianqi Pan", email = "jannchie@gmail.com" }]
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["nlp", "prompt", "tokenization", "embedding", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = []

[project.urls]
"Homepage" = "https://github.com/jannchie/diffusion-prompt-embedder"
"Bug Tracker" = "https://github.com/jannchie/diffusion-prompt-embedder/issues"
"Documentation" = "https://github.com/jannchie/diffusion-prompt-embedder#readme"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/diffusion_prompt_embedder"]

[tool.ruff]
line-length = 300
select = ["ALL"]

ignore = [
    "PGH",
    "RUF003",
    "BLE001",
    "ERA001",
    "FIX002",
    "TD002",
    "TD003",
    "D",
    "PLR2004",
    "INP001",
    "N812",
    "FBT003",
    "S311",
    "ANN401",
    "S105",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101"]

[project.optional-dependencies]
torch = ["torch>=2.0.0"]
transformers = ["transformers>=4.51.3"]
all = ["torch>=2.0.0", "transformers>=4.51.3"]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "torch>=2.0.0",
    "transformers>=4.51.3",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "torch>=2.0.0",
    "transformers>=4.51.3",
]

[tool.pytest.ini_options]
addopts = "--cov=diffusion_prompt_embedder --cov-report=term --cov-report=xml --tb=short"
testpaths = ["tests"]

[tool.coverage.run]
source = ["diffusion_prompt_embedder"]
omit = ["*/__pycache__/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
