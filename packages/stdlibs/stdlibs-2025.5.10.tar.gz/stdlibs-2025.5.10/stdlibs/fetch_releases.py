# Copyright 2022 Amethyst Reese
# Licensed under the MIT license

import re
from pathlib import Path
from pprint import pprint
from typing import Dict, List
from urllib.request import urlopen

import toml
from packaging.version import Version

BASE_DIR = (Path.cwd() / Path(__file__)).parent
RELEASES_FILE = BASE_DIR / "releases.toml"

BASE_URL = "https://www.python.org/ftp/python/"

OVERLY_SIMPLISTIC_LINK_RE = re.compile(r'href="(.*?)"')
DOTTED_VERSION_DIR = re.compile(r"(\d+)\.(\d+)(?:\.(\d+))?/")
PYTHON_ARCHIVE_RE = re.compile(r"Python-([\d.abrc]+)\.tgz")


def get_links(url: str) -> List[str]:
    body = urlopen(url).read().decode()
    return OVERLY_SIMPLISTIC_LINK_RE.findall(body)


def regen_urls() -> None:
    """Writes out a new releases.toml, ignoring what might be there now."""

    # Something like "2.3": Version("2.3.12")
    max_version_dirs: Dict[str, Version] = {}
    for subdir in get_links(BASE_URL):
        if m := DOTTED_VERSION_DIR.fullmatch(subdir):
            v = m.group(1) + "." + m.group(2)
            vo = Version(subdir[:-1])
            if vo < Version("2.3"):
                continue

            if v not in max_version_dirs or vo > max_version_dirs[v]:
                max_version_dirs[v] = vo

    new_urls: Dict[Version, str] = {}
    for x, y in max_version_dirs.items():
        tars = []
        for file in get_links(f"{BASE_URL}{y}/"):
            if m := PYTHON_ARCHIVE_RE.fullmatch(file):
                tars.append((Version(m.group(1)), f"{BASE_URL}{y}/{file}"))
        new_urls[Version(x)] = max(tars)[1]

    pprint(new_urls)

    with open(RELEASES_FILE, "w") as f:
        f.write("# Generated by stdlibs/fetch_releases.py\n")
        f.write("# This file is only used by stdlibs/fetch.py\n")
        f.write("\n")

        toml.dump({str(vo): url for vo, url in sorted(new_urls.items())}, f)


if __name__ == "__main__":
    regen_urls()
