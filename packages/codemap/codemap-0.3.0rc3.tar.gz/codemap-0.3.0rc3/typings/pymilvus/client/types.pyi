"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from typing import Any, ClassVar, Dict, List, Optional, TypeVar, Union
from pymilvus.grpc_gen import common_pb2, milvus_pb2 as milvus_types, rg_pb2

Status = TypeVar("Status")
ConsistencyLevel = common_pb2.ConsistencyLevel
class OmitZeroDict(dict):
    def omit_zero_len(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Status:
    """
    :attribute code: int (optional) default as ok

    :attribute message: str (optional) current status message
    """
    SUCCESS = ...
    UNEXPECTED_ERROR = ...
    CONNECT_FAILED = ...
    PERMISSION_DENIED = ...
    COLLECTION_NOT_EXISTS = ...
    ILLEGAL_ARGUMENT = ...
    ILLEGAL_RANGE = ...
    ILLEGAL_DIMENSION = ...
    ILLEGAL_INDEX_TYPE = ...
    ILLEGAL_COLLECTION_NAME = ...
    ILLEGAL_TOPK = ...
    ILLEGAL_ROWRECORD = ...
    ILLEGAL_VECTOR_ID = ...
    ILLEGAL_SEARCH_RESULT = ...
    FILE_NOT_FOUND = ...
    META_FAILED = ...
    CACHE_FAILED = ...
    CANNOT_CREATE_FOLDER = ...
    CANNOT_CREATE_FILE = ...
    CANNOT_DELETE_FOLDER = ...
    CANNOT_DELETE_FILE = ...
    BUILD_INDEX_ERROR = ...
    ILLEGAL_NLIST = ...
    ILLEGAL_METRIC_TYPE = ...
    OUT_OF_MEMORY = ...
    INDEX_NOT_EXIST = ...
    EMPTY_COLLECTION = ...
    def __init__(self, code: int = ..., message: str = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __eq__(self, other: Union[int, Status]) -> bool:
        """Make Status comparable with self by code"""
        ...
    
    def OK(self): # -> bool:
        ...
    


class DataType(IntEnum):
    """
    String of DataType is str of its value, e.g.: str(DataType.BOOL) == "1"
    """
    NONE = ...
    BOOL = ...
    INT8 = ...
    INT16 = ...
    INT32 = ...
    INT64 = ...
    FLOAT = ...
    DOUBLE = ...
    STRING = ...
    VARCHAR = ...
    ARRAY = ...
    JSON = ...
    GEOMETRY = ...
    BINARY_VECTOR = ...
    FLOAT_VECTOR = ...
    FLOAT16_VECTOR = ...
    BFLOAT16_VECTOR = ...
    SPARSE_FLOAT_VECTOR = ...
    UNKNOWN = ...
    def __str__(self) -> str:
        ...
    


class FunctionType(IntEnum):
    UNKNOWN = ...
    BM25 = ...
    TEXTEMBEDDING = ...


class RangeType(IntEnum):
    LT = ...
    LTE = ...
    EQ = ...
    GT = ...
    GTE = ...
    NE = ...


class IndexType(IntEnum):
    INVALID = ...
    FLAT = ...
    IVFLAT = ...
    IVF_SQ8 = ...
    RNSG = ...
    IVF_SQ8H = ...
    IVF_PQ = ...
    HNSW = ...
    ANNOY = ...
    IVF_FLAT = ...
    IVF_SQ8_H = ...
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class MetricType(IntEnum):
    INVALID = ...
    L2 = ...
    IP = ...
    HAMMING = ...
    JACCARD = ...
    TANIMOTO = ...
    SUBSTRUCTURE = ...
    SUPERSTRUCTURE = ...
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class IndexState(IntEnum):
    IndexStateNone = ...
    Unissued = ...
    InProgress = ...
    Finished = ...
    Failed = ...
    Deleted = ...


class PlaceholderType(IntEnum):
    NoneType = ...
    BinaryVector = ...
    FloatVector = ...
    FLOAT16_VECTOR = ...
    BFLOAT16_VECTOR = ...
    SparseFloatVector = ...
    VARCHAR = ...


class State(IntEnum):
    """
    UndefiedState:  Unknown
    Executing:      indicating this compaction has undone plans.
    Completed:      indicating all the plans of this compaction are done,
                    no matter successful or not.
    """
    UndefiedState = ...
    Executing = ...
    Completed = ...
    @staticmethod
    def new(s: int): # -> Literal[State.Executing, State.Completed, State.UndefiedState]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class LoadState(IntEnum):
    """
    NotExist: collection or partition isn't existed
    NotLoad:  collection or partition isn't loaded
    Loading:  collection or partition is loading
    Loaded:   collection or partition is loaded
    """
    NotExist = ...
    NotLoad = ...
    Loading = ...
    Loaded = ...
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class CompactionState:
    """
    in_executing: number of plans in executing
    in_timeout:   number of plans failed of timeout
    completed:    number of plans successfully completed
    """
    def __init__(self, compaction_id: int, state: State, in_executing: int, in_timeout: int, completed: int) -> None:
        ...
    
    @property
    def state_name(self): # -> Literal['UndefiedState', 'Executing', 'Completed']:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Plan:
    def __init__(self, sources: list, target: int) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class CompactionPlans:
    def __init__(self, compaction_id: int, state: int) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


def cmp_consistency_level(l1: Union[str, int], l2: Union[str, int]): # -> bool:
    ...

def get_consistency_level(consistency_level: Union[str, int]): # -> int:
    ...

class Shard:
    def __init__(self, channel_name: str, shard_nodes: list, shard_leader: int) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def channel_name(self) -> str:
        ...
    
    @property
    def shard_nodes(self): # -> set[Any]:
        ...
    
    @property
    def shard_leader(self) -> int:
        ...
    


class Group:
    """
    This class represents replica info in orm format api, which is deprecated in milvus client api.
    use `ReplicaInfo` instead.
    """
    def __init__(self, group_id: int, shards: List[str], group_nodes: List[tuple], resource_group: str, num_outbound_node: dict) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def id(self): # -> int:
        ...
    
    @property
    def group_nodes(self): # -> tuple[tuple[Any, ...], ...]:
        ...
    
    @property
    def shards(self): # -> List[str]:
        ...
    
    @property
    def resource_group(self): # -> str:
        ...
    
    @property
    def num_outbound_node(self): # -> dict[Any, Any]:
        ...
    


class Replica:
    """
    This class represents replica info list in orm format api,
    which is deprecated in milvus client api.
    use `List[ReplicaInfo]` instead.

    Replica groups:
        - Group: <group_id:2>, <group_nodes:(1, 2, 3)>,
            <shards:[Shard: <shard_id:10>,
                <channel_name:channel-1>,
                <shard_leader:1>,
                <shard_nodes:(1, 2, 3)>]>
        - Group: <group_id:2>, <group_nodes:(1, 2, 3)>,
            <shards:[Shard:
                <shard_id:10>,
                <channel_name:channel-1>,
                <shard_leader:1>,
                <shard_nodes:(1, 2, 3)>]>
    """
    def __init__(self, groups: list) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def groups(self): # -> list[Any]:
        ...
    


class ReplicaInfo:
    def __init__(self, replica_id: int, shards: List[str], nodes: List[tuple], resource_group: str, num_outbound_node: dict) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def id(self): # -> int:
        ...
    
    @property
    def group_nodes(self): # -> tuple[tuple[Any, ...], ...]:
        ...
    
    @property
    def shards(self): # -> List[str]:
        ...
    
    @property
    def resource_group(self): # -> str:
        ...
    
    @property
    def num_outbound_node(self): # -> dict[Any, Any]:
        ...
    


class BulkInsertState:
    """enum states of bulk insert task"""
    ImportPending = ...
    ImportFailed = ...
    ImportStarted = ...
    ImportPersisted = ...
    ImportCompleted = ...
    ImportFailedAndCleaned = ...
    ImportUnknownState = ...
    FAILED_REASON = ...
    IMPORT_FILES = ...
    IMPORT_COLLECTION = ...
    IMPORT_PARTITION = ...
    IMPORT_PROGRESS = ...
    state_2_state: ClassVar[Dict] = ...
    state_2_name: ClassVar[Dict] = ...
    def __init__(self, task_id: int, state: State, row_count: int, id_ranges: list, infos: Dict, create_ts: int) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def task_id(self): # -> int:
        """
        Return unique id of this task.
        """
        ...
    
    @property
    def row_count(self): # -> int:
        """
        If the task is finished, this value is the number of rows imported.
        If the task is not finished, this value is the number of rows parsed.
        """
        ...
    
    @property
    def state(self):
        ...
    
    @property
    def state_name(self) -> str:
        ...
    
    @property
    def id_ranges(self): # -> list[Any]:
        """
        auto generated id ranges if the primary key is auto generated

        the id list of response is id ranges
        for example, if the response return [1, 100, 200, 250]
        the full id list should be [1, 2, 3 ... , 99, 100, 200, 201, 202 ... , 249, 250]
        """
        ...
    
    @property
    def ids(self): # -> list[Any]:
        """
        auto generated ids if the primary key is auto generated

        the id list of response is id ranges
        for example, if the response return [1, 100, 200, 250], the id ranges: [1,100),[200,250)
        the full id list should be [1, 2, 3 ... , 99, 200, 201, 202 ... , 249]
        """
        ...
    
    @property
    def infos(self): # -> dict[Any, Any]:
        """more informations about the task, progress percentage, file path, failed reason, etc."""
        ...
    
    @property
    def failed_reason(self):
        """failed reason of the bulk insert task."""
        ...
    
    @property
    def files(self):
        """data files of the bulk insert task."""
        ...
    
    @property
    def collection_name(self):
        """target collection's name of the bulk insert task."""
        ...
    
    @property
    def partition_name(self):
        """target partition's name of the bulk insert task."""
        ...
    
    @property
    def create_timestamp(self): # -> int:
        """the integer timestamp when this task is created."""
        ...
    
    @property
    def create_time_str(self): # -> str:
        """A readable string converted from the timestamp when this task is created."""
        ...
    
    @property
    def progress(self): # -> int:
        """working progress percent value."""
        ...
    


class GrantItem:
    def __init__(self, entity: Any) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def object(self): # -> Any:
        ...
    
    @property
    def object_name(self): # -> Any:
        ...
    
    @property
    def db_name(self): # -> Any:
        ...
    
    @property
    def role_name(self): # -> Any:
        ...
    
    @property
    def grantor_name(self): # -> Any:
        ...
    
    @property
    def privilege(self): # -> Any:
        ...
    
    def __iter__(self): # -> Generator[tuple[Literal['object_type'], Any] | tuple[Literal['object_name'], Any] | tuple[Literal['db_name'], Any] | tuple[Literal['role_name'], Any] | tuple[Literal['privilege'], Any] | tuple[Literal['grantor_name'], Any], Any, None]:
        ...
    


class GrantInfo:
    """
    GrantInfo groups:
    - GrantItem: <object:Collection>, <object_name:foo>, <role_name:x>,
        <grantor_name:root>, <privilege:Load>
    - GrantItem: <object:Global>, <object_name:*>, <role_name:x>,
        <grantor_name:root>, <privilege:CreateCollection>
    """
    def __init__(self, entities: List[milvus_types.RoleEntity]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def groups(self): # -> list[Any]:
        ...
    


class PrivilegeGroupItem:
    def __init__(self, privilege_group: str, privileges: List[milvus_types.PrivilegeEntity]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def privilege_group(self): # -> str:
        ...
    
    @property
    def privileges(self): # -> tuple[Any, ...]:
        ...
    


class PrivilegeGroupInfo:
    """
    PrivilegeGroupInfo groups:
    - PrivilegeGroupItem: <privilege_group:group>, <privileges:('Load', 'CreateCollection')>
    """
    def __init__(self, results: List[milvus_types.PrivilegeGroupInfo]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def groups(self): # -> list[Any]:
        ...
    


class UserItem:
    def __init__(self, username: str, entities: List[milvus_types.RoleEntity]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def username(self): # -> str:
        ...
    
    @property
    def roles(self): # -> tuple[Any, ...]:
        ...
    


class UserInfo:
    """
    UserInfo groups:
    - UserItem: <username:root>, <roles:('admin', 'public')>
    """
    def __init__(self, results: List[milvus_types.UserResult]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def groups(self): # -> list[Any]:
        ...
    


class RoleItem:
    def __init__(self, role_name: str, entities: List[milvus_types.UserEntity]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def role_name(self): # -> str:
        ...
    
    @property
    def users(self): # -> tuple[Any, ...]:
        ...
    


class RoleInfo:
    """
    RoleInfo groups:
    - UserItem: <role_name:admin>, <users:('root',)>
    """
    def __init__(self, results: List[milvus_types.RoleResult]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def groups(self): # -> list[Any]:
        ...
    


class ResourceGroupInfo:
    def __init__(self, resource_group: Any) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def name(self): # -> Any:
        ...
    
    @property
    def capacity(self): # -> Any:
        ...
    
    @property
    def num_available_node(self): # -> Any:
        ...
    
    @property
    def num_loaded_replica(self): # -> Any:
        ...
    
    @property
    def num_outgoing_node(self): # -> Any:
        ...
    
    @property
    def num_incoming_node(self): # -> Any:
        ...
    
    @property
    def config(self): # -> Any:
        ...
    
    @property
    def nodes(self): # -> list[NodeInfo]:
        ...
    


class NodeInfo:
    """
    Represents information about a node in the system.
    Attributes:
        node_id (int): The ID of the node.
        address (str): The ip address of the node.
        hostname (str): The hostname of the node.
    Example:
        NodeInfo(
            node_id=1,
            address="127.0.0.1",
            hostname="localhost",
        )
    """
    def __init__(self, info: Any) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def node_id(self) -> int:
        ...
    
    @property
    def address(self) -> str:
        ...
    
    @property
    def hostname(self) -> str:
        ...
    


ResourceGroupConfig = rg_pb2.ResourceGroupConfig
ResourceGroupLimit = rg_pb2.ResourceGroupLimit
ResourceGroupTransfer = rg_pb2.ResourceGroupTransfer
class ExtraList(list):
    """
    A list that can hold extra information.
    Attributes:
        extra (dict): The extra information of the list.
    Example:
        ExtraList([1, 2, 3], extra={"total": 3})
    """
    def __init__(self, *args, extra: Optional[Dict] = ..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        """Only print at most 10 query results"""
        ...
    
    __repr__ = ...


def get_cost_from_status(status: Optional[common_pb2.Status] = ...): # -> int:
    ...

def get_cost_extra(status: Optional[common_pb2.Status] = ...): # -> dict[str, int]:
    ...

class DatabaseInfo:
    """
    Represents the information of a database.
    Atributes:
        name (str): The name of the database.
        properties (dict): The properties of the database.
    Example:
        DatabaseInfo(name="test_db", id=1, properties={"key": "value"})
    """
    @property
    def name(self) -> str:
        ...
    
    @property
    def properties(self) -> Dict:
        ...
    
    def __init__(self, info: Any) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def to_dict(self) -> Dict[str, Any]:
        """Converts the DatabaseInfo instance to a dictionary."""
        ...
    


class AnalyzeToken:
    def __init__(self, token: milvus_types.AnalyzerToken, with_hash: bool = ..., with_detail: bool = ...) -> None:
        ...
    
    @property
    def token(self): # -> str:
        ...
    
    @property
    def start_offset(self): # -> str:
        ...
    
    @property
    def end_offset(self): # -> str:
        ...
    
    @property
    def position(self): # -> str:
        ...
    
    @property
    def position_length(self): # -> str:
        ...
    
    @property
    def hash(self): # -> str:
        ...
    
    def __getitem__(self, key: str): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...


class AnalyzeResult:
    def __init__(self, info: milvus_types.AnalyzerResult, with_hash: bool = ..., with_detail: bool = ...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...


