"""
This type stub file was generated by pyright.
"""

from typing import Dict, Optional, TypeVar

Index = TypeVar("Index")
Collection = TypeVar("Collection")
class Index:
    def __init__(self, collection: Collection, field_name: str, index_params: Dict, **kwargs) -> Index:
        """Creates index on a specified field according to the index parameters.

        Args:
            collection(Collection): The collection in which the index is created
            field_name(str): The name of the field to create an index for.
            index_params(dict): Indexing parameters.
            kwargs:
                * *index_name* (``str``) --
                  The name of index which will be created. If no index name is specified,
                  default index name will be used.

        Raises:
            MilvusException: If anything goes wrong.

        Examples:
            >>> from pymilvus import *
            >>> from pymilvus.schema import *
            >>> from pymilvus.types import DataType
            >>> connections.connect()
            <pymilvus.client.stub.Milvus object at 0x7fac15e53470>
            >>> field1 = FieldSchema("int64", DataType.INT64, is_primary=True)
            >>> field2 = FieldSchema("fvec", DataType.FLOAT_VECTOR, is_primary=False, dim=128)
            >>> schema = CollectionSchema(fields=[field1, field2])
            >>> collection = Collection(name='test_collection', schema=schema)
            >>> # insert some data
            >>> index_params = {
            ...     "index_type": "IVF_FLAT",
            ...     "metric_type": "L2",
            ...     "params": {"nlist": 128}}
            >>> index = Index(collection, "fvec", index_params)
            >>> index.params
            {'index_type': 'IVF_FLAT', 'metric_type': 'L2', 'params': {'nlist': 128}}
            >>> index.collection_name
            test_collection
            >>> index.field_name
            fvec
            >>> index.drop()
        """
        ...
    
    @property
    def params(self) -> dict:
        """dict: The index parameters"""
        ...
    
    @property
    def collection_name(self) -> str:
        """str: The corresponding collection name"""
        ...
    
    @property
    def field_name(self) -> str:
        """str: The corresponding field name."""
        ...
    
    @property
    def index_name(self) -> str:
        """str: The corresponding index name."""
        ...
    
    def __eq__(self, other: Index) -> bool:
        """The order of the fields of index must be consistent."""
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        """Put collection name, field name and index params into dict."""
        ...
    
    def drop(self, timeout: Optional[float] = ..., **kwargs): # -> None:
        """Drop an index and its corresponding index files.

        Args:
            timeout(float, optional): An optional duration of time in seconds to allow
                for the RPC. When timeout is set to None, client waits until server response
                or error occur
        """
        ...
    


