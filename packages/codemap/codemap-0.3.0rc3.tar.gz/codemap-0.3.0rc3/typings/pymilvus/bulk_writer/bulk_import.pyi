"""
This type stub file was generated by pyright.
"""

import requests
from typing import List, Optional, Union

logger = ...
def bulk_import(url: str, collection_name: str, db_name: str = ..., files: Optional[List[List[str]]] = ..., object_url: str = ..., cluster_id: str = ..., api_key: str = ..., access_key: str = ..., secret_key: str = ..., verify: Optional[Union[bool, str]] = ..., cert: Optional[Union[str, tuple]] = ..., **kwargs) -> requests.Response:
    """call bulkinsert restful interface to import files

    Args:
        url (str): url of the server
        collection_name (str): name of the target collection
        db_name (str): name of target database
        partition_name (str): name of the target partition
        files (list of list of str): The files that contain the data to import.
             A sub-list contains a single JSON or Parquet file, or a set of Numpy files.
        object_url (str): The URL of the object to import.
             This URL should be accessible to the S3-compatible
             object storage service, such as AWS S3, GCS, Azure blob storage.
        cluster_id (str): id of a milvus instance(for cloud)
        api_key (str): API key to authenticate your requests.
        access_key (str): access key to access the object storage
        secret_key (str): secret key to access the object storage
        verify (bool, str, optional): Either a boolean, to verify the server's TLS certificate
             or a string, which must be server's certificate path. Defaults to `True`.
        cert (str, tuple, optional): if String, path to ssl client cert file.
                                     if Tuple, ('cert', 'key') pair.

    Returns:
        response of the restful interface
    """
    ...

def get_import_progress(url: str, job_id: str, cluster_id: str = ..., api_key: str = ..., verify: Optional[Union[bool, str]] = ..., cert: Optional[Union[str, tuple]] = ..., **kwargs) -> requests.Response:
    """get job progress

    Args:
        url (str): url of the server
        job_id (str): a job id
        cluster_id (str): id of a milvus instance(for cloud)
        api_key (str): API key to authenticate your requests.
        verify (bool, str, optional): Either a boolean, to verify the server's TLS certificate
             or a string, which must be server's certificate path. Defaults to `True`.
        cert (str, tuple, optional): if String, path to ssl client cert file.
                                     if Tuple, ('cert', 'key') pair.

    Returns:
        response of the restful interface
    """
    ...

def list_import_jobs(url: str, collection_name: str = ..., cluster_id: str = ..., api_key: str = ..., page_size: int = ..., current_page: int = ..., verify: Optional[Union[bool, str]] = ..., cert: Optional[Union[str, tuple]] = ..., **kwargs) -> requests.Response:
    """list jobs in a cluster

    Args:
        url (str): url of the server
        collection_name (str): name of the target collection
        cluster_id (str): id of a milvus instance(for cloud)
        api_key (str): API key to authenticate your requests.
        page_size (int): pagination size
        current_page (int): pagination
        verify (bool, str, optional): Either a boolean, to verify the server's TLS certificate
             or a string, which must be server's certificate path. Defaults to `True`.
        cert (str, tuple, optional): if String, path to ssl client cert file.
                                     if Tuple, ('cert', 'key') pair.

    Returns:
        response of the restful interface
    """
    ...

