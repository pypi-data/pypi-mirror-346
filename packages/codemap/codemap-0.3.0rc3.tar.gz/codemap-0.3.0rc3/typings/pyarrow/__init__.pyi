"""
This type stub file was generated by pyright.
"""

import gc as _gc
import importlib as _importlib
import os as _os
import platform as _platform
import sys as _sys
import warnings as _warnings
import pyarrow.lib as _lib
import pyarrow.ipc as ipc
import pyarrow.types as types
from ._generated_version import version as __version__
from pyarrow.lib import Array, ArrowCancelled, ArrowCapacityError, ArrowException, ArrowIOError, ArrowIndexError, ArrowInvalid, ArrowKeyError, ArrowMemoryError, ArrowNotImplementedError, ArrowSerializationError, ArrowTypeError, BaseExtensionType, BinaryArray, BinaryScalar, BinaryViewArray, BinaryViewScalar, Bool8Array, Bool8Scalar, Bool8Type, BooleanArray, BooleanScalar, Buffer, BufferOutputStream, BufferReader, BufferedInputStream, BufferedOutputStream, BuildInfo, CacheOptions, ChunkedArray, Codec, CompressedInputStream, CompressedOutputStream, DataType, Date32Array, Date32Scalar, Date64Array, Date64Scalar, Decimal128Array, Decimal128Scalar, Decimal128Type, Decimal256Array, Decimal256Scalar, Decimal256Type, Decimal32Array, Decimal32Scalar, Decimal32Type, Decimal64Array, Decimal64Scalar, Decimal64Type, DenseUnionType, Device, DeviceAllocationType, DictionaryArray, DictionaryMemo, DictionaryScalar, DictionaryType, DoubleArray, DoubleScalar, DurationArray, DurationScalar, DurationType, ExtensionArray, ExtensionScalar, ExtensionType, Field, FixedShapeTensorArray, FixedShapeTensorScalar, FixedShapeTensorType, FixedSizeBinaryArray, FixedSizeBinaryScalar, FixedSizeBinaryType, FixedSizeBufferWriter, FixedSizeListArray, FixedSizeListScalar, FixedSizeListType, FloatArray, FloatScalar, FloatingPointArray, HalfFloatArray, HalfFloatScalar, Int16Array, Int16Scalar, Int32Array, Int32Scalar, Int64Array, Int64Scalar, Int8Array, Int8Scalar, IntegerArray, JsonArray, JsonScalar, JsonType, KeyValueMetadata, LargeBinaryArray, LargeBinaryScalar, LargeListArray, LargeListScalar, LargeListType, LargeListViewArray, LargeListViewScalar, LargeListViewType, LargeStringArray, LargeStringScalar, ListArray, ListScalar, ListType, ListViewArray, ListViewScalar, ListViewType, LoggingMemoryPool, MapArray, MapScalar, MapType, MemoryManager, MemoryMappedFile, MemoryPool, MockOutputStream, MonthDayNano, MonthDayNanoIntervalArray, MonthDayNanoIntervalScalar, NA, NativeFile, NullArray, NullScalar, NumericArray, OSFile, OpaqueArray, OpaqueScalar, OpaqueType, ProxyMemoryPool, PyExtensionType, PythonFile, RecordBatch, RecordBatchReader, ResizableBuffer, RunEndEncodedArray, RunEndEncodedScalar, RunEndEncodedType, RuntimeInfo, Scalar, Schema, SparseCOOTensor, SparseCSCMatrix, SparseCSFTensor, SparseCSRMatrix, SparseUnionType, StringArray, StringScalar, StringViewArray, StringViewScalar, StructArray, StructScalar, StructType, Table, TableGroupBy, Tensor, Time32Array, Time32Scalar, Time32Type, Time64Array, Time64Scalar, Time64Type, TimestampArray, TimestampScalar, TimestampType, TransformInputStream, UInt16Array, UInt16Scalar, UInt32Array, UInt32Scalar, UInt64Array, UInt64Scalar, UInt8Array, UInt8Scalar, UnionArray, UnionScalar, UnionType, UnknownExtensionType, UuidArray, UuidScalar, UuidType, VersionInfo, _NULL as NULL, allocate_buffer, array, binary, binary_view, bool8, bool_, chunked_array, compress, concat_arrays, concat_batches, concat_tables, cpp_build_info, cpp_version, cpp_version_info, cpu_count, create_memory_map, date32, date64, decimal128, decimal256, decimal32, decimal64, decompress, default_cpu_memory_manager, default_memory_pool, dense_union, dictionary, duration, enable_signal_handlers, field, fixed_shape_tensor, float16, float32, float64, foreign_buffer, from_numpy_dtype, have_libhdfs, infer_type, input_stream, int16, int32, int64, int8, io_thread_count, jemalloc_memory_pool, jemalloc_set_decay_ms, json_, large_binary, large_list, large_list_view, large_string, large_utf8, list_, list_view, log_memory_allocations, logging_memory_pool, map_, memory_map, mimalloc_memory_pool, month_day_nano_interval, null, nulls, opaque, output_stream, proxy_memory_pool, py_buffer, record_batch, register_extension_type, repeat, run_end_encoded, runtime_info, scalar, schema, set_cpu_count, set_io_thread_count, set_memory_pool, set_timezone_db_path, sparse_union, string, string_view, struct, supported_memory_backends, system_memory_pool, table, time32, time64, timestamp, total_allocated_bytes, transcoding_input_stream, type_for_alias, uint16, uint32, uint64, uint8, unify_schemas, union, unregister_extension_type, utf8, uuid
from pyarrow.ipc import Message, MessageReader, MetadataVersion, RecordBatchFileReader, RecordBatchFileWriter, RecordBatchStreamReader, RecordBatchStreamWriter, deserialize_pandas, serialize_pandas
from pyarrow.util import _deprecate_api, _deprecate_class

"""
PyArrow is the python implementation of Apache Arrow.

Apache Arrow is a cross-language development platform for in-memory data.
It specifies a standardized language-independent columnar memory format for
flat and hierarchical data, organized for efficient analytic operations on
modern hardware. It also provides computational libraries and zero-copy
streaming messaging and interprocess communication.

For more information see the official page at https://arrow.apache.org
"""
_gc_enabled = ...
if _gc_enabled:
    ...
def show_versions(): # -> None:
    """
    Print various version information, to help with error reporting.
    """
    ...

def show_info(): # -> None:
    """
    Print detailed version and platform information, for error reporting
    """
    ...

def get_include(): # -> str:
    """
    Return absolute path to directory containing Arrow C++ include
    headers. Similar to numpy.get_include
    """
    ...

def get_libraries(): # -> list[str]:
    """
    Return list of library names to include in the `libraries` argument for C
    or Cython extensions using pyarrow
    """
    ...

def create_library_symlinks(): # -> None:
    """
    With Linux and macOS wheels, the bundled shared libraries have an embedded
    ABI version like libarrow.so.17 or libarrow.17.dylib and so linking to them
    with -larrow won't work unless we create symlinks at locations like
    site-packages/pyarrow/libarrow.so. This unfortunate workaround addresses
    prior problems we had with shipping two copies of the shared libraries to
    permit third party projects like turbodbc to build their C++ extensions
    against the pyarrow wheels.

    This function must only be invoked once and only when the shared libraries
    are bundled with the Python package, which should only apply to wheel-based
    installs. It requires write access to the site-packages/pyarrow directory
    and so depending on your system may need to be run with root.
    """
    ...

def get_library_dirs(): # -> list[str]:
    """
    Return lists of directories likely to contain Arrow C++ libraries for
    linking C or Cython extensions using pyarrow
    """
    ...

