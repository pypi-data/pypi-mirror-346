"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Tuple, Union
from pymilvus.client.types import DataType
from pymilvus.grpc_gen import common_pb2, schema_pb2
from collections import UserDict

class SearchResult(list):
    """A list[list[dict]] Contains nq * limit results.

    The first level is the results for each nq, and the second level
    is the top-k(limit) results for each query.

    Examples:
        >>> nq_res = client.search()
        >>> for topk_res in nq_res:
        >>>     for one_res in topk_res:
        >>>         print(one_res)
        {"id": 1, "distance": 0.1, "entity": {"vector": [1.0, 2.0, 3.0], "name": "a"}}
        ...

        >>> res[0][0]
        {"id": 1, "distance": 0.1, "entity": {"vector": [1.0, 2.0, 3.0], "name": "a"}}

        >>> res.recalls
        [0.9, 0.9, 0.9]

        >>> res.extra
        {"cost": 1}

    Attributes:
        recalls(List[float], optional): The recalls of the search result, one for each query.
        extra(Dict, optional): The extra information of the search result.
    """
    def __init__(self, res: schema_pb2.SearchResultData, round_decimal: Optional[int] = ..., status: Optional[common_pb2.Status] = ..., session_ts: Optional[int] = ...) -> None:
        ...
    
    def __str__(self) -> str:
        """Only print at most 10 results"""
        ...
    
    __repr__ = ...
    def get_session_ts(self): # -> int | None:
        """Iterator related inner method"""
        ...
    
    def get_search_iterator_v2_results_info(self): # -> SearchIteratorV2Results:
        """Iterator related inner method"""
        ...
    


class Hits(list):
    """List[Dict] Topk search result with pks, distances, and output fields.

        [
            {"id": 1, "distance": 0.3, "entity": {"vector": [1, 2, 3]}},
            {"id": 2, "distance": 0.2, "entity": {"vector": [4, 5, 6]}},
            {"id": 3, "distance": 0.1, "entity": {"vector": [7, 8, 9]}},
        ]

    Examples:
        >>> res = client.search()
        >>> hits = res[0]
        >>> for hit in hits:
        >>>     print(hit)
        {"id": 1, "distance": 0.3, "entity": {"vector": [1, 2, 3]}}
        {"id": 2, "distance": 0.2, "entity": {"vector": [4, 5, 6]}}
        {"id": 3, "distance": 0.1, "entity": {"vector": [7, 8, 9]}}

    Attributes:
        ids(List[Union[str, int]]): topk primary keys
        distances(List[float]): topk distances
    """
    ids: List[Union[str, int]]
    distances: List[float]
    def __init__(self, topk: int, pks: List[Union[int, str]], distances: List[float], fields: Dict[str, Tuple[List[Any], schema_pb2.FieldData]], output_fields: List[str], pk_name: str) -> None:
        """
        Args:
            fields(Dict[str, Tuple[List[Any], schema_pb2.FieldData]]):
                field name to a tuple of topk data and field meta
        """
        ...
    
    def __str__(self) -> str:
        """Only print at most 10 query results"""
        ...
    
    __repr__ = ...


class Hit(UserDict):
    """Enhanced result in dict that can get data in dict[dict]

    Examples:
        >>> res = {
        >>>     "my_id": 1,
        >>>     "distance": 0.3,
        >>>     "entity": {
        >>>         "emb": [1, 2, 3],
        >>>         "desc": "a description"
        >>>     }
        >>> }
        >>> h = Hit(res, pk_name="my_id")
        >>> h
        {"my_id": 1, "distance": 0.3, "entity": {"emb": [1, 2, 3], "desc": "a description"}}
        >>> h["my_id"]
        1
        >>> h["distance"]
        0.3
        >>> h["entity"]["emb"]
        [1, 2, 3]
        >>> h["entity"]["desc"]
        "a description"
        >>> h.get("emb")
        [1, 2, 3]
    """
    def __init__(self, *args, pk_name: str = ..., **kwargs) -> None:
        ...
    
    def __getattr__(self, item: str): # -> Self:
        """Patch for orm, will be deprecated soon"""
        ...
    
    def to_dict(self) -> Dict[str, Any]:
        """Patch for orm, will be deprecated soon"""
        ...
    
    @property
    def id(self) -> Union[str, int]:
        """Patch for orm, will be deprecated soon"""
        ...
    
    @property
    def distance(self) -> float:
        """Patch for orm, will be deprecated soon"""
        ...
    
    @property
    def pk(self) -> Union[str, int]:
        """Alias of id, will be deprecated soon"""
        ...
    
    @property
    def score(self) -> float:
        """Alias of distance, will be deprecated soon"""
        ...
    
    @property
    def fields(self) -> Dict[str, Any]:
        """Patch for orm, will be deprecated soon"""
        ...
    
    def __getitem__(self, key: str):
        ...
    
    def get(self, key: Any, default: Any = ...): # -> Any:
        ...
    


def extract_array_row_data(scalars: List[schema_pb2.ScalarField], element_type: DataType) -> List[List[Any]]:
    ...

def apply_valid_data(data: List[Any], valid_data: Union[None, List[bool]], start: int, end: int) -> List[Any]:
    ...

