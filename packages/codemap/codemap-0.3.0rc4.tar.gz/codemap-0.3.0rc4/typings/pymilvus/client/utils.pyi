"""
This type stub file was generated by pyright.
"""

import datetime
from datetime import timedelta
from typing import Any, Dict, Iterable, List, Optional, TYPE_CHECKING, Tuple, Union
from pymilvus.grpc_gen.common_pb2 import Status
from .types import DataType
from scipy.sparse import bsr_array, coo_array, csc_array, csr_array, dia_array, dok_array, lil_array, spmatrix

MILVUS = ...
ZILLIZ = ...
valid_index_types = ...
valid_index_params_keys = ...
valid_binary_index_types = ...
valid_binary_metric_types = ...
def check_status(status: Status): # -> None:
    ...

def is_successful(status: Status): # -> bool:
    ...

def hybridts_to_unixtime(ts: int): # -> float:
    ...

def mkts_from_hybridts(hybridts: int, milliseconds: Union[float] = ..., delta: Optional[timedelta] = ...) -> int:
    ...

def mkts_from_unixtime(epoch: Union[float], milliseconds: Union[float] = ..., delta: Optional[timedelta] = ...) -> int:
    ...

def mkts_from_datetime(d_time: datetime.datetime, milliseconds: Union[float] = ..., delta: Optional[timedelta] = ...) -> int:
    ...

def check_invalid_binary_vector(entities: List) -> bool:
    ...

def len_of(field_data: Any) -> int:
    ...

def traverse_rows_info(fields_info: Any, entities: List): # -> tuple[dict[Any, Any], int, int | None]:
    ...

def traverse_info(fields_info: Any): # -> tuple[dict[Any, Any], int | None, int | None]:
    ...

def traverse_upsert_info(fields_info: Any): # -> tuple[dict[Any, Any], int | None]:
    ...

def get_params(search_params: Dict):
    ...

def get_server_type(host: str): # -> Literal['zilliz', 'milvus']:
    ...

def dumps(v: Union[dict, str]) -> str:
    ...

class SciPyHelper:
    _checked = ...
    _matrix_available = ...
    _array_available = ...
    @classmethod
    def is_spmatrix(cls, data: Any): # -> bool:
        ...
    
    @classmethod
    def is_sparray(cls, data: Any): # -> bool:
        ...
    
    @classmethod
    def is_scipy_sparse(cls, data: Any): # -> bool:
        ...
    


SparseRowOutputType = Dict[int, float]
if TYPE_CHECKING:
    ...
SparseMatrixInputType = Union[Iterable[Union[SparseRowOutputType, Iterable[Tuple[int, float]],]], "csc_array", "coo_array", "bsr_array", "dia_array", "dok_array", "lil_array", "csr_array", "spmatrix",]
def is_sparse_vector_type(data_type: DataType) -> bool:
    ...

dense_vector_type_set = ...
def is_dense_vector_type(data_type: DataType) -> bool:
    ...

def is_float_vector_type(data_type: DataType): # -> bool:
    ...

def is_binary_vector_type(data_type: DataType): # -> bool:
    ...

def is_vector_type(data_type: DataType): # -> bool:
    ...

