"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Dict, List, Optional, Union
from . import utils

class FieldSchema:
    def __init__(self, raw: Any) -> None:
        ...
    
    def dict(self): # -> dict[str, Any]:
        ...
    


class FunctionSchema:
    def __init__(self, raw: Any) -> None:
        ...
    
    def dict(self): # -> dict[str, Any]:
        ...
    


class CollectionSchema:
    def __init__(self, raw: Any) -> None:
        ...
    
    def dict(self): # -> dict[Any, Any] | dict[str, Any]:
        ...
    
    def __str__(self) -> str:
        ...
    


class MutationResult:
    def __init__(self, raw: Any) -> None:
        ...
    
    @property
    def primary_keys(self): # -> Any | list[Any]:
        ...
    
    @property
    def insert_count(self): # -> int | Any:
        ...
    
    @property
    def delete_count(self): # -> int | Any:
        ...
    
    @property
    def upsert_count(self): # -> int | Any:
        ...
    
    @property
    def timestamp(self): # -> int | Any:
        ...
    
    @property
    def succ_count(self): # -> int:
        ...
    
    @property
    def err_count(self): # -> int:
        ...
    
    @property
    def succ_index(self): # -> Any | list[Any]:
        ...
    
    @property
    def err_index(self): # -> Any | list[Any]:
        ...
    
    @property
    def cost(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...


class BaseRanker:
    def __int__(self) -> int:
        ...
    
    def dict(self): # -> dict[Any, Any]:
        ...
    
    def __str__(self) -> str:
        ...
    


class RRFRanker(BaseRanker):
    def __init__(self, k: int = ...) -> None:
        ...
    
    def dict(self): # -> dict[str, Any]:
        ...
    


class WeightedRanker(BaseRanker):
    def __init__(self, *nums, norm_score: bool = ...) -> None:
        ...
    
    def dict(self): # -> dict[str, Any]:
        ...
    


class AnnSearchRequest:
    def __init__(self, data: Union[List, utils.SparseMatrixInputType], anns_field: str, param: Dict, limit: int, expr: Optional[str] = ..., expr_params: Optional[dict] = ...) -> None:
        ...
    
    @property
    def data(self): # -> SparseMatrixInputType | List[Any]:
        ...
    
    @property
    def anns_field(self): # -> str:
        ...
    
    @property
    def param(self): # -> Dict[Any, Any]:
        ...
    
    @property
    def limit(self): # -> int:
        ...
    
    @property
    def expr(self): # -> str | None:
        ...
    
    @property
    def expr_params(self): # -> dict[Any, Any] | None:
        ...
    
    def __str__(self) -> str:
        ...
    


class LoopBase:
    def __init__(self) -> None:
        ...
    
    def __iter__(self): # -> Self:
        ...
    
    def __getitem__(self, item: Any): # -> list[Any]:
        ...
    
    def __next__(self): # -> list[Any]:
        ...
    
    def __str__(self) -> str:
        ...
    
    @abc.abstractmethod
    def get__item(self, item: Any):
        ...
    


