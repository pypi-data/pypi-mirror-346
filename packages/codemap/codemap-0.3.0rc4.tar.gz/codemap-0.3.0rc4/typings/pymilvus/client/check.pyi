"""
This type stub file was generated by pyright.
"""

import datetime
from typing import Any, Callable, Union
from .singleton_utils import Singleton

def validate_strs(**kwargs): # -> None:
    """validate if all values are legal non-emtpy str"""
    ...

def validate_nullable_strs(**kwargs): # -> None:
    """validate if all values are either None or legal non-empty str"""
    ...

def validate_str(var: Any) -> bool:
    """check if a variable is legal non-empty str"""
    ...

def is_legal_address(addr: Any) -> bool:
    ...

def is_legal_host(host: Any) -> bool:
    ...

def is_legal_port(port: Any) -> bool:
    ...

def int_or_str(item: Union[int, str]) -> str:
    ...

def is_correct_date_str(param: str) -> bool:
    ...

def is_legal_dimension(dim: Any) -> bool:
    ...

def is_legal_index_size(index_size: Any) -> bool:
    ...

def is_legal_table_name(table_name: Any) -> bool:
    ...

def is_legal_db_name(db_name: Any) -> bool:
    ...

def is_legal_field_name(field_name: Any) -> bool:
    ...

def is_legal_index_name(index_name: Any) -> bool:
    ...

def is_legal_timeout(timeout: Any) -> bool:
    ...

def is_legal_nlist(nlist: Any) -> bool:
    ...

def is_legal_topk(topk: Any) -> bool:
    ...

def is_legal_ids(ids: Any) -> bool:
    ...

def is_legal_nprobe(nprobe: Any) -> bool:
    ...

def is_legal_itopk_size(itopk_size: Any) -> bool:
    ...

def is_legal_search_width(search_width: Any) -> bool:
    ...

def is_legal_min_iterations(min_iterations: Any) -> bool:
    ...

def is_legal_max_iterations(max_iterations: Any) -> bool:
    ...

def is_legal_drop_ratio(drop_ratio: Any) -> bool:
    ...

def is_legal_team_size(team_size: Any) -> bool:
    ...

def is_legal_cmd(cmd: Any) -> bool:
    ...

def parser_range_date(date: Union[str, datetime.date]) -> str:
    ...

def is_legal_date_range(start: str, end: str) -> bool:
    ...

def is_legal_partition_name(tag: Any) -> bool:
    ...

def is_legal_limit(limit: Any) -> bool:
    ...

def is_legal_anns_field(field: Any) -> bool:
    ...

def is_legal_search_data(data: Any) -> bool:
    ...

def is_legal_output_fields(output_fields: Any) -> bool:
    ...

def is_legal_partition_name_array(tag_array: Any) -> bool:
    ...

def is_legal_replica_number(replica_number: int) -> bool:
    ...

def is_legal_round_decimal(round_decimal: Any) -> bool:
    ...

def is_legal_guarantee_timestamp(ts: Any) -> bool:
    ...

def is_legal_user(user: Any) -> bool:
    ...

def is_legal_password(password: Any) -> bool:
    ...

def is_legal_role_name(role_name: Any) -> bool:
    ...

def is_legal_operate_user_role_type(operate_user_role_type: Any) -> bool:
    ...

def is_legal_include_user_info(include_user_info: Any) -> bool:
    ...

def is_legal_include_role_info(include_role_info: Any) -> bool:
    ...

def is_legal_object(object: Any) -> bool:
    ...

def is_legal_object_name(object_name: Any) -> bool:
    ...

def is_legal_privilege(privilege: Any) -> bool:
    ...

def is_legal_collection_properties(properties: Any) -> bool:
    ...

def is_legal_operate_privilege_type(operate_privilege_type: Any) -> bool:
    ...

def is_legal_privilege_group(privilege_group: Any) -> bool:
    ...

def is_legal_privileges(privileges: Any) -> bool:
    ...

def is_legal_operate_privilege_group_type(operate_privilege_group_type: Any) -> bool:
    ...

class ParamChecker(metaclass=Singleton):
    def __init__(self) -> None:
        ...
    
    def check(self, key: str, value: Callable): # -> None:
        ...
    


def check_pass_param(*_args: Any, **kwargs: Any) -> None:
    ...

