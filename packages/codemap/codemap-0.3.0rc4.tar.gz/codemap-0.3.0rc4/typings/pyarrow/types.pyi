"""
This type stub file was generated by pyright.
"""

from pyarrow.util import doc

_SIGNED_INTEGER_TYPES = ...
_UNSIGNED_INTEGER_TYPES = ...
_INTEGER_TYPES = ...
_FLOATING_TYPES = ...
_DECIMAL_TYPES = ...
_DATE_TYPES = ...
_TIME_TYPES = ...
_INTERVAL_TYPES = ...
_TEMPORAL_TYPES = ...
_UNION_TYPES = ...
_NESTED_TYPES = ...
@doc(datatype="null")
def is_null(t):
    """
    Return True if value is an instance of type: {datatype}.

    Parameters
    ----------
    t : DataType
    """
    ...

@doc(is_null, datatype="boolean")
def is_boolean(t):
    ...

@doc(is_null, datatype="any integer")
def is_integer(t): # -> bool:
    ...

@doc(is_null, datatype="signed integer")
def is_signed_integer(t): # -> bool:
    ...

@doc(is_null, datatype="unsigned integer")
def is_unsigned_integer(t): # -> bool:
    ...

@doc(is_null, datatype="int8")
def is_int8(t):
    ...

@doc(is_null, datatype="int16")
def is_int16(t):
    ...

@doc(is_null, datatype="int32")
def is_int32(t):
    ...

@doc(is_null, datatype="int64")
def is_int64(t):
    ...

@doc(is_null, datatype="uint8")
def is_uint8(t):
    ...

@doc(is_null, datatype="uint16")
def is_uint16(t):
    ...

@doc(is_null, datatype="uint32")
def is_uint32(t):
    ...

@doc(is_null, datatype="uint64")
def is_uint64(t):
    ...

@doc(is_null, datatype="floating point numeric")
def is_floating(t): # -> bool:
    ...

@doc(is_null, datatype="float16 (half-precision)")
def is_float16(t):
    ...

@doc(is_null, datatype="float32 (single precision)")
def is_float32(t):
    ...

@doc(is_null, datatype="float64 (double precision)")
def is_float64(t):
    ...

@doc(is_null, datatype="list")
def is_list(t):
    ...

@doc(is_null, datatype="large list")
def is_large_list(t):
    ...

@doc(is_null, datatype="fixed size list")
def is_fixed_size_list(t):
    ...

@doc(is_null, datatype="list view")
def is_list_view(t):
    ...

@doc(is_null, datatype="large list view")
def is_large_list_view(t):
    ...

@doc(is_null, datatype="struct")
def is_struct(t):
    ...

@doc(is_null, datatype="union")
def is_union(t): # -> bool:
    ...

@doc(is_null, datatype="nested type")
def is_nested(t): # -> bool:
    ...

@doc(is_null, datatype="run-end encoded")
def is_run_end_encoded(t):
    ...

@doc(is_null, datatype="date, time, timestamp or duration")
def is_temporal(t): # -> bool:
    ...

@doc(is_null, datatype="timestamp")
def is_timestamp(t):
    ...

@doc(is_null, datatype="duration")
def is_duration(t):
    ...

@doc(is_null, datatype="time")
def is_time(t): # -> bool:
    ...

@doc(is_null, datatype="time32")
def is_time32(t):
    ...

@doc(is_null, datatype="time64")
def is_time64(t):
    ...

@doc(is_null, datatype="variable-length binary")
def is_binary(t):
    ...

@doc(is_null, datatype="large variable-length binary")
def is_large_binary(t):
    ...

@doc(method="is_string")
def is_unicode(t):
    """
    Alias for {method}.

    Parameters
    ----------
    t : DataType
    """
    ...

@doc(is_null, datatype="string (utf8 unicode)")
def is_string(t):
    ...

@doc(is_unicode, method="is_large_string")
def is_large_unicode(t):
    ...

@doc(is_null, datatype="large string (utf8 unicode)")
def is_large_string(t):
    ...

@doc(is_null, datatype="fixed size binary")
def is_fixed_size_binary(t):
    ...

@doc(is_null, datatype="variable-length binary view")
def is_binary_view(t):
    ...

@doc(is_null, datatype="variable-length string (utf-8) view")
def is_string_view(t):
    ...

@doc(is_null, datatype="date")
def is_date(t): # -> bool:
    ...

@doc(is_null, datatype="date32 (days)")
def is_date32(t):
    ...

@doc(is_null, datatype="date64 (milliseconds)")
def is_date64(t):
    ...

@doc(is_null, datatype="map")
def is_map(t):
    ...

@doc(is_null, datatype="decimal")
def is_decimal(t): # -> bool:
    ...

@doc(is_null, datatype="decimal32")
def is_decimal32(t):
    ...

@doc(is_null, datatype="decimal64")
def is_decimal64(t):
    ...

@doc(is_null, datatype="decimal128")
def is_decimal128(t):
    ...

@doc(is_null, datatype="decimal256")
def is_decimal256(t):
    ...

@doc(is_null, datatype="dictionary-encoded")
def is_dictionary(t):
    ...

@doc(is_null, datatype="interval")
def is_interval(t):
    ...

@doc(is_null, datatype="primitive type")
def is_primitive(t):
    ...

