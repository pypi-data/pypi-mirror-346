"""
This type stub file was generated by pyright.
"""

_logical_type_map = ...
_numpy_logical_type_map = ...
_pandas_logical_type_map = ...
def get_logical_type_map(): # -> dict[Any, Any]:
    ...

def get_logical_type(arrow_type): # -> str:
    ...

def get_numpy_logical_type_map(): # -> dict[Any, Any]:
    ...

def get_logical_type_from_numpy(pandas_collection): # -> str:
    ...

def get_extension_dtype_info(column): # -> tuple[str, dict[str, Any] | None]:
    ...

def get_column_metadata(column, name, arrow_type, field_name): # -> dict[str, Any]:
    """Construct the metadata for a given column

    Parameters
    ----------
    column : pandas.Series or pandas.Index
    name : str
    arrow_type : pyarrow.DataType
    field_name : str
        Equivalent to `name` when `column` is a `Series`, otherwise if `column`
        is a pandas Index then `field_name` will not be the same as `name`.
        This is the name of the field in the arrow Table's schema.

    Returns
    -------
    dict
    """
    ...

def construct_metadata(columns_to_convert, df, column_names, index_levels, index_descriptors, preserve_index, types, column_field_names=...): # -> dict[bytes, bytes]:
    """Returns a dictionary containing enough metadata to reconstruct a pandas
    DataFrame as an Arrow Table, including index columns.

    Parameters
    ----------
    columns_to_convert : list[pd.Series]
    df : pandas.DataFrame
    column_names : list[str | None]
    column_field_names: list[str]
    index_levels : List[pd.Index]
    index_descriptors : List[Dict]
    preserve_index : bool
    types : List[pyarrow.DataType]

    Returns
    -------
    dict
    """
    ...

def dataframe_to_types(df, preserve_index, columns=...): # -> tuple[list[Any], list[Any], dict[bytes, bytes]]:
    ...

def dataframe_to_arrays(df, schema, preserve_index, nthreads=..., columns=..., safe=...): # -> tuple[list[Any], Any, int | None]:
    ...

def get_datetimetz_type(values, dtype, type_): # -> tuple[Any, Any]:
    ...

def make_datetimetz(unit, tz):
    ...

def table_to_dataframe(options, table, categories=..., ignore_metadata=..., types_mapper=...):
    ...

_pandas_supported_numpy_types = ...
def get_pandas_logical_type_map(): # -> dict[Any, Any]:
    ...

def make_tz_aware(series, tz):
    """
    Make a datetime64 Series timezone-aware for the given tz
    """
    ...

