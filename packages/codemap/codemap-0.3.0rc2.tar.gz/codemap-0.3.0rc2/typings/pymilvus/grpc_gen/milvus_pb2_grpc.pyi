"""
This type stub file was generated by pyright.
"""

"""Client and server classes corresponding to protobuf-defined services."""
class MilvusServiceStub:
    """Missing associated documentation comment in .proto file."""
    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        ...
    


class MilvusServiceServicer:
    """Missing associated documentation comment in .proto file."""
    def CreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def HasCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def LoadCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ReleaseCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetCollectionStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ShowCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AlterCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AlterCollectionField(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreatePartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropPartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def HasPartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def LoadPartitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ReleasePartitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetPartitionStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ShowPartitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetLoadingProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetLoadState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AlterAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListAliases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AlterIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetIndexStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetIndexState(self, request, context):
        """Deprecated: use DescribeIndex instead
        """
        ...
    
    def GetIndexBuildProgress(self, request, context):
        """Deprecated: use DescribeIndex instead
        """
        ...
    
    def DropIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Upsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def HybridSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Flush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CalcDistance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def FlushAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetFlushState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetFlushAllState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetPersistentSegmentInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetQuerySegmentInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetReplicas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Dummy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def RegisterLink(self, request, context):
        """TODO: remove
        """
        ...
    
    def GetMetrics(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
        """
        ...
    
    def GetComponentStates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def LoadBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetCompactionState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ManualCompaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetCompactionStateWithPlans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Import(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
        """
        ...
    
    def GetImportState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListImportTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateCredential(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
        """
        ...
    
    def UpdateCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DeleteCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListCredUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateRole(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
        """
        ...
    
    def DropRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def OperateUserRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def SelectRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def SelectUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def OperatePrivilege(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def OperatePrivilegeV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def SelectGrant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def GetVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateResourceGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropResourceGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def UpdateResourceGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def TransferNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def TransferReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListResourceGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeResourceGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def RenameCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListIndexedSegment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeSegmentIndexData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AllocTimestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreateDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListDatabases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def AlterDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DescribeDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ReplicateMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def BackupRBAC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def RestoreRBAC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def CreatePrivilegeGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def DropPrivilegeGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def ListPrivilegeGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def OperatePrivilegeGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    
    def RunAnalyzer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    


def add_MilvusServiceServicer_to_server(servicer, server): # -> None:
    ...

class MilvusService:
    """Missing associated documentation comment in .proto file."""
    @staticmethod
    def CreateCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def HasCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def LoadCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ReleaseCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetCollectionStatistics(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ShowCollections(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AlterCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AlterCollectionField(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreatePartition(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropPartition(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def HasPartition(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def LoadPartitions(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ReleasePartitions(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetPartitionStatistics(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ShowPartitions(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetLoadingProgress(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetLoadState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateAlias(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropAlias(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AlterAlias(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeAlias(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListAliases(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateIndex(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AlterIndex(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeIndex(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetIndexStatistics(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetIndexState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetIndexBuildProgress(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropIndex(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Insert(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Delete(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Upsert(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Search(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def HybridSearch(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Flush(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Query(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CalcDistance(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def FlushAll(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetFlushState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetFlushAllState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetPersistentSegmentInfo(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetQuerySegmentInfo(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetReplicas(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Dummy(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def RegisterLink(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetMetrics(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetComponentStates(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def LoadBalance(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetCompactionState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ManualCompaction(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetCompactionStateWithPlans(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Import(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetImportState(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListImportTasks(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateCredential(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def UpdateCredential(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DeleteCredential(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListCredUsers(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateRole(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropRole(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def OperateUserRole(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def SelectRole(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def SelectUser(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def OperatePrivilege(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def OperatePrivilegeV2(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def SelectGrant(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def GetVersion(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CheckHealth(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateResourceGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropResourceGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def UpdateResourceGroups(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def TransferNode(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def TransferReplica(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListResourceGroups(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeResourceGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def RenameCollection(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListIndexedSegment(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeSegmentIndexData(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def Connect(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AllocTimestamp(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreateDatabase(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropDatabase(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListDatabases(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def AlterDatabase(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DescribeDatabase(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ReplicateMessage(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def BackupRBAC(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def RestoreRBAC(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def CreatePrivilegeGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def DropPrivilegeGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def ListPrivilegeGroups(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def OperatePrivilegeGroup(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    
    @staticmethod
    def RunAnalyzer(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    


class ProxyServiceStub:
    """Missing associated documentation comment in .proto file."""
    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        ...
    


class ProxyServiceServicer:
    """Missing associated documentation comment in .proto file."""
    def RegisterLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        ...
    


def add_ProxyServiceServicer_to_server(servicer, server): # -> None:
    ...

class ProxyService:
    """Missing associated documentation comment in .proto file."""
    @staticmethod
    def RegisterLink(request, target, options=..., channel_credentials=..., call_credentials=..., insecure=..., compression=..., wait_for_ready=..., timeout=..., metadata=...):
        ...
    


