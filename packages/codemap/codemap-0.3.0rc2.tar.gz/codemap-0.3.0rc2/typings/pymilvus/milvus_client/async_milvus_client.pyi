"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional, Union
from pymilvus.client.abstract import AnnSearchRequest, BaseRanker
from pymilvus.orm.collection import CollectionSchema
from .index import IndexParams

logger = ...
class AsyncMilvusClient:
    """AsyncMilvusClient is an EXPERIMENTAL class
    which only provides part of MilvusClient's methods"""
    def __init__(self, uri: str = ..., user: str = ..., password: str = ..., db_name: str = ..., token: str = ..., timeout: Optional[float] = ..., **kwargs) -> None:
        ...
    
    async def create_collection(self, collection_name: str, dimension: Optional[int] = ..., primary_field_name: str = ..., id_type: str = ..., vector_field_name: str = ..., metric_type: str = ..., auto_id: bool = ..., timeout: Optional[float] = ..., schema: Optional[CollectionSchema] = ..., index_params: Optional[IndexParams] = ..., **kwargs): # -> None:
        ...
    
    async def drop_collection(self, collection_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def load_collection(self, collection_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def release_collection(self, collection_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def create_index(self, collection_name: str, index_params: IndexParams, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def drop_index(self, collection_name: str, index_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def create_partition(self, collection_name: str, partition_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def drop_partition(self, collection_name: str, partition_name: str, timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def load_partitions(self, collection_name: str, partition_names: Union[str, List[str]], timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def release_partitions(self, collection_name: str, partition_names: Union[str, List[str]], timeout: Optional[float] = ..., **kwargs): # -> None:
        ...
    
    async def insert(self, collection_name: str, data: Union[Dict, List[Dict]], timeout: Optional[float] = ..., partition_name: Optional[str] = ..., **kwargs) -> Dict:
        ...
    
    async def upsert(self, collection_name: str, data: Union[Dict, List[Dict]], timeout: Optional[float] = ..., partition_name: Optional[str] = ..., **kwargs) -> Dict:
        ...
    
    async def hybrid_search(self, collection_name: str, reqs: List[AnnSearchRequest], ranker: BaseRanker, limit: int = ..., output_fields: Optional[List[str]] = ..., timeout: Optional[float] = ..., partition_names: Optional[List[str]] = ..., **kwargs) -> List[List[dict]]:
        ...
    
    async def search(self, collection_name: str, data: Union[List[list], list], filter: str = ..., limit: int = ..., output_fields: Optional[List[str]] = ..., search_params: Optional[dict] = ..., timeout: Optional[float] = ..., partition_names: Optional[List[str]] = ..., anns_field: Optional[str] = ..., **kwargs) -> List[List[dict]]:
        ...
    
    async def query(self, collection_name: str, filter: str = ..., output_fields: Optional[List[str]] = ..., timeout: Optional[float] = ..., ids: Optional[Union[List, str, int]] = ..., partition_names: Optional[List[str]] = ..., **kwargs) -> List[dict]:
        ...
    
    async def get(self, collection_name: str, ids: Union[list, str, int], output_fields: Optional[List[str]] = ..., timeout: Optional[float] = ..., partition_names: Optional[List[str]] = ..., **kwargs) -> List[dict]:
        ...
    
    async def delete(self, collection_name: str, ids: Optional[Union[list, str, int]] = ..., timeout: Optional[float] = ..., filter: Optional[str] = ..., partition_name: Optional[str] = ..., **kwargs) -> Dict[str, int]:
        ...
    
    @classmethod
    def create_schema(cls, **kwargs): # -> CollectionSchema:
        ...
    
    @classmethod
    def prepare_index_params(cls, field_name: str = ..., **kwargs) -> IndexParams:
        ...
    
    async def close(self): # -> None:
        ...
    


