"""
This type stub file was generated by pyright.
"""

from enum import IntEnum

class ErrorCode(IntEnum):
    SUCCESS = ...
    UNEXPECTED_ERROR = ...
    RATE_LIMIT = ...
    FORCE_DENY = ...
    COLLECTION_NOT_FOUND = ...
    INDEX_NOT_FOUND = ...


class MilvusException(Exception):
    def __init__(self, code: int = ..., message: str = ..., compatible_code: int = ...) -> None:
        ...
    
    @property
    def code(self): # -> int:
        ...
    
    @property
    def message(self): # -> str:
        ...
    
    @property
    def compatible_code(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    


class ParamError(MilvusException):
    """Raise when params are incorrect"""
    ...


class ConnectError(MilvusException):
    """Connect server fail"""
    ...


class MilvusUnavailableException(MilvusException):
    """Raise when server's Unavaliable"""
    ...


class CollectionNotExistException(MilvusException):
    """Raise when collections doesn't exist"""
    ...


class DescribeCollectionException(MilvusException):
    """Raise when fail to describe collection"""
    ...


class PartitionAlreadyExistException(MilvusException):
    """Raise when create an exsiting partition"""
    ...


class IndexNotExistException(MilvusException):
    """Raise when index doesn't exist"""
    ...


class AmbiguousIndexName(MilvusException):
    """Raise multiple index exist, need specify index_name"""
    ...


class CannotInferSchemaException(MilvusException):
    """Raise when cannot trasfer dataframe to schema"""
    ...


class SchemaNotReadyException(MilvusException):
    """Raise when schema is wrong"""
    ...


class DataTypeNotMatchException(MilvusException):
    """Raise when datatype dosen't match"""
    ...


class DataTypeNotSupportException(MilvusException):
    """Raise when datatype isn't supported"""
    ...


class DataNotMatchException(MilvusException):
    """Raise when insert data isn't match with schema"""
    ...


class ConnectionNotExistException(MilvusException):
    """Raise when connections doesn't exist"""
    ...


class ConnectionConfigException(MilvusException):
    """Raise when configs of connection are invalid"""
    ...


class PrimaryKeyException(MilvusException):
    """Raise when primarykey are invalid"""
    ...


class PartitionKeyException(MilvusException):
    """Raise when partitionkey are invalid"""
    ...


class ClusteringKeyException(MilvusException):
    """Raise when clusteringkey are invalid"""
    ...


class FieldsTypeException(MilvusException):
    """Raise when fields is invalid"""
    ...


class FunctionsTypeException(MilvusException):
    """Raise when functions are invalid"""
    ...


class FieldTypeException(MilvusException):
    """Raise when one field is invalid"""
    ...


class AutoIDException(MilvusException):
    """Raise when autoID is invalid"""
    ...


class InvalidConsistencyLevel(MilvusException):
    """Raise when consistency level is invalid"""
    ...


class ServerVersionIncompatibleException(MilvusException):
    """Raise when server version is incompatible"""
    ...


class ExceptionsMessage:
    NoHostPort = ...
    HostType = ...
    PortType = ...
    ConnDiffConf = ...
    AliasType = ...
    ConnLackConf = ...
    ConnectFirst = ...
    CollectionNotExistNoSchema = ...
    NoSchema = ...
    EmptySchema = ...
    SchemaType = ...
    SchemaInconsistent = ...
    AutoIDWithData = ...
    AutoIDType = ...
    NumPartitionsType = ...
    AutoIDInconsistent = ...
    AutoIDIllegalRanges = ...
    ConsistencyLevelInconsistent = ...
    AutoIDOnlyOnPK = ...
    AutoIDFieldType = ...
    NumberRowsInvalid = ...
    FieldsNumInconsistent = ...
    NoVector = ...
    NoneDataFrame = ...
    DataFrameType = ...
    NoPrimaryKey = ...
    PrimaryKeyNotExist = ...
    PrimaryKeyOnlyOne = ...
    PartitionKeyOnlyOne = ...
    PrimaryKeyType = ...
    PartitionKeyType = ...
    PartitionKeyNotPrimary = ...
    IsPrimaryType = ...
    PrimaryFieldType = ...
    PartitionKeyFieldType = ...
    PartitionKeyFieldNotExist = ...
    IsPartitionKeyType = ...
    DataTypeInconsistent = ...
    FieldDataInconsistent = ...
    DataTypeNotSupport = ...
    DataLengthsInconsistent = ...
    DataFrameInvalid = ...
    NdArrayNotSupport = ...
    TypeOfDataAndSchemaInconsistent = ...
    PartitionAlreadyExist = ...
    IndexNotExist = ...
    CollectionType = ...
    FieldsType = ...
    FunctionsType = ...
    FunctionIncorrectInputOutputType = ...
    FunctionInvalidOutputField = ...
    FunctionDuplicateInputs = ...
    FunctionDuplicateOutputs = ...
    FunctionCommonInputOutput = ...
    BM25FunctionIncorrectInputOutputCount = ...
    TextEmbeddingFunctionIncorrectInputOutputCount = ...
    TextEmbeddingFunctionIncorrectInputFieldType = ...
    TextEmbeddingFunctionIncorrectOutputFieldType = ...
    BM25FunctionIncorrectInputFieldType = ...
    BM25FunctionIncorrectOutputFieldType = ...
    FunctionMissingInputField = ...
    FunctionMissingOutputField = ...
    UnknownFunctionType = ...
    FunctionIncorrectType = ...
    FieldType = ...
    FieldDtype = ...
    ExprType = ...
    EnvConfigErr = ...
    AmbiguousIndexName = ...
    InsertUnexpectedField = ...
    InsertUnexpectedFunctionOutputField = ...
    InsertMissedField = ...
    UpsertAutoIDTrue = ...
    AmbiguousDeleteFilterParam = ...
    AmbiguousQueryFilterParam = ...
    JSONKeyMustBeStr = ...
    ClusteringKeyType = ...
    ClusteringKeyFieldNotExist = ...
    ClusteringKeyOnlyOne = ...
    IsClusteringKeyType = ...
    ClusteringKeyFieldType = ...
    UpsertPrimaryKeyEmpty = ...
    DefaultValueInvalid = ...
    SearchIteratorV2FallbackWarning = ...


