"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Callable, Optional
from pymilvus.grpc_gen import milvus_pb2

class AbstractFuture:
    @abc.abstractmethod
    def result(self, **kwargs):
        """Return deserialized result.

        It's a synchronous interface. It will wait executing until
        server respond or timeout occur(if specified).

        This API is thread-safe.
        """
        ...
    
    @abc.abstractmethod
    def cancel(self):
        """Cancle gRPC future.

        This API is thread-safe.
        """
        ...
    
    @abc.abstractmethod
    def done(self):
        """Wait for request done.

        This API is thread-safe.
        """
        ...
    


class Future(AbstractFuture):
    def __init__(self, future: Any, done_callback: Optional[Callable] = ..., pre_exception: Optional[Callable] = ..., **kwargs) -> None:
        ...
    
    def add_callback(self, func: Callable): # -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    @abc.abstractmethod
    def on_response(self, response: Callable):
        """Parse response from gRPC server and return results."""
        ...
    
    def result(self, **kwargs): # -> Any | None:
        ...
    
    def cancel(self): # -> None:
        ...
    
    def is_done(self): # -> bool:
        ...
    
    def done(self): # -> None:
        ...
    
    def exception(self): # -> None:
        ...
    


class SearchFuture(Future):
    def on_response(self, response: milvus_pb2.SearchResults): # -> SearchResult:
        ...
    


class MutationFuture(Future):
    def on_response(self, response: Any): # -> MutationResult:
        ...
    


class CreateIndexFuture(Future):
    def on_response(self, response: Any): # -> Status:
        ...
    


class CreateFlatIndexFuture(AbstractFuture):
    def __init__(self, res: Any, done_callback: Optional[Callable] = ..., pre_exception: Optional[Callable] = ...) -> None:
        ...
    
    def add_callback(self, func: Callable): # -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def on_response(self, response: Any): # -> None:
        ...
    
    def result(self): # -> Any | tuple[Any, ...] | None:
        ...
    
    def cancel(self): # -> None:
        ...
    
    def is_done(self): # -> Literal[True]:
        ...
    
    def done(self): # -> None:
        ...
    
    def exception(self): # -> None:
        ...
    


class FlushFuture(Future):
    def on_response(self, response: Any): # -> None:
        ...
    


class LoadCollectionFuture(Future):
    def on_response(self, response: Any): # -> None:
        ...
    


class LoadPartitionsFuture(Future):
    def on_response(self, response: Any): # -> None:
        ...
    


