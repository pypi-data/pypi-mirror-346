"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Iterable, List, Mapping, Optional, Union
from pymilvus.grpc_gen import milvus_pb2 as milvus_types, schema_pb2 as schema_types
from pymilvus.orm.schema import CollectionSchema
from . import utils
from .types import ResourceGroupConfig

class Prepare:
    @classmethod
    def create_collection_request(cls, collection_name: str, fields: Union[Dict[str, Iterable], CollectionSchema], **kwargs) -> milvus_types.CreateCollectionRequest:
        """
        Args:
            fields (Union(Dict[str, Iterable], CollectionSchema)).

                {"fields": [
                        {"name": "A", "type": DataType.INT32}
                        {"name": "B", "type": DataType.INT64, "auto_id": True, "is_primary": True},
                        {"name": "C", "type": DataType.FLOAT},
                        {"name": "Vec", "type": DataType.FLOAT_VECTOR, "params": {"dim": 128}}]
                }

        Returns:
            milvus_types.CreateCollectionRequest
        """
        ...
    
    @classmethod
    def get_schema_from_collection_schema(cls, collection_name: str, fields: CollectionSchema) -> schema_types.CollectionSchema:
        ...
    
    @staticmethod
    def get_field_schema(field: Dict, primary_field: Any, auto_id_field: Any) -> (schema_types.FieldSchema, Any, Any):
        ...
    
    @classmethod
    def get_schema(cls, collection_name: str, fields: Dict[str, Iterable], **kwargs) -> schema_types.CollectionSchema:
        ...
    
    @classmethod
    def drop_collection_request(cls, collection_name: str) -> milvus_types.DropCollectionRequest:
        ...
    
    @classmethod
    def describe_collection_request(cls, collection_name: str) -> milvus_types.DescribeCollectionRequest:
        ...
    
    @classmethod
    def alter_collection_request(cls, collection_name: str, properties: Optional[Dict] = ..., delete_keys: Optional[List[str]] = ...) -> milvus_types.AlterCollectionRequest:
        ...
    
    @classmethod
    def alter_collection_field_request(cls, collection_name: str, field_name: str, field_param: Dict) -> milvus_types.AlterCollectionFieldRequest:
        ...
    
    @classmethod
    def collection_stats_request(cls, collection_name: str):
        ...
    
    @classmethod
    def show_collections_request(cls, collection_names: Optional[List[str]] = ...): # -> ShowCollectionsRequest:
        ...
    
    @classmethod
    def rename_collections_request(cls, old_name: str, new_name: str, new_db_name: str): # -> RenameCollectionRequest:
        ...
    
    @classmethod
    def create_partition_request(cls, collection_name: str, partition_name: str): # -> CreatePartitionRequest:
        ...
    
    @classmethod
    def drop_partition_request(cls, collection_name: str, partition_name: str): # -> DropPartitionRequest:
        ...
    
    @classmethod
    def has_partition_request(cls, collection_name: str, partition_name: str): # -> HasPartitionRequest:
        ...
    
    @classmethod
    def partition_stats_request(cls, collection_name: str, partition_name: str):
        ...
    
    @classmethod
    def show_partitions_request(cls, collection_name: str, partition_names: Optional[List[str]] = ..., type_in_memory: bool = ...): # -> ShowPartitionsRequest:
        ...
    
    @classmethod
    def get_loading_progress(cls, collection_name: str, partition_names: Optional[List[str]] = ...): # -> GetLoadingProgressRequest:
        ...
    
    @classmethod
    def get_load_state(cls, collection_name: str, partition_names: Optional[List[str]] = ...): # -> GetLoadStateRequest:
        ...
    
    @classmethod
    def empty(cls):
        ...
    
    @classmethod
    def register_link_request(cls): # -> RegisterLinkRequest:
        ...
    
    @classmethod
    def partition_name(cls, collection_name: str, partition_name: str):
        ...
    
    @classmethod
    def row_insert_param(cls, collection_name: str, entities: List, partition_name: str, fields_info: Dict, schema_timestamp: int = ..., enable_dynamic: bool = ...): # -> InsertRequest | UpsertRequest:
        ...
    
    @classmethod
    def row_upsert_param(cls, collection_name: str, entities: List, partition_name: str, fields_info: Any, enable_dynamic: bool = ..., schema_timestamp: int = ...): # -> InsertRequest | UpsertRequest:
        ...
    
    @classmethod
    def batch_insert_param(cls, collection_name: str, entities: List, partition_name: str, fields_info: Any): # -> InsertRequest | UpsertRequest:
        ...
    
    @classmethod
    def batch_upsert_param(cls, collection_name: str, entities: List, partition_name: str, fields_info: Any): # -> InsertRequest | UpsertRequest:
        ...
    
    @classmethod
    def delete_request(cls, collection_name: str, filter: str, partition_name: Optional[str] = ..., consistency_level: Optional[Union[int, str]] = ..., **kwargs): # -> DeleteRequest:
        ...
    
    @classmethod
    def prepare_expression_template(cls, values: Dict) -> Any:
        ...
    
    @classmethod
    def search_requests_with_expr(cls, collection_name: str, data: Union[List, utils.SparseMatrixInputType], anns_field: str, param: Dict, limit: int, expr: Optional[str] = ..., partition_names: Optional[List[str]] = ..., output_fields: Optional[List[str]] = ..., round_decimal: int = ..., **kwargs) -> milvus_types.SearchRequest:
        ...
    
    @classmethod
    def hybrid_search_request_with_ranker(cls, collection_name: str, reqs: List, rerank_param: Dict, limit: int, partition_names: Optional[List[str]] = ..., output_fields: Optional[List[str]] = ..., round_decimal: int = ..., **kwargs) -> milvus_types.HybridSearchRequest:
        ...
    
    @classmethod
    def create_alias_request(cls, collection_name: str, alias: str): # -> CreateAliasRequest:
        ...
    
    @classmethod
    def drop_alias_request(cls, alias: str): # -> DropAliasRequest:
        ...
    
    @classmethod
    def alter_alias_request(cls, collection_name: str, alias: str): # -> AlterAliasRequest:
        ...
    
    @classmethod
    def describe_alias_request(cls, alias: str): # -> DescribeAliasRequest:
        ...
    
    @classmethod
    def list_aliases_request(cls, collection_name: str, db_name: str = ...): # -> ListAliasesRequest:
        ...
    
    @classmethod
    def create_index_request(cls, collection_name: str, field_name: str, params: Dict, **kwargs): # -> CreateIndexRequest:
        ...
    
    @classmethod
    def alter_index_properties_request(cls, collection_name: str, index_name: str, properties: dict): # -> AlterIndexRequest:
        ...
    
    @classmethod
    def drop_index_properties_request(cls, collection_name: str, index_name: str, delete_keys: List[str]): # -> AlterIndexRequest:
        ...
    
    @classmethod
    def describe_index_request(cls, collection_name: str, index_name: str, timestamp: Optional[int] = ...): # -> DescribeIndexRequest:
        ...
    
    @classmethod
    def get_index_build_progress(cls, collection_name: str, index_name: str): # -> GetIndexBuildProgressRequest:
        ...
    
    @classmethod
    def get_index_state_request(cls, collection_name: str, index_name: str): # -> GetIndexStateRequest:
        ...
    
    @classmethod
    def load_collection(cls, db_name: str, collection_name: str, replica_number: int, refresh: bool, resource_groups: List[str], load_fields: List[str], skip_load_dynamic_field: bool): # -> LoadCollectionRequest:
        ...
    
    @classmethod
    def release_collection(cls, db_name: str, collection_name: str): # -> ReleaseCollectionRequest:
        ...
    
    @classmethod
    def load_partitions(cls, db_name: str, collection_name: str, partition_names: List[str], replica_number: int, refresh: bool, resource_groups: List[str], load_fields: List[str], skip_load_dynamic_field: bool): # -> LoadPartitionsRequest:
        ...
    
    @classmethod
    def release_partitions(cls, db_name: str, collection_name: str, partition_names: List[str]): # -> ReleasePartitionsRequest:
        ...
    
    @classmethod
    def get_collection_stats_request(cls, collection_name: str): # -> GetCollectionStatisticsRequest:
        ...
    
    @classmethod
    def get_persistent_segment_info_request(cls, collection_name: str): # -> GetPersistentSegmentInfoRequest:
        ...
    
    @classmethod
    def get_flush_state_request(cls, segment_ids: List[int], collection_name: str, flush_ts: int): # -> GetFlushStateRequest:
        ...
    
    @classmethod
    def get_query_segment_info_request(cls, collection_name: str): # -> GetQuerySegmentInfoRequest:
        ...
    
    @classmethod
    def flush_param(cls, collection_names: List[str]): # -> FlushRequest:
        ...
    
    @classmethod
    def drop_index_request(cls, collection_name: str, field_name: str, index_name: str): # -> DropIndexRequest:
        ...
    
    @classmethod
    def get_partition_stats_request(cls, collection_name: str, partition_name: str): # -> GetPartitionStatisticsRequest:
        ...
    
    @classmethod
    def dummy_request(cls, request_type: Any): # -> DummyRequest:
        ...
    
    @classmethod
    def retrieve_request(cls, collection_name: str, ids: List[str], output_fields: List[str], partition_names: List[str]):
        ...
    
    @classmethod
    def query_request(cls, collection_name: str, expr: str, output_fields: List[str], partition_names: List[str], **kwargs): # -> QueryRequest:
        ...
    
    @classmethod
    def load_balance_request(cls, collection_name: str, src_node_id: int, dst_node_ids: List[int], sealed_segment_ids: List[int]): # -> LoadBalanceRequest:
        ...
    
    @classmethod
    def manual_compaction(cls, collection_id: int, collection_name: str, is_clustering: bool): # -> ManualCompactionRequest:
        ...
    
    @classmethod
    def get_compaction_state(cls, compaction_id: int): # -> GetCompactionStateRequest:
        ...
    
    @classmethod
    def get_compaction_state_with_plans(cls, compaction_id: int): # -> GetCompactionPlansRequest:
        ...
    
    @classmethod
    def get_replicas(cls, collection_id: int): # -> GetReplicasRequest:
        ...
    
    @classmethod
    def do_bulk_insert(cls, collection_name: str, partition_name: str, files: list, **kwargs): # -> ImportRequest:
        ...
    
    @classmethod
    def get_bulk_insert_state(cls, task_id: int): # -> GetImportStateRequest:
        ...
    
    @classmethod
    def list_bulk_insert_tasks(cls, limit: int, collection_name: str): # -> ListImportTasksRequest:
        ...
    
    @classmethod
    def create_user_request(cls, user: str, password: str): # -> CreateCredentialRequest:
        ...
    
    @classmethod
    def update_password_request(cls, user: str, old_password: str, new_password: str): # -> UpdateCredentialRequest:
        ...
    
    @classmethod
    def delete_user_request(cls, user: str): # -> DeleteCredentialRequest:
        ...
    
    @classmethod
    def list_usernames_request(cls): # -> ListCredUsersRequest:
        ...
    
    @classmethod
    def create_role_request(cls, role_name: str): # -> CreateRoleRequest:
        ...
    
    @classmethod
    def drop_role_request(cls, role_name: str, force_drop: bool = ...): # -> DropRoleRequest:
        ...
    
    @classmethod
    def operate_user_role_request(cls, username: str, role_name: str, operate_user_role_type: Any): # -> OperateUserRoleRequest:
        ...
    
    @classmethod
    def select_role_request(cls, role_name: str, include_user_info: bool): # -> SelectRoleRequest:
        ...
    
    @classmethod
    def select_user_request(cls, username: str, include_role_info: bool): # -> SelectUserRequest:
        ...
    
    @classmethod
    def operate_privilege_request(cls, role_name: str, object: Any, object_name: str, privilege: str, db_name: str, operate_privilege_type: Any): # -> OperatePrivilegeRequest:
        ...
    
    @classmethod
    def operate_privilege_v2_request(cls, role_name: str, privilege: str, operate_privilege_type: Any, db_name: str, collection_name: str): # -> OperatePrivilegeV2Request:
        ...
    
    @classmethod
    def select_grant_request(cls, role_name: str, object: str, object_name: str, db_name: str): # -> SelectGrantRequest:
        ...
    
    @classmethod
    def get_server_version(cls): # -> GetVersionRequest:
        ...
    
    @classmethod
    def create_resource_group(cls, name: str, **kwargs): # -> CreateResourceGroupRequest:
        ...
    
    @classmethod
    def update_resource_groups(cls, configs: Mapping[str, ResourceGroupConfig]): # -> UpdateResourceGroupsRequest:
        ...
    
    @classmethod
    def drop_resource_group(cls, name: str): # -> DropResourceGroupRequest:
        ...
    
    @classmethod
    def list_resource_groups(cls): # -> ListResourceGroupsRequest:
        ...
    
    @classmethod
    def describe_resource_group(cls, name: str): # -> DescribeResourceGroupRequest:
        ...
    
    @classmethod
    def transfer_node(cls, source: str, target: str, num_node: int): # -> TransferNodeRequest:
        ...
    
    @classmethod
    def transfer_replica(cls, source: str, target: str, collection_name: str, num_replica: int): # -> TransferReplicaRequest:
        ...
    
    @classmethod
    def flush_all_request(cls, db_name: str): # -> FlushAllRequest:
        ...
    
    @classmethod
    def get_flush_all_state_request(cls, flush_all_ts: int, db_name: str): # -> GetFlushAllStateRequest:
        ...
    
    @classmethod
    def register_request(cls, user: str, host: str, **kwargs): # -> ConnectRequest:
        ...
    
    @classmethod
    def create_database_req(cls, db_name: str, properties: Optional[dict] = ...): # -> CreateDatabaseRequest:
        ...
    
    @classmethod
    def drop_database_req(cls, db_name: str): # -> DropDatabaseRequest:
        ...
    
    @classmethod
    def list_database_req(cls): # -> ListDatabasesRequest:
        ...
    
    @classmethod
    def alter_database_properties_req(cls, db_name: str, properties: Dict): # -> AlterDatabaseRequest:
        ...
    
    @classmethod
    def drop_database_properties_req(cls, db_name: str, property_keys: List[str]): # -> AlterDatabaseRequest:
        ...
    
    @classmethod
    def describe_database_req(cls, db_name: str): # -> DescribeDatabaseRequest:
        ...
    
    @classmethod
    def create_privilege_group_req(cls, privilege_group: str): # -> CreatePrivilegeGroupRequest:
        ...
    
    @classmethod
    def drop_privilege_group_req(cls, privilege_group: str): # -> DropPrivilegeGroupRequest:
        ...
    
    @classmethod
    def list_privilege_groups_req(cls): # -> ListPrivilegeGroupsRequest:
        ...
    
    @classmethod
    def operate_privilege_group_req(cls, privilege_group: str, privileges: List[str], operate_privilege_group_type: Any): # -> OperatePrivilegeGroupRequest:
        ...
    
    @classmethod
    def run_analyzer(cls, texts: Union[str, List[str]], analyzer_params: Union[str, Dict], with_hash: bool = ..., with_detail: bool = ...): # -> RunAnalyzerRequest:
        ...
    


