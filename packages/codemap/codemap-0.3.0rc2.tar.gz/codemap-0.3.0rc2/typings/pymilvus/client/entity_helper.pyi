"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Iterable, List, Optional
from pymilvus.grpc_gen import schema_pb2 as schema_types
from .utils import SparseMatrixInputType, SparseRowOutputType

CHECK_STR_ARRAY = ...
def entity_is_sparse_matrix(entity: Any): # -> Any | bool:
    ...

def sparse_parse_single_row(data: bytes) -> SparseRowOutputType:
    ...

def sparse_rows_to_proto(data: SparseMatrixInputType) -> schema_types.SparseFloatArray:
    ...

def sparse_proto_to_rows(sfv: schema_types.SparseFloatArray, start: Optional[int] = ..., end: Optional[int] = ...) -> Iterable[SparseRowOutputType]:
    ...

def get_input_num_rows(entity: Any) -> int:
    ...

def entity_type_to_dtype(entity_type: Any): # -> int:
    ...

def get_max_len_of_var_char(field_info: Dict) -> int:
    ...

def convert_to_str_array(orig_str_arr: Any, field_info: Dict, check: bool = ...): # -> Any | list[Any]:
    ...

def entity_to_str_arr(entity_values: Any, field_info: Any, check: bool = ...): # -> Any | list[Any]:
    ...

def convert_to_json(obj: object): # -> bytes:
    ...

def convert_to_json_arr(objs: List[object], field_info: Any): # -> list[Any]:
    ...

def entity_to_json_arr(entity_values: Dict, field_info: Any): # -> list[Any]:
    ...

def convert_to_array_arr(objs: List[Any], field_info: Any): # -> list[ScalarField]:
    ...

def convert_to_array(obj: List[Any], field_info: Any): # -> ScalarField:
    ...

def entity_to_array_arr(entity_values: List[Any], field_info: Any): # -> list[ScalarField]:
    ...

def pack_field_value_to_field_data(field_value: Any, field_data: schema_types.FieldData, field_info: Any): # -> None:
    ...

def entity_to_field_data(entity: Dict, field_info: Any, num_rows: int) -> schema_types.FieldData:
    ...

def extract_dynamic_field_from_result(raw: Any): # -> tuple[Any | None, set[Any]]:
    ...

def extract_array_row_data(field_data: Any, index: int): # -> list[Any]:
    ...

def extract_row_data_from_fields_data(fields_data: Any, index: Any, dynamic_output_fields: Optional[List] = ...): # -> dict[Any, Any]:
    ...

