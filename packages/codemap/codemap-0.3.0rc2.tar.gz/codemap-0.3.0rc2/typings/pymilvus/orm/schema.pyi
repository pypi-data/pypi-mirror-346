"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Dict, List, Optional, Union
from pymilvus.client.types import FunctionType
from .types import DataType

def validate_primary_key(primary_field: Any): # -> None:
    ...

def validate_partition_key(partition_key_field_name: Any, partition_key_field: Any, primary_field_name: Any): # -> None:
    ...

def validate_clustering_key(clustering_key_field_name: Any, clustering_key_field: Any): # -> None:
    ...

class CollectionSchema:
    def __init__(self, fields: List, description: str = ..., functions: Optional[List] = ..., **kwargs) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __eq__(self, other: object) -> bool:
        """The order of the fields of schema must be consistent."""
        ...
    
    @classmethod
    def construct_from_dict(cls, raw: Dict): # -> CollectionSchema:
        ...
    
    @property
    def primary_field(self): # -> None:
        ...
    
    @property
    def partition_key_field(self): # -> None:
        ...
    
    @property
    def fields(self): # -> list[Any]:
        """
        Returns the fields about the CollectionSchema.

        :return list:
            List of FieldSchema, return when operation is successful.

        :example:
            >>> from pymilvus import FieldSchema, CollectionSchema, DataType
            >>> field = FieldSchema("int64", DataType.INT64, description="int64", is_primary=True)
            >>> schema = CollectionSchema(fields=[field])
            >>> schema.fields
            [<pymilvus.schema.FieldSchema object at 0x7fd3716ffc50>]
        """
        ...
    
    @property
    def functions(self): # -> list[Any]:
        """
        Returns the functions of the CollectionSchema.

        :return list:
            List of Function, return when operation is successful.
        """
        ...
    
    @property
    def description(self): # -> str:
        """
        Returns a text description of the CollectionSchema.

        :return str:
            CollectionSchema description text, return when operation is successful.

        :example:
            >>> from pymilvus import FieldSchema, CollectionSchema, DataType
            >>> field = FieldSchema("int64", DataType.INT64, description="int64", is_primary=True)
            >>> schema = CollectionSchema(fields=[field], description="test get description")
            >>> schema.description
            'test get description'
        """
        ...
    
    @property
    def auto_id(self):
        """
        Whether the primary keys are automatically generated.

        :return bool:
            * True: If the primary keys are automatically generated,
            * False: Otherwise.

        :example:
            >>> from pymilvus import FieldSchema, CollectionSchema, DataType
            >>> field = FieldSchema("int64", DataType.INT64, description="int64", is_primary=True)
            >>> schema = CollectionSchema(fields=[field])
            >>> schema.auto_id
            False
        """
        ...
    
    @auto_id.setter
    def auto_id(self, value: bool): # -> None:
        ...
    
    @property
    def enable_dynamic_field(self): # -> bool:
        ...
    
    @enable_dynamic_field.setter
    def enable_dynamic_field(self, value: bool): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def verify(self): # -> None:
        ...
    
    def add_field(self, field_name: str, datatype: DataType, **kwargs): # -> Self:
        ...
    
    def add_function(self, function: Function): # -> Self:
        ...
    


class FieldSchema:
    def __init__(self, name: str, dtype: DataType, description: str = ..., **kwargs) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __deepcopy__(self, memodict: Optional[Dict] = ...): # -> FieldSchema:
        ...
    
    @classmethod
    def construct_from_dict(cls, raw: Dict): # -> FieldSchema:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def __getattr__(self, item: str): # -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    @property
    def description(self): # -> str:
        """
        Returns the text description of the FieldSchema.

        :return str:
            FieldSchema description text, returned when the operation is successful.

        :example:
        >>> from pymilvus import FieldSchema, DataType
        >>> field = FieldSchema("int64", DataType.INT64, description="int64", is_primary=False)
        >>> field.description
        'int64'
        """
        ...
    
    @property
    def params(self): # -> dict[Any, Any]:
        """
        Returns the parameters of the field.

        :return list:
            List of the parameter.

        :example:
        >>> from pymilvus import FieldSchema, DataType
        >>> field = FieldSchema("int64", DataType.INT64, description="int64", is_primary=False)
        >>> field.params
        {}
        >>> fvec_field = FieldSchema("fvec", DataType.FLOAT_VECTOR, is_primary=False, dim=128)
        >>> fvec_field.params
        {'dim': 128}
        """
        ...
    
    @property
    def dtype(self) -> DataType:
        ...
    


class Function:
    def __init__(self, name: str, function_type: FunctionType, input_field_names: Union[str, List[str]], output_field_names: Union[str, List[str]], description: str = ..., params: Optional[Dict] = ...) -> None:
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    @property
    def description(self): # -> str:
        ...
    
    @property
    def type(self): # -> FunctionType:
        ...
    
    @property
    def input_field_names(self): # -> List[str]:
        ...
    
    @property
    def output_field_names(self): # -> List[str]:
        ...
    
    @property
    def params(self): # -> Dict[Any, Any]:
        ...
    
    def verify(self, schema: CollectionSchema): # -> None:
        ...
    
    @classmethod
    def construct_from_dict(cls, raw: Dict): # -> Function:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def __eq__(self, value: object) -> bool:
        ...
    


def is_valid_insert_data(data: Union[pd.DataFrame, list, dict]) -> bool:
    """DataFrame, list, dict are valid insert data"""
    ...

def is_row_based(data: Union[Dict, List[Dict]]) -> bool:
    """Dict or List[Dict] are row-based"""
    ...

def check_is_row_based(data: Union[List[List], List[Dict], Dict, pd.DataFrame]) -> bool:
    ...

def check_insert_schema(schema: CollectionSchema, data: Union[List[List], pd.DataFrame]): # -> None:
    ...

def check_upsert_schema(schema: CollectionSchema, data: Union[List[List], pd.DataFrame]): # -> None:
    ...

def construct_fields_from_dataframe(df: pd.DataFrame) -> List[FieldSchema]:
    ...

def prepare_fields_from_dataframe(df: pd.DataFrame): # -> tuple[list[Any], list[DataType], dict[Any, Any]]:
    ...

def check_schema(schema: CollectionSchema): # -> None:
    ...

def infer_default_value_bydata(data: Any): # -> ValueField | None:
    ...

