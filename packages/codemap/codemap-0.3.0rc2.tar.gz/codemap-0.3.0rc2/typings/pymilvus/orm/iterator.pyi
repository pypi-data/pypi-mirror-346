"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, List, Optional, TypeVar, Union
from pymilvus.client import utils
from pymilvus.client.abstract import LoopBase
from pymilvus.client.search_result import Hits
from pymilvus.grpc_gen import milvus_pb2 as milvus_types
from .connections import Connections
from .schema import CollectionSchema

log = ...
QueryIterator = TypeVar("QueryIterator")
SearchIterator = TypeVar("SearchIterator")
def fall_back_to_latest_session_ts(): # -> int:
    ...

def assert_info(condition: bool, message: str): # -> None:
    ...

def io_operation(io_func: Callable[[Any], None], message: str): # -> None:
    ...

def extend_batch_size(batch_size: int, next_param: dict, to_extend_batch_size: bool) -> int:
    ...

def check_set_flag(obj: Any, flag_name: str, kwargs: Dict[str, Any], key: str): # -> None:
    ...

class QueryIterator:
    def __init__(self, connection: Connections, collection_name: str, batch_size: Optional[int] = ..., limit: Optional[int] = ..., expr: Optional[str] = ..., output_fields: Optional[List[str]] = ..., partition_names: Optional[List[str]] = ..., schema: Optional[CollectionSchema] = ..., timeout: Optional[float] = ..., **kwargs) -> QueryIterator:
        ...
    
    def get_cursor(self) -> milvus_types.QueryCursor:
        ...
    
    def next(self): # -> List[Any]:
        ...
    
    def close(self) -> None:
        ...
    


def metrics_positive_related(metrics: str) -> bool:
    ...

class SearchPage(LoopBase):
    """Since we only support nq=1 in search iteration, so search iteration response
    should be different from raw response of search operation"""
    def __init__(self, res: Hits, session_ts: Optional[int] = ...) -> None:
        ...
    
    def get_session_ts(self): # -> int | None:
        ...
    
    def get_res(self): # -> list[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def get__item(self, idx: Any): # -> None:
        ...
    
    def merge(self, others: List[Hits]): # -> None:
        ...
    
    def ids(self): # -> list[Any]:
        ...
    
    def distances(self): # -> list[Any]:
        ...
    


class SearchIterator:
    def __init__(self, connection: Connections, collection_name: str, data: Union[List, utils.SparseMatrixInputType], ann_field: str, param: Dict, batch_size: Optional[int] = ..., limit: Optional[int] = ..., expr: Optional[str] = ..., partition_names: Optional[List[str]] = ..., output_fields: Optional[List[str]] = ..., timeout: Optional[float] = ..., round_decimal: int = ..., schema: Optional[CollectionSchema] = ..., **kwargs) -> SearchIterator:
        ...
    
    def next(self): # -> SearchPage:
        ...
    
    def close(self): # -> None:
        ...
    


class IteratorCache:
    def __init__(self) -> None:
        ...
    
    def cache(self, result: Any, cache_id: int): # -> int:
        ...
    
    def fetch_cache(self, cache_id: int): # -> None:
        ...
    
    def release_cache(self, cache_id: int): # -> None:
        ...
    


NO_CACHE_ID = ...
iterator_cache = ...
