"""
This type stub file was generated by pyright.
"""

from typing import Optional

class Role:
    """Role, can be granted privileges which are allowed to execute some objects' apis."""
    def __init__(self, name: str, using: str = ..., **kwargs) -> None:
        """Constructs a role by name
        :param name: role name.
        :type  name: str
        """
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    def create(self):
        """Create a role
            It will success if the role isn't existed, otherwise fail.

        :example:
            >>> from pymilvus import connections, utility
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> role.create()
            >>> roles = utility.list_roles()
            >>> print(f"roles in Milvus: {roles}")
        """
        ...
    
    def drop(self):
        """Drop a role
            It will success if the role is existed, otherwise fail.

        :example:
            >>> from pymilvus import connections, utility
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> role.drop()
            >>> roles = utility.list_roles()
            >>> print(f"roles in Milvus: {roles}")
        """
        ...
    
    def add_user(self, username: str):
        """Add user to role
            The user will get permissions that the role are allowed to perform operations.
            :param username: user name.
            :type  username: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> role.add_user(username)
            >>> users = role.get_users()
            >>> print(f"users added to the role: {users}")
        """
        ...
    
    def remove_user(self, username: str):
        """Remove user from role
            The user will remove permissions that the role are allowed to perform operations.
            :param username: user name.
            :type  username: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> role.remove_user(username)
            >>> users = role.get_users()
            >>> print(f"users added to the role: {users}")
        """
        ...
    
    def get_users(self): # -> list[Any]:
        """Get all users who are added to the role.
            :return a RoleInfo object which contains a RoleItem group
                According to the RoleItem, you can get a list of usernames.

            RoleInfo groups:
            - UserItem: <role_name:admin>, <users:('root',)>

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> users = role.get_users()
            >>> print(f"users added to the role: {users}")
        """
        ...
    
    def is_exist(self): # -> bool:
        """Check whether the role is existed.
            :return a bool value
                It will be True if the role is existed, otherwise False.

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(name=role_name)
            >>> is_exist = role.is_exist()
            >>> print(f"the role: {is_exist}")
        """
        ...
    
    def grant(self, object: str, object_name: str, privilege: str, db_name: str = ...):
        """Grant a privilege for the role
            :param object: object type.
            :type  object: str
            :param object_name: identifies a specific object name.
            :type  object_name: str
            :param privilege: privilege name.
            :type  privilege: str
            :param db_name: db name.
            :type  db_name: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.grant("Collection", collection_name, "Insert")
        """
        ...
    
    def revoke(self, object: str, object_name: str, privilege: str, db_name: str = ...):
        """Revoke a privilege for the role
        Args:
            object(str): object type.
            object_name(str): identifies a specific object name.
            privilege(str): privilege name.
            db_name(str): db name.

        Examples:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.revoke("Collection", collection_name, "Insert")
        """
        ...
    
    def grant_v2(self, privilege: str, collection_name: str, db_name: Optional[str] = ...):
        """Grant a privilege for the role
            :param privilege: privilege name.
            :type  privilege: str
            :param collection_name: collection name.
            :type  collection_name: str
            :param db_name: db name. Optional. If None, use the default db.
            :type  db_name: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.grant_v2("Insert", collection_name, db_name=db_name)
        """
        ...
    
    def revoke_v2(self, privilege: str, collection_name: str, db_name: Optional[str] = ...):
        """Revoke a privilege for the role
            :param privilege: privilege name.
            :type  privilege: str
            :param collection_name: collection name.
            :type  collection_name: str
            :param db_name: db name. Optional. If None, use the default db.
            :type  db_name: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.revoke_v2("Insert", collection_name, db_name=db_name)
        """
        ...
    
    def list_grant(self, object: str, object_name: str, db_name: str = ...):
        """List a grant info for the role and the specific object
            :param object: object type.
            :type  object: str
            :param object_name: identifies a specific object name.
            :type  object_name: str
            :param db_name: db name.
            :type  db_name: str
            :return a GrantInfo object
            :rtype GrantInfo

            GrantInfo groups:
                - GrantItem: <object:Collection>, <object_name:foo>, <role_name:x>,
                <grantor_name:root>, <privilege:Load>

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.list_grant("Collection", collection_name)
        """
        ...
    
    def list_grants(self, db_name: str = ...):
        """List a grant info for the role
            :param db_name: db name.
            :type  db_name: str
            :return a GrantInfo object
            :rtype GrantInfo

            GrantInfo groups:
            - GrantItem: <object:Collection>, <object_name:foo>, <role_name:x>,
                <grantor_name:root>, <privilege:Load>

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.list_grants()
        """
        ...
    
    def create_privilege_group(self, privilege_group: str):
        """Create a privilege group for the role
            :param privilege_group: privilege group name.
            :type  privilege_group: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.create_privilege_group(privilege_group="privilege_group")
        """
        ...
    
    def drop_privilege_group(self, privilege_group: str):
        """Drop a privilege group for the role
            :param privilege_group: privilege group name.
            :type  privilege_group: str

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.drop_privilege_group(privilege_group="privilege_group")
        """
        ...
    
    def list_privilege_groups(self):
        """List all privilege groups for the role
            :return a PrivilegeGroupInfo object
            :rtype PrivilegeGroupInfo

            PrivilegeGroupInfo groups:
            - PrivilegeGroupItem: <group_name:group1>, <privileges:['Insert', 'Release']>

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.list_privilege_groups()
        """
        ...
    
    def add_privileges_to_group(self, privilege_group: str, privileges: list):
        """Add privileges to a privilege group for the role
            :param privilege_group: privilege group name.
            :type  privilege_group: str
            :param privileges: a list of privilege names.
            :type  privileges: list

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.add_privileges_to_group(privilege_group="privilege_group",
            >>>     privileges=["Insert","Release"])
        """
        ...
    
    def remove_privileges_from_group(self, privilege_group: str, privileges: list):
        """Remove privileges from a privilege group for the role
            :param privilege_group: privilege group name.
            :type  privilege_group: str
            :param privileges: a list of privilege names.
            :type  privileges: list

        :example:
            >>> from pymilvus import connections
            >>> from pymilvus.orm.role import Role
            >>> connections.connect()
            >>> role = Role(role_name)
            >>> role.remove_privileges_from_group(privilege_group="privilege_group",
            >>>     privileges=["Insert","Release"])
        """
        ...
    


