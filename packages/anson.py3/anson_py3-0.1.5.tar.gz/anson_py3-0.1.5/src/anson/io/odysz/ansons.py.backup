import dataclasses
import sys
from dataclasses import dataclass, fields, MISSING, Field

import json
from enum import Enum
from numbers import Number
from typing import TypeVar, List, Dict, get_origin, get_args, ForwardRef, Any, Union, Optional

from .common import Utils

# TAnson = TypeVar('TAnson', bound='Anson')

java_src_path: str = ''

def class4Name(m, clssn: str) -> type:
    """
    With returned class type:
        obj = cls()  # Adjust arguments as needed
        obj.__type__=f'{m}.{clssn}'
    :param m:
    :param clssn:
    :return class type:
    """
    module = __import__(m, fromlist=[clssn])
    cls = getattr(module, clssn)
    cls.__type__=f'{m}.{clssn}'
    return cls

def getClass(_typ_: str):
    if _typ_ is None:
        return None
    parts = _typ_.split('.')
    module = ".".join(parts[:-1])
    # m = __import__(module if module is not None else '__main__')
    # for comp in parts[1:]:
    #     m = getattr(m, comp)
    # return m
    return class4Name(module, parts[-1])

def instanceof(cls: type, props: dict):
    obj = cls()

    _FIELDS = '__dataclass_fields__'
    fds = getattr(cls, _FIELDS)

    for k, v in props.items():

        ftype = fds[k].type if k in fds and hasattr(fds[k], 'type') else type(v)

        if isinstance(v, list):
            setattr(obj, k, Anson.from_list(v, None))
        elif isinstance(v, dict):
            setattr(obj, k, Anson.from_obj(v, None))
        elif ftype == list:
            setattr(obj, k, Anson.from_list(v, None))
        elif ftype == dict:
            setattr(obj, k, Anson.from_obj(v, None))
        else:
            isAnson = False
            try:
                isAnson = k in fds and hasattr(fds[k], 'type') and issubclass(fds[k].type, Anson)
            except: pass
            setattr(obj, k, Anson.from_obj(v, fds[k].type) if isAnson else v)

    missingAttrs = []
    for k in fds:
        if not hasattr(obj, k) and fds[k].default is dataclasses.MISSING:
            missingAttrs.append(k)
            setattr(obj, k, None)

    if len(missingAttrs) > 0:
        Utils.warn(f'Missing attributes in {obj.__type__}: {missingAttrs}. Anson expect a __init__() for all initialize the none default fields.')

    # print(obj)
    return obj

@dataclass
class Anson(dict):
    enclosinguardtypes = set()
    
    __type__: str
    '''ansons.antson.Anson'''

    def __init__(self):
        super().__init__()
        t = type(self)
        self.__type__ = f'{t.__module__}.{t.__name__}'

    def __setitem__(self, key, value):
        self.__dict__[key] = value

    def __getitem__(self, key):
        return self.__dict__[key]

    @dataclass()
    class Trumpfield():
        '''
        {name, type, isAnson, antype, factory}
        '''
        name: str
        fieldtype: type
        origintype: type
        isAnson: bool
        elemtype: type
        antype: str
        factory: any

    @staticmethod
    def fields(instance) -> dict[str, Trumpfield]:
        _FIELDS = '__dataclass_fields__' # see dataclasses.fields()
        if isinstance(instance, Anson):
            fds = getattr(type(instance), _FIELDS)
        elif instance is not None and isinstance(instance, dict):
            ikeys = instance.keys()
            # f = {}
            # setattr(f, 'type', None)
            # fds = dict((k, {"type": None}) for k in list(ikeys))
            fds = dict((k, Anson.Trumpfield(
                name=k, fieldtype=None,
                origintype=dict, isAnson=False,
                elemtype=None, antype='dic',
                factory=None)) for k in list(ikeys))
        elif instance is not None:
            raise TypeError(f'Do not use in this way. fields() only used for Anson & dict object, but got: {instance}')

        def get_mandatype(t: TypeVar):
            if isinstance(t, type(Optional[Any])):
                return get_args(t)[0]
            elif sys.version_info > (3,10,0) and isinstance(t, type(Any | None)):
                print(get_args(t))
                for m in get_args(t):
                    if m is not type(None):
                        return m
            return t

        def figureNormalType(f: Field) -> tuple:
            try: isAnson = issubclass(f.type, Anson) or isinstance(f.type, Anson)
            except: isAnson = False
            return f, get_origin(f.type), get_args(f.type), isAnson

        def figure_list(anobj: Anson, f: Field, guardTypes: set[Anson]):
            if f.type == list:
                return f, list, None, False
            if not isinstance(f.type, list):
                raise Exception("Not here")

            ot = list

            if len(f.type) > 0 and isinstance(f.type[0], TypeVar):
                raise TypeError("Cannot parse Python forward type reference. Jserv Protocol layer is supposed to be automatically generated with syntax limitations.")

            if len(f.type) > 0 and isinstance(f.type[0], str):
                # Anson forward ref
                et = class4Name(anobj.__module__, f.type[0])
            else:
                et = get_args(f.type) if len(f.type) > 0 and isinstance(f.type[0], str) \
                    else f.type[0] if len(f.type) > 0 else f.type

            return f, ot, et, False

        def figure_dict(anobj: Anson, f: Field, envType: set[Anson]) -> tuple:
            if f.type == dict:
                return f, dict, None, False
            if not isinstance(f.type, dict):
                raise Exception("Not here")

            if len(f.type) > 0 and isinstance(f.type[0], str):
                # Anson forward ref
                et = class4Name(anobj.__module__, f.type[0])
            else:
                et = get_args(f.type) if len(f.type) > 0 and isinstance(f.type[0], str) \
                    else f.type[0] if len(f.type) > 0 else f.type

            return f, dict, et, False

        def toTrump(anobj, fn: str, f: Field):
            """
            Simply & brutally figuring types. We only care about Anson types, the exceptional.
            :param anobj:
            :param fn:
            :return: TrumpField
            """
            # f = fds[fn]
            f.type = get_mandatype(f.type)

            if f.type == list or isinstance(f.type, List):
                # f, ot, et, isAnson = figure_list(f, Anson.enclosinguardtypes)
                v = figure_list(anobj, f, Anson.enclosinguardtypes)
                f, ot, et, isAnson = v
            elif f.type == dict or isinstance(f.type, Dict):
                f, ot, et, isAnson = figure_dict(anobj, f, Anson.enclosinguardtypes)
            else:
                f, ot, et, isAnson = figureNormalType(f)

            return Anson.Trumpfield(
                f.name, f.type,
                ot, isAnson,
                et if type(et) == type else None if et is None or len(et) == 0 else et[0],
                'str' if f.type == str else
                    'lst' if ot == list else
                    'dic' if ot == dict else
                    'num' if ot is None and issubclass(f.type, Number) else
                    f.type if isAnson else
                    'obj',
                None if f.default_factory is MISSING else f.default_factory)

        return {it: f if isinstance(f, Anson.Trumpfield) else toTrump(instance, it, f) for it, f in fds.items()}

    @staticmethod
    def toList_(lst: list, ind: int, beautify):
        # if elemtype is None or not issubclass(elemtype, Anson): return str(lst)
        # return '[\n' + ','.join([Anson.toBlock_(e, ind + 1) for e in lst]) + ']'

        # return (f'{'[\n' if beautify else '['}' +
        # return '[' + ', '.join([e.toBlock_(ind + 0, beautify) if isinstance(e, Anson) \
        #        else f'"{e}"' if isinstance(e, str) and e is not None \
        #        else str(e) for e in lst]) + ']'

        s =  '[' + ', '.join([e.toBlock_(ind + 0, beautify) if isinstance(e, Anson) \
               else f'"{e}"' if isinstance(e, str) and e is not None \
               else str(e) for e in lst]) + ']'
        print(s)
        return s

    @staticmethod
    def toDict_(dic: dict, ind: int, beautify):
        if type(dic) == list:
            print(dic)

        # return '{\n' + ',\n'.join(' ' * (ind * 2 + 2) + Anson.toBlock_(dic[k], ind + 1) for k in dic) + '}'
        return '{\n' + ',\n'.join(' ' * (ind * 2 + 2) + dic[k].toBlock_(ind + 1, beautify) if isinstance(dic[k], Anson) else str(dic[k]) for k in dic) + '}' if beautify \
            else '{' + ','.join(dic[k].toBlock_(ind + 1, beautify) if isinstance(dic[k], Anson) else str(dic[k]) for k in dic) + '}'

    def toBlock(self, beautify=True) -> str:
        return self.toBlock_(0, beautify)

    def toFile(self, path: str):
        with open(path, 'w+') as jf:
            jf.write(self.toBlock(True))

    def toBlock_(self, ind: int, beautify) -> str:
        myfds = self.fields(self)
        s = ' ' * (ind * 2) + '{\n' if beautify else '{'

        has_prvious = False

        for x, k in enumerate(self.__dict__):
            if '__type__' == k:

                # if not beautify: # beautify == False is not sending protocol pacakge, to be fixed
                #     tp = str(self['__type__']).removeprefix(java_src_path+'.')
                #     if has_prvious: s += ','
                #     s += f'"type": "{tp}"'
                #     has_prvious = True
                # else: continue # later can figure out type by field's type

                tp = str(self['__type__']).removeprefix(java_src_path+'.')
                if has_prvious: s += ',\n' if beautify else ', '
                s += f'{' ' * (ind * 2 + 2) if beautify else ''}"type": "{tp}"'
                has_prvious = True

            else:
                if k not in myfds:
                    Utils.warn("Field {0}.{1} is not defined in Anson, which is presenting in data object. Value ignored: {2}.",
                               str(self['__type__']), k, self[k])
                    continue
                if has_prvious: s += ',\n' if beautify else ','
                s += f'{" " * (ind * 2 + 2)}"{k}": ' if beautify else f'"{k}": '
                v = self[k]
                if type(v) == dict:
                    print(v)
                s += 'null' if v is None or isinstance(v, Field) \
                    else f'"{v}"' if isinstance(v, str) \
                    else v.toBlock_(ind + 1, beautify) if myfds[k].isAnson \
                    else f'"{v.name}"' if isinstance(v, Enum) \
                    else Anson.toList_(v, ind + 1, beautify) if myfds[k].antype == 'lst' \
                    else Anson.toDict_(v, ind + 1, beautify) if myfds[k].antype == 'obj' \
                    else str(v)

                has_prvious = True
        return s + ('\n' if has_prvious else '') + (' ' * (ind * 2) + '}' if beautify else '}')

    @staticmethod
    def from_value(anobj, f, v):
        f
        return Anson.from_obj(anobj[f], f.antype) if fds[k].isAnson \
            else Anson.from_dict(obj[jsonk], fds[k].elemtype) if fds[k].antype == 'obj'\
            else Anson.from_list(obj[jsonk], fds[k].elemtype) if fds[k].antype == 'lst' \
            else obj[jsonk]

    @staticmethod
    def from_dict(v: dict, eletype: type) -> dict:
        if eletype is None: return v

        d = {}
        for k in v:
            d[k] = Anson.from_obj(v[k], eletype)
        return d

    @staticmethod
    def from_list(v: list, eletype: type) -> list:
        # override field type with protocol package's info
        if not isinstance(v, list):
            Utils.warn(f'Expection a list instance, but got "{v}"')
            return [v]
        if len(v) > 0 and hasattr(v[0], 'type') and isinstance(v[0]['type'], str):
            eletype = getClass(f'{java_src_path}.{v[0]["type"]}')

        # if eletype is None: return v
        return 'null' if v is None else [Anson.from_obj(x, eletype) for x in v]

    @staticmethod
    def from_obj(obj: dict, typename: Union[str, type]) -> 'Anson':

        if obj is None: return None

        type4name = typename if isinstance(typename, type) else getClass(typename)
        if type4name is not None and issubclass(type4name, Anson):
            anson = instanceof(type4name, obj)
        else:
            ## relic to be removed?
            ##
            ##
            anson = getClass(typename)() if isinstance(typename, str) else obj

            fds = Anson.fields(anson)
            if '__type__' not in fds and type(anson) != dict:
                raise Exception(f'Class {type(anson)} has no field "__type__". Is it a subclass of Anson?')

            for jsonk in obj:
                k = '__type__' if jsonk == 'type' else jsonk
                if k != '__type__' and k not in fds:
                    Utils.warn(f'Field ignored: {k}: {obj[k]}') # TODO deserialize enum, e.g. MsgCode
                    continue

                if fds[k].antype == 'lst':
                    print(fds[k].elemtype)

                # anson[k] = Anson.from_obj(obj[jsonk], fds[k].antype) if fds[k].isAnson \
                #         else Anson.from_dict(obj[jsonk], fds[k].elemtype) if fds[k].antype == 'obj'\
                #         else Anson.from_list(obj[jsonk], fds[k].elemtype) if fds[k].antype == 'lst' \
                #         else obj[jsonk]
                anson[k] = Anson.from_value(anson, k, obj[jsonk])

        return anson

    @staticmethod
    def from_json(jsonstr: str) -> 'Anson':
        obj = json.loads(jsonstr)
        v = Anson.from_envelope(obj)
        print(v, type(v))
        return v

    @staticmethod
    def from_file(fp: str) -> 'Anson':
        with open(fp, 'r') as file:
            obj = json.load(file)
            return Anson.from_envelope(obj)

    @classmethod
    def java_src(cls, src_root: str = ''):
        """
        :param src_root: e. g. 'src'
        """
        global java_src_path
        java_src_path = src_root

    @classmethod
    def from_envelope(cls, obj: dict):
        return Anson.from_obj(obj,
                '.'.join([java_src_path, obj['type']]) if len(java_src_path) > 0 else obj['type'])
