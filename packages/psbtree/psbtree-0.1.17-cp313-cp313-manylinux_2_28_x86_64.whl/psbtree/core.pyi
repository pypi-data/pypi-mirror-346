import pybind11
from typing import Any, Callable, Dict, List, Tuple, Union

class BTreeData:
    def __init__(self) -> None: ...
    data: Any

class PortInfo:
    def type(self) -> str: ...
    def description(self) -> str: ...

def InputPort(name: str, description: str = "") -> Tuple[str, PortInfo]: ...

class NodeStatus:
    IDLE: NodeStatus
    RUNNING: NodeStatus
    SUCCESS: NodeStatus
    FAILURE: NodeStatus
    SKIPPED: NodeStatus

def registerNodeType(factory: BehaviorTreeFactory, name: str, cls: pybind11.object) -> None: ...

class SyncActionNode:
    def __init__(self, name: str, config: NodeConfig) -> None: ...
    def tick(self) -> NodeStatus: ...
    @staticmethod
    def providedPorts() -> List[Dict[str, str]]: ...

class SimpleActionNode(SyncActionNode):
    def __init__(self, name: str, config: NodeConfig) -> None: ...
    def tick(self) -> NodeStatus: ...

class Tree:
    def __init__(self) -> None: ...
    def tickOnce(self) -> NodeStatus: ...
    def SetRootBlackboardData(self, key: str, value: Any) -> None: ...
    def GetRootBlackboardData(self, key: str) -> Any: ...

class TreeNode:
    def getInput(self, key: str) -> Any: ...
    def setOutput(self, key: str, value: Any) -> None: ...
    def getInputObject(self, key: str) -> Any: ...
    def getInputInt(self, key: str) -> int: ...
    def getInputString(self, key: str) -> str: ...

class NodeConfig:
    def __init__(self) -> None: ...

class BehaviorTreeFactory:
    def __init__(self) -> None: ...
    def createTreeFromText(self, text: str) -> Tree: ...
    def registerSimpleAction(
        self,
        ID: str,
        tick_functor: Callable[[TreeNode], NodeStatus],
        ports_list: List[Dict[str, str]]
    ) -> None: ...

__version__: str