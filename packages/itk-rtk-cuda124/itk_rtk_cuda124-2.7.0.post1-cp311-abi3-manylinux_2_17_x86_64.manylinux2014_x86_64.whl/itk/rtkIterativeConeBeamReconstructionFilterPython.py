# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkIterativeConeBeamReconstructionFilterPython
else:
    import _rtkIterativeConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkBackProjectionImageFilterPython

def rtkIterativeConeBeamReconstructionFilterCIF3CIF3_New():
    return rtkIterativeConeBeamReconstructionFilterCIF3CIF3.New()

class rtkIterativeConeBeamReconstructionFilterCIF3CIF3(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIF3CIF3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIF3CIF3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageF3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageF3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIF3CIF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIF3CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIF3CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIF3CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIF3CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIF3CIF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3_swigregister(rtkIterativeConeBeamReconstructionFilterCIF3CIF3)

def rtkIterativeConeBeamReconstructionFilterCIF4CIF3_New():
    return rtkIterativeConeBeamReconstructionFilterCIF4CIF3.New()

class rtkIterativeConeBeamReconstructionFilterCIF4CIF3(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIF4CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIF4CIF3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIF4CIF3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageF3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageF3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIF4CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIF4CIF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIF4CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIF4CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIF4CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIF4CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIF4CIF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF4CIF3_swigregister(rtkIterativeConeBeamReconstructionFilterCIF4CIF3)

def rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_New():
    return rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23.New()

class rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageVF23 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageVF23_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23_swigregister(rtkIterativeConeBeamReconstructionFilterCIVF23CIVF23)

def rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_New():
    return rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33.New()

class rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageVF33 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageVF33_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33_swigregister(rtkIterativeConeBeamReconstructionFilterCIVF33CIVF33)

def rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_New():
    return rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43.New()

class rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43(itk.itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageVF43 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageVF43_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43_swigregister(rtkIterativeConeBeamReconstructionFilterCIVF43CIVF43)

def rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_New():
    return rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53.New()

class rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterCIVF53CIVF53):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkCudaImageVF53 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkCudaImageVF53_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53_swigregister(rtkIterativeConeBeamReconstructionFilterCIVF53CIVF53)

def rtkIterativeConeBeamReconstructionFilterID3_New():
    return rtkIterativeConeBeamReconstructionFilterID3.New()

class rtkIterativeConeBeamReconstructionFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterID3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterID3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterID3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterID3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterID3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterID3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterID3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterID3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3_swigregister(rtkIterativeConeBeamReconstructionFilterID3)

def rtkIterativeConeBeamReconstructionFilterID4ID3_New():
    return rtkIterativeConeBeamReconstructionFilterID4ID3.New()

class rtkIterativeConeBeamReconstructionFilterID4ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterID4ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterID4ID3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterID4ID3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterID4ID3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterID4ID3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterID4ID3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterID4ID3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterID4ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterID4ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterID4ID3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterID4ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterID4ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterID4ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterID4ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterID4ID3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID4ID3_swigregister(rtkIterativeConeBeamReconstructionFilterID4ID3)

def rtkIterativeConeBeamReconstructionFilterIF3_New():
    return rtkIterativeConeBeamReconstructionFilterIF3.New()

class rtkIterativeConeBeamReconstructionFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIF3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIF3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIF3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIF3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageF3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkImageF3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3_swigregister(rtkIterativeConeBeamReconstructionFilterIF3)

def rtkIterativeConeBeamReconstructionFilterIF4IF3_New():
    return rtkIterativeConeBeamReconstructionFilterIF4IF3.New()

class rtkIterativeConeBeamReconstructionFilterIF4IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIF4IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIF4IF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIF4IF3_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIF4IF3::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIF4IF3::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIF4IF3::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIF4IF3::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageF3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itkImageF3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIF4IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIF4IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIF4IF3

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIF4IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIF4IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIF4IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIF4IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIF4IF3 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF4IF3_swigregister(rtkIterativeConeBeamReconstructionFilterIF4IF3)

def rtkIterativeConeBeamReconstructionFilterIVF23IVF23_New():
    return rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New()

class rtkIterativeConeBeamReconstructionFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIVF23IVF23::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIVF23IVF23::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageVF23 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itk::SmartPointer< itk::Image< itk::Vector< float,2 >,3 > const >"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF23IVF23

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF23IVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF23IVF23 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF23IVF23_swigregister(rtkIterativeConeBeamReconstructionFilterIVF23IVF23)

def rtkIterativeConeBeamReconstructionFilterIVF33IVF33_New():
    return rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New()

class rtkIterativeConeBeamReconstructionFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIVF33IVF33::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIVF33IVF33::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageVF33 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itk::SmartPointer< itk::Image< itk::Vector< float >,3 > const >"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF33IVF33

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF33IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF33IVF33 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF33IVF33_swigregister(rtkIterativeConeBeamReconstructionFilterIVF33IVF33)

def rtkIterativeConeBeamReconstructionFilterIVF43IVF43_New():
    return rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New()

class rtkIterativeConeBeamReconstructionFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIVF43IVF43::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIVF43IVF43::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageVF43 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itk::SmartPointer< itk::Image< itk::Vector< float,4 >,3 > const >"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF43IVF43

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF43IVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF43IVF43 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF43IVF43_swigregister(rtkIterativeConeBeamReconstructionFilterIVF43IVF43)

def rtkIterativeConeBeamReconstructionFilterIVF53IVF53_New():
    return rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New()

class rtkIterativeConeBeamReconstructionFilterIVF53IVF53(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53):
    r"""Proxy of C++ rtkIterativeConeBeamReconstructionFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ForwardProjectionType_FP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_JOSEPH
    
    ForwardProjectionType_FP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_CUDARAYCAST
    
    ForwardProjectionType_FP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_JOSEPHATTENUATED
    
    ForwardProjectionType_FP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_ForwardProjectionType_FP_ZENG
    
    BackProjectionType_BP_VOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_VOXELBASED
    
    BackProjectionType_BP_JOSEPH = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_JOSEPH
    
    BackProjectionType_BP_CUDAVOXELBASED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_CUDAVOXELBASED
    
    BackProjectionType_BP_CUDARAYCAST = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_CUDARAYCAST
    
    BackProjectionType_BP_JOSEPHATTENUATED = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_JOSEPHATTENUATED
    
    BackProjectionType_BP_ZENG = _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_BackProjectionType_BP_ZENG
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53_Pointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_Clone(self)

    def SetForwardProjectionFilter(self, fwtype):
        r"""
        SetForwardProjectionFilter(self, fwtype)

        Parameters
        ----------
        fwtype: enum rtkIterativeConeBeamReconstructionFilterIVF53IVF53::ForwardProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetForwardProjectionFilter(self, fwtype)

    def GetForwardProjectionFilter(self):
        r"""GetForwardProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53::ForwardProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetForwardProjectionFilter(self)

    def SetBackProjectionFilter(self, bptype):
        r"""
        SetBackProjectionFilter(self, bptype)

        Parameters
        ----------
        bptype: enum rtkIterativeConeBeamReconstructionFilterIVF53IVF53::BackProjectionType

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetBackProjectionFilter(self, bptype)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53::BackProjectionType"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetBackProjectionFilter(self)

    def SetAttenuationMap(self, attenuationMap):
        r"""
        SetAttenuationMap(self, attenuationMap)

        Parameters
        ----------
        attenuationMap: itkImageVF53 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetAttenuationMap(self, attenuationMap)

    def GetAttenuationMap(self):
        r"""GetAttenuationMap(self) -> itk::SmartPointer< itk::Image< itk::Vector< float,5 >,3 > const >"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetAttenuationMap(self)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetSuperiorClipImage(self)

    def GetSigmaZero(self):
        r"""GetSigmaZero(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetSigmaZero(self)

    def SetSigmaZero(self, _arg):
        r"""
        SetSigmaZero(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetSigmaZero(self, _arg)

    def GetAlphaPSF(self):
        r"""GetAlphaPSF(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetAlphaPSF(self)

    def SetAlphaPSF(self, _arg):
        r"""
        SetAlphaPSF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetAlphaPSF(self, _arg)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkIterativeConeBeamReconstructionFilterPython.delete_rtkIterativeConeBeamReconstructionFilterIVF53IVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkIterativeConeBeamReconstructionFilterIVF53IVF53

        Create a new object of the class rtkIterativeConeBeamReconstructionFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkIterativeConeBeamReconstructionFilterIVF53IVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkIterativeConeBeamReconstructionFilterIVF53IVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkIterativeConeBeamReconstructionFilterIVF53IVF53 in _rtkIterativeConeBeamReconstructionFilterPython:
_rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIVF53IVF53_swigregister(rtkIterativeConeBeamReconstructionFilterIVF53IVF53)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def iterative_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=..., step_size: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for IterativeConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf,'step_size':step_size }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.IterativeConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def iterative_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.IterativeConeBeamReconstructionFilter
    iterative_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    iterative_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__



