# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkCudaForwardProjectionImageFilterPython
else:
    import _rtkCudaForwardProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython

def itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_New():
    return itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3.New()

class itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterCIF3CIF3):
    r"""Proxy of C++ itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageF3 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageF3 *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_GraftOutput(self, *args)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3

        Create a new object of the class itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3_swigregister(itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3)

def itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_New():
    return itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23.New()

class itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterCIVF23CIVF23):
    r"""Proxy of C++ itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageVF23 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageVF23 *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_GraftOutput(self, *args)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23

        Create a new object of the class itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23_swigregister(itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23)

def itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_New():
    return itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33.New()

class itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterCIVF33CIVF33):
    r"""Proxy of C++ itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageVF33 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageVF33 *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_GraftOutput(self, *args)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33

        Create a new object of the class itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33_swigregister(itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33)

def itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_New():
    return itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43.New()

class itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterCIVF43CIVF43):
    r"""Proxy of C++ itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageVF43 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageVF43 *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_GraftOutput(self, *args)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43

        Create a new object of the class itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43_swigregister(itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43)

def itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_New():
    return itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53.New()

class itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterCIVF53CIVF53):
    r"""Proxy of C++ itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageVF53 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageVF53 *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_GraftOutput(self, *args)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53

        Create a new object of the class itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53_swigregister(itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53)
class itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3(itkCudaImageToImageFilterCIF3CIF3FPCIF3CIF3):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3_cast(obj)

# Register itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3_swigregister(itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3)
class itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23(itkCudaImageToImageFilterCIVF23CIVF23FPCIVF23CIVF23):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23_cast(obj)

# Register itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23_swigregister(itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23)
class itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33(itkCudaImageToImageFilterCIVF33CIVF33FPCIVF33CIVF33):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33_cast(obj)

# Register itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33_swigregister(itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33)
class itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43(itkCudaImageToImageFilterCIVF43CIVF43FPCIVF43CIVF43):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43_cast(obj)

# Register itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43_swigregister(itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43)
class itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53(itkCudaImageToImageFilterCIVF53CIVF53FPCIVF53CIVF53):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53_cast(obj)

# Register itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53_swigregister(itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53)

def rtkCudaForwardProjectionImageFilterCIF3_New():
    return rtkCudaForwardProjectionImageFilterCIF3.New()

class rtkCudaForwardProjectionImageFilterCIF3(itkCudaInPlaceImageFilterCIF3CIF3FPCIF3CIF3):
    r"""Proxy of C++ rtkCudaForwardProjectionImageFilterCIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkCudaForwardProjectionImageFilterCIF3_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkCudaForwardProjectionImageFilterCIF3_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3_Clone(self)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_rtkCudaForwardProjectionImageFilterCIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaForwardProjectionImageFilterCIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkCudaForwardProjectionImageFilterCIF3

        Create a new object of the class rtkCudaForwardProjectionImageFilterCIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaForwardProjectionImageFilterCIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaForwardProjectionImageFilterCIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaForwardProjectionImageFilterCIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaForwardProjectionImageFilterCIF3 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIF3_swigregister(rtkCudaForwardProjectionImageFilterCIF3)

def rtkCudaForwardProjectionImageFilterCIVF23_New():
    return rtkCudaForwardProjectionImageFilterCIVF23.New()

class rtkCudaForwardProjectionImageFilterCIVF23(itkCudaInPlaceImageFilterCIVF23CIVF23FPCIVF23CIVF23):
    r"""Proxy of C++ rtkCudaForwardProjectionImageFilterCIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkCudaForwardProjectionImageFilterCIVF23_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkCudaForwardProjectionImageFilterCIVF23_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23_Clone(self)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_rtkCudaForwardProjectionImageFilterCIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaForwardProjectionImageFilterCIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkCudaForwardProjectionImageFilterCIVF23

        Create a new object of the class rtkCudaForwardProjectionImageFilterCIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaForwardProjectionImageFilterCIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaForwardProjectionImageFilterCIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaForwardProjectionImageFilterCIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaForwardProjectionImageFilterCIVF23 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF23_swigregister(rtkCudaForwardProjectionImageFilterCIVF23)

def rtkCudaForwardProjectionImageFilterCIVF33_New():
    return rtkCudaForwardProjectionImageFilterCIVF33.New()

class rtkCudaForwardProjectionImageFilterCIVF33(itkCudaInPlaceImageFilterCIVF33CIVF33FPCIVF33CIVF33):
    r"""Proxy of C++ rtkCudaForwardProjectionImageFilterCIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkCudaForwardProjectionImageFilterCIVF33_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkCudaForwardProjectionImageFilterCIVF33_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33_Clone(self)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_rtkCudaForwardProjectionImageFilterCIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaForwardProjectionImageFilterCIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkCudaForwardProjectionImageFilterCIVF33

        Create a new object of the class rtkCudaForwardProjectionImageFilterCIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaForwardProjectionImageFilterCIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaForwardProjectionImageFilterCIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaForwardProjectionImageFilterCIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaForwardProjectionImageFilterCIVF33 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF33_swigregister(rtkCudaForwardProjectionImageFilterCIVF33)

def rtkCudaForwardProjectionImageFilterCIVF43_New():
    return rtkCudaForwardProjectionImageFilterCIVF43.New()

class rtkCudaForwardProjectionImageFilterCIVF43(itkCudaInPlaceImageFilterCIVF43CIVF43FPCIVF43CIVF43):
    r"""Proxy of C++ rtkCudaForwardProjectionImageFilterCIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkCudaForwardProjectionImageFilterCIVF43_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkCudaForwardProjectionImageFilterCIVF43_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43_Clone(self)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_rtkCudaForwardProjectionImageFilterCIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaForwardProjectionImageFilterCIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkCudaForwardProjectionImageFilterCIVF43

        Create a new object of the class rtkCudaForwardProjectionImageFilterCIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaForwardProjectionImageFilterCIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaForwardProjectionImageFilterCIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaForwardProjectionImageFilterCIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaForwardProjectionImageFilterCIVF43 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF43_swigregister(rtkCudaForwardProjectionImageFilterCIVF43)

def rtkCudaForwardProjectionImageFilterCIVF53_New():
    return rtkCudaForwardProjectionImageFilterCIVF53.New()

class rtkCudaForwardProjectionImageFilterCIVF53(itkCudaInPlaceImageFilterCIVF53CIVF53FPCIVF53CIVF53):
    r"""Proxy of C++ rtkCudaForwardProjectionImageFilterCIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkCudaForwardProjectionImageFilterCIVF53_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkCudaForwardProjectionImageFilterCIVF53_Pointer"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53_Clone(self)

    def GetStepSize(self):
        r"""GetStepSize(self) -> double"""
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53_GetStepSize(self)

    def SetStepSize(self, _arg):
        r"""
        SetStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53_SetStepSize(self, _arg)
    __swig_destroy__ = _rtkCudaForwardProjectionImageFilterPython.delete_rtkCudaForwardProjectionImageFilterCIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkCudaForwardProjectionImageFilterCIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkCudaForwardProjectionImageFilterCIVF53

        Create a new object of the class rtkCudaForwardProjectionImageFilterCIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaForwardProjectionImageFilterCIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaForwardProjectionImageFilterCIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaForwardProjectionImageFilterCIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaForwardProjectionImageFilterCIVF53 in _rtkCudaForwardProjectionImageFilterPython:
_rtkCudaForwardProjectionImageFilterPython.rtkCudaForwardProjectionImageFilterCIVF53_swigregister(rtkCudaForwardProjectionImageFilterCIVF53)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_image_to_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaImageToImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaImageToImageFilter
    cuda_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_forward_projection_image_filter(*args: itkt.ImageLike,  step_size: float=..., gpu_enabled: bool=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaForwardProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'step_size':step_size,'gpu_enabled':gpu_enabled,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaForwardProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_forward_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaForwardProjectionImageFilter
    cuda_forward_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_forward_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_in_place_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaInPlaceImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaInPlaceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_in_place_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaInPlaceImageFilter
    cuda_in_place_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_in_place_image_filter.__doc__ = filter_object.__doc__



