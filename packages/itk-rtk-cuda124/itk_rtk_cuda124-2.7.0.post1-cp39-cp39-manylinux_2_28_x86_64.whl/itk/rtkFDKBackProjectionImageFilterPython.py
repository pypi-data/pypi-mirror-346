# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKBackProjectionImageFilterPython
else:
    import _rtkFDKBackProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCudaImagePython
import itk.itkImagePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.rtkBackProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterCudaCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython

def rtkFDKBackProjectionImageFilterCIF3CIF3_New():
    return rtkFDKBackProjectionImageFilterCIF3CIF3.New()

class rtkFDKBackProjectionImageFilterCIF3CIF3(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterCIF3CIF3):
    r"""Proxy of C++ rtkFDKBackProjectionImageFilterCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKBackProjectionImageFilterCIF3CIF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterCIF3CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKBackProjectionImageFilterCIF3CIF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterCIF3CIF3_Clone(self)
    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_rtkFDKBackProjectionImageFilterCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKBackProjectionImageFilterCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterCIF3CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKBackProjectionImageFilterCIF3CIF3

        Create a new object of the class rtkFDKBackProjectionImageFilterCIF3CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKBackProjectionImageFilterCIF3CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKBackProjectionImageFilterCIF3CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKBackProjectionImageFilterCIF3CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKBackProjectionImageFilterCIF3CIF3 in _rtkFDKBackProjectionImageFilterPython:
_rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterCIF3CIF3_swigregister(rtkFDKBackProjectionImageFilterCIF3CIF3)

def rtkFDKBackProjectionImageFilterID3ID3_New():
    return rtkFDKBackProjectionImageFilterID3ID3.New()

class rtkFDKBackProjectionImageFilterID3ID3(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKBackProjectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKBackProjectionImageFilterID3ID3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKBackProjectionImageFilterID3ID3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_rtkFDKBackProjectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKBackProjectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKBackProjectionImageFilterID3ID3

        Create a new object of the class rtkFDKBackProjectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKBackProjectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKBackProjectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKBackProjectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKBackProjectionImageFilterID3ID3 in _rtkFDKBackProjectionImageFilterPython:
_rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterID3ID3_swigregister(rtkFDKBackProjectionImageFilterID3ID3)

def rtkFDKBackProjectionImageFilterIF3IF3_New():
    return rtkFDKBackProjectionImageFilterIF3IF3.New()

class rtkFDKBackProjectionImageFilterIF3IF3(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKBackProjectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_rtkFDKBackProjectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKBackProjectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKBackProjectionImageFilterIF3IF3

        Create a new object of the class rtkFDKBackProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKBackProjectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKBackProjectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKBackProjectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKBackProjectionImageFilterIF3IF3 in _rtkFDKBackProjectionImageFilterPython:
_rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_swigregister(rtkFDKBackProjectionImageFilterIF3IF3)

def itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_New():
    return itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3.New()

class itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3(rtkFDKBackProjectionImageFilterCIF3CIF3):
    r"""Proxy of C++ itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_Clone(self)

    def SetGPUEnabled(self, _arg):
        r"""
        SetGPUEnabled(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_SetGPUEnabled(self, _arg)

    def GetGPUEnabled(self):
        r"""GetGPUEnabled(self) -> bool"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_GetGPUEnabled(self)

    def GPUEnabledOn(self):
        r"""GPUEnabledOn(self)"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_GPUEnabledOn(self)

    def GPUEnabledOff(self):
        r"""GPUEnabledOff(self)"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_GPUEnabledOff(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_GenerateData(self)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, output)

        Parameters
        ----------
        output: itkCudaImageF3 *

        GraftOutput(self, key, output)

        Parameters
        ----------
        key: std::string const &
        output: itkCudaImageF3 *

        """
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_GraftOutput(self, *args)
    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3

        Create a new object of the class itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3 in _rtkFDKBackProjectionImageFilterPython:
_rtkFDKBackProjectionImageFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3_swigregister(itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3)
class itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3(itkCudaImageToImageFilterCIF3CIF3FDKBPCIF3CIF3):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3_cast(obj)

# Register itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3 in _rtkFDKBackProjectionImageFilterPython:
_rtkFDKBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3_swigregister(itkCudaInPlaceImageFilterCIF3CIF3FDKBPCIF3CIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_image_to_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaImageToImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaImageToImageFilter
    cuda_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fdk_back_projection_image_filter(*args: itkt.ImageLike,  geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FDKBackProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FDKBackProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fdk_back_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FDKBackProjectionImageFilter
    fdk_back_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fdk_back_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_in_place_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaInPlaceImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CudaInPlaceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cuda_in_place_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaInPlaceImageFilter
    cuda_in_place_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_in_place_image_filter.__doc__ = filter_object.__doc__



