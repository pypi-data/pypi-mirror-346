from    testmc.i8080  import *
from    testmc.i8080.opcodes  import Instructions as I
from    testmc  import LB, MB
import  pytest

@pytest.fixture
def m():
    return Machine()

R = Machine.Registers

####################################################################

def test_super_init(m):
    assert 0 == len(m.symtab)

def test_mem(m):
    assert 65536 == len(m.mem)
    assert 0 == m.mem[0]
    assert 0 == m.mem[65535]

def test_regs(m):
    r0 = R(pc=0, a=0, bc=0, de=0, hl=0, sp=0xE000,
            S=0, Z=0, H=0, P=0, C=0)
    assert r0 == m.regs

def test_narrow_regs():
    assert R(b=1, c=2) == R(bc=0x0102)

def test_reset(m):
    m.pc = 0x1234
    m.reset()
    assert 0 == m.pc

def test_pushretaddr(m):
    m.sp=0x200
    m.pushretaddr(0x1234)
    assert (0x1FE, b'\x34\x12') == (m.sp, m.bytes(0x1FE, 2))

def test_getretaddr(m):
    m.deposit(0x202, [0x78, 0x56])
    m.sp=0x202
    a = m.getretaddr()
    assert (0x202, 0x5678) == (m.sp, a)

####################################################################

CALLRET = Machine.CALL_DEFAULT_RETADDR

def test_unconditional_ret(m):
    m.deposit(0x100, [I.RET])
    m.call(0x100, maxsteps=4, trace=1)
    assert CALLRET == m._getpc()

def test_conditional_ret(m):
    ' Ensure that conditional returns are handled properly. '
    m.deposit(0x100, [I.RETnz, I.RETz])
    m.call(0x100, R(Z=1), maxsteps=4, trace=1)
    assert CALLRET == m._getpc()
