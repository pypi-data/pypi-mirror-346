[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "google_air_quality_api"
# The version is set by GH action on release
version = "0.0.0a0"
description = "MPython module to talk to Husqvarna Automower."
authors = [
    "Thomas Peter Protzner <thomas.protzner@gmail.com>",
]
license = "MIT"
readme = "README.md"
packages = [
    { include = "google_air_quality_api", from = "src" },
]
homepage = "https://github.com/Thomas55555/python-google-air-quality-api"
repository = "https://github.com/Thomas55555/python-google-air-quality-api"
documentation = "https://github.com/Thomas55555/python-google-air-quality-api"
keywords = ["Husqvarna", "Automower", "api", "async", "client"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.urls]
Issues = "https://github.com/Thomas55555/aioautomower/issues"

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.9.3"
mashumaro = "^3.12"

[tool.poetry.group.dev.dependencies]
aioresponses = "0.7.8"
codespell = "2.4.1"
covdefaults = "2.3.0"
coverage = {version = "7.8.0", extras = ["toml"]}
mypy = "1.15.0"
pre-commit = "4.2.0"
pre-commit-hooks = "5.0.0"
pytest = "8.3.5"
pytest-asyncio = "0.26.0"
pytest-cov = "6.1.1"
ruff = "0.11.7"
syrupy = "4.9.1"
time-machine = "2.16.0"
types-pyyaml = "^6.0.12.20241230"
yamllint = "1.37.0"

[tool.pytest.ini_options]
addopts = "--cov=google_air_quality_api --cov-report=term-missing -vv"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.ruff]
fix = true
show-fixes = true
src = ["./src"]
target-version = "py311"
line-length = 88
include = ["src/**/*.py"]


[tool.ruff.lint]
ignore = [
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "PLR2004", # Just annoying, not really useful

  # Conflicts with the Ruff formatter
  "COM812",
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
# Allow for main entry & scripts to write to stdout
"example.py" = ["T201", "T203"]

[tool.pylint.FORMAT]
max-line-length = 88

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.mypy]
platform = "linux"
python_version = "3.11"
strict = true
namespace_packages = true
mypy_path = "src"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# strict rules
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["aioautomower"]