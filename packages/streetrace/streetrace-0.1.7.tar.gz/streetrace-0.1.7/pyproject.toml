# pyproject.toml

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "streetrace"
# Update with the actual version
version = "0.1.7"
description = "StreetRace is an agentic AI coding partner designed to help engineers leverage AI capabilities directly from the command line to create software."
readme = "README.md"
requires-python = ">=3.12,<4.0" # Updated minimum Python version
license = {file = "LICENSE"}

[project.scripts]
streetrace = "streetrace.main:main"

[tool.black]
line-length = 88
target-version = ['py310'] # Updated target version for match statements

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["E501", "D203", "D213"]  # Example: ignore line-too-long if black already formats

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests.
    "D100", # module-level docstrings for test files are not required.
    "D101", # class-level docstrings for test files are not required.
    "D102", # test code should be documented in-line as opposed to docstrings.
    "D103", # allow skipping method docstrings in tests.
    "D104", # allow skipping docstring in test packages.
    "D107", # allow skipping docstring in __init__(self) in test packages.
    "INP001", # don't require __init__.py in tests.
    "ANN001", # allow parameters without type annotations in tests.
    "ANN101", # allow missing type annotation for self in tests.
    "ANN102", # allow missing type annotation for cls in tests.
    "ANN201", # allow missing return types annotations in tests.
    "ANN202", # allow missing return types annotations in tests.
    "ANN204", # allow missing return types annotations in tests.
    "PLR2004", # allow magic values in tests.
    "PT011", # allow broad assert raise checks in tests.
]

[tool.mypy]
# Static type checking configuration
strict = true
python_version = "3.12" # Updated Python version
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
files = ["src", "tests"]
# Escaped backslash for TOML list string
ignore_missing_imports = false

# If using pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
    # Add integration tests path if separate
]
pythonpath = ["src"] # Make src importable directly
# Enable asyncio mode for pytest-asyncio
asyncio_mode = "auto"


[tool.poetry.group.dev.dependencies]
deptry = "^0.23.0"
python-dotenv = "^1.1.0"
black = "^25.1.0"
ruff = "^0.11.7"
mypy = "^1.15.0"
bandit = "^1.8.3"
vulture = "^2.14"
coverage = "^7.8.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-asyncio = "^0.23.7"

[tool.poetry.dependencies]
prompt-toolkit = "^3.0.51"
anthropic = "^0.50.0"
google-genai = "^1.12.1"
ollama = "^0.4.8"
openai = "^1.76.0"
pydantic = "^2.11.3"
rich = "^14.0.0"
pathspec = "^0.12.1"
litellm = "^1.67.5"
tenacity = "^9.1.2"
mcp = "^1.7.1"
pyyaml = "^6.0.1"


[tool.poetry.scripts]
streetrace = 'streetrace.main:main'
