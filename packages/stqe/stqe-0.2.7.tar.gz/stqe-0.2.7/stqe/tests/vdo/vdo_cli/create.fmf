description: Testing 'vdo create'
time: 1 min
test: /vdo/vdo_cli/vdo_cli.py
command: create

#### alias definitions ####
/success_alias: &success
  tier: 1
  message: Creating VDO device with
  device: VDO_DEVICE
  vdo_name: vdo_test
  requires_cleanup: [vdo/vdo_cli/various_commands/remove/success/normal]
  expected_out: ["VDO instance", "is ready"]

/fail_alias: &fail
  message: Trying to fail creating VDO device with
  tier: 2
  expected_ret: 2
  vdo_name: vdo_test
  device: VDO_DEVICE

#### test specifications ####
/fail:
  description: Creating vdo device without all required params, it should fail.
  message: Trying to fail creating VDO device
  tier: 2
  expected_ret: 2
  /no_params:
    message+: " without any params at all."
    expected_out: ["error:", "argument", "required", "-n/--name"]
  /no_name:
    message+: " without name."
    device: VDO_DEVICE
    expected_out: ["error:", "argument", "required", "-n/--name"]
  /no_device:
    message+: " without device."
    vdo_name: vdo_test
    expected_out: ["error:", "argument", "required", "--device"]

/success:
  description: Creating vdo device with just the required params. This works as cleanup for irreversibly modifying vdo.
  <<: *success
  message+: " just the required params."
  cleanup: True
  requires_cleanup: []
  slab_size: minimum
  test: /vdo/setup/setup.py

/ack_threads_success:
  description: Testing 'vdo create --vdoAckThreads' success.
  <<: *success
  /0:
    message+: " '0' ack threads."
    ack_threads: 0
  /1:
    message+: " '1' ack thread."
    ack_threads: 1
  /100:
    message+: " '100' ack threads."
    ack_threads: 100

/ack_threads_fail:
  description: Testing 'vdo create --vdoAckThreads' failures.
  <<: *fail
  expected_out: ["error: argument --vdoAckThreads: must be an integer at least 0 and less than or equal to 100"]
  /-1:
    message+: " '-1' ack threads."
    ack_threads: -1
  /s:
    message+: " 's' ack threads."
    ack_threads: s
  /1.5:
    message+: " '1.5' ack threads."
    ack_threads: 1.5
  /231364164:
    message+: " '231364164' ack threads."
    ack_threads: 231364164

/activate_success:
  description: Testing 'vdo create --activate' success.
  <<: *success
  /enabled:
    message+: " activate 'enabled'."
    activate: enabled
  /disabled:
    message+: " activate 'disabled'."
    activate: disabled
    expected_out: ["VDO volume created at"]

/activate_fail:
  description: Testing 'vdo create --activate' failures.
  <<: *fail
  expected_out: ["error: argument --activate: invalid choice:"]
  /-1:
    message+: " '-1' activate."
    activate: -1
  /0:
    message+: " '0' activate."
    activate: 0
  /1:
    message+: " '1' activate."
    activate: 1
  /1.5:
    message+: " '1.5' activate."
    activate: 1.5
  /s:
    message+: " 's' activate."
    activate: s

/all_fail:
  description: Testing 'vdo create --all' failures.
  <<: *fail
  expected_out: ["error: unrecognized arguments: --all"]
  all: True

/bio_rotation_interval_success:
  description: Testing 'vdo create --vdoBioRotationInterval' success.
  <<: *success
  /1:
    message+: " bio rotation interval '1'."
    bio_rotation_interval: 1
  /100:
    message+: " bio rotation interval '1'."
    bio_rotation_interval: 1
  /1024:
    message+: " bio rotation interval '1024'."
    bio_rotation_interval: 1024

/bio_rotation_interval_fail:
  description: Testing 'vdo create --vdoBioRotationInterval' failures.
  <<: *fail
  expected_out: ["error: argument --vdoBioRotationInterval: must be an integer at least 1 and less than or equal to 1024"]
  /0:
    message+: " bio rotation interval '0'."
    bio_rotation_interval: 0
  /1025:
    message+: " bio rotation interval '1025'."
    bio_rotation_interval: 1025
  /-1:
    message+: " bio rotation interval '-1'."
    bio_rotation_interval: -1
  /1.5:
    message+: " bio rotation interval '1.5'."
    bio_rotation_interval: 1.5
  /s:
    message+: " bio rotation interval 's'."
    bio_rotation_interval: s
  /1321654654:
    message+: " bio rotation interval '1321654654'."
    bio_rotation_interval: 1321654654

/bio_threads_success:
  description: Testing 'vdo create --vdoBioThreads' success..
  <<: *success
  /1:
    message+: " '1' bio thread."
    bio_threads: 1
  /8:
    message+: " '8' bio thread."
    bio_threads: 8
  /100:
    message+: " '100' bio threads."
    bio_threads: 100

/bio_threads_fail:
  description: Testing 'vdo create --vdoBioThreads' failures.
  <<: *fail
  expected_out: ["error: argument --vdoBioThreads: must be an integer at least 1 and less than or equal to 100"]
  /0:
    message+: " '0' bio threads."
    bio_threads: 0
  /101:
    message+: " '101' bio threads."
    bio_threads: 101
  /-1:
    message+: " '-1' bio threads."
    bio_threads: -1
  /1.5:
    message+: " '1.5' bio threads."
    bio_threads: 1.5
  /s:
    message+: " 's' bio threads."
    bio_threads: s
  /1321654654:
    message+: " '1321654654' bio threads."
    bio_threads: 1321654654

/block_map_cache_size_success:
  description: Testing 'vdo create --blockMapCacheSize' success.
  <<: *success
  /128M:
    message+: " block map cache size '128M'."
    block_map_cache_size: 128M
  /300M:
    message+: " block map cache size '300M'."
    block_map_cache_size: 300M
  /4096:
    message+: " block map cache size '4096'."
    block_map_cache_size: 4096
  /4096m:
    message+: " block map cache size '4096m'."
    block_map_cache_size: 4096m

/block_map_cache_size_fail:
  description: Testing 'vdo create --blockMapCacheSize' failures.
  <<: *fail
  expected_out: ["error: argument --blockMapCacheSize: must be at least 128M and less than 16T"]
  /0:
    message+: " block map cache size '0'."
    block_map_cache_size: 0
  /1:
    message+: " block map cache size '1'."
    block_map_cache_size: 1
  /-1:
    message+: " block map cache size '-1'."
    block_map_cache_size: -1
    expected_out: ["error: argument --blockMapCacheSize: must be an SI-style size string"]
  /1.5:
    message+: " block map cache size '1.5'."
    block_map_cache_size: 1.5
  /s:
    message+: " block map cache size 's'."
    block_map_cache_size: s
    expected_out: ["error: argument --blockMapCacheSize: must be an SI-style size string"]
  /1321654654:
    message+: " block map cache size '1321654654'."
    block_map_cache_size: 1321654654
  /127M:
    message+: " block map cache size '127M'."
    block_map_cache_size: 127M
  /17T:
    message+: " block map cache size '17T'."
    block_map_cache_size: 17T
  /4096K:
    message+: " block map cache size '4096K'."
    block_map_cache_size: 4096K
  /4096T:
    message+: " block map cache size '4096T'."
    block_map_cache_size: 4096T

/block_map_period_success:
  description: Testing 'vdo create --blockMapPeriod' success.
  <<: *success
  /1:
    message+: " block map period '1'."
    block_map_period: 1
  /1023:
    message+: " block map period '1023'."
    block_map_period: 1023
  /16380:
    message+: " block map period '16380'."
    block_map_period: 16380

/block_map_period_fail:
  description: Testing 'vdo create --blockMapPeriod' failures.
  <<: *fail
  expected_out: ["error: argument --blockMapPeriod: must be an integer at least 1 and less than or equal to 16380"]
  /0:
    message+: " block map period '0'."
    block_map_period: 0
  /16381:
    message+: " block map period '16381'."
    block_map_period: 16381
  /-1:
    message+: " block map period '-1'."
    block_map_period: -1
  /1.5:
    message+: " block map period '1.5'."
    block_map_period: 1.5
  /s:
    message+: " block map period 's'."
    block_map_period: s
  /1321654654:
    message+: " block map period '1321654654'."
    block_map_period: 1321654654

/compression_success:
  description: Testing 'vdo create --compression' success.
  <<: *success
  /enabled:
    message+: " compression 'enabled'."
    compression: enabled
  /disabled:
    message+: " compression 'disabled'."
    compression: disabled

/compression_fail:
  description: Testing 'vdo create --compression' failures.
  <<: *fail
  expected_out: ["error: argument --compression: invalid choice:"]
  /-1:
    message+: " compression '-1'."
    compression: -1
  /0:
    message+: " compression '0'."
    compression: 0
  /1:
    message+: " compression '1'."
    compression: 1
  /1.5:
    message+: " compression '1.5'."
    compression: 1.5
  /s:
    message+: " compression 's'."
    compression: s

/conf_file_success:
  description: Testing 'vdo create --confFile' success.
  <<: *success
  /vdoconf.yml:
    message+: " conf file '/etc/vdoconf.yml'."
    conf_file: /etc/vdoconf.yml
  /empty:
    message+: " conf file 'empty'."
    conf_file: empty
    requires_cleanup: [vdo/vdo_cli/various_commands/remove/success/conf_file_empty]

/conf_file_fail:
  description: Testing 'vdo create --confFile' failures.
  <<: *fail
  expected_out: ["error: argument --confFile: invalid choice:"]
  /device:
    message+: " conf file 'VDO_DEVICE'."
    conf_file: VDO_DEVICE
    expected_out: ["error: argument -f/--confFile:", "is a block device"]
  /existing_file:
    message+: " conf file '/root/RECIPE.TXT'."
    conf_file: /root/RECIPE.TXT
    expected_out: ["vdo: ERROR - Not a valid configuration file"]
    expected_ret: 5
  /directory:
    requires_setup+: [vdo/setup/mkdir/mount_vdo]
    message+: " conf file '/mnt/vdo_test'."
    conf_file: /mnt/vdo_test
    expected_out: ["argument -f/--confFile: FS_DIR is a directory"]

/cpu_threads_success:
  description: Testing 'vdo create --vdoCpuThreads' success..
  <<: *success
  /1:
    message+: " '1' cpu thread."
    cpu_threads: 1
  /8:
    message+: " '8' cpu thread."
    cpu_threads: 8
  /100:
    message+: " '100' cpu threads."
    cpu_threads: 100

/cpu_threads_fail:
  description: Testing 'vdo create --vdoCpuThreads' failures.
  <<: *fail
  expected_out: ["error: argument --vdoCpuThreads: must be an integer at least 1 and less than or equal to 100"]
  /0:
    message+: " '0' cpu threads."
    cpu_threads: 0
  /101:
    message+: " '101' cpu threads."
    cpu_threads: 101
  /-1:
    message+: " '-1' cpu threads."
    cpu_threads: -1
  /1.5:
    message+: " '1.5' cpu threads."
    cpu_threads: 1.5
  /s:
    message+: " 's' cpu threads."
    cpu_threads: s
  /1321654654:
    message+: " '1321654654' cpu threads."
    cpu_threads: 1321654654

/deduplication_success:
  description: Testing 'vdo create --deduplication' success.
  <<: *success
  /enabled:
    message+: " deduplication 'enabled'."
    deduplication: enabled
  /disabled:
    message+: " deduplication 'disabled'."
    deduplication: disabled

/deduplication_fail:
  description: Testing 'vdo create --deduplication' failures.
  <<: *fail
  expected_out: ["error: argument --deduplication: invalid choice:"]
  /-1:
    message+: " deduplication '-1'."
    deduplication: -1
  /0:
    message+: " deduplication '0'."
    deduplication: 0
  /1:
    message+: " deduplication '1'."
    deduplication: 1
  /1.5:
    message+: " deduplication '1.5'."
    deduplication: 1.5
  /s:
    message+: " deduplication 's'."
    deduplication: s

/emulate512_success:
  description: Testing 'vdo create --emulate512' success.
  <<: *success
  /enabled:
    message+: " emulate512 'enabled'."
    emulate512: enabled
  /disabled:
    message+: " emulate512 'disabled'."
    emulate512: disabled

/emulate512_fail:
  description: Testing 'vdo create --emulate512' failures.
  <<: *fail
  expected_out: ["error: argument --emulate512: invalid choice:"]
  /-1:
    message+: " emulate512 '-1'."
    emulate512: -1
  /0:
    message+: " emulate512 '0'."
    emulate512: 0
  /1:
    message+: " emulate512 '1'."
    emulate512: 1
  /1.5:
    message+: " emulate512 '1.5'."
    emulate512: 1.5
  /s:
    message+: " emulate512 's'."
    emulate512: s

/force:
  description: Testing 'vdo create --force' success.
  <<: *success
  /success:
    message+: with force.
    force: True

/hash_zone_threads_success:
  description: Testing 'vdo create --vdoHashZoneThreads' success.
  <<: *success
  # --vdoHashZoneThreads=0 needs logical and physical threads to 0 too, testing at vdo/vdo_cli/multiple_threads
  /1:
    message+: " '1' hash zone thread."
    hash_zone_threads: 1
  /8:
    message+: " '8' hash zone threads."
    hash_zone_threads: 8
  /100:
    message+: " '100' hash zone threads."
    hash_zone_threads: 100

/hash_zone_threads_fail:
  description: Testing 'vdo create --vdoHashZoneThreads' failures.
  <<: *fail
  expected_out: ["error: argument --vdoHashZoneThreads: must be an integer at least 0 and less than or equal to 100"]
  /101:
    message+: " '101' hash zone threads."
    hash_zone_threads: 101
  /0:
    message+: " '0' hash zone threads."
    hash_zone_threads: 0
    expected_ret: 7
    expected_out: ["ERROR - hash zone, logical and physical threads must either all be zero or all be non-zero"]
  /-1:
    message+: " '-1' hash zone threads."
    hash_zone_threads: -1
  /1.5:
    message+: " '1.5' hash zone threads."
    hash_zone_threads: 1.5
  /s:
    message+: " 's' hash zone threads."
    hash_zone_threads: s
  /1321654654:
    message+: " '1321654654' hash zone threads."
    hash_zone_threads: 1321654654

/index_mem_success:
  description: Testing 'vdo create --indexMem' success.
  <<: *success
  /0.25:
    message+: " index memory '0.25'."
    index_mem: 0.25
  /0.5:
    message+: " index memory '0.5'."
    index_mem: 0.5
  /0.75:
    message+: " index memory '0.75'."
    index_mem: 0.75
  /1:
    message+: " index memory '1'."
    index_mem: 1
    tags: [iscsi_2T, raid] # need 11G on device for this

/index_mem_fail:
  description: Testing 'vdo create --indexMem' failures.
  <<: *fail
  expected_out: ["error: argument --indexMem: must be an integer at least 1 and less than or equal to 1024"]
  /0:
    message+: " index memory '0'."
    index_mem: 0
  /1025:
    message+: " index memory '1025'."
    index_mem: 1025
  /-1:
    message+: " index memory '-1'."
    index_mem: -1
  /1.5:
    message+: " index memory '1.5'."
    index_mem: 1.5
  /s:
    message+: " index memory 's'."
    index_mem: s
  /1321654654:
    message+: " index memory '1321654654'."
    index_mem: 1321654654
  /1024:
    message+: " index memory '1024'."
    index_mem: 1024
    expected_ret: 7
    expected_out: ["vdo: ERROR - Not enough available memory in system for index requirement of 1T"]

/log_file_success:
  description: Testing 'vdo create --logFile' success.
  <<: *success
  /vdo.log:
    message+: " log file 'vdo.log'."
    log_file: vdo.log
    requires_cleanup:
      - vdo/vdo_cli/create/delete_log_file/log_file_vdo.log
      - vdo/vdo_cli/various_commands/remove/success/normal
  /0:
    message+: " log file '0'."
    log_file: 0
    requires_cleanup:
     - vdo/vdo_cli/create/delete_log_file/log_file_0
     - vdo/vdo_cli/various_commands/remove/success/normal
/delete_log_file:
  description: Removes leftover files.
  message: Removing leftover file
  cleanup: True
  command: os.remove
  /log_file_vdo.log:
    message+: " vdo.log."
    path: vdo.log
  /log_file_0:
    message+: " 0."
    path: 0

/log_file_fail:
  description: Testing 'vdo create --logfile' failures.
  <<: *fail
  expected_out: ["error: argument --logfile: invalid choice:"]
  /block_device:
    message+: " log file 'VDO_DEVICE'."
    log_file: VDO_DEVICE
    expected_out: ["error: argument --logfile:", "is a block device"]
  /directory:
    requires_setup+: [vdo/setup/mkdir/mount_vdo]
    message+: " log file '/mnt/vdo_test'."
    log_file: /mnt/vdo_test
    expected_out: ["argument --logfile: FS_DIR is a directory"]

/log_level_success:
  description: Testing 'vdo create --logLevel', commands should succeed.
  <<: *success
  /critical:
    message+: " log level 'critical'."
    log_level: critical
  /error:
    message+: " log level 'error'."
    log_level: error
  /warning:
    message+: " log level 'warning'."
    log_level: warning
  /notice:
    message+: " log level 'notice'."
    log_level: notice
  /info:
    message+: " log level 'info'."
    log_level: info
  /debug:
    message+: " log level 'debug'."
    log_level: debug

/log_level_fail:
  description: Testing 'vdo create --vdoLogLevel', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --vdoLogLevel: invalid choice:"]
  /-1:
    message+: " log level '-1'."
    log_level: -1
  /0:
    message+: " log level '0'."
    log_level: 0
  /1:
    message+: " log level '1'."
    log_level: 1
  /1.5:
    message+: " log level '1.5'."
    log_level: 1.5
  /s:
    message+: " log level 's'."
    log_level: s
  /INFO:
    message+: " log level 'INFO'."
    log_level: INFO
  /Info:
    message+: " log level 'Info'."
    log_level: Info

/logical_size_success:
  description: Testing 'vdo create --vdoLogicalSize', commands should succeed.
  <<: *success
  /256T:
    message+: " logical size '256T'."
    logical_size: 256T
  /0:
    message+: " logical size '0'."
    logical_size: 0
  /1.5:
    message+: " logical size '1.5'."
    logical_size: 1.5

/logical_size_fail:
  description: Testing 'vdo create --vdoLogicalSize', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --vdoLogicalSize: must be an LVM-style size string"]
  /8000P:
    message+: " logical size '8000P'."
    logical_size: 8000P
    expected_out: ["error: argument --vdoLogicalSize: must be less than or equal to 4P"]
  /-1:
    message+: " logical size '-1'."
    logical_size: -1
  /T:
    message+: " logical size 'T'."
    logical_size: T
  /s:
    message+: " logical size 's'."
    logical_size: s

/logical_threads_success:
  description: Testing 'vdo create --vdoLogicalThreads', commands should succeed.
  <<: *success
  # --vdoLogicalThreads=0 needs hash zone and physical threads to 0 too, testing at vdo/vdo_cli/multiple_threads
  /1:
    message+: " '1' logical thread."
    logical_threads: 1
  /8:
    message+: " '8' logical threads."
    logical_threads: 8
  /60:
    message+: " '60' logical threads."
    logical_threads: 60
    block_map_cache_size: 1G # need at least 16MB per logical thread
  /100:
    message+: " '100' logical threads."
    logical_threads: 100
    block_map_cache_size: 1700M # need at least 16MB per logical thread

/logical_threads_fail:
  description: Testing 'vdo create --vdoLogicalThreads', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --vdoLogicalThreads: must be an integer at least 0 and less than or equal to"]
  /61:
    message+: " '61' logical threads."
    logical_threads: 61
  /101:
    message+: " '101' logical threads."
    logical_threads: 101
  /0:
    message+: " '0' logical threads."
    logical_threads: 0
    expected_ret: 7
    expected_out: ["ERROR - hash zone, logical and physical threads must either all be zero or all be non-zero"]
  /-1:
    message+: " '-1' logical threads."
    logical_threads: -1
  /1.5:
    message+: " '1.5' logical threads."
    logical_threads: 1.5
  /s:
    message+: " 's' logical threads."
    logical_threads: s
  /1321654654:
    message+: " '1321654654' logical threads."
    logical_threads: 1321654654

/max_discard_size_success:
  description: Testing 'vdo create --maxDiscardSize', commands should succeed.
  <<: *success
  /4096B:
    message+: " max discard size '4096B'."
    max_discard_size: 4096B
  /4K:
    message+: " max discard size '4K'."
    max_discard_size: 4K
  /3.99G:
    message+: " max discard size '3.99G'."
    max_discard_size: 3.99G
  /0.1:
    message+: " max discard size '0.1'."
    max_discard_size: 0.1
  /1:
    message+: " max discard size '1'."
    max_discard_size: 1

/max_discard_size_fail:
  description: Testing 'vdo create --maxDiscardSize', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --maxDiscardSize: must be at least 4K and less than 4G"]
  /0:
    message+: " max discard size '0'."
    max_discard_size: 0
  /1B:
    message+: " max discard size '1B'."
    max_discard_size: 1B
  /4G:
    message+: " max discard size '4G'."
    max_discard_size: 4G
  /-1:
    message+: " max discard size '-1'."
    max_discard_size: -1
    expected_out: ["error: argument --maxDiscardSize: must be an SI-style size string"]
  /s:
    message+: " max discard size 's'."
    max_discard_size: s
    expected_out: ["error: argument --maxDiscardSize: must be an SI-style size string"]

/multiple_threads_success:
  description: Testing 'vdo create --vdoLogicalThreads --vdoHashZoneThreads --vdoPhysicalThreads' at once, commands should succeed.
  <<: *success
  /0:
    message+: " '0' logical, hash zone and physical threads."
    logical_threads: 0
    hash_zone_threads: 0
    physical_threads: 0
  /5:
    # This is maximum without increasing block map cache size
    message+: " '5' logical, hash zone and physical threads."
    logical_threads: 5
    hash_zone_threads: 5
    physical_threads: 5
    slab_size: minimum # need at least 1 slab for 1 physical thread
  /limit_max:
    message+: " '60' logical, '100' hash zone and '8' physical threads."
    logical_threads: 60
    hash_zone_threads: 100
    physical_threads: 8
    block_map_cache_size: 1G # need at least 16MB per logical thread
    slab_size: minimum # need at least 1 slab for 1 physical thread
  /limit_max_all:
    description: Testing 'vdo create' with all possible threads set to maximum allowed at once, commands should succeed.
    ack_threads: 100
    bio_threads: 100
    cpu_threads: 100
    logical_threads: 60
    hash_zone_threads: 100
    physical_threads: 8
    block_map_cache_size: 1G # need at least 16MB per logical thread
    slab_size: minimum # need at least 1 slab for 1 physical thread

/multiple_threads_fail:
  description: Testing 'vdo create --vdoLogicalThreads --vdoHashZoneThreads --vdoPhysicalThreads', all commands including failing ones.
  <<: *fail
  expected_out: ["ERROR - hash zone, logical and physical threads must either all be zero or all be non-zero"]
  expected_ret: 7
  /1l_0h_1p:
    message+: " '1' logical, '0' hash zone and '1' physical threads."
    logical_threads: 1
    hash_zone_threads: 0
    physical_threads: 1
  /1l_0h_0p:
    message+: " '1' logical, '0' hash zone and '0' physical threads."
    logical_threads: 1
    hash_zone_threads: 0
    physical_threads: 0
  /1l_1h_0p:
    message+: " '1' logical, '1' hash zone and '0' physical threads."
    logical_threads: 1
    hash_zone_threads: 1
    physical_threads: 0
  /0l_1h_0p:
    message+: " '0' logical, '1' hash zone and '0' physical threads."
    logical_threads: 0
    hash_zone_threads: 1
    physical_threads: 0
  /0l_1h_1p:
    message+: " '0' logical, '1' hash zone and '1' physical threads."
    logical_threads: 0
    hash_zone_threads: 1
    physical_threads: 1
  /0l_0h_1p:
    message+: " '0' logical, '0' hash zone and '1' physical threads."
    logical_threads: 0
    hash_zone_threads: 0
    physical_threads: 1

/physical_threads_success:
  description: Testing 'vdo create --vdoPhysicalThreads', commands should succeed.
  <<: *success
  # --vdoPhysicalThreads=0 needs hash zone and logical threads to 0 too, testing at vdo/vdo_cli/multiple_threads
  /1:
    message+: " '1' physical thread."
    physical_threads: 1
  /8:
    message+: " '8' physical threads."
    physical_threads: 8
    slab_size: minimum # need at least 1 slab for 1 physical thread
  /16:
    message+: " '16' physical threads."
    physical_threads: 16
    slab_size: minimum # need at least 1 slab for 1 physical thread

/physical_threads_fail:
  description: Testing 'vdo create --vdoPhysicalThreads', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --vdoPhysicalThreads: must be an integer at least 0 and less than or equal to 16"]
  /17:
    message+: " '17' physical threads."
    physical_threads: 17
  /0:
    message+: " '0' physical threads."
    physical_threads: 0
    expected_ret: 7
    expected_out: ["ERROR - hash zone, logical and physical threads must either all be zero or all be non-zero"]
  /-1:
    message+: " '-1' physical threads."
    physical_threads: -1
  /1.5:
    message+: " '1.5' physical threads."
    physical_threads: 1.5
  /s:
    message+: " 's' physical threads."
    physical_threads: s
  /1321654654:
    message+: " '1321654654' physical threads."
    physical_threads: 1321654654


/slab_size_success:
  description: Testing 'vdo create --vdoSlabSize', commands should succeed.
  <<: *success
  /minimum:
    message+: " minimum slab size (based on storage)."
    slab_size: minimum
  /32G:
    message+: " slab size '32G'."
    slab_size: 32G
    tags: [iscsi_2T, raid] # need at least 34G device for this

/slab_size_fail:
  description: Testing 'vdo create --vdoSlabSize', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --vdoSlabSize: must be a power of two between 128M and 32G"]
  /0:
    message+: " slab size '0'."
    slab_size: 0
  /1:
    message+: " slab size '1'."
    slab_size: 1
  /1.5:
    message+: " slab size '1.5'."
    slab_size: 1.5
  /128K:
    message+: " slab size '128K'."
    slab_size: 128K
  /64M:
    message: " slab size '64M'."
    slab_size: 64M
  /64G:
    message: " slab size '64G'."
    slab_size: 64G
  /1T:
    message: " slab size '1T'."
    slab_size: 1T
  /-1:
    message: " slab size '-1'."
    slab_size: -1
    expected_out: ["error: argument --vdoSlabSize: must be an LVM-style size string"]
  /s:
    message: " slab size 's'."
    slab_size: s
    expected_out: ["error: argument --vdoSlabSize: must be an LVM-style size string"]

/sparse_index_success:
  description: Testing 'vdo create --sparseIndex', commands should succeed.
  <<: *success
  /enabled:
    message+: " sparse index 'enabled'."
    sparse_index: enabled
    tags: [iscsi_2T, raid] # sparse index needs more space
  /disabled:
    message+: " sparse index 'disabled'."
    sparse_index: disabled

/sparse_index_fail:
  description: Testing 'vdo create --sparseIndex', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --sparseIndex: invalid choice:"]
  /-1:
    message: " sparse index '-1'."
    sparse_index: -1
  /20G:
    message: " sparse index '20G'."
    sparse_index: 20G
  /Enabled:
    message: " sparse index 'Enabled'."
    sparse_index: Enabled
  /ENABLED:
    message: " sparse index 'ENABLED'."
    sparse_index: ENABLED
  /nonsense:
    message: " sparse index 'nonsense'."
    sparse_index: nonsense

/verbose:
  description: Testing 'vdo create --verbose', commands should succeed.
  <<: *success
  /success:
    message+: " with '--verbose'."
    verbose: True

/write_policy_success:
  description: Testing 'vdo create --writePolicy', commands should succeed.
  <<: *success
  /sync:
    message+: " write policy 'sync'."
    write_policy: sync
  /async:
    message+: " write policy 'async'."
    write_policy: async
  /auto:
    message+: " write policy 'auto'."
    write_policy: auto

/write_policy_fail:
  description: Testing 'vdo create --writePolicy', all commands including failing ones.
  <<: *fail
  expected_out: ["error: argument --writePolicy: invalid choice:"]
  /SYNC:
    message: " write policy 'SYNC'."
    write_policy: SYNC
  /Sync:
    message: " write policy 'Sync'."
    write_policy: Sync
  /0:
    message: " write policy '0'."
    write_policy: 0
  /-1:
    message: " write policy '-1'."
    write_policy: -1
  /1:
    message: " write policy '1'."
    write_policy: 1
  /1.5:
    message: " write policy '1.5'."
    write_policy: 1.5
  /nonsense:
    message: " write policy 'nonsense'."
    write_policy: nonsense
