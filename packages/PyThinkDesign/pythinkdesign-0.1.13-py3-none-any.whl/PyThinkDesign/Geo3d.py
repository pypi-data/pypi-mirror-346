# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geo3d
else:
    import _Geo3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Angle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo3d.delete_Angle

    def __init__(self, *args):
        _Geo3d.Angle_swiginit(self, _Geo3d.new_Angle(*args))

    def SetAngleSize(self, angleSize):
        return _Geo3d.Angle_SetAngleSize(self, angleSize)

    def GetAngleSize(self):
        return _Geo3d.Angle_GetAngleSize(self)

# Register Angle in _Geo3d:
_Geo3d.Angle_swigregister(Angle)
class Length(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo3d.delete_Length

    def __init__(self, *args):
        _Geo3d.Length_swiginit(self, _Geo3d.new_Length(*args))

    def SetLengthSize(self, lengthSize):
        return _Geo3d.Length_SetLengthSize(self, lengthSize)

    def GetLengthSize(self):
        return _Geo3d.Length_GetLengthSize(self)

# Register Length in _Geo3d:
_Geo3d.Length_swigregister(Length)
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Geo3d.Point_swiginit(self, _Geo3d.new_Point(*args))

    def Set(self, dX, dY, dZ, dError):
        return _Geo3d.Point_Set(self, dX, dY, dZ, dError)

    def GetX(self):
        return _Geo3d.Point_GetX(self)
    __swig_destroy__ = _Geo3d.delete_Point

# Register Point in _Geo3d:
_Geo3d.Point_swigregister(Point)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dX=0.0, dY=0.0, dZ=0.0, dError=0.1):
        _Geo3d.Vector_swiginit(self, _Geo3d.new_Vector(dX, dY, dZ, dError))
    __swig_destroy__ = _Geo3d.delete_Vector

    def Set(self, dX, dY, dZ, dError):
        return _Geo3d.Vector_Set(self, dX, dY, dZ, dError)

# Register Vector in _Geo3d:
_Geo3d.Vector_swigregister(Vector)

