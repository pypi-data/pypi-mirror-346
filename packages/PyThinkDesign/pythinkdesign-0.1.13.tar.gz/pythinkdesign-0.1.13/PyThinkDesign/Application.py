# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Application
else:
    import _Application

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_SwigPyIterator

    def value(self):
        return _Application.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Application.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Application.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Application.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Application.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Application.SwigPyIterator_copy(self)

    def next(self):
        return _Application.SwigPyIterator_next(self)

    def __next__(self):
        return _Application.SwigPyIterator___next__(self)

    def previous(self):
        return _Application.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Application.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Application.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Application.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Application.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Application.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Application.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Application.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Application:
_Application.SwigPyIterator_swigregister(SwigPyIterator)
class vectorSmartIdPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Application.vectorSmartIdPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Application.vectorSmartIdPtr___nonzero__(self)

    def __bool__(self):
        return _Application.vectorSmartIdPtr___bool__(self)

    def __len__(self):
        return _Application.vectorSmartIdPtr___len__(self)

    def __getslice__(self, i, j):
        return _Application.vectorSmartIdPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Application.vectorSmartIdPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Application.vectorSmartIdPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Application.vectorSmartIdPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Application.vectorSmartIdPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Application.vectorSmartIdPtr___setitem__(self, *args)

    def pop(self):
        return _Application.vectorSmartIdPtr_pop(self)

    def append(self, x):
        return _Application.vectorSmartIdPtr_append(self, x)

    def empty(self):
        return _Application.vectorSmartIdPtr_empty(self)

    def size(self):
        return _Application.vectorSmartIdPtr_size(self)

    def swap(self, v):
        return _Application.vectorSmartIdPtr_swap(self, v)

    def begin(self):
        return _Application.vectorSmartIdPtr_begin(self)

    def end(self):
        return _Application.vectorSmartIdPtr_end(self)

    def rbegin(self):
        return _Application.vectorSmartIdPtr_rbegin(self)

    def rend(self):
        return _Application.vectorSmartIdPtr_rend(self)

    def clear(self):
        return _Application.vectorSmartIdPtr_clear(self)

    def get_allocator(self):
        return _Application.vectorSmartIdPtr_get_allocator(self)

    def pop_back(self):
        return _Application.vectorSmartIdPtr_pop_back(self)

    def erase(self, *args):
        return _Application.vectorSmartIdPtr_erase(self, *args)

    def __init__(self, *args):
        _Application.vectorSmartIdPtr_swiginit(self, _Application.new_vectorSmartIdPtr(*args))

    def push_back(self, x):
        return _Application.vectorSmartIdPtr_push_back(self, x)

    def front(self):
        return _Application.vectorSmartIdPtr_front(self)

    def back(self):
        return _Application.vectorSmartIdPtr_back(self)

    def assign(self, n, x):
        return _Application.vectorSmartIdPtr_assign(self, n, x)

    def resize(self, *args):
        return _Application.vectorSmartIdPtr_resize(self, *args)

    def insert(self, *args):
        return _Application.vectorSmartIdPtr_insert(self, *args)

    def reserve(self, n):
        return _Application.vectorSmartIdPtr_reserve(self, n)

    def capacity(self):
        return _Application.vectorSmartIdPtr_capacity(self)
    __swig_destroy__ = _Application.delete_vectorSmartIdPtr

# Register vectorSmartIdPtr in _Application:
_Application.vectorSmartIdPtr_swigregister(vectorSmartIdPtr)
class Application(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Application

    def __init__(self, *args):
        _Application.Application_swiginit(self, _Application.new_Application(*args))

    def GetName(self):
        return _Application.Application_GetName(self)

    def GetFullName(self):
        return _Application.Application_GetFullName(self)

    def PutVisible(self, visible):
        return _Application.Application_PutVisible(self, visible)

    def PutInteractive(self, interactive):
        return _Application.Application_PutInteractive(self, interactive)

    def Quit(self):
        return _Application.Application_Quit(self)

    def GetActiveDocument(self):
        return _Application.Application_GetActiveDocument(self)

# Register Application in _Application:
_Application.Application_swigregister(Application)

def GetActiveApplication():
    return _Application.GetActiveApplication()

class Document(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Document

    def __init__(self, *args):
        _Application.Document_swiginit(self, _Application.new_Document(*args))

    def GetFullName(self):
        return _Application.Document_GetFullName(self)

    def GetCurveCreator(self):
        return _Application.Document_GetCurveCreator(self)

    def GetProfileCreator(self):
        return _Application.Document_GetProfileCreator(self)

    def GetSolidCreator(self):
        return _Application.Document_GetSolidCreator(self)

    def ListInfo(self):
        return _Application.Document_ListInfo(self)

    def SaveAs(self, filePath):
        return _Application.Document_SaveAs(self, filePath)

# Register Document in _Application:
_Application.Document_swigregister(Document)
class CurveCreator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.CurveCreator_swiginit(self, _Application.new_CurveCreator())

    def AddLine(self, ptStart, ptEnd):
        return _Application.CurveCreator_AddLine(self, ptStart, ptEnd)

    def AddArc(self, pCenter, pXDir, pYDir, dRadius, startAng=0.0, endAng=360.0):
        return _Application.CurveCreator_AddArc(self, pCenter, pXDir, pYDir, dRadius, startAng, endAng)

    def AddChainOffset(self, vecCrv, dOffset, plnNormal, eType, nbCopies, associativeFlag, vecFailedTransitions, vecResults):
        return _Application.CurveCreator_AddChainOffset(self, vecCrv, dOffset, plnNormal, eType, nbCopies, associativeFlag, vecFailedTransitions, vecResults)
    __swig_destroy__ = _Application.delete_CurveCreator

# Register CurveCreator in _Application:
_Application.CurveCreator_swigregister(CurveCreator)
class ProfileCreator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.ProfileCreator_swiginit(self, _Application.new_ProfileCreator())

    def AddProfile(self, vecCvs, autoConstraint):
        return _Application.ProfileCreator_AddProfile(self, vecCvs, autoConstraint)
    __swig_destroy__ = _Application.delete_ProfileCreator

# Register ProfileCreator in _Application:
_Application.ProfileCreator_swigregister(ProfileCreator)
class TDCvLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDCvLine_swiginit(self, _Application.new_TDCvLine())
    __swig_destroy__ = _Application.delete_TDCvLine

    def ToTDCurve(self):
        return _Application.TDCvLine_ToTDCurve(self)

    def ToSmartId(self):
        return _Application.TDCvLine_ToSmartId(self)

    def ListInfo(self):
        return _Application.TDCvLine_ListInfo(self)

# Register TDCvLine in _Application:
_Application.TDCvLine_swigregister(TDCvLine)
class TDCvArc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDCvArc_swiginit(self, _Application.new_TDCvArc())
    __swig_destroy__ = _Application.delete_TDCvArc

    def ToSmartId(self):
        return _Application.TDCvArc_ToSmartId(self)

    def ToTDCurve(self):
        return _Application.TDCvArc_ToTDCurve(self)

    def ListInfo(self):
        return _Application.TDCvArc_ListInfo(self)

# Register TDCvArc in _Application:
_Application.TDCvArc_swigregister(TDCvArc)
class TDCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_TDCurve

    def __init__(self, *args):
        _Application.TDCurve_swiginit(self, _Application.new_TDCurve(*args))

    def ListInfo(self):
        return _Application.TDCurve_ListInfo(self)

# Register TDCurve in _Application:
_Application.TDCurve_swigregister(TDCurve)
class SmartId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_SmartId

    def __init__(self, *args):
        _Application.SmartId_swiginit(self, _Application.new_SmartId(*args))

# Register SmartId in _Application:
_Application.SmartId_swigregister(SmartId)
class TDProfile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDProfile_swiginit(self, _Application.new_TDProfile())
    __swig_destroy__ = _Application.delete_TDProfile

    def ToSmartId(self):
        return _Application.TDProfile_ToSmartId(self)

    def ListInfo(self):
        return _Application.TDProfile_ListInfo(self)

# Register TDProfile in _Application:
_Application.TDProfile_swigregister(TDProfile)
class SolidCreator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.SolidCreator_swiginit(self, _Application.new_SolidCreator())

    def AddLinSweep(self, pProfile, angle, length, middle=False, thin=False, thinMiddle=False, thickness=None, direction=None):
        return _Application.SolidCreator_AddLinSweep(self, pProfile, angle, length, middle, thin, thinMiddle, thickness, direction)
    __swig_destroy__ = _Application.delete_SolidCreator

# Register SolidCreator in _Application:
_Application.SolidCreator_swigregister(SolidCreator)
class TDSolidLinSweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDSolidLinSweep_swiginit(self, _Application.new_TDSolidLinSweep())
    __swig_destroy__ = _Application.delete_TDSolidLinSweep

# Register TDSolidLinSweep in _Application:
_Application.TDSolidLinSweep_swigregister(TDSolidLinSweep)
class Angle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Angle

    def __init__(self, *args):
        _Application.Angle_swiginit(self, _Application.new_Angle(*args))

    def SetAngleSize(self, angleSize):
        return _Application.Angle_SetAngleSize(self, angleSize)

    def GetAngleSize(self):
        return _Application.Angle_GetAngleSize(self)

# Register Angle in _Application:
_Application.Angle_swigregister(Angle)
class Length(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Length

    def __init__(self, *args):
        _Application.Length_swiginit(self, _Application.new_Length(*args))

    def SetLengthSize(self, lengthSize):
        return _Application.Length_SetLengthSize(self, lengthSize)

    def GetLengthSize(self):
        return _Application.Length_GetLengthSize(self)

# Register Length in _Application:
_Application.Length_swigregister(Length)
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Application.Point_swiginit(self, _Application.new_Point(*args))

    def Set(self, dX, dY, dZ, dError):
        return _Application.Point_Set(self, dX, dY, dZ, dError)

    def GetX(self):
        return _Application.Point_GetX(self)
    __swig_destroy__ = _Application.delete_Point

# Register Point in _Application:
_Application.Point_swigregister(Point)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dX=0.0, dY=0.0, dZ=0.0, dError=0.1):
        _Application.Vector_swiginit(self, _Application.new_Vector(dX, dY, dZ, dError))
    __swig_destroy__ = _Application.delete_Vector

    def Set(self, dX, dY, dZ, dError):
        return _Application.Vector_Set(self, dX, dY, dZ, dError)

# Register Vector in _Application:
_Application.Vector_swigregister(Vector)

