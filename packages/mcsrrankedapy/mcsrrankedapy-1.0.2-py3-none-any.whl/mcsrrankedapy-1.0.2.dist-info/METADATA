Metadata-Version: 2.4
Name: mcsrrankedapy
Version: 1.0.2
Summary: An API wrapper for the MCSR Ranked API
Author-email: Myer <myer@myer.wtf>
License: MIT License
        
        Copyright (c) 2025 Myer
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp
Requires-Dist: pydantic
Dynamic: license-file

# MCSRRankedAPY - MCSR Ranked Statistics API Wrapper

Asynchronous wrapper for the MCSRRanked API

## Features
- Full API coverage (API key usage not yet tested)

## Installation
`mcsrrankedapy` is available from the official PyPI package index.

`python -m pip install -U mcsrrankedapy`

## Documentation

https://docs.mcsrranked.com/

The wrapper is almost 100% 1-to-1 consistent with the original JSON API. The only inconsistency is in the `.users.get_versus_stats` method. The API returns data with keys that depend on the query, which is unpythonic to implement in a Pydantic model. The wrapper instead creates a `dict` named `per_player` that matches the API's response.

The official MCSR Ranked API docs describe what specific fields get returned from specific endpoints.

## Quick Start
```py
from mcsrrankedapy import MCSRRankedAPYClient
import asyncio


async def main():
  client = MCSRRankedAPYClient()
  query = await client.users.get_data("lowk3y_")
  print(query.connections.youtube.id) # prints UC_HX7WdiAWRZgcG7aOYtCNg
  await client.close()

if __name__ == "__main__":
  asyncio.run(main())
```
